
Sprint1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001f26  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a4  00800060  00001f26  00001fba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000654  00800104  00800104  0000205e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000205e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002090  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003a8  00000000  00000000  000020cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000027a0  00000000  00000000  00002474  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000da5  00000000  00000000  00004c14  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000293a  00000000  00000000  000059b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c7c  00000000  00000000  000082f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000012da  00000000  00000000  00008f70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000019be  00000000  00000000  0000a24a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000318  00000000  00000000  0000bc08  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 f2 07 	jmp	0xfe4	; 0xfe4 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e2       	ldi	r30, 0x26	; 38
      68:	ff e1       	ldi	r31, 0x1F	; 31
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a4 30       	cpi	r26, 0x04	; 4
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	27 e0       	ldi	r18, 0x07	; 7
      78:	a4 e0       	ldi	r26, 0x04	; 4
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 35       	cpi	r26, 0x58	; 88
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c5 00 	call	0x18a	; 0x18a <main>
      8a:	0c 94 91 0f 	jmp	0x1f22	; 0x1f22 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Init_Task>:
TaskHandle_t Led2_Task_Handle = FALSE;
TaskHandle_t Led3_Task_Handle = FALSE;


void Init_Task(void* pvParameters)
{
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	00 d0       	rcall	.+0      	; 0x98 <Init_Task+0x6>
      98:	cd b7       	in	r28, 0x3d	; 61
      9a:	de b7       	in	r29, 0x3e	; 62
      9c:	9a 83       	std	Y+2, r25	; 0x02
      9e:	89 83       	std	Y+1, r24	; 0x01
	while(TRUE)
	{
		Led_Init(LED0);
      a0:	80 e1       	ldi	r24, 0x10	; 16
      a2:	0e 94 b6 02 	call	0x56c	; 0x56c <Led_Init>
		Led_Init(LED1);
      a6:	80 e2       	ldi	r24, 0x20	; 32
      a8:	0e 94 b6 02 	call	0x56c	; 0x56c <Led_Init>
		Led_Init(LED2);
      ac:	80 e4       	ldi	r24, 0x40	; 64
      ae:	0e 94 b6 02 	call	0x56c	; 0x56c <Led_Init>
		LCD_Init();
      b2:	0e 94 ad 01 	call	0x35a	; 0x35a <LCD_Init>
		vTaskSuspend(Init_Task_Handle);
      b6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
      ba:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
      be:	0e 94 df 09 	call	0x13be	; 0x13be <vTaskSuspend>
	}
      c2:	ee cf       	rjmp	.-36     	; 0xa0 <Init_Task+0xe>

000000c4 <Lcd_Task>:
}

void Lcd_Task(void* pvParameters)
{	
      c4:	cf 93       	push	r28
      c6:	df 93       	push	r29
      c8:	cd b7       	in	r28, 0x3d	; 61
      ca:	de b7       	in	r29, 0x3e	; 62
      cc:	c7 56       	subi	r28, 0x67	; 103
      ce:	d1 09       	sbc	r29, r1
      d0:	0f b6       	in	r0, 0x3f	; 63
      d2:	f8 94       	cli
      d4:	de bf       	out	0x3e, r29	; 62
      d6:	0f be       	out	0x3f, r0	; 63
      d8:	cd bf       	out	0x3d, r28	; 61
      da:	9e 01       	movw	r18, r28
      dc:	2a 59       	subi	r18, 0x9A	; 154
      de:	3f 4f       	sbci	r19, 0xFF	; 255
      e0:	f9 01       	movw	r30, r18
      e2:	91 83       	std	Z+1, r25	; 0x01
      e4:	80 83       	st	Z, r24
	uint8 RandomStringindex = FALSE;
      e6:	19 82       	std	Y+1, r1	; 0x01
	char arrRandomStrings[10][10] = {
      e8:	84 e6       	ldi	r24, 0x64	; 100
      ea:	e0 e6       	ldi	r30, 0x60	; 96
      ec:	f0 e0       	ldi	r31, 0x00	; 0
      ee:	de 01       	movw	r26, r28
      f0:	12 96       	adiw	r26, 0x02	; 2
      f2:	01 90       	ld	r0, Z+
      f4:	0d 92       	st	X+, r0
      f6:	8a 95       	dec	r24
      f8:	e1 f7       	brne	.-8      	; 0xf2 <Lcd_Task+0x2e>
		"Mayer",
	};
	
	while(TRUE)
	{
		LCD_DisplayString(arrRandomStrings[RandomStringindex]);
      fa:	89 81       	ldd	r24, Y+1	; 0x01
      fc:	88 2f       	mov	r24, r24
      fe:	90 e0       	ldi	r25, 0x00	; 0
     100:	9e 01       	movw	r18, r28
     102:	2e 5f       	subi	r18, 0xFE	; 254
     104:	3f 4f       	sbci	r19, 0xFF	; 255
     106:	88 0f       	add	r24, r24
     108:	99 1f       	adc	r25, r25
     10a:	ac 01       	movw	r20, r24
     10c:	44 0f       	add	r20, r20
     10e:	55 1f       	adc	r21, r21
     110:	44 0f       	add	r20, r20
     112:	55 1f       	adc	r21, r21
     114:	84 0f       	add	r24, r20
     116:	95 1f       	adc	r25, r21
     118:	82 0f       	add	r24, r18
     11a:	93 1f       	adc	r25, r19
     11c:	0e 94 5d 02 	call	0x4ba	; 0x4ba <LCD_DisplayString>
		RandomStringindex++;
     120:	89 81       	ldd	r24, Y+1	; 0x01
     122:	8f 5f       	subi	r24, 0xFF	; 255
     124:	89 83       	std	Y+1, r24	; 0x01
		vTaskDelay(1000);
     126:	88 ee       	ldi	r24, 0xE8	; 232
     128:	93 e0       	ldi	r25, 0x03	; 3
     12a:	0e 94 bc 09 	call	0x1378	; 0x1378 <vTaskDelay>
	}
     12e:	e5 cf       	rjmp	.-54     	; 0xfa <Lcd_Task+0x36>

00000130 <Led1_Task>:
}


void Led1_Task(void* pvParameters)
{
     130:	cf 93       	push	r28
     132:	df 93       	push	r29
     134:	00 d0       	rcall	.+0      	; 0x136 <Led1_Task+0x6>
     136:	cd b7       	in	r28, 0x3d	; 61
     138:	de b7       	in	r29, 0x3e	; 62
     13a:	9a 83       	std	Y+2, r25	; 0x02
     13c:	89 83       	std	Y+1, r24	; 0x01
	while(TRUE)
	{
		Led_Tog(LED0);
     13e:	80 e1       	ldi	r24, 0x10	; 16
     140:	0e 94 00 03 	call	0x600	; 0x600 <Led_Tog>
		vTaskDelay(100);
     144:	84 e6       	ldi	r24, 0x64	; 100
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	0e 94 bc 09 	call	0x1378	; 0x1378 <vTaskDelay>
	}
     14c:	f8 cf       	rjmp	.-16     	; 0x13e <Led1_Task+0xe>

0000014e <Led2_Task>:
}


void Led2_Task(void* pvParameters)
{
     14e:	cf 93       	push	r28
     150:	df 93       	push	r29
     152:	00 d0       	rcall	.+0      	; 0x154 <Led2_Task+0x6>
     154:	cd b7       	in	r28, 0x3d	; 61
     156:	de b7       	in	r29, 0x3e	; 62
     158:	9a 83       	std	Y+2, r25	; 0x02
     15a:	89 83       	std	Y+1, r24	; 0x01
	while(TRUE)
	{
		Led_Tog(LED1);
     15c:	80 e2       	ldi	r24, 0x20	; 32
     15e:	0e 94 00 03 	call	0x600	; 0x600 <Led_Tog>
		vTaskDelay(500);
     162:	84 ef       	ldi	r24, 0xF4	; 244
     164:	91 e0       	ldi	r25, 0x01	; 1
     166:	0e 94 bc 09 	call	0x1378	; 0x1378 <vTaskDelay>
	}
     16a:	f8 cf       	rjmp	.-16     	; 0x15c <Led2_Task+0xe>

0000016c <Led3_Task>:
}

void Led3_Task(void* pvParameters)
{
     16c:	cf 93       	push	r28
     16e:	df 93       	push	r29
     170:	00 d0       	rcall	.+0      	; 0x172 <Led3_Task+0x6>
     172:	cd b7       	in	r28, 0x3d	; 61
     174:	de b7       	in	r29, 0x3e	; 62
     176:	9a 83       	std	Y+2, r25	; 0x02
     178:	89 83       	std	Y+1, r24	; 0x01
	while(TRUE)
	{
		Led_Tog(LED2);
     17a:	80 e4       	ldi	r24, 0x40	; 64
     17c:	0e 94 00 03 	call	0x600	; 0x600 <Led_Tog>
		vTaskDelay(1000);
     180:	88 ee       	ldi	r24, 0xE8	; 232
     182:	93 e0       	ldi	r25, 0x03	; 3
     184:	0e 94 bc 09 	call	0x1378	; 0x1378 <vTaskDelay>
	}
     188:	f8 cf       	rjmp	.-16     	; 0x17a <Led3_Task+0xe>

0000018a <main>:
#include "Tasks.h"



int main(void)
{
     18a:	ef 92       	push	r14
     18c:	ff 92       	push	r15
     18e:	0f 93       	push	r16
     190:	cf 93       	push	r28
     192:	df 93       	push	r29
     194:	1f 92       	push	r1
     196:	cd b7       	in	r28, 0x3d	; 61
     198:	de b7       	in	r29, 0x3e	; 62
	BaseType_t xReturned = FALSE;
     19a:	19 82       	std	Y+1, r1	; 0x01

	xReturned = xTaskCreate(Init_Task, 
     19c:	0f 2e       	mov	r0, r31
     19e:	f4 e0       	ldi	r31, 0x04	; 4
     1a0:	ef 2e       	mov	r14, r31
     1a2:	f1 e0       	ldi	r31, 0x01	; 1
     1a4:	ff 2e       	mov	r15, r31
     1a6:	f0 2d       	mov	r31, r0
     1a8:	04 e0       	ldi	r16, 0x04	; 4
     1aa:	20 e0       	ldi	r18, 0x00	; 0
     1ac:	30 e0       	ldi	r19, 0x00	; 0
     1ae:	44 ef       	ldi	r20, 0xF4	; 244
     1b0:	51 e0       	ldi	r21, 0x01	; 1
     1b2:	64 ec       	ldi	r22, 0xC4	; 196
     1b4:	70 e0       	ldi	r23, 0x00	; 0
     1b6:	89 e4       	ldi	r24, 0x49	; 73
     1b8:	90 e0       	ldi	r25, 0x00	; 0
     1ba:	0e 94 f6 07 	call	0xfec	; 0xfec <xTaskCreate>
     1be:	89 83       	std	Y+1, r24	; 0x01
	if( xReturned != pdPASS )
	{
		 // Error Handling Code
	}
	
	xReturned = xTaskCreate(Lcd_Task,
     1c0:	0f 2e       	mov	r0, r31
     1c2:	f6 e0       	ldi	r31, 0x06	; 6
     1c4:	ef 2e       	mov	r14, r31
     1c6:	f1 e0       	ldi	r31, 0x01	; 1
     1c8:	ff 2e       	mov	r15, r31
     1ca:	f0 2d       	mov	r31, r0
     1cc:	03 e0       	ldi	r16, 0x03	; 3
     1ce:	20 e0       	ldi	r18, 0x00	; 0
     1d0:	30 e0       	ldi	r19, 0x00	; 0
     1d2:	44 ef       	ldi	r20, 0xF4	; 244
     1d4:	51 e0       	ldi	r21, 0x01	; 1
     1d6:	68 ed       	ldi	r22, 0xD8	; 216
     1d8:	70 e0       	ldi	r23, 0x00	; 0
     1da:	82 e6       	ldi	r24, 0x62	; 98
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	0e 94 f6 07 	call	0xfec	; 0xfec <xTaskCreate>
     1e2:	89 83       	std	Y+1, r24	; 0x01
	if( xReturned != pdPASS )
	{
		// Error Handling Code
	}
	
	xReturned = xTaskCreate(Led1_Task,
     1e4:	0f 2e       	mov	r0, r31
     1e6:	f8 e0       	ldi	r31, 0x08	; 8
     1e8:	ef 2e       	mov	r14, r31
     1ea:	f1 e0       	ldi	r31, 0x01	; 1
     1ec:	ff 2e       	mov	r15, r31
     1ee:	f0 2d       	mov	r31, r0
     1f0:	02 e0       	ldi	r16, 0x02	; 2
     1f2:	20 e0       	ldi	r18, 0x00	; 0
     1f4:	30 e0       	ldi	r19, 0x00	; 0
     1f6:	45 e5       	ldi	r20, 0x55	; 85
     1f8:	50 e0       	ldi	r21, 0x00	; 0
     1fa:	6c ee       	ldi	r22, 0xEC	; 236
     1fc:	70 e0       	ldi	r23, 0x00	; 0
     1fe:	88 e9       	ldi	r24, 0x98	; 152
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	0e 94 f6 07 	call	0xfec	; 0xfec <xTaskCreate>
     206:	89 83       	std	Y+1, r24	; 0x01
	if( xReturned != pdPASS )
	{
		// Error Handling Code
	}
	
	xReturned = xTaskCreate(Led2_Task,
     208:	0f 2e       	mov	r0, r31
     20a:	fa e0       	ldi	r31, 0x0A	; 10
     20c:	ef 2e       	mov	r14, r31
     20e:	f1 e0       	ldi	r31, 0x01	; 1
     210:	ff 2e       	mov	r15, r31
     212:	f0 2d       	mov	r31, r0
     214:	02 e0       	ldi	r16, 0x02	; 2
     216:	20 e0       	ldi	r18, 0x00	; 0
     218:	30 e0       	ldi	r19, 0x00	; 0
     21a:	45 e5       	ldi	r20, 0x55	; 85
     21c:	50 e0       	ldi	r21, 0x00	; 0
     21e:	6c ee       	ldi	r22, 0xEC	; 236
     220:	70 e0       	ldi	r23, 0x00	; 0
     222:	87 ea       	ldi	r24, 0xA7	; 167
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	0e 94 f6 07 	call	0xfec	; 0xfec <xTaskCreate>
     22a:	89 83       	std	Y+1, r24	; 0x01
	if( xReturned != pdPASS )
	{
		// Error Handling Code
	}
	
	xReturned = xTaskCreate(Led3_Task,
     22c:	0f 2e       	mov	r0, r31
     22e:	fc e0       	ldi	r31, 0x0C	; 12
     230:	ef 2e       	mov	r14, r31
     232:	f1 e0       	ldi	r31, 0x01	; 1
     234:	ff 2e       	mov	r15, r31
     236:	f0 2d       	mov	r31, r0
     238:	02 e0       	ldi	r16, 0x02	; 2
     23a:	20 e0       	ldi	r18, 0x00	; 0
     23c:	30 e0       	ldi	r19, 0x00	; 0
     23e:	45 e5       	ldi	r20, 0x55	; 85
     240:	50 e0       	ldi	r21, 0x00	; 0
     242:	6c ee       	ldi	r22, 0xEC	; 236
     244:	70 e0       	ldi	r23, 0x00	; 0
     246:	86 eb       	ldi	r24, 0xB6	; 182
     248:	90 e0       	ldi	r25, 0x00	; 0
     24a:	0e 94 f6 07 	call	0xfec	; 0xfec <xTaskCreate>
     24e:	89 83       	std	Y+1, r24	; 0x01
	{
		// Error Handling Code
	}
	
	/* Start Scheduler */
	vTaskStartScheduler();
     250:	0e 94 4c 0a 	call	0x1498	; 0x1498 <vTaskStartScheduler>
     254:	80 e0       	ldi	r24, 0x00	; 0
     256:	90 e0       	ldi	r25, 0x00	; 0
}
     258:	0f 90       	pop	r0
     25a:	df 91       	pop	r29
     25c:	cf 91       	pop	r28
     25e:	0f 91       	pop	r16
     260:	ff 90       	pop	r15
     262:	ef 90       	pop	r14
     264:	08 95       	ret

00000266 <LCD_SendCommand>:
 * @return void                        
 */
void LCD_Clear(void)
{
	LCD_SendCommand(LCD_ClearScreen);
}
     266:	cf 93       	push	r28
     268:	df 93       	push	r29
     26a:	1f 92       	push	r1
     26c:	cd b7       	in	r28, 0x3d	; 61
     26e:	de b7       	in	r29, 0x3e	; 62
     270:	89 83       	std	Y+1, r24	; 0x01
     272:	40 e0       	ldi	r20, 0x00	; 0
     274:	62 e0       	ldi	r22, 0x02	; 2
     276:	80 e0       	ldi	r24, 0x00	; 0
     278:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <Gpio_PinWrite>
     27c:	40 e0       	ldi	r20, 0x00	; 0
     27e:	64 e0       	ldi	r22, 0x04	; 4
     280:	80 e0       	ldi	r24, 0x00	; 0
     282:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <Gpio_PinWrite>
     286:	89 81       	ldd	r24, Y+1	; 0x01
     288:	88 1f       	adc	r24, r24
     28a:	88 27       	eor	r24, r24
     28c:	88 1f       	adc	r24, r24
     28e:	48 2f       	mov	r20, r24
     290:	60 e8       	ldi	r22, 0x80	; 128
     292:	80 e0       	ldi	r24, 0x00	; 0
     294:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <Gpio_PinWrite>
     298:	89 81       	ldd	r24, Y+1	; 0x01
     29a:	82 95       	swap	r24
     29c:	86 95       	lsr	r24
     29e:	86 95       	lsr	r24
     2a0:	83 70       	andi	r24, 0x03	; 3
     2a2:	81 70       	andi	r24, 0x01	; 1
     2a4:	48 2f       	mov	r20, r24
     2a6:	60 e4       	ldi	r22, 0x40	; 64
     2a8:	80 e0       	ldi	r24, 0x00	; 0
     2aa:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <Gpio_PinWrite>
     2ae:	89 81       	ldd	r24, Y+1	; 0x01
     2b0:	82 95       	swap	r24
     2b2:	86 95       	lsr	r24
     2b4:	87 70       	andi	r24, 0x07	; 7
     2b6:	81 70       	andi	r24, 0x01	; 1
     2b8:	48 2f       	mov	r20, r24
     2ba:	60 e2       	ldi	r22, 0x20	; 32
     2bc:	80 e0       	ldi	r24, 0x00	; 0
     2be:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <Gpio_PinWrite>
     2c2:	89 81       	ldd	r24, Y+1	; 0x01
     2c4:	82 95       	swap	r24
     2c6:	8f 70       	andi	r24, 0x0F	; 15
     2c8:	81 70       	andi	r24, 0x01	; 1
     2ca:	48 2f       	mov	r20, r24
     2cc:	60 e1       	ldi	r22, 0x10	; 16
     2ce:	80 e0       	ldi	r24, 0x00	; 0
     2d0:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <Gpio_PinWrite>
     2d4:	41 e0       	ldi	r20, 0x01	; 1
     2d6:	68 e0       	ldi	r22, 0x08	; 8
     2d8:	80 e0       	ldi	r24, 0x00	; 0
     2da:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <Gpio_PinWrite>
     2de:	81 e0       	ldi	r24, 0x01	; 1
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	0e 94 bc 09 	call	0x1378	; 0x1378 <vTaskDelay>
     2e6:	40 e0       	ldi	r20, 0x00	; 0
     2e8:	68 e0       	ldi	r22, 0x08	; 8
     2ea:	80 e0       	ldi	r24, 0x00	; 0
     2ec:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <Gpio_PinWrite>
     2f0:	89 81       	ldd	r24, Y+1	; 0x01
     2f2:	86 95       	lsr	r24
     2f4:	86 95       	lsr	r24
     2f6:	86 95       	lsr	r24
     2f8:	81 70       	andi	r24, 0x01	; 1
     2fa:	48 2f       	mov	r20, r24
     2fc:	60 e8       	ldi	r22, 0x80	; 128
     2fe:	80 e0       	ldi	r24, 0x00	; 0
     300:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <Gpio_PinWrite>
     304:	89 81       	ldd	r24, Y+1	; 0x01
     306:	86 95       	lsr	r24
     308:	86 95       	lsr	r24
     30a:	81 70       	andi	r24, 0x01	; 1
     30c:	48 2f       	mov	r20, r24
     30e:	60 e4       	ldi	r22, 0x40	; 64
     310:	80 e0       	ldi	r24, 0x00	; 0
     312:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <Gpio_PinWrite>
     316:	89 81       	ldd	r24, Y+1	; 0x01
     318:	86 95       	lsr	r24
     31a:	81 70       	andi	r24, 0x01	; 1
     31c:	48 2f       	mov	r20, r24
     31e:	60 e2       	ldi	r22, 0x20	; 32
     320:	80 e0       	ldi	r24, 0x00	; 0
     322:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <Gpio_PinWrite>
     326:	89 81       	ldd	r24, Y+1	; 0x01
     328:	81 70       	andi	r24, 0x01	; 1
     32a:	48 2f       	mov	r20, r24
     32c:	60 e1       	ldi	r22, 0x10	; 16
     32e:	80 e0       	ldi	r24, 0x00	; 0
     330:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <Gpio_PinWrite>
     334:	41 e0       	ldi	r20, 0x01	; 1
     336:	68 e0       	ldi	r22, 0x08	; 8
     338:	80 e0       	ldi	r24, 0x00	; 0
     33a:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <Gpio_PinWrite>
     33e:	81 e0       	ldi	r24, 0x01	; 1
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	0e 94 bc 09 	call	0x1378	; 0x1378 <vTaskDelay>
     346:	40 e0       	ldi	r20, 0x00	; 0
     348:	68 e0       	ldi	r22, 0x08	; 8
     34a:	80 e0       	ldi	r24, 0x00	; 0
     34c:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <Gpio_PinWrite>
     350:	00 00       	nop
     352:	0f 90       	pop	r0
     354:	df 91       	pop	r29
     356:	cf 91       	pop	r28
     358:	08 95       	ret

0000035a <LCD_Init>:
     35a:	cf 93       	push	r28
     35c:	df 93       	push	r29
     35e:	1f 92       	push	r1
     360:	cd b7       	in	r28, 0x3d	; 61
     362:	de b7       	in	r29, 0x3e	; 62
     364:	19 82       	std	Y+1, r1	; 0x01
     366:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <InitState>
     36a:	88 23       	and	r24, r24
     36c:	01 f5       	brne	.+64     	; 0x3ae <LCD_Init+0x54>
     36e:	6f ef       	ldi	r22, 0xFF	; 255
     370:	80 e0       	ldi	r24, 0x00	; 0
     372:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <Gpio_PortDirection>
     376:	82 e0       	ldi	r24, 0x02	; 2
     378:	0e 94 33 01 	call	0x266	; 0x266 <LCD_SendCommand>
     37c:	81 e0       	ldi	r24, 0x01	; 1
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	0e 94 bc 09 	call	0x1378	; 0x1378 <vTaskDelay>
     384:	88 e2       	ldi	r24, 0x28	; 40
     386:	0e 94 33 01 	call	0x266	; 0x266 <LCD_SendCommand>
     38a:	81 e0       	ldi	r24, 0x01	; 1
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	0e 94 bc 09 	call	0x1378	; 0x1378 <vTaskDelay>
     392:	8e e0       	ldi	r24, 0x0E	; 14
     394:	0e 94 33 01 	call	0x266	; 0x266 <LCD_SendCommand>
     398:	81 e0       	ldi	r24, 0x01	; 1
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	0e 94 bc 09 	call	0x1378	; 0x1378 <vTaskDelay>
     3a0:	86 e0       	ldi	r24, 0x06	; 6
     3a2:	0e 94 33 01 	call	0x266	; 0x266 <LCD_SendCommand>
     3a6:	81 e0       	ldi	r24, 0x01	; 1
     3a8:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <InitState>
     3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <LCD_Init+0x58>
     3ae:	83 e0       	ldi	r24, 0x03	; 3
     3b0:	89 83       	std	Y+1, r24	; 0x01
     3b2:	89 81       	ldd	r24, Y+1	; 0x01
     3b4:	0f 90       	pop	r0
     3b6:	df 91       	pop	r29
     3b8:	cf 91       	pop	r28
     3ba:	08 95       	ret

000003bc <LCD_DisplayChar>:
     3bc:	cf 93       	push	r28
     3be:	df 93       	push	r29
     3c0:	1f 92       	push	r1
     3c2:	cd b7       	in	r28, 0x3d	; 61
     3c4:	de b7       	in	r29, 0x3e	; 62
     3c6:	89 83       	std	Y+1, r24	; 0x01
     3c8:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <InitState>
     3cc:	81 30       	cpi	r24, 0x01	; 1
     3ce:	09 f0       	breq	.+2      	; 0x3d2 <LCD_DisplayChar+0x16>
     3d0:	6f c0       	rjmp	.+222    	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
     3d2:	41 e0       	ldi	r20, 0x01	; 1
     3d4:	62 e0       	ldi	r22, 0x02	; 2
     3d6:	80 e0       	ldi	r24, 0x00	; 0
     3d8:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <Gpio_PinWrite>
     3dc:	40 e0       	ldi	r20, 0x00	; 0
     3de:	64 e0       	ldi	r22, 0x04	; 4
     3e0:	80 e0       	ldi	r24, 0x00	; 0
     3e2:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <Gpio_PinWrite>
     3e6:	89 81       	ldd	r24, Y+1	; 0x01
     3e8:	88 1f       	adc	r24, r24
     3ea:	88 27       	eor	r24, r24
     3ec:	88 1f       	adc	r24, r24
     3ee:	48 2f       	mov	r20, r24
     3f0:	60 e8       	ldi	r22, 0x80	; 128
     3f2:	80 e0       	ldi	r24, 0x00	; 0
     3f4:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <Gpio_PinWrite>
     3f8:	89 81       	ldd	r24, Y+1	; 0x01
     3fa:	82 95       	swap	r24
     3fc:	86 95       	lsr	r24
     3fe:	86 95       	lsr	r24
     400:	83 70       	andi	r24, 0x03	; 3
     402:	81 70       	andi	r24, 0x01	; 1
     404:	48 2f       	mov	r20, r24
     406:	60 e4       	ldi	r22, 0x40	; 64
     408:	80 e0       	ldi	r24, 0x00	; 0
     40a:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <Gpio_PinWrite>
     40e:	89 81       	ldd	r24, Y+1	; 0x01
     410:	82 95       	swap	r24
     412:	86 95       	lsr	r24
     414:	87 70       	andi	r24, 0x07	; 7
     416:	81 70       	andi	r24, 0x01	; 1
     418:	48 2f       	mov	r20, r24
     41a:	60 e2       	ldi	r22, 0x20	; 32
     41c:	80 e0       	ldi	r24, 0x00	; 0
     41e:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <Gpio_PinWrite>
     422:	89 81       	ldd	r24, Y+1	; 0x01
     424:	82 95       	swap	r24
     426:	8f 70       	andi	r24, 0x0F	; 15
     428:	81 70       	andi	r24, 0x01	; 1
     42a:	48 2f       	mov	r20, r24
     42c:	60 e1       	ldi	r22, 0x10	; 16
     42e:	80 e0       	ldi	r24, 0x00	; 0
     430:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <Gpio_PinWrite>
     434:	41 e0       	ldi	r20, 0x01	; 1
     436:	68 e0       	ldi	r22, 0x08	; 8
     438:	80 e0       	ldi	r24, 0x00	; 0
     43a:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <Gpio_PinWrite>
     43e:	81 e0       	ldi	r24, 0x01	; 1
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	0e 94 bc 09 	call	0x1378	; 0x1378 <vTaskDelay>
     446:	40 e0       	ldi	r20, 0x00	; 0
     448:	68 e0       	ldi	r22, 0x08	; 8
     44a:	80 e0       	ldi	r24, 0x00	; 0
     44c:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <Gpio_PinWrite>
     450:	89 81       	ldd	r24, Y+1	; 0x01
     452:	86 95       	lsr	r24
     454:	86 95       	lsr	r24
     456:	86 95       	lsr	r24
     458:	81 70       	andi	r24, 0x01	; 1
     45a:	48 2f       	mov	r20, r24
     45c:	60 e8       	ldi	r22, 0x80	; 128
     45e:	80 e0       	ldi	r24, 0x00	; 0
     460:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <Gpio_PinWrite>
     464:	89 81       	ldd	r24, Y+1	; 0x01
     466:	86 95       	lsr	r24
     468:	86 95       	lsr	r24
     46a:	81 70       	andi	r24, 0x01	; 1
     46c:	48 2f       	mov	r20, r24
     46e:	60 e4       	ldi	r22, 0x40	; 64
     470:	80 e0       	ldi	r24, 0x00	; 0
     472:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <Gpio_PinWrite>
     476:	89 81       	ldd	r24, Y+1	; 0x01
     478:	86 95       	lsr	r24
     47a:	81 70       	andi	r24, 0x01	; 1
     47c:	48 2f       	mov	r20, r24
     47e:	60 e2       	ldi	r22, 0x20	; 32
     480:	80 e0       	ldi	r24, 0x00	; 0
     482:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <Gpio_PinWrite>
     486:	89 81       	ldd	r24, Y+1	; 0x01
     488:	81 70       	andi	r24, 0x01	; 1
     48a:	48 2f       	mov	r20, r24
     48c:	60 e1       	ldi	r22, 0x10	; 16
     48e:	80 e0       	ldi	r24, 0x00	; 0
     490:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <Gpio_PinWrite>
     494:	41 e0       	ldi	r20, 0x01	; 1
     496:	68 e0       	ldi	r22, 0x08	; 8
     498:	80 e0       	ldi	r24, 0x00	; 0
     49a:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <Gpio_PinWrite>
     49e:	81 e0       	ldi	r24, 0x01	; 1
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	0e 94 bc 09 	call	0x1378	; 0x1378 <vTaskDelay>
     4a6:	40 e0       	ldi	r20, 0x00	; 0
     4a8:	68 e0       	ldi	r22, 0x08	; 8
     4aa:	80 e0       	ldi	r24, 0x00	; 0
     4ac:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <Gpio_PinWrite>
     4b0:	00 00       	nop
     4b2:	0f 90       	pop	r0
     4b4:	df 91       	pop	r29
     4b6:	cf 91       	pop	r28
     4b8:	08 95       	ret

000004ba <LCD_DisplayString>:
     4ba:	cf 93       	push	r28
     4bc:	df 93       	push	r29
     4be:	00 d0       	rcall	.+0      	; 0x4c0 <LCD_DisplayString+0x6>
     4c0:	cd b7       	in	r28, 0x3d	; 61
     4c2:	de b7       	in	r29, 0x3e	; 62
     4c4:	9a 83       	std	Y+2, r25	; 0x02
     4c6:	89 83       	std	Y+1, r24	; 0x01
     4c8:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <InitState>
     4cc:	81 30       	cpi	r24, 0x01	; 1
     4ce:	81 f5       	brne	.+96     	; 0x530 <LCD_DisplayString+0x76>
     4d0:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <index.2027>
     4d4:	88 2f       	mov	r24, r24
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	29 81       	ldd	r18, Y+1	; 0x01
     4da:	3a 81       	ldd	r19, Y+2	; 0x02
     4dc:	82 0f       	add	r24, r18
     4de:	93 1f       	adc	r25, r19
     4e0:	fc 01       	movw	r30, r24
     4e2:	80 81       	ld	r24, Z
     4e4:	88 23       	and	r24, r24
     4e6:	f1 f0       	breq	.+60     	; 0x524 <LCD_DisplayString+0x6a>
     4e8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <y.2029>
     4ec:	91 e0       	ldi	r25, 0x01	; 1
     4ee:	98 0f       	add	r25, r24
     4f0:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <y.2029>
     4f4:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <x.2028>
     4f8:	68 2f       	mov	r22, r24
     4fa:	89 2f       	mov	r24, r25
     4fc:	0e 94 9e 02 	call	0x53c	; 0x53c <LCD_GotoRowColumn>
     500:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <index.2027>
     504:	88 2f       	mov	r24, r24
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	29 81       	ldd	r18, Y+1	; 0x01
     50a:	3a 81       	ldd	r19, Y+2	; 0x02
     50c:	82 0f       	add	r24, r18
     50e:	93 1f       	adc	r25, r19
     510:	fc 01       	movw	r30, r24
     512:	80 81       	ld	r24, Z
     514:	0e 94 de 01 	call	0x3bc	; 0x3bc <LCD_DisplayChar>
     518:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <index.2027>
     51c:	8f 5f       	subi	r24, 0xFF	; 255
     51e:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <index.2027>
     522:	06 c0       	rjmp	.+12     	; 0x530 <LCD_DisplayString+0x76>
     524:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <index.2027>
     528:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <x.2028>
     52c:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <y.2029>
     530:	00 00       	nop
     532:	0f 90       	pop	r0
     534:	0f 90       	pop	r0
     536:	df 91       	pop	r29
     538:	cf 91       	pop	r28
     53a:	08 95       	ret

0000053c <LCD_GotoRowColumn>:
 * param row: the row of the cursor should range is [0 to 1]
 * param col: the column of the cursor should range is [0 to 15]
 * @return void                                                          
 */
void LCD_GotoRowColumn(uint8 row , uint8 col)
{
     53c:	cf 93       	push	r28
     53e:	df 93       	push	r29
     540:	00 d0       	rcall	.+0      	; 0x542 <LCD_GotoRowColumn+0x6>
     542:	cd b7       	in	r28, 0x3d	; 61
     544:	de b7       	in	r29, 0x3e	; 62
     546:	89 83       	std	Y+1, r24	; 0x01
     548:	6a 83       	std	Y+2, r22	; 0x02
	LCD_SendCommand( (GOTO_ROW_COL_MASK1) | ( col + (GOTO_ROW_COL_MASK2 * row ) ) );
     54a:	89 81       	ldd	r24, Y+1	; 0x01
     54c:	98 2f       	mov	r25, r24
     54e:	92 95       	swap	r25
     550:	99 0f       	add	r25, r25
     552:	99 0f       	add	r25, r25
     554:	90 7c       	andi	r25, 0xC0	; 192
     556:	8a 81       	ldd	r24, Y+2	; 0x02
     558:	89 0f       	add	r24, r25
     55a:	80 68       	ori	r24, 0x80	; 128
     55c:	0e 94 33 01 	call	0x266	; 0x266 <LCD_SendCommand>
}
     560:	00 00       	nop
     562:	0f 90       	pop	r0
     564:	0f 90       	pop	r0
     566:	df 91       	pop	r29
     568:	cf 91       	pop	r28
     56a:	08 95       	ret

0000056c <Led_Init>:
		Gpio_PinWrite(LED_PORT,LED3,FALSE);
		break;
		default:
		break;
	}
}
     56c:	cf 93       	push	r28
     56e:	df 93       	push	r29
     570:	1f 92       	push	r1
     572:	cd b7       	in	r28, 0x3d	; 61
     574:	de b7       	in	r29, 0x3e	; 62
     576:	89 83       	std	Y+1, r24	; 0x01
     578:	89 81       	ldd	r24, Y+1	; 0x01
     57a:	88 2f       	mov	r24, r24
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	80 32       	cpi	r24, 0x20	; 32
     580:	91 05       	cpc	r25, r1
     582:	c1 f0       	breq	.+48     	; 0x5b4 <Led_Init+0x48>
     584:	81 32       	cpi	r24, 0x21	; 33
     586:	91 05       	cpc	r25, r1
     588:	1c f4       	brge	.+6      	; 0x590 <Led_Init+0x24>
     58a:	40 97       	sbiw	r24, 0x10	; 16
     58c:	41 f0       	breq	.+16     	; 0x59e <Led_Init+0x32>
     58e:	33 c0       	rjmp	.+102    	; 0x5f6 <Led_Init+0x8a>
     590:	80 34       	cpi	r24, 0x40	; 64
     592:	91 05       	cpc	r25, r1
     594:	d1 f0       	breq	.+52     	; 0x5ca <Led_Init+0x5e>
     596:	80 38       	cpi	r24, 0x80	; 128
     598:	91 05       	cpc	r25, r1
     59a:	11 f1       	breq	.+68     	; 0x5e0 <Led_Init+0x74>
     59c:	2c c0       	rjmp	.+88     	; 0x5f6 <Led_Init+0x8a>
     59e:	4f ef       	ldi	r20, 0xFF	; 255
     5a0:	60 e1       	ldi	r22, 0x10	; 16
     5a2:	81 e0       	ldi	r24, 0x01	; 1
     5a4:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <Gpio_PinDirection>
     5a8:	40 e0       	ldi	r20, 0x00	; 0
     5aa:	60 e1       	ldi	r22, 0x10	; 16
     5ac:	81 e0       	ldi	r24, 0x01	; 1
     5ae:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <Gpio_PinWrite>
     5b2:	21 c0       	rjmp	.+66     	; 0x5f6 <Led_Init+0x8a>
     5b4:	4f ef       	ldi	r20, 0xFF	; 255
     5b6:	60 e2       	ldi	r22, 0x20	; 32
     5b8:	81 e0       	ldi	r24, 0x01	; 1
     5ba:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <Gpio_PinDirection>
     5be:	40 e0       	ldi	r20, 0x00	; 0
     5c0:	60 e2       	ldi	r22, 0x20	; 32
     5c2:	81 e0       	ldi	r24, 0x01	; 1
     5c4:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <Gpio_PinWrite>
     5c8:	16 c0       	rjmp	.+44     	; 0x5f6 <Led_Init+0x8a>
     5ca:	4f ef       	ldi	r20, 0xFF	; 255
     5cc:	60 e4       	ldi	r22, 0x40	; 64
     5ce:	81 e0       	ldi	r24, 0x01	; 1
     5d0:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <Gpio_PinDirection>
     5d4:	40 e0       	ldi	r20, 0x00	; 0
     5d6:	60 e4       	ldi	r22, 0x40	; 64
     5d8:	81 e0       	ldi	r24, 0x01	; 1
     5da:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <Gpio_PinWrite>
     5de:	0b c0       	rjmp	.+22     	; 0x5f6 <Led_Init+0x8a>
     5e0:	4f ef       	ldi	r20, 0xFF	; 255
     5e2:	60 e8       	ldi	r22, 0x80	; 128
     5e4:	81 e0       	ldi	r24, 0x01	; 1
     5e6:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <Gpio_PinDirection>
     5ea:	40 e0       	ldi	r20, 0x00	; 0
     5ec:	60 e8       	ldi	r22, 0x80	; 128
     5ee:	81 e0       	ldi	r24, 0x01	; 1
     5f0:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <Gpio_PinWrite>
     5f4:	00 00       	nop
     5f6:	00 00       	nop
     5f8:	0f 90       	pop	r0
     5fa:	df 91       	pop	r29
     5fc:	cf 91       	pop	r28
     5fe:	08 95       	ret

00000600 <Led_Tog>:
/**
 * Description: Function to Toggle the Led.
 * @param led_Num the number of the Led [LED0,LED1,LED2,LED3]
 */
void Led_Tog(led led_Num)
{
     600:	cf 93       	push	r28
     602:	df 93       	push	r29
     604:	1f 92       	push	r1
     606:	cd b7       	in	r28, 0x3d	; 61
     608:	de b7       	in	r29, 0x3e	; 62
     60a:	89 83       	std	Y+1, r24	; 0x01
	switch(led_Num)
     60c:	89 81       	ldd	r24, Y+1	; 0x01
     60e:	88 2f       	mov	r24, r24
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	80 32       	cpi	r24, 0x20	; 32
     614:	91 05       	cpc	r25, r1
     616:	91 f0       	breq	.+36     	; 0x63c <Led_Tog+0x3c>
     618:	81 32       	cpi	r24, 0x21	; 33
     61a:	91 05       	cpc	r25, r1
     61c:	1c f4       	brge	.+6      	; 0x624 <Led_Tog+0x24>
     61e:	40 97       	sbiw	r24, 0x10	; 16
     620:	41 f0       	breq	.+16     	; 0x632 <Led_Tog+0x32>
		break;
		case LED3 :
		Gpio_PinToggle(LED_PORT,LED3);
		break;
		default:
		break;
     622:	1b c0       	rjmp	.+54     	; 0x65a <Led_Tog+0x5a>
 * Description: Function to Toggle the Led.
 * @param led_Num the number of the Led [LED0,LED1,LED2,LED3]
 */
void Led_Tog(led led_Num)
{
	switch(led_Num)
     624:	80 34       	cpi	r24, 0x40	; 64
     626:	91 05       	cpc	r25, r1
     628:	71 f0       	breq	.+28     	; 0x646 <Led_Tog+0x46>
     62a:	80 38       	cpi	r24, 0x80	; 128
     62c:	91 05       	cpc	r25, r1
     62e:	81 f0       	breq	.+32     	; 0x650 <Led_Tog+0x50>
		break;
		case LED3 :
		Gpio_PinToggle(LED_PORT,LED3);
		break;
		default:
		break;
     630:	14 c0       	rjmp	.+40     	; 0x65a <Led_Tog+0x5a>
void Led_Tog(led led_Num)
{
	switch(led_Num)
	{
		case LED0 :
		Gpio_PinToggle(LED_PORT,LED0);
     632:	60 e1       	ldi	r22, 0x10	; 16
     634:	81 e0       	ldi	r24, 0x01	; 1
     636:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <Gpio_PinToggle>
		break;
     63a:	0f c0       	rjmp	.+30     	; 0x65a <Led_Tog+0x5a>
		case LED1 :
		Gpio_PinToggle(LED_PORT,LED1);
     63c:	60 e2       	ldi	r22, 0x20	; 32
     63e:	81 e0       	ldi	r24, 0x01	; 1
     640:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <Gpio_PinToggle>
		break;
     644:	0a c0       	rjmp	.+20     	; 0x65a <Led_Tog+0x5a>
		case LED2 :
		Gpio_PinToggle(LED_PORT,LED2);
     646:	60 e4       	ldi	r22, 0x40	; 64
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <Gpio_PinToggle>
		break;
     64e:	05 c0       	rjmp	.+10     	; 0x65a <Led_Tog+0x5a>
		case LED3 :
		Gpio_PinToggle(LED_PORT,LED3);
     650:	60 e8       	ldi	r22, 0x80	; 128
     652:	81 e0       	ldi	r24, 0x01	; 1
     654:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <Gpio_PinToggle>
		break;
     658:	00 00       	nop
		default:
		break;
	}
     65a:	00 00       	nop
     65c:	0f 90       	pop	r0
     65e:	df 91       	pop	r29
     660:	cf 91       	pop	r28
     662:	08 95       	ret

00000664 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     664:	cf 93       	push	r28
     666:	df 93       	push	r29
     668:	00 d0       	rcall	.+0      	; 0x66a <pvPortMalloc+0x6>
     66a:	00 d0       	rcall	.+0      	; 0x66c <pvPortMalloc+0x8>
     66c:	cd b7       	in	r28, 0x3d	; 61
     66e:	de b7       	in	r29, 0x3e	; 62
     670:	9c 83       	std	Y+4, r25	; 0x04
     672:	8b 83       	std	Y+3, r24	; 0x03
void *pvReturn = NULL;
     674:	1a 82       	std	Y+2, r1	; 0x02
     676:	19 82       	std	Y+1, r1	; 0x01
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	}
	#endif

	vTaskSuspendAll();
     678:	0e 94 81 0a 	call	0x1502	; 0x1502 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
     67c:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <pucAlignedHeap.2084>
     680:	90 91 f1 06 	lds	r25, 0x06F1	; 0x8006f1 <pucAlignedHeap.2084+0x1>
     684:	89 2b       	or	r24, r25
     686:	31 f4       	brne	.+12     	; 0x694 <pvPortMalloc+0x30>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
     688:	83 e1       	ldi	r24, 0x13	; 19
     68a:	91 e0       	ldi	r25, 0x01	; 1
     68c:	90 93 f1 06 	sts	0x06F1, r25	; 0x8006f1 <pucAlignedHeap.2084+0x1>
     690:	80 93 f0 06 	sts	0x06F0, r24	; 0x8006f0 <pucAlignedHeap.2084>
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     694:	20 91 ee 06 	lds	r18, 0x06EE	; 0x8006ee <xNextFreeByte>
     698:	30 91 ef 06 	lds	r19, 0x06EF	; 0x8006ef <xNextFreeByte+0x1>
     69c:	8b 81       	ldd	r24, Y+3	; 0x03
     69e:	9c 81       	ldd	r25, Y+4	; 0x04
     6a0:	82 0f       	add	r24, r18
     6a2:	93 1f       	adc	r25, r19
     6a4:	8b 3d       	cpi	r24, 0xDB	; 219
     6a6:	95 40       	sbci	r25, 0x05	; 5
     6a8:	38 f5       	brcc	.+78     	; 0x6f8 <pvPortMalloc+0x94>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
     6aa:	20 91 ee 06 	lds	r18, 0x06EE	; 0x8006ee <xNextFreeByte>
     6ae:	30 91 ef 06 	lds	r19, 0x06EF	; 0x8006ef <xNextFreeByte+0x1>
     6b2:	8b 81       	ldd	r24, Y+3	; 0x03
     6b4:	9c 81       	ldd	r25, Y+4	; 0x04
     6b6:	28 0f       	add	r18, r24
     6b8:	39 1f       	adc	r19, r25
     6ba:	80 91 ee 06 	lds	r24, 0x06EE	; 0x8006ee <xNextFreeByte>
     6be:	90 91 ef 06 	lds	r25, 0x06EF	; 0x8006ef <xNextFreeByte+0x1>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     6c2:	82 17       	cp	r24, r18
     6c4:	93 07       	cpc	r25, r19
     6c6:	c0 f4       	brcc	.+48     	; 0x6f8 <pvPortMalloc+0x94>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
     6c8:	20 91 f0 06 	lds	r18, 0x06F0	; 0x8006f0 <pucAlignedHeap.2084>
     6cc:	30 91 f1 06 	lds	r19, 0x06F1	; 0x8006f1 <pucAlignedHeap.2084+0x1>
     6d0:	80 91 ee 06 	lds	r24, 0x06EE	; 0x8006ee <xNextFreeByte>
     6d4:	90 91 ef 06 	lds	r25, 0x06EF	; 0x8006ef <xNextFreeByte+0x1>
     6d8:	82 0f       	add	r24, r18
     6da:	93 1f       	adc	r25, r19
     6dc:	9a 83       	std	Y+2, r25	; 0x02
     6de:	89 83       	std	Y+1, r24	; 0x01
			xNextFreeByte += xWantedSize;
     6e0:	20 91 ee 06 	lds	r18, 0x06EE	; 0x8006ee <xNextFreeByte>
     6e4:	30 91 ef 06 	lds	r19, 0x06EF	; 0x8006ef <xNextFreeByte+0x1>
     6e8:	8b 81       	ldd	r24, Y+3	; 0x03
     6ea:	9c 81       	ldd	r25, Y+4	; 0x04
     6ec:	82 0f       	add	r24, r18
     6ee:	93 1f       	adc	r25, r19
     6f0:	90 93 ef 06 	sts	0x06EF, r25	; 0x8006ef <xNextFreeByte+0x1>
     6f4:	80 93 ee 06 	sts	0x06EE, r24	; 0x8006ee <xNextFreeByte>
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     6f8:	0e 94 8e 0a 	call	0x151c	; 0x151c <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
     6fc:	89 81       	ldd	r24, Y+1	; 0x01
     6fe:	9a 81       	ldd	r25, Y+2	; 0x02
}
     700:	0f 90       	pop	r0
     702:	0f 90       	pop	r0
     704:	0f 90       	pop	r0
     706:	0f 90       	pop	r0
     708:	df 91       	pop	r29
     70a:	cf 91       	pop	r28
     70c:	08 95       	ret

0000070e <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     70e:	cf 93       	push	r28
     710:	df 93       	push	r29
     712:	00 d0       	rcall	.+0      	; 0x714 <vPortFree+0x6>
     714:	cd b7       	in	r28, 0x3d	; 61
     716:	de b7       	in	r29, 0x3e	; 62
     718:	9a 83       	std	Y+2, r25	; 0x02
     71a:	89 83       	std	Y+1, r24	; 0x01
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
}
     71c:	00 00       	nop
     71e:	0f 90       	pop	r0
     720:	0f 90       	pop	r0
     722:	df 91       	pop	r29
     724:	cf 91       	pop	r28
     726:	08 95       	ret

00000728 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     728:	cf 93       	push	r28
     72a:	df 93       	push	r29
     72c:	00 d0       	rcall	.+0      	; 0x72e <vListInitialise+0x6>
     72e:	cd b7       	in	r28, 0x3d	; 61
     730:	de b7       	in	r29, 0x3e	; 62
     732:	9a 83       	std	Y+2, r25	; 0x02
     734:	89 83       	std	Y+1, r24	; 0x01
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     736:	89 81       	ldd	r24, Y+1	; 0x01
     738:	9a 81       	ldd	r25, Y+2	; 0x02
     73a:	9c 01       	movw	r18, r24
     73c:	2d 5f       	subi	r18, 0xFD	; 253
     73e:	3f 4f       	sbci	r19, 0xFF	; 255
     740:	89 81       	ldd	r24, Y+1	; 0x01
     742:	9a 81       	ldd	r25, Y+2	; 0x02
     744:	fc 01       	movw	r30, r24
     746:	32 83       	std	Z+2, r19	; 0x02
     748:	21 83       	std	Z+1, r18	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     74a:	89 81       	ldd	r24, Y+1	; 0x01
     74c:	9a 81       	ldd	r25, Y+2	; 0x02
     74e:	2f ef       	ldi	r18, 0xFF	; 255
     750:	3f ef       	ldi	r19, 0xFF	; 255
     752:	fc 01       	movw	r30, r24
     754:	34 83       	std	Z+4, r19	; 0x04
     756:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     758:	89 81       	ldd	r24, Y+1	; 0x01
     75a:	9a 81       	ldd	r25, Y+2	; 0x02
     75c:	9c 01       	movw	r18, r24
     75e:	2d 5f       	subi	r18, 0xFD	; 253
     760:	3f 4f       	sbci	r19, 0xFF	; 255
     762:	89 81       	ldd	r24, Y+1	; 0x01
     764:	9a 81       	ldd	r25, Y+2	; 0x02
     766:	fc 01       	movw	r30, r24
     768:	36 83       	std	Z+6, r19	; 0x06
     76a:	25 83       	std	Z+5, r18	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     76c:	89 81       	ldd	r24, Y+1	; 0x01
     76e:	9a 81       	ldd	r25, Y+2	; 0x02
     770:	9c 01       	movw	r18, r24
     772:	2d 5f       	subi	r18, 0xFD	; 253
     774:	3f 4f       	sbci	r19, 0xFF	; 255
     776:	89 81       	ldd	r24, Y+1	; 0x01
     778:	9a 81       	ldd	r25, Y+2	; 0x02
     77a:	fc 01       	movw	r30, r24
     77c:	30 87       	std	Z+8, r19	; 0x08
     77e:	27 83       	std	Z+7, r18	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     780:	89 81       	ldd	r24, Y+1	; 0x01
     782:	9a 81       	ldd	r25, Y+2	; 0x02
     784:	fc 01       	movw	r30, r24
     786:	10 82       	st	Z, r1

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
     788:	00 00       	nop
     78a:	0f 90       	pop	r0
     78c:	0f 90       	pop	r0
     78e:	df 91       	pop	r29
     790:	cf 91       	pop	r28
     792:	08 95       	ret

00000794 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
     794:	cf 93       	push	r28
     796:	df 93       	push	r29
     798:	00 d0       	rcall	.+0      	; 0x79a <vListInitialiseItem+0x6>
     79a:	cd b7       	in	r28, 0x3d	; 61
     79c:	de b7       	in	r29, 0x3e	; 62
     79e:	9a 83       	std	Y+2, r25	; 0x02
     7a0:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
     7a2:	89 81       	ldd	r24, Y+1	; 0x01
     7a4:	9a 81       	ldd	r25, Y+2	; 0x02
     7a6:	fc 01       	movw	r30, r24
     7a8:	11 86       	std	Z+9, r1	; 0x09
     7aa:	10 86       	std	Z+8, r1	; 0x08

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
     7ac:	00 00       	nop
     7ae:	0f 90       	pop	r0
     7b0:	0f 90       	pop	r0
     7b2:	df 91       	pop	r29
     7b4:	cf 91       	pop	r28
     7b6:	08 95       	ret

000007b8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     7b8:	cf 93       	push	r28
     7ba:	df 93       	push	r29
     7bc:	00 d0       	rcall	.+0      	; 0x7be <vListInsertEnd+0x6>
     7be:	00 d0       	rcall	.+0      	; 0x7c0 <vListInsertEnd+0x8>
     7c0:	00 d0       	rcall	.+0      	; 0x7c2 <vListInsertEnd+0xa>
     7c2:	cd b7       	in	r28, 0x3d	; 61
     7c4:	de b7       	in	r29, 0x3e	; 62
     7c6:	9c 83       	std	Y+4, r25	; 0x04
     7c8:	8b 83       	std	Y+3, r24	; 0x03
     7ca:	7e 83       	std	Y+6, r23	; 0x06
     7cc:	6d 83       	std	Y+5, r22	; 0x05
ListItem_t * const pxIndex = pxList->pxIndex;
     7ce:	8b 81       	ldd	r24, Y+3	; 0x03
     7d0:	9c 81       	ldd	r25, Y+4	; 0x04
     7d2:	fc 01       	movw	r30, r24
     7d4:	81 81       	ldd	r24, Z+1	; 0x01
     7d6:	92 81       	ldd	r25, Z+2	; 0x02
     7d8:	9a 83       	std	Y+2, r25	; 0x02
     7da:	89 83       	std	Y+1, r24	; 0x01
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     7dc:	8d 81       	ldd	r24, Y+5	; 0x05
     7de:	9e 81       	ldd	r25, Y+6	; 0x06
     7e0:	29 81       	ldd	r18, Y+1	; 0x01
     7e2:	3a 81       	ldd	r19, Y+2	; 0x02
     7e4:	fc 01       	movw	r30, r24
     7e6:	33 83       	std	Z+3, r19	; 0x03
     7e8:	22 83       	std	Z+2, r18	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     7ea:	89 81       	ldd	r24, Y+1	; 0x01
     7ec:	9a 81       	ldd	r25, Y+2	; 0x02
     7ee:	fc 01       	movw	r30, r24
     7f0:	24 81       	ldd	r18, Z+4	; 0x04
     7f2:	35 81       	ldd	r19, Z+5	; 0x05
     7f4:	8d 81       	ldd	r24, Y+5	; 0x05
     7f6:	9e 81       	ldd	r25, Y+6	; 0x06
     7f8:	fc 01       	movw	r30, r24
     7fa:	35 83       	std	Z+5, r19	; 0x05
     7fc:	24 83       	std	Z+4, r18	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     7fe:	89 81       	ldd	r24, Y+1	; 0x01
     800:	9a 81       	ldd	r25, Y+2	; 0x02
     802:	fc 01       	movw	r30, r24
     804:	84 81       	ldd	r24, Z+4	; 0x04
     806:	95 81       	ldd	r25, Z+5	; 0x05
     808:	2d 81       	ldd	r18, Y+5	; 0x05
     80a:	3e 81       	ldd	r19, Y+6	; 0x06
     80c:	fc 01       	movw	r30, r24
     80e:	33 83       	std	Z+3, r19	; 0x03
     810:	22 83       	std	Z+2, r18	; 0x02
	pxIndex->pxPrevious = pxNewListItem;
     812:	89 81       	ldd	r24, Y+1	; 0x01
     814:	9a 81       	ldd	r25, Y+2	; 0x02
     816:	2d 81       	ldd	r18, Y+5	; 0x05
     818:	3e 81       	ldd	r19, Y+6	; 0x06
     81a:	fc 01       	movw	r30, r24
     81c:	35 83       	std	Z+5, r19	; 0x05
     81e:	24 83       	std	Z+4, r18	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
     820:	8d 81       	ldd	r24, Y+5	; 0x05
     822:	9e 81       	ldd	r25, Y+6	; 0x06
     824:	2b 81       	ldd	r18, Y+3	; 0x03
     826:	3c 81       	ldd	r19, Y+4	; 0x04
     828:	fc 01       	movw	r30, r24
     82a:	31 87       	std	Z+9, r19	; 0x09
     82c:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
     82e:	8b 81       	ldd	r24, Y+3	; 0x03
     830:	9c 81       	ldd	r25, Y+4	; 0x04
     832:	fc 01       	movw	r30, r24
     834:	80 81       	ld	r24, Z
     836:	21 e0       	ldi	r18, 0x01	; 1
     838:	28 0f       	add	r18, r24
     83a:	8b 81       	ldd	r24, Y+3	; 0x03
     83c:	9c 81       	ldd	r25, Y+4	; 0x04
     83e:	fc 01       	movw	r30, r24
     840:	20 83       	st	Z, r18
}
     842:	00 00       	nop
     844:	26 96       	adiw	r28, 0x06	; 6
     846:	0f b6       	in	r0, 0x3f	; 63
     848:	f8 94       	cli
     84a:	de bf       	out	0x3e, r29	; 62
     84c:	0f be       	out	0x3f, r0	; 63
     84e:	cd bf       	out	0x3d, r28	; 61
     850:	df 91       	pop	r29
     852:	cf 91       	pop	r28
     854:	08 95       	ret

00000856 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     856:	cf 93       	push	r28
     858:	df 93       	push	r29
     85a:	cd b7       	in	r28, 0x3d	; 61
     85c:	de b7       	in	r29, 0x3e	; 62
     85e:	28 97       	sbiw	r28, 0x08	; 8
     860:	0f b6       	in	r0, 0x3f	; 63
     862:	f8 94       	cli
     864:	de bf       	out	0x3e, r29	; 62
     866:	0f be       	out	0x3f, r0	; 63
     868:	cd bf       	out	0x3d, r28	; 61
     86a:	9e 83       	std	Y+6, r25	; 0x06
     86c:	8d 83       	std	Y+5, r24	; 0x05
     86e:	78 87       	std	Y+8, r23	; 0x08
     870:	6f 83       	std	Y+7, r22	; 0x07
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     872:	8f 81       	ldd	r24, Y+7	; 0x07
     874:	98 85       	ldd	r25, Y+8	; 0x08
     876:	fc 01       	movw	r30, r24
     878:	80 81       	ld	r24, Z
     87a:	91 81       	ldd	r25, Z+1	; 0x01
     87c:	9c 83       	std	Y+4, r25	; 0x04
     87e:	8b 83       	std	Y+3, r24	; 0x03
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     880:	8b 81       	ldd	r24, Y+3	; 0x03
     882:	9c 81       	ldd	r25, Y+4	; 0x04
     884:	01 96       	adiw	r24, 0x01	; 1
     886:	41 f4       	brne	.+16     	; 0x898 <__stack+0x39>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     888:	8d 81       	ldd	r24, Y+5	; 0x05
     88a:	9e 81       	ldd	r25, Y+6	; 0x06
     88c:	fc 01       	movw	r30, r24
     88e:	87 81       	ldd	r24, Z+7	; 0x07
     890:	90 85       	ldd	r25, Z+8	; 0x08
     892:	9a 83       	std	Y+2, r25	; 0x02
     894:	89 83       	std	Y+1, r24	; 0x01
     896:	1a c0       	rjmp	.+52     	; 0x8cc <__stack+0x6d>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     898:	8d 81       	ldd	r24, Y+5	; 0x05
     89a:	9e 81       	ldd	r25, Y+6	; 0x06
     89c:	03 96       	adiw	r24, 0x03	; 3
     89e:	9a 83       	std	Y+2, r25	; 0x02
     8a0:	89 83       	std	Y+1, r24	; 0x01
     8a2:	07 c0       	rjmp	.+14     	; 0x8b2 <__stack+0x53>
     8a4:	89 81       	ldd	r24, Y+1	; 0x01
     8a6:	9a 81       	ldd	r25, Y+2	; 0x02
     8a8:	fc 01       	movw	r30, r24
     8aa:	82 81       	ldd	r24, Z+2	; 0x02
     8ac:	93 81       	ldd	r25, Z+3	; 0x03
     8ae:	9a 83       	std	Y+2, r25	; 0x02
     8b0:	89 83       	std	Y+1, r24	; 0x01
     8b2:	89 81       	ldd	r24, Y+1	; 0x01
     8b4:	9a 81       	ldd	r25, Y+2	; 0x02
     8b6:	fc 01       	movw	r30, r24
     8b8:	82 81       	ldd	r24, Z+2	; 0x02
     8ba:	93 81       	ldd	r25, Z+3	; 0x03
     8bc:	fc 01       	movw	r30, r24
     8be:	20 81       	ld	r18, Z
     8c0:	31 81       	ldd	r19, Z+1	; 0x01
     8c2:	8b 81       	ldd	r24, Y+3	; 0x03
     8c4:	9c 81       	ldd	r25, Y+4	; 0x04
     8c6:	82 17       	cp	r24, r18
     8c8:	93 07       	cpc	r25, r19
     8ca:	60 f7       	brcc	.-40     	; 0x8a4 <__stack+0x45>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     8cc:	89 81       	ldd	r24, Y+1	; 0x01
     8ce:	9a 81       	ldd	r25, Y+2	; 0x02
     8d0:	fc 01       	movw	r30, r24
     8d2:	22 81       	ldd	r18, Z+2	; 0x02
     8d4:	33 81       	ldd	r19, Z+3	; 0x03
     8d6:	8f 81       	ldd	r24, Y+7	; 0x07
     8d8:	98 85       	ldd	r25, Y+8	; 0x08
     8da:	fc 01       	movw	r30, r24
     8dc:	33 83       	std	Z+3, r19	; 0x03
     8de:	22 83       	std	Z+2, r18	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     8e0:	8f 81       	ldd	r24, Y+7	; 0x07
     8e2:	98 85       	ldd	r25, Y+8	; 0x08
     8e4:	fc 01       	movw	r30, r24
     8e6:	82 81       	ldd	r24, Z+2	; 0x02
     8e8:	93 81       	ldd	r25, Z+3	; 0x03
     8ea:	2f 81       	ldd	r18, Y+7	; 0x07
     8ec:	38 85       	ldd	r19, Y+8	; 0x08
     8ee:	fc 01       	movw	r30, r24
     8f0:	35 83       	std	Z+5, r19	; 0x05
     8f2:	24 83       	std	Z+4, r18	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
     8f4:	8f 81       	ldd	r24, Y+7	; 0x07
     8f6:	98 85       	ldd	r25, Y+8	; 0x08
     8f8:	29 81       	ldd	r18, Y+1	; 0x01
     8fa:	3a 81       	ldd	r19, Y+2	; 0x02
     8fc:	fc 01       	movw	r30, r24
     8fe:	35 83       	std	Z+5, r19	; 0x05
     900:	24 83       	std	Z+4, r18	; 0x04
	pxIterator->pxNext = pxNewListItem;
     902:	89 81       	ldd	r24, Y+1	; 0x01
     904:	9a 81       	ldd	r25, Y+2	; 0x02
     906:	2f 81       	ldd	r18, Y+7	; 0x07
     908:	38 85       	ldd	r19, Y+8	; 0x08
     90a:	fc 01       	movw	r30, r24
     90c:	33 83       	std	Z+3, r19	; 0x03
     90e:	22 83       	std	Z+2, r18	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
     910:	8f 81       	ldd	r24, Y+7	; 0x07
     912:	98 85       	ldd	r25, Y+8	; 0x08
     914:	2d 81       	ldd	r18, Y+5	; 0x05
     916:	3e 81       	ldd	r19, Y+6	; 0x06
     918:	fc 01       	movw	r30, r24
     91a:	31 87       	std	Z+9, r19	; 0x09
     91c:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
     91e:	8d 81       	ldd	r24, Y+5	; 0x05
     920:	9e 81       	ldd	r25, Y+6	; 0x06
     922:	fc 01       	movw	r30, r24
     924:	80 81       	ld	r24, Z
     926:	21 e0       	ldi	r18, 0x01	; 1
     928:	28 0f       	add	r18, r24
     92a:	8d 81       	ldd	r24, Y+5	; 0x05
     92c:	9e 81       	ldd	r25, Y+6	; 0x06
     92e:	fc 01       	movw	r30, r24
     930:	20 83       	st	Z, r18
}
     932:	00 00       	nop
     934:	28 96       	adiw	r28, 0x08	; 8
     936:	0f b6       	in	r0, 0x3f	; 63
     938:	f8 94       	cli
     93a:	de bf       	out	0x3e, r29	; 62
     93c:	0f be       	out	0x3f, r0	; 63
     93e:	cd bf       	out	0x3d, r28	; 61
     940:	df 91       	pop	r29
     942:	cf 91       	pop	r28
     944:	08 95       	ret

00000946 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     946:	cf 93       	push	r28
     948:	df 93       	push	r29
     94a:	00 d0       	rcall	.+0      	; 0x94c <uxListRemove+0x6>
     94c:	00 d0       	rcall	.+0      	; 0x94e <uxListRemove+0x8>
     94e:	cd b7       	in	r28, 0x3d	; 61
     950:	de b7       	in	r29, 0x3e	; 62
     952:	9c 83       	std	Y+4, r25	; 0x04
     954:	8b 83       	std	Y+3, r24	; 0x03
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
     956:	8b 81       	ldd	r24, Y+3	; 0x03
     958:	9c 81       	ldd	r25, Y+4	; 0x04
     95a:	fc 01       	movw	r30, r24
     95c:	80 85       	ldd	r24, Z+8	; 0x08
     95e:	91 85       	ldd	r25, Z+9	; 0x09
     960:	9a 83       	std	Y+2, r25	; 0x02
     962:	89 83       	std	Y+1, r24	; 0x01

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     964:	8b 81       	ldd	r24, Y+3	; 0x03
     966:	9c 81       	ldd	r25, Y+4	; 0x04
     968:	fc 01       	movw	r30, r24
     96a:	82 81       	ldd	r24, Z+2	; 0x02
     96c:	93 81       	ldd	r25, Z+3	; 0x03
     96e:	2b 81       	ldd	r18, Y+3	; 0x03
     970:	3c 81       	ldd	r19, Y+4	; 0x04
     972:	f9 01       	movw	r30, r18
     974:	24 81       	ldd	r18, Z+4	; 0x04
     976:	35 81       	ldd	r19, Z+5	; 0x05
     978:	fc 01       	movw	r30, r24
     97a:	35 83       	std	Z+5, r19	; 0x05
     97c:	24 83       	std	Z+4, r18	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     97e:	8b 81       	ldd	r24, Y+3	; 0x03
     980:	9c 81       	ldd	r25, Y+4	; 0x04
     982:	fc 01       	movw	r30, r24
     984:	84 81       	ldd	r24, Z+4	; 0x04
     986:	95 81       	ldd	r25, Z+5	; 0x05
     988:	2b 81       	ldd	r18, Y+3	; 0x03
     98a:	3c 81       	ldd	r19, Y+4	; 0x04
     98c:	f9 01       	movw	r30, r18
     98e:	22 81       	ldd	r18, Z+2	; 0x02
     990:	33 81       	ldd	r19, Z+3	; 0x03
     992:	fc 01       	movw	r30, r24
     994:	33 83       	std	Z+3, r19	; 0x03
     996:	22 83       	std	Z+2, r18	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     998:	89 81       	ldd	r24, Y+1	; 0x01
     99a:	9a 81       	ldd	r25, Y+2	; 0x02
     99c:	fc 01       	movw	r30, r24
     99e:	21 81       	ldd	r18, Z+1	; 0x01
     9a0:	32 81       	ldd	r19, Z+2	; 0x02
     9a2:	8b 81       	ldd	r24, Y+3	; 0x03
     9a4:	9c 81       	ldd	r25, Y+4	; 0x04
     9a6:	28 17       	cp	r18, r24
     9a8:	39 07       	cpc	r19, r25
     9aa:	51 f4       	brne	.+20     	; 0x9c0 <uxListRemove+0x7a>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     9ac:	8b 81       	ldd	r24, Y+3	; 0x03
     9ae:	9c 81       	ldd	r25, Y+4	; 0x04
     9b0:	fc 01       	movw	r30, r24
     9b2:	24 81       	ldd	r18, Z+4	; 0x04
     9b4:	35 81       	ldd	r19, Z+5	; 0x05
     9b6:	89 81       	ldd	r24, Y+1	; 0x01
     9b8:	9a 81       	ldd	r25, Y+2	; 0x02
     9ba:	fc 01       	movw	r30, r24
     9bc:	32 83       	std	Z+2, r19	; 0x02
     9be:	21 83       	std	Z+1, r18	; 0x01
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
     9c0:	8b 81       	ldd	r24, Y+3	; 0x03
     9c2:	9c 81       	ldd	r25, Y+4	; 0x04
     9c4:	fc 01       	movw	r30, r24
     9c6:	11 86       	std	Z+9, r1	; 0x09
     9c8:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     9ca:	89 81       	ldd	r24, Y+1	; 0x01
     9cc:	9a 81       	ldd	r25, Y+2	; 0x02
     9ce:	fc 01       	movw	r30, r24
     9d0:	80 81       	ld	r24, Z
     9d2:	2f ef       	ldi	r18, 0xFF	; 255
     9d4:	28 0f       	add	r18, r24
     9d6:	89 81       	ldd	r24, Y+1	; 0x01
     9d8:	9a 81       	ldd	r25, Y+2	; 0x02
     9da:	fc 01       	movw	r30, r24
     9dc:	20 83       	st	Z, r18

	return pxList->uxNumberOfItems;
     9de:	89 81       	ldd	r24, Y+1	; 0x01
     9e0:	9a 81       	ldd	r25, Y+2	; 0x02
     9e2:	fc 01       	movw	r30, r24
     9e4:	80 81       	ld	r24, Z
}
     9e6:	0f 90       	pop	r0
     9e8:	0f 90       	pop	r0
     9ea:	0f 90       	pop	r0
     9ec:	0f 90       	pop	r0
     9ee:	df 91       	pop	r29
     9f0:	cf 91       	pop	r28
     9f2:	08 95       	ret

000009f4 <pxPortInitialiseStack>:

void vPortEndScheduler( void )
{
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
     9f4:	cf 93       	push	r28
     9f6:	df 93       	push	r29
     9f8:	cd b7       	in	r28, 0x3d	; 61
     9fa:	de b7       	in	r29, 0x3e	; 62
     9fc:	28 97       	sbiw	r28, 0x08	; 8
     9fe:	0f b6       	in	r0, 0x3f	; 63
     a00:	f8 94       	cli
     a02:	de bf       	out	0x3e, r29	; 62
     a04:	0f be       	out	0x3f, r0	; 63
     a06:	cd bf       	out	0x3d, r28	; 61
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	7e 83       	std	Y+6, r23	; 0x06
     a0e:	6d 83       	std	Y+5, r22	; 0x05
     a10:	58 87       	std	Y+8, r21	; 0x08
     a12:	4f 83       	std	Y+7, r20	; 0x07
     a14:	8b 81       	ldd	r24, Y+3	; 0x03
     a16:	9c 81       	ldd	r25, Y+4	; 0x04
     a18:	21 e1       	ldi	r18, 0x11	; 17
     a1a:	fc 01       	movw	r30, r24
     a1c:	20 83       	st	Z, r18
     a1e:	8b 81       	ldd	r24, Y+3	; 0x03
     a20:	9c 81       	ldd	r25, Y+4	; 0x04
     a22:	01 97       	sbiw	r24, 0x01	; 1
     a24:	9c 83       	std	Y+4, r25	; 0x04
     a26:	8b 83       	std	Y+3, r24	; 0x03
     a28:	8b 81       	ldd	r24, Y+3	; 0x03
     a2a:	9c 81       	ldd	r25, Y+4	; 0x04
     a2c:	22 e2       	ldi	r18, 0x22	; 34
     a2e:	fc 01       	movw	r30, r24
     a30:	20 83       	st	Z, r18
     a32:	8b 81       	ldd	r24, Y+3	; 0x03
     a34:	9c 81       	ldd	r25, Y+4	; 0x04
     a36:	01 97       	sbiw	r24, 0x01	; 1
     a38:	9c 83       	std	Y+4, r25	; 0x04
     a3a:	8b 83       	std	Y+3, r24	; 0x03
     a3c:	8b 81       	ldd	r24, Y+3	; 0x03
     a3e:	9c 81       	ldd	r25, Y+4	; 0x04
     a40:	23 e3       	ldi	r18, 0x33	; 51
     a42:	fc 01       	movw	r30, r24
     a44:	20 83       	st	Z, r18
     a46:	8b 81       	ldd	r24, Y+3	; 0x03
     a48:	9c 81       	ldd	r25, Y+4	; 0x04
     a4a:	01 97       	sbiw	r24, 0x01	; 1
     a4c:	9c 83       	std	Y+4, r25	; 0x04
     a4e:	8b 83       	std	Y+3, r24	; 0x03
     a50:	8d 81       	ldd	r24, Y+5	; 0x05
     a52:	9e 81       	ldd	r25, Y+6	; 0x06
     a54:	9a 83       	std	Y+2, r25	; 0x02
     a56:	89 83       	std	Y+1, r24	; 0x01
     a58:	29 81       	ldd	r18, Y+1	; 0x01
     a5a:	8b 81       	ldd	r24, Y+3	; 0x03
     a5c:	9c 81       	ldd	r25, Y+4	; 0x04
     a5e:	fc 01       	movw	r30, r24
     a60:	20 83       	st	Z, r18
     a62:	8b 81       	ldd	r24, Y+3	; 0x03
     a64:	9c 81       	ldd	r25, Y+4	; 0x04
     a66:	01 97       	sbiw	r24, 0x01	; 1
     a68:	9c 83       	std	Y+4, r25	; 0x04
     a6a:	8b 83       	std	Y+3, r24	; 0x03
     a6c:	89 81       	ldd	r24, Y+1	; 0x01
     a6e:	9a 81       	ldd	r25, Y+2	; 0x02
     a70:	89 2f       	mov	r24, r25
     a72:	99 27       	eor	r25, r25
     a74:	9a 83       	std	Y+2, r25	; 0x02
     a76:	89 83       	std	Y+1, r24	; 0x01
     a78:	29 81       	ldd	r18, Y+1	; 0x01
     a7a:	8b 81       	ldd	r24, Y+3	; 0x03
     a7c:	9c 81       	ldd	r25, Y+4	; 0x04
     a7e:	fc 01       	movw	r30, r24
     a80:	20 83       	st	Z, r18
     a82:	8b 81       	ldd	r24, Y+3	; 0x03
     a84:	9c 81       	ldd	r25, Y+4	; 0x04
     a86:	01 97       	sbiw	r24, 0x01	; 1
     a88:	9c 83       	std	Y+4, r25	; 0x04
     a8a:	8b 83       	std	Y+3, r24	; 0x03
     a8c:	8b 81       	ldd	r24, Y+3	; 0x03
     a8e:	9c 81       	ldd	r25, Y+4	; 0x04
     a90:	fc 01       	movw	r30, r24
     a92:	10 82       	st	Z, r1
     a94:	8b 81       	ldd	r24, Y+3	; 0x03
     a96:	9c 81       	ldd	r25, Y+4	; 0x04
     a98:	01 97       	sbiw	r24, 0x01	; 1
     a9a:	9c 83       	std	Y+4, r25	; 0x04
     a9c:	8b 83       	std	Y+3, r24	; 0x03
     a9e:	8b 81       	ldd	r24, Y+3	; 0x03
     aa0:	9c 81       	ldd	r25, Y+4	; 0x04
     aa2:	20 e8       	ldi	r18, 0x80	; 128
     aa4:	fc 01       	movw	r30, r24
     aa6:	20 83       	st	Z, r18
     aa8:	8b 81       	ldd	r24, Y+3	; 0x03
     aaa:	9c 81       	ldd	r25, Y+4	; 0x04
     aac:	01 97       	sbiw	r24, 0x01	; 1
     aae:	9c 83       	std	Y+4, r25	; 0x04
     ab0:	8b 83       	std	Y+3, r24	; 0x03
     ab2:	8b 81       	ldd	r24, Y+3	; 0x03
     ab4:	9c 81       	ldd	r25, Y+4	; 0x04
     ab6:	fc 01       	movw	r30, r24
     ab8:	10 82       	st	Z, r1
     aba:	8b 81       	ldd	r24, Y+3	; 0x03
     abc:	9c 81       	ldd	r25, Y+4	; 0x04
     abe:	01 97       	sbiw	r24, 0x01	; 1
     ac0:	9c 83       	std	Y+4, r25	; 0x04
     ac2:	8b 83       	std	Y+3, r24	; 0x03
     ac4:	8b 81       	ldd	r24, Y+3	; 0x03
     ac6:	9c 81       	ldd	r25, Y+4	; 0x04
     ac8:	22 e0       	ldi	r18, 0x02	; 2
     aca:	fc 01       	movw	r30, r24
     acc:	20 83       	st	Z, r18
     ace:	8b 81       	ldd	r24, Y+3	; 0x03
     ad0:	9c 81       	ldd	r25, Y+4	; 0x04
     ad2:	01 97       	sbiw	r24, 0x01	; 1
     ad4:	9c 83       	std	Y+4, r25	; 0x04
     ad6:	8b 83       	std	Y+3, r24	; 0x03
     ad8:	8b 81       	ldd	r24, Y+3	; 0x03
     ada:	9c 81       	ldd	r25, Y+4	; 0x04
     adc:	23 e0       	ldi	r18, 0x03	; 3
     ade:	fc 01       	movw	r30, r24
     ae0:	20 83       	st	Z, r18
     ae2:	8b 81       	ldd	r24, Y+3	; 0x03
     ae4:	9c 81       	ldd	r25, Y+4	; 0x04
     ae6:	01 97       	sbiw	r24, 0x01	; 1
     ae8:	9c 83       	std	Y+4, r25	; 0x04
     aea:	8b 83       	std	Y+3, r24	; 0x03
     aec:	8b 81       	ldd	r24, Y+3	; 0x03
     aee:	9c 81       	ldd	r25, Y+4	; 0x04
     af0:	24 e0       	ldi	r18, 0x04	; 4
     af2:	fc 01       	movw	r30, r24
     af4:	20 83       	st	Z, r18
     af6:	8b 81       	ldd	r24, Y+3	; 0x03
     af8:	9c 81       	ldd	r25, Y+4	; 0x04
     afa:	01 97       	sbiw	r24, 0x01	; 1
     afc:	9c 83       	std	Y+4, r25	; 0x04
     afe:	8b 83       	std	Y+3, r24	; 0x03
     b00:	8b 81       	ldd	r24, Y+3	; 0x03
     b02:	9c 81       	ldd	r25, Y+4	; 0x04
     b04:	25 e0       	ldi	r18, 0x05	; 5
     b06:	fc 01       	movw	r30, r24
     b08:	20 83       	st	Z, r18
     b0a:	8b 81       	ldd	r24, Y+3	; 0x03
     b0c:	9c 81       	ldd	r25, Y+4	; 0x04
     b0e:	01 97       	sbiw	r24, 0x01	; 1
     b10:	9c 83       	std	Y+4, r25	; 0x04
     b12:	8b 83       	std	Y+3, r24	; 0x03
     b14:	8b 81       	ldd	r24, Y+3	; 0x03
     b16:	9c 81       	ldd	r25, Y+4	; 0x04
     b18:	26 e0       	ldi	r18, 0x06	; 6
     b1a:	fc 01       	movw	r30, r24
     b1c:	20 83       	st	Z, r18
     b1e:	8b 81       	ldd	r24, Y+3	; 0x03
     b20:	9c 81       	ldd	r25, Y+4	; 0x04
     b22:	01 97       	sbiw	r24, 0x01	; 1
     b24:	9c 83       	std	Y+4, r25	; 0x04
     b26:	8b 83       	std	Y+3, r24	; 0x03
     b28:	8b 81       	ldd	r24, Y+3	; 0x03
     b2a:	9c 81       	ldd	r25, Y+4	; 0x04
     b2c:	27 e0       	ldi	r18, 0x07	; 7
     b2e:	fc 01       	movw	r30, r24
     b30:	20 83       	st	Z, r18
     b32:	8b 81       	ldd	r24, Y+3	; 0x03
     b34:	9c 81       	ldd	r25, Y+4	; 0x04
     b36:	01 97       	sbiw	r24, 0x01	; 1
     b38:	9c 83       	std	Y+4, r25	; 0x04
     b3a:	8b 83       	std	Y+3, r24	; 0x03
     b3c:	8b 81       	ldd	r24, Y+3	; 0x03
     b3e:	9c 81       	ldd	r25, Y+4	; 0x04
     b40:	28 e0       	ldi	r18, 0x08	; 8
     b42:	fc 01       	movw	r30, r24
     b44:	20 83       	st	Z, r18
     b46:	8b 81       	ldd	r24, Y+3	; 0x03
     b48:	9c 81       	ldd	r25, Y+4	; 0x04
     b4a:	01 97       	sbiw	r24, 0x01	; 1
     b4c:	9c 83       	std	Y+4, r25	; 0x04
     b4e:	8b 83       	std	Y+3, r24	; 0x03
     b50:	8b 81       	ldd	r24, Y+3	; 0x03
     b52:	9c 81       	ldd	r25, Y+4	; 0x04
     b54:	29 e0       	ldi	r18, 0x09	; 9
     b56:	fc 01       	movw	r30, r24
     b58:	20 83       	st	Z, r18
     b5a:	8b 81       	ldd	r24, Y+3	; 0x03
     b5c:	9c 81       	ldd	r25, Y+4	; 0x04
     b5e:	01 97       	sbiw	r24, 0x01	; 1
     b60:	9c 83       	std	Y+4, r25	; 0x04
     b62:	8b 83       	std	Y+3, r24	; 0x03
     b64:	8b 81       	ldd	r24, Y+3	; 0x03
     b66:	9c 81       	ldd	r25, Y+4	; 0x04
     b68:	20 e1       	ldi	r18, 0x10	; 16
     b6a:	fc 01       	movw	r30, r24
     b6c:	20 83       	st	Z, r18
     b6e:	8b 81       	ldd	r24, Y+3	; 0x03
     b70:	9c 81       	ldd	r25, Y+4	; 0x04
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	9c 83       	std	Y+4, r25	; 0x04
     b76:	8b 83       	std	Y+3, r24	; 0x03
     b78:	8b 81       	ldd	r24, Y+3	; 0x03
     b7a:	9c 81       	ldd	r25, Y+4	; 0x04
     b7c:	21 e1       	ldi	r18, 0x11	; 17
     b7e:	fc 01       	movw	r30, r24
     b80:	20 83       	st	Z, r18
     b82:	8b 81       	ldd	r24, Y+3	; 0x03
     b84:	9c 81       	ldd	r25, Y+4	; 0x04
     b86:	01 97       	sbiw	r24, 0x01	; 1
     b88:	9c 83       	std	Y+4, r25	; 0x04
     b8a:	8b 83       	std	Y+3, r24	; 0x03
     b8c:	8b 81       	ldd	r24, Y+3	; 0x03
     b8e:	9c 81       	ldd	r25, Y+4	; 0x04
     b90:	22 e1       	ldi	r18, 0x12	; 18
     b92:	fc 01       	movw	r30, r24
     b94:	20 83       	st	Z, r18
     b96:	8b 81       	ldd	r24, Y+3	; 0x03
     b98:	9c 81       	ldd	r25, Y+4	; 0x04
     b9a:	01 97       	sbiw	r24, 0x01	; 1
     b9c:	9c 83       	std	Y+4, r25	; 0x04
     b9e:	8b 83       	std	Y+3, r24	; 0x03
     ba0:	8b 81       	ldd	r24, Y+3	; 0x03
     ba2:	9c 81       	ldd	r25, Y+4	; 0x04
     ba4:	23 e1       	ldi	r18, 0x13	; 19
     ba6:	fc 01       	movw	r30, r24
     ba8:	20 83       	st	Z, r18
     baa:	8b 81       	ldd	r24, Y+3	; 0x03
     bac:	9c 81       	ldd	r25, Y+4	; 0x04
     bae:	01 97       	sbiw	r24, 0x01	; 1
     bb0:	9c 83       	std	Y+4, r25	; 0x04
     bb2:	8b 83       	std	Y+3, r24	; 0x03
     bb4:	8b 81       	ldd	r24, Y+3	; 0x03
     bb6:	9c 81       	ldd	r25, Y+4	; 0x04
     bb8:	24 e1       	ldi	r18, 0x14	; 20
     bba:	fc 01       	movw	r30, r24
     bbc:	20 83       	st	Z, r18
     bbe:	8b 81       	ldd	r24, Y+3	; 0x03
     bc0:	9c 81       	ldd	r25, Y+4	; 0x04
     bc2:	01 97       	sbiw	r24, 0x01	; 1
     bc4:	9c 83       	std	Y+4, r25	; 0x04
     bc6:	8b 83       	std	Y+3, r24	; 0x03
     bc8:	8b 81       	ldd	r24, Y+3	; 0x03
     bca:	9c 81       	ldd	r25, Y+4	; 0x04
     bcc:	25 e1       	ldi	r18, 0x15	; 21
     bce:	fc 01       	movw	r30, r24
     bd0:	20 83       	st	Z, r18
     bd2:	8b 81       	ldd	r24, Y+3	; 0x03
     bd4:	9c 81       	ldd	r25, Y+4	; 0x04
     bd6:	01 97       	sbiw	r24, 0x01	; 1
     bd8:	9c 83       	std	Y+4, r25	; 0x04
     bda:	8b 83       	std	Y+3, r24	; 0x03
     bdc:	8b 81       	ldd	r24, Y+3	; 0x03
     bde:	9c 81       	ldd	r25, Y+4	; 0x04
     be0:	26 e1       	ldi	r18, 0x16	; 22
     be2:	fc 01       	movw	r30, r24
     be4:	20 83       	st	Z, r18
     be6:	8b 81       	ldd	r24, Y+3	; 0x03
     be8:	9c 81       	ldd	r25, Y+4	; 0x04
     bea:	01 97       	sbiw	r24, 0x01	; 1
     bec:	9c 83       	std	Y+4, r25	; 0x04
     bee:	8b 83       	std	Y+3, r24	; 0x03
     bf0:	8b 81       	ldd	r24, Y+3	; 0x03
     bf2:	9c 81       	ldd	r25, Y+4	; 0x04
     bf4:	27 e1       	ldi	r18, 0x17	; 23
     bf6:	fc 01       	movw	r30, r24
     bf8:	20 83       	st	Z, r18
     bfa:	8b 81       	ldd	r24, Y+3	; 0x03
     bfc:	9c 81       	ldd	r25, Y+4	; 0x04
     bfe:	01 97       	sbiw	r24, 0x01	; 1
     c00:	9c 83       	std	Y+4, r25	; 0x04
     c02:	8b 83       	std	Y+3, r24	; 0x03
     c04:	8b 81       	ldd	r24, Y+3	; 0x03
     c06:	9c 81       	ldd	r25, Y+4	; 0x04
     c08:	28 e1       	ldi	r18, 0x18	; 24
     c0a:	fc 01       	movw	r30, r24
     c0c:	20 83       	st	Z, r18
     c0e:	8b 81       	ldd	r24, Y+3	; 0x03
     c10:	9c 81       	ldd	r25, Y+4	; 0x04
     c12:	01 97       	sbiw	r24, 0x01	; 1
     c14:	9c 83       	std	Y+4, r25	; 0x04
     c16:	8b 83       	std	Y+3, r24	; 0x03
     c18:	8b 81       	ldd	r24, Y+3	; 0x03
     c1a:	9c 81       	ldd	r25, Y+4	; 0x04
     c1c:	29 e1       	ldi	r18, 0x19	; 25
     c1e:	fc 01       	movw	r30, r24
     c20:	20 83       	st	Z, r18
     c22:	8b 81       	ldd	r24, Y+3	; 0x03
     c24:	9c 81       	ldd	r25, Y+4	; 0x04
     c26:	01 97       	sbiw	r24, 0x01	; 1
     c28:	9c 83       	std	Y+4, r25	; 0x04
     c2a:	8b 83       	std	Y+3, r24	; 0x03
     c2c:	8b 81       	ldd	r24, Y+3	; 0x03
     c2e:	9c 81       	ldd	r25, Y+4	; 0x04
     c30:	20 e2       	ldi	r18, 0x20	; 32
     c32:	fc 01       	movw	r30, r24
     c34:	20 83       	st	Z, r18
     c36:	8b 81       	ldd	r24, Y+3	; 0x03
     c38:	9c 81       	ldd	r25, Y+4	; 0x04
     c3a:	01 97       	sbiw	r24, 0x01	; 1
     c3c:	9c 83       	std	Y+4, r25	; 0x04
     c3e:	8b 83       	std	Y+3, r24	; 0x03
     c40:	8b 81       	ldd	r24, Y+3	; 0x03
     c42:	9c 81       	ldd	r25, Y+4	; 0x04
     c44:	21 e2       	ldi	r18, 0x21	; 33
     c46:	fc 01       	movw	r30, r24
     c48:	20 83       	st	Z, r18
     c4a:	8b 81       	ldd	r24, Y+3	; 0x03
     c4c:	9c 81       	ldd	r25, Y+4	; 0x04
     c4e:	01 97       	sbiw	r24, 0x01	; 1
     c50:	9c 83       	std	Y+4, r25	; 0x04
     c52:	8b 83       	std	Y+3, r24	; 0x03
     c54:	8b 81       	ldd	r24, Y+3	; 0x03
     c56:	9c 81       	ldd	r25, Y+4	; 0x04
     c58:	22 e2       	ldi	r18, 0x22	; 34
     c5a:	fc 01       	movw	r30, r24
     c5c:	20 83       	st	Z, r18
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	9c 81       	ldd	r25, Y+4	; 0x04
     c62:	01 97       	sbiw	r24, 0x01	; 1
     c64:	9c 83       	std	Y+4, r25	; 0x04
     c66:	8b 83       	std	Y+3, r24	; 0x03
     c68:	8b 81       	ldd	r24, Y+3	; 0x03
     c6a:	9c 81       	ldd	r25, Y+4	; 0x04
     c6c:	23 e2       	ldi	r18, 0x23	; 35
     c6e:	fc 01       	movw	r30, r24
     c70:	20 83       	st	Z, r18
     c72:	8b 81       	ldd	r24, Y+3	; 0x03
     c74:	9c 81       	ldd	r25, Y+4	; 0x04
     c76:	01 97       	sbiw	r24, 0x01	; 1
     c78:	9c 83       	std	Y+4, r25	; 0x04
     c7a:	8b 83       	std	Y+3, r24	; 0x03
     c7c:	8f 81       	ldd	r24, Y+7	; 0x07
     c7e:	98 85       	ldd	r25, Y+8	; 0x08
     c80:	9a 83       	std	Y+2, r25	; 0x02
     c82:	89 83       	std	Y+1, r24	; 0x01
     c84:	29 81       	ldd	r18, Y+1	; 0x01
     c86:	8b 81       	ldd	r24, Y+3	; 0x03
     c88:	9c 81       	ldd	r25, Y+4	; 0x04
     c8a:	fc 01       	movw	r30, r24
     c8c:	20 83       	st	Z, r18
     c8e:	8b 81       	ldd	r24, Y+3	; 0x03
     c90:	9c 81       	ldd	r25, Y+4	; 0x04
     c92:	01 97       	sbiw	r24, 0x01	; 1
     c94:	9c 83       	std	Y+4, r25	; 0x04
     c96:	8b 83       	std	Y+3, r24	; 0x03
     c98:	89 81       	ldd	r24, Y+1	; 0x01
     c9a:	9a 81       	ldd	r25, Y+2	; 0x02
     c9c:	89 2f       	mov	r24, r25
     c9e:	99 27       	eor	r25, r25
     ca0:	9a 83       	std	Y+2, r25	; 0x02
     ca2:	89 83       	std	Y+1, r24	; 0x01
     ca4:	29 81       	ldd	r18, Y+1	; 0x01
     ca6:	8b 81       	ldd	r24, Y+3	; 0x03
     ca8:	9c 81       	ldd	r25, Y+4	; 0x04
     caa:	fc 01       	movw	r30, r24
     cac:	20 83       	st	Z, r18
     cae:	8b 81       	ldd	r24, Y+3	; 0x03
     cb0:	9c 81       	ldd	r25, Y+4	; 0x04
     cb2:	01 97       	sbiw	r24, 0x01	; 1
     cb4:	9c 83       	std	Y+4, r25	; 0x04
     cb6:	8b 83       	std	Y+3, r24	; 0x03
     cb8:	8b 81       	ldd	r24, Y+3	; 0x03
     cba:	9c 81       	ldd	r25, Y+4	; 0x04
     cbc:	26 e2       	ldi	r18, 0x26	; 38
     cbe:	fc 01       	movw	r30, r24
     cc0:	20 83       	st	Z, r18
     cc2:	8b 81       	ldd	r24, Y+3	; 0x03
     cc4:	9c 81       	ldd	r25, Y+4	; 0x04
     cc6:	01 97       	sbiw	r24, 0x01	; 1
     cc8:	9c 83       	std	Y+4, r25	; 0x04
     cca:	8b 83       	std	Y+3, r24	; 0x03
     ccc:	8b 81       	ldd	r24, Y+3	; 0x03
     cce:	9c 81       	ldd	r25, Y+4	; 0x04
     cd0:	27 e2       	ldi	r18, 0x27	; 39
     cd2:	fc 01       	movw	r30, r24
     cd4:	20 83       	st	Z, r18
     cd6:	8b 81       	ldd	r24, Y+3	; 0x03
     cd8:	9c 81       	ldd	r25, Y+4	; 0x04
     cda:	01 97       	sbiw	r24, 0x01	; 1
     cdc:	9c 83       	std	Y+4, r25	; 0x04
     cde:	8b 83       	std	Y+3, r24	; 0x03
     ce0:	8b 81       	ldd	r24, Y+3	; 0x03
     ce2:	9c 81       	ldd	r25, Y+4	; 0x04
     ce4:	28 e2       	ldi	r18, 0x28	; 40
     ce6:	fc 01       	movw	r30, r24
     ce8:	20 83       	st	Z, r18
     cea:	8b 81       	ldd	r24, Y+3	; 0x03
     cec:	9c 81       	ldd	r25, Y+4	; 0x04
     cee:	01 97       	sbiw	r24, 0x01	; 1
     cf0:	9c 83       	std	Y+4, r25	; 0x04
     cf2:	8b 83       	std	Y+3, r24	; 0x03
     cf4:	8b 81       	ldd	r24, Y+3	; 0x03
     cf6:	9c 81       	ldd	r25, Y+4	; 0x04
     cf8:	29 e2       	ldi	r18, 0x29	; 41
     cfa:	fc 01       	movw	r30, r24
     cfc:	20 83       	st	Z, r18
     cfe:	8b 81       	ldd	r24, Y+3	; 0x03
     d00:	9c 81       	ldd	r25, Y+4	; 0x04
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	9c 83       	std	Y+4, r25	; 0x04
     d06:	8b 83       	std	Y+3, r24	; 0x03
     d08:	8b 81       	ldd	r24, Y+3	; 0x03
     d0a:	9c 81       	ldd	r25, Y+4	; 0x04
     d0c:	20 e3       	ldi	r18, 0x30	; 48
     d0e:	fc 01       	movw	r30, r24
     d10:	20 83       	st	Z, r18
     d12:	8b 81       	ldd	r24, Y+3	; 0x03
     d14:	9c 81       	ldd	r25, Y+4	; 0x04
     d16:	01 97       	sbiw	r24, 0x01	; 1
     d18:	9c 83       	std	Y+4, r25	; 0x04
     d1a:	8b 83       	std	Y+3, r24	; 0x03
     d1c:	8b 81       	ldd	r24, Y+3	; 0x03
     d1e:	9c 81       	ldd	r25, Y+4	; 0x04
     d20:	21 e3       	ldi	r18, 0x31	; 49
     d22:	fc 01       	movw	r30, r24
     d24:	20 83       	st	Z, r18
     d26:	8b 81       	ldd	r24, Y+3	; 0x03
     d28:	9c 81       	ldd	r25, Y+4	; 0x04
     d2a:	01 97       	sbiw	r24, 0x01	; 1
     d2c:	9c 83       	std	Y+4, r25	; 0x04
     d2e:	8b 83       	std	Y+3, r24	; 0x03
     d30:	8b 81       	ldd	r24, Y+3	; 0x03
     d32:	9c 81       	ldd	r25, Y+4	; 0x04
     d34:	28 96       	adiw	r28, 0x08	; 8
     d36:	0f b6       	in	r0, 0x3f	; 63
     d38:	f8 94       	cli
     d3a:	de bf       	out	0x3e, r29	; 62
     d3c:	0f be       	out	0x3f, r0	; 63
     d3e:	cd bf       	out	0x3d, r28	; 61
     d40:	df 91       	pop	r29
     d42:	cf 91       	pop	r28
     d44:	08 95       	ret

00000d46 <xPortStartScheduler>:
     d46:	cf 93       	push	r28
     d48:	df 93       	push	r29
     d4a:	cd b7       	in	r28, 0x3d	; 61
     d4c:	de b7       	in	r29, 0x3e	; 62
     d4e:	0e 94 90 07 	call	0xf20	; 0xf20 <prvSetupTimerInterrupt>
     d52:	a0 91 f2 06 	lds	r26, 0x06F2	; 0x8006f2 <pxCurrentTCB>
     d56:	b0 91 f3 06 	lds	r27, 0x06F3	; 0x8006f3 <pxCurrentTCB+0x1>
     d5a:	cd 91       	ld	r28, X+
     d5c:	cd bf       	out	0x3d, r28	; 61
     d5e:	dd 91       	ld	r29, X+
     d60:	de bf       	out	0x3e, r29	; 62
     d62:	ff 91       	pop	r31
     d64:	ef 91       	pop	r30
     d66:	df 91       	pop	r29
     d68:	cf 91       	pop	r28
     d6a:	bf 91       	pop	r27
     d6c:	af 91       	pop	r26
     d6e:	9f 91       	pop	r25
     d70:	8f 91       	pop	r24
     d72:	7f 91       	pop	r23
     d74:	6f 91       	pop	r22
     d76:	5f 91       	pop	r21
     d78:	4f 91       	pop	r20
     d7a:	3f 91       	pop	r19
     d7c:	2f 91       	pop	r18
     d7e:	1f 91       	pop	r17
     d80:	0f 91       	pop	r16
     d82:	ff 90       	pop	r15
     d84:	ef 90       	pop	r14
     d86:	df 90       	pop	r13
     d88:	cf 90       	pop	r12
     d8a:	bf 90       	pop	r11
     d8c:	af 90       	pop	r10
     d8e:	9f 90       	pop	r9
     d90:	8f 90       	pop	r8
     d92:	7f 90       	pop	r7
     d94:	6f 90       	pop	r6
     d96:	5f 90       	pop	r5
     d98:	4f 90       	pop	r4
     d9a:	3f 90       	pop	r3
     d9c:	2f 90       	pop	r2
     d9e:	1f 90       	pop	r1
     da0:	0f 90       	pop	r0
     da2:	0f be       	out	0x3f, r0	; 63
     da4:	0f 90       	pop	r0
     da6:	08 95       	ret
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	df 91       	pop	r29
     dac:	cf 91       	pop	r28
     dae:	08 95       	ret

00000db0 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     db0:	0f 92       	push	r0
     db2:	0f b6       	in	r0, 0x3f	; 63
     db4:	f8 94       	cli
     db6:	0f 92       	push	r0
     db8:	1f 92       	push	r1
     dba:	11 24       	eor	r1, r1
     dbc:	2f 92       	push	r2
     dbe:	3f 92       	push	r3
     dc0:	4f 92       	push	r4
     dc2:	5f 92       	push	r5
     dc4:	6f 92       	push	r6
     dc6:	7f 92       	push	r7
     dc8:	8f 92       	push	r8
     dca:	9f 92       	push	r9
     dcc:	af 92       	push	r10
     dce:	bf 92       	push	r11
     dd0:	cf 92       	push	r12
     dd2:	df 92       	push	r13
     dd4:	ef 92       	push	r14
     dd6:	ff 92       	push	r15
     dd8:	0f 93       	push	r16
     dda:	1f 93       	push	r17
     ddc:	2f 93       	push	r18
     dde:	3f 93       	push	r19
     de0:	4f 93       	push	r20
     de2:	5f 93       	push	r21
     de4:	6f 93       	push	r22
     de6:	7f 93       	push	r23
     de8:	8f 93       	push	r24
     dea:	9f 93       	push	r25
     dec:	af 93       	push	r26
     dee:	bf 93       	push	r27
     df0:	cf 93       	push	r28
     df2:	df 93       	push	r29
     df4:	ef 93       	push	r30
     df6:	ff 93       	push	r31
     df8:	a0 91 f2 06 	lds	r26, 0x06F2	; 0x8006f2 <pxCurrentTCB>
     dfc:	b0 91 f3 06 	lds	r27, 0x06F3	; 0x8006f3 <pxCurrentTCB+0x1>
     e00:	0d b6       	in	r0, 0x3d	; 61
     e02:	0d 92       	st	X+, r0
     e04:	0e b6       	in	r0, 0x3e	; 62
     e06:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     e08:	0e 94 12 0c 	call	0x1824	; 0x1824 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     e0c:	a0 91 f2 06 	lds	r26, 0x06F2	; 0x8006f2 <pxCurrentTCB>
     e10:	b0 91 f3 06 	lds	r27, 0x06F3	; 0x8006f3 <pxCurrentTCB+0x1>
     e14:	cd 91       	ld	r28, X+
     e16:	cd bf       	out	0x3d, r28	; 61
     e18:	dd 91       	ld	r29, X+
     e1a:	de bf       	out	0x3e, r29	; 62
     e1c:	ff 91       	pop	r31
     e1e:	ef 91       	pop	r30
     e20:	df 91       	pop	r29
     e22:	cf 91       	pop	r28
     e24:	bf 91       	pop	r27
     e26:	af 91       	pop	r26
     e28:	9f 91       	pop	r25
     e2a:	8f 91       	pop	r24
     e2c:	7f 91       	pop	r23
     e2e:	6f 91       	pop	r22
     e30:	5f 91       	pop	r21
     e32:	4f 91       	pop	r20
     e34:	3f 91       	pop	r19
     e36:	2f 91       	pop	r18
     e38:	1f 91       	pop	r17
     e3a:	0f 91       	pop	r16
     e3c:	ff 90       	pop	r15
     e3e:	ef 90       	pop	r14
     e40:	df 90       	pop	r13
     e42:	cf 90       	pop	r12
     e44:	bf 90       	pop	r11
     e46:	af 90       	pop	r10
     e48:	9f 90       	pop	r9
     e4a:	8f 90       	pop	r8
     e4c:	7f 90       	pop	r7
     e4e:	6f 90       	pop	r6
     e50:	5f 90       	pop	r5
     e52:	4f 90       	pop	r4
     e54:	3f 90       	pop	r3
     e56:	2f 90       	pop	r2
     e58:	1f 90       	pop	r1
     e5a:	0f 90       	pop	r0
     e5c:	0f be       	out	0x3f, r0	; 63
     e5e:	0f 90       	pop	r0

	asm volatile ( "ret" );
     e60:	08 95       	ret
	...

00000e64 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     e64:	0f 92       	push	r0
     e66:	0f b6       	in	r0, 0x3f	; 63
     e68:	f8 94       	cli
     e6a:	0f 92       	push	r0
     e6c:	1f 92       	push	r1
     e6e:	11 24       	eor	r1, r1
     e70:	2f 92       	push	r2
     e72:	3f 92       	push	r3
     e74:	4f 92       	push	r4
     e76:	5f 92       	push	r5
     e78:	6f 92       	push	r6
     e7a:	7f 92       	push	r7
     e7c:	8f 92       	push	r8
     e7e:	9f 92       	push	r9
     e80:	af 92       	push	r10
     e82:	bf 92       	push	r11
     e84:	cf 92       	push	r12
     e86:	df 92       	push	r13
     e88:	ef 92       	push	r14
     e8a:	ff 92       	push	r15
     e8c:	0f 93       	push	r16
     e8e:	1f 93       	push	r17
     e90:	2f 93       	push	r18
     e92:	3f 93       	push	r19
     e94:	4f 93       	push	r20
     e96:	5f 93       	push	r21
     e98:	6f 93       	push	r22
     e9a:	7f 93       	push	r23
     e9c:	8f 93       	push	r24
     e9e:	9f 93       	push	r25
     ea0:	af 93       	push	r26
     ea2:	bf 93       	push	r27
     ea4:	cf 93       	push	r28
     ea6:	df 93       	push	r29
     ea8:	ef 93       	push	r30
     eaa:	ff 93       	push	r31
     eac:	a0 91 f2 06 	lds	r26, 0x06F2	; 0x8006f2 <pxCurrentTCB>
     eb0:	b0 91 f3 06 	lds	r27, 0x06F3	; 0x8006f3 <pxCurrentTCB+0x1>
     eb4:	0d b6       	in	r0, 0x3d	; 61
     eb6:	0d 92       	st	X+, r0
     eb8:	0e b6       	in	r0, 0x3e	; 62
     eba:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     ebc:	0e 94 25 0b 	call	0x164a	; 0x164a <xTaskIncrementTick>
     ec0:	88 23       	and	r24, r24
     ec2:	11 f0       	breq	.+4      	; 0xec8 <vPortYieldFromTick+0x64>
	{
		vTaskSwitchContext();
     ec4:	0e 94 12 0c 	call	0x1824	; 0x1824 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     ec8:	a0 91 f2 06 	lds	r26, 0x06F2	; 0x8006f2 <pxCurrentTCB>
     ecc:	b0 91 f3 06 	lds	r27, 0x06F3	; 0x8006f3 <pxCurrentTCB+0x1>
     ed0:	cd 91       	ld	r28, X+
     ed2:	cd bf       	out	0x3d, r28	; 61
     ed4:	dd 91       	ld	r29, X+
     ed6:	de bf       	out	0x3e, r29	; 62
     ed8:	ff 91       	pop	r31
     eda:	ef 91       	pop	r30
     edc:	df 91       	pop	r29
     ede:	cf 91       	pop	r28
     ee0:	bf 91       	pop	r27
     ee2:	af 91       	pop	r26
     ee4:	9f 91       	pop	r25
     ee6:	8f 91       	pop	r24
     ee8:	7f 91       	pop	r23
     eea:	6f 91       	pop	r22
     eec:	5f 91       	pop	r21
     eee:	4f 91       	pop	r20
     ef0:	3f 91       	pop	r19
     ef2:	2f 91       	pop	r18
     ef4:	1f 91       	pop	r17
     ef6:	0f 91       	pop	r16
     ef8:	ff 90       	pop	r15
     efa:	ef 90       	pop	r14
     efc:	df 90       	pop	r13
     efe:	cf 90       	pop	r12
     f00:	bf 90       	pop	r11
     f02:	af 90       	pop	r10
     f04:	9f 90       	pop	r9
     f06:	8f 90       	pop	r8
     f08:	7f 90       	pop	r7
     f0a:	6f 90       	pop	r6
     f0c:	5f 90       	pop	r5
     f0e:	4f 90       	pop	r4
     f10:	3f 90       	pop	r3
     f12:	2f 90       	pop	r2
     f14:	1f 90       	pop	r1
     f16:	0f 90       	pop	r0
     f18:	0f be       	out	0x3f, r0	; 63
     f1a:	0f 90       	pop	r0

	asm volatile ( "ret" );
     f1c:	08 95       	ret
	...

00000f20 <prvSetupTimerInterrupt>:

/*
 * Setup timer 1 compare match A to generate a tick interrupt.
 */
static void prvSetupTimerInterrupt( void )
{
     f20:	cf 93       	push	r28
     f22:	df 93       	push	r29
     f24:	00 d0       	rcall	.+0      	; 0xf26 <prvSetupTimerInterrupt+0x6>
     f26:	00 d0       	rcall	.+0      	; 0xf28 <prvSetupTimerInterrupt+0x8>
     f28:	00 d0       	rcall	.+0      	; 0xf2a <prvSetupTimerInterrupt+0xa>
     f2a:	cd b7       	in	r28, 0x3d	; 61
     f2c:	de b7       	in	r29, 0x3e	; 62
uint8_t ucHighByte, ucLowByte;

	/* Using 16bit timer 1 to generate the tick.  Correct fuses must be
	selected for the configCPU_CLOCK_HZ clock. */

	ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
     f2e:	80 e4       	ldi	r24, 0x40	; 64
     f30:	9f e1       	ldi	r25, 0x1F	; 31
     f32:	a0 e0       	ldi	r26, 0x00	; 0
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	89 83       	std	Y+1, r24	; 0x01
     f38:	9a 83       	std	Y+2, r25	; 0x02
     f3a:	ab 83       	std	Y+3, r26	; 0x03
     f3c:	bc 83       	std	Y+4, r27	; 0x04

	/* We only have 16 bits so have to scale to get our required tick rate. */
	ulCompareMatch /= portCLOCK_PRESCALER;
     f3e:	89 81       	ldd	r24, Y+1	; 0x01
     f40:	9a 81       	ldd	r25, Y+2	; 0x02
     f42:	ab 81       	ldd	r26, Y+3	; 0x03
     f44:	bc 81       	ldd	r27, Y+4	; 0x04
     f46:	68 94       	set
     f48:	15 f8       	bld	r1, 5
     f4a:	b6 95       	lsr	r27
     f4c:	a7 95       	ror	r26
     f4e:	97 95       	ror	r25
     f50:	87 95       	ror	r24
     f52:	16 94       	lsr	r1
     f54:	d1 f7       	brne	.-12     	; 0xf4a <prvSetupTimerInterrupt+0x2a>
     f56:	89 83       	std	Y+1, r24	; 0x01
     f58:	9a 83       	std	Y+2, r25	; 0x02
     f5a:	ab 83       	std	Y+3, r26	; 0x03
     f5c:	bc 83       	std	Y+4, r27	; 0x04

	/* Adjust for correct value. */
	ulCompareMatch -= ( uint32_t ) 1;
     f5e:	89 81       	ldd	r24, Y+1	; 0x01
     f60:	9a 81       	ldd	r25, Y+2	; 0x02
     f62:	ab 81       	ldd	r26, Y+3	; 0x03
     f64:	bc 81       	ldd	r27, Y+4	; 0x04
     f66:	01 97       	sbiw	r24, 0x01	; 1
     f68:	a1 09       	sbc	r26, r1
     f6a:	b1 09       	sbc	r27, r1
     f6c:	89 83       	std	Y+1, r24	; 0x01
     f6e:	9a 83       	std	Y+2, r25	; 0x02
     f70:	ab 83       	std	Y+3, r26	; 0x03
     f72:	bc 83       	std	Y+4, r27	; 0x04

	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
     f74:	89 81       	ldd	r24, Y+1	; 0x01
     f76:	8d 83       	std	Y+5, r24	; 0x05
	ulCompareMatch >>= 8;
     f78:	89 81       	ldd	r24, Y+1	; 0x01
     f7a:	9a 81       	ldd	r25, Y+2	; 0x02
     f7c:	ab 81       	ldd	r26, Y+3	; 0x03
     f7e:	bc 81       	ldd	r27, Y+4	; 0x04
     f80:	89 2f       	mov	r24, r25
     f82:	9a 2f       	mov	r25, r26
     f84:	ab 2f       	mov	r26, r27
     f86:	bb 27       	eor	r27, r27
     f88:	89 83       	std	Y+1, r24	; 0x01
     f8a:	9a 83       	std	Y+2, r25	; 0x02
     f8c:	ab 83       	std	Y+3, r26	; 0x03
     f8e:	bc 83       	std	Y+4, r27	; 0x04
	ucHighByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
     f90:	89 81       	ldd	r24, Y+1	; 0x01
     f92:	8e 83       	std	Y+6, r24	; 0x06
	OCR1AH = ucHighByte;
     f94:	8b e4       	ldi	r24, 0x4B	; 75
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	2e 81       	ldd	r18, Y+6	; 0x06
     f9a:	fc 01       	movw	r30, r24
     f9c:	20 83       	st	Z, r18
	OCR1AL = ucLowByte;
     f9e:	8a e4       	ldi	r24, 0x4A	; 74
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	2d 81       	ldd	r18, Y+5	; 0x05
     fa4:	fc 01       	movw	r30, r24
     fa6:	20 83       	st	Z, r18

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
     fa8:	8b e0       	ldi	r24, 0x0B	; 11
     faa:	8d 83       	std	Y+5, r24	; 0x05
	TCCR1B = ucLowByte;
     fac:	8e e4       	ldi	r24, 0x4E	; 78
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	2d 81       	ldd	r18, Y+5	; 0x05
     fb2:	fc 01       	movw	r30, r24
     fb4:	20 83       	st	Z, r18

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK;
     fb6:	89 e5       	ldi	r24, 0x59	; 89
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	fc 01       	movw	r30, r24
     fbc:	80 81       	ld	r24, Z
     fbe:	8d 83       	std	Y+5, r24	; 0x05
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
     fc0:	8d 81       	ldd	r24, Y+5	; 0x05
     fc2:	80 61       	ori	r24, 0x10	; 16
     fc4:	8d 83       	std	Y+5, r24	; 0x05
	TIMSK = ucLowByte;
     fc6:	89 e5       	ldi	r24, 0x59	; 89
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	2d 81       	ldd	r18, Y+5	; 0x05
     fcc:	fc 01       	movw	r30, r24
     fce:	20 83       	st	Z, r18
}
     fd0:	00 00       	nop
     fd2:	26 96       	adiw	r28, 0x06	; 6
     fd4:	0f b6       	in	r0, 0x3f	; 63
     fd6:	f8 94       	cli
     fd8:	de bf       	out	0x3e, r29	; 62
     fda:	0f be       	out	0x3f, r0	; 63
     fdc:	cd bf       	out	0x3d, r28	; 61
     fde:	df 91       	pop	r29
     fe0:	cf 91       	pop	r28
     fe2:	08 95       	ret

00000fe4 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     fe4:	0e 94 32 07 	call	0xe64	; 0xe64 <vPortYieldFromTick>
		asm volatile ( "reti" );
     fe8:	18 95       	reti
	...

00000fec <xTaskCreate>:
			}
		}
		taskEXIT_CRITICAL();

		return xReturn;
	}
     fec:	8f 92       	push	r8
     fee:	9f 92       	push	r9
     ff0:	af 92       	push	r10
     ff2:	bf 92       	push	r11
     ff4:	cf 92       	push	r12
     ff6:	df 92       	push	r13
     ff8:	ef 92       	push	r14
     ffa:	ff 92       	push	r15
     ffc:	0f 93       	push	r16
     ffe:	1f 93       	push	r17
    1000:	cf 93       	push	r28
    1002:	df 93       	push	r29
    1004:	cd b7       	in	r28, 0x3d	; 61
    1006:	de b7       	in	r29, 0x3e	; 62
    1008:	60 97       	sbiw	r28, 0x10	; 16
    100a:	0f b6       	in	r0, 0x3f	; 63
    100c:	f8 94       	cli
    100e:	de bf       	out	0x3e, r29	; 62
    1010:	0f be       	out	0x3f, r0	; 63
    1012:	cd bf       	out	0x3d, r28	; 61
    1014:	9f 83       	std	Y+7, r25	; 0x07
    1016:	8e 83       	std	Y+6, r24	; 0x06
    1018:	79 87       	std	Y+9, r23	; 0x09
    101a:	68 87       	std	Y+8, r22	; 0x08
    101c:	5b 87       	std	Y+11, r21	; 0x0b
    101e:	4a 87       	std	Y+10, r20	; 0x0a
    1020:	3d 87       	std	Y+13, r19	; 0x0d
    1022:	2c 87       	std	Y+12, r18	; 0x0c
    1024:	0e 87       	std	Y+14, r16	; 0x0e
    1026:	f8 8a       	std	Y+16, r15	; 0x10
    1028:	ef 86       	std	Y+15, r14	; 0x0f
    102a:	8a 85       	ldd	r24, Y+10	; 0x0a
    102c:	9b 85       	ldd	r25, Y+11	; 0x0b
    102e:	0e 94 32 03 	call	0x664	; 0x664 <pvPortMalloc>
    1032:	9d 83       	std	Y+5, r25	; 0x05
    1034:	8c 83       	std	Y+4, r24	; 0x04
    1036:	8c 81       	ldd	r24, Y+4	; 0x04
    1038:	9d 81       	ldd	r25, Y+5	; 0x05
    103a:	89 2b       	or	r24, r25
    103c:	b9 f0       	breq	.+46     	; 0x106c <xTaskCreate+0x80>
    103e:	86 e2       	ldi	r24, 0x26	; 38
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	0e 94 32 03 	call	0x664	; 0x664 <pvPortMalloc>
    1046:	9a 83       	std	Y+2, r25	; 0x02
    1048:	89 83       	std	Y+1, r24	; 0x01
    104a:	89 81       	ldd	r24, Y+1	; 0x01
    104c:	9a 81       	ldd	r25, Y+2	; 0x02
    104e:	89 2b       	or	r24, r25
    1050:	41 f0       	breq	.+16     	; 0x1062 <xTaskCreate+0x76>
    1052:	89 81       	ldd	r24, Y+1	; 0x01
    1054:	9a 81       	ldd	r25, Y+2	; 0x02
    1056:	2c 81       	ldd	r18, Y+4	; 0x04
    1058:	3d 81       	ldd	r19, Y+5	; 0x05
    105a:	fc 01       	movw	r30, r24
    105c:	30 8f       	std	Z+24, r19	; 0x18
    105e:	27 8b       	std	Z+23, r18	; 0x17
    1060:	07 c0       	rjmp	.+14     	; 0x1070 <xTaskCreate+0x84>
    1062:	8c 81       	ldd	r24, Y+4	; 0x04
    1064:	9d 81       	ldd	r25, Y+5	; 0x05
    1066:	0e 94 87 03 	call	0x70e	; 0x70e <vPortFree>
    106a:	02 c0       	rjmp	.+4      	; 0x1070 <xTaskCreate+0x84>
    106c:	1a 82       	std	Y+2, r1	; 0x02
    106e:	19 82       	std	Y+1, r1	; 0x01
    1070:	89 81       	ldd	r24, Y+1	; 0x01
    1072:	9a 81       	ldd	r25, Y+2	; 0x02
    1074:	89 2b       	or	r24, r25
    1076:	09 f1       	breq	.+66     	; 0x10ba <xTaskCreate+0xce>
    1078:	8a 85       	ldd	r24, Y+10	; 0x0a
    107a:	9b 85       	ldd	r25, Y+11	; 0x0b
    107c:	cc 01       	movw	r24, r24
    107e:	a0 e0       	ldi	r26, 0x00	; 0
    1080:	b0 e0       	ldi	r27, 0x00	; 0
    1082:	09 81       	ldd	r16, Y+1	; 0x01
    1084:	1a 81       	ldd	r17, Y+2	; 0x02
    1086:	4f 85       	ldd	r20, Y+15	; 0x0f
    1088:	58 89       	ldd	r21, Y+16	; 0x10
    108a:	2c 85       	ldd	r18, Y+12	; 0x0c
    108c:	3d 85       	ldd	r19, Y+13	; 0x0d
    108e:	68 85       	ldd	r22, Y+8	; 0x08
    1090:	79 85       	ldd	r23, Y+9	; 0x09
    1092:	ee 81       	ldd	r30, Y+6	; 0x06
    1094:	ff 81       	ldd	r31, Y+7	; 0x07
    1096:	81 2c       	mov	r8, r1
    1098:	91 2c       	mov	r9, r1
    109a:	58 01       	movw	r10, r16
    109c:	6a 01       	movw	r12, r20
    109e:	ee 84       	ldd	r14, Y+14	; 0x0e
    10a0:	89 01       	movw	r16, r18
    10a2:	9c 01       	movw	r18, r24
    10a4:	ad 01       	movw	r20, r26
    10a6:	cf 01       	movw	r24, r30
    10a8:	0e 94 73 08 	call	0x10e6	; 0x10e6 <prvInitialiseNewTask>
    10ac:	89 81       	ldd	r24, Y+1	; 0x01
    10ae:	9a 81       	ldd	r25, Y+2	; 0x02
    10b0:	0e 94 3e 09 	call	0x127c	; 0x127c <prvAddNewTaskToReadyList>
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	8b 83       	std	Y+3, r24	; 0x03
    10b8:	02 c0       	rjmp	.+4      	; 0x10be <xTaskCreate+0xd2>
    10ba:	8f ef       	ldi	r24, 0xFF	; 255
    10bc:	8b 83       	std	Y+3, r24	; 0x03
    10be:	8b 81       	ldd	r24, Y+3	; 0x03
    10c0:	60 96       	adiw	r28, 0x10	; 16
    10c2:	0f b6       	in	r0, 0x3f	; 63
    10c4:	f8 94       	cli
    10c6:	de bf       	out	0x3e, r29	; 62
    10c8:	0f be       	out	0x3f, r0	; 63
    10ca:	cd bf       	out	0x3d, r28	; 61
    10cc:	df 91       	pop	r29
    10ce:	cf 91       	pop	r28
    10d0:	1f 91       	pop	r17
    10d2:	0f 91       	pop	r16
    10d4:	ff 90       	pop	r15
    10d6:	ef 90       	pop	r14
    10d8:	df 90       	pop	r13
    10da:	cf 90       	pop	r12
    10dc:	bf 90       	pop	r11
    10de:	af 90       	pop	r10
    10e0:	9f 90       	pop	r9
    10e2:	8f 90       	pop	r8
    10e4:	08 95       	ret

000010e6 <prvInitialiseNewTask>:
    10e6:	8f 92       	push	r8
    10e8:	9f 92       	push	r9
    10ea:	af 92       	push	r10
    10ec:	bf 92       	push	r11
    10ee:	cf 92       	push	r12
    10f0:	df 92       	push	r13
    10f2:	ef 92       	push	r14
    10f4:	0f 93       	push	r16
    10f6:	1f 93       	push	r17
    10f8:	cf 93       	push	r28
    10fa:	df 93       	push	r29
    10fc:	cd b7       	in	r28, 0x3d	; 61
    10fe:	de b7       	in	r29, 0x3e	; 62
    1100:	64 97       	sbiw	r28, 0x14	; 20
    1102:	0f b6       	in	r0, 0x3f	; 63
    1104:	f8 94       	cli
    1106:	de bf       	out	0x3e, r29	; 62
    1108:	0f be       	out	0x3f, r0	; 63
    110a:	cd bf       	out	0x3d, r28	; 61
    110c:	9d 83       	std	Y+5, r25	; 0x05
    110e:	8c 83       	std	Y+4, r24	; 0x04
    1110:	7f 83       	std	Y+7, r23	; 0x07
    1112:	6e 83       	std	Y+6, r22	; 0x06
    1114:	28 87       	std	Y+8, r18	; 0x08
    1116:	39 87       	std	Y+9, r19	; 0x09
    1118:	4a 87       	std	Y+10, r20	; 0x0a
    111a:	5b 87       	std	Y+11, r21	; 0x0b
    111c:	1d 87       	std	Y+13, r17	; 0x0d
    111e:	0c 87       	std	Y+12, r16	; 0x0c
    1120:	ee 86       	std	Y+14, r14	; 0x0e
    1122:	d8 8a       	std	Y+16, r13	; 0x10
    1124:	cf 86       	std	Y+15, r12	; 0x0f
    1126:	ba 8a       	std	Y+18, r11	; 0x12
    1128:	a9 8a       	std	Y+17, r10	; 0x11
    112a:	9c 8a       	std	Y+20, r9	; 0x14
    112c:	8b 8a       	std	Y+19, r8	; 0x13
    112e:	89 89       	ldd	r24, Y+17	; 0x11
    1130:	9a 89       	ldd	r25, Y+18	; 0x12
    1132:	fc 01       	movw	r30, r24
    1134:	27 89       	ldd	r18, Z+23	; 0x17
    1136:	30 8d       	ldd	r19, Z+24	; 0x18
    1138:	88 85       	ldd	r24, Y+8	; 0x08
    113a:	99 85       	ldd	r25, Y+9	; 0x09
    113c:	01 97       	sbiw	r24, 0x01	; 1
    113e:	82 0f       	add	r24, r18
    1140:	93 1f       	adc	r25, r19
    1142:	9b 83       	std	Y+3, r25	; 0x03
    1144:	8a 83       	std	Y+2, r24	; 0x02
    1146:	8e 81       	ldd	r24, Y+6	; 0x06
    1148:	9f 81       	ldd	r25, Y+7	; 0x07
    114a:	89 2b       	or	r24, r25
    114c:	69 f1       	breq	.+90     	; 0x11a8 <prvInitialiseNewTask+0xc2>
    114e:	19 82       	std	Y+1, r1	; 0x01
    1150:	21 c0       	rjmp	.+66     	; 0x1194 <prvInitialiseNewTask+0xae>
    1152:	89 81       	ldd	r24, Y+1	; 0x01
    1154:	88 2f       	mov	r24, r24
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	29 81       	ldd	r18, Y+1	; 0x01
    115a:	22 2f       	mov	r18, r18
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	4e 81       	ldd	r20, Y+6	; 0x06
    1160:	5f 81       	ldd	r21, Y+7	; 0x07
    1162:	24 0f       	add	r18, r20
    1164:	35 1f       	adc	r19, r21
    1166:	f9 01       	movw	r30, r18
    1168:	40 81       	ld	r20, Z
    116a:	29 89       	ldd	r18, Y+17	; 0x11
    116c:	3a 89       	ldd	r19, Y+18	; 0x12
    116e:	82 0f       	add	r24, r18
    1170:	93 1f       	adc	r25, r19
    1172:	49 96       	adiw	r24, 0x19	; 25
    1174:	fc 01       	movw	r30, r24
    1176:	40 83       	st	Z, r20
    1178:	89 81       	ldd	r24, Y+1	; 0x01
    117a:	88 2f       	mov	r24, r24
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	2e 81       	ldd	r18, Y+6	; 0x06
    1180:	3f 81       	ldd	r19, Y+7	; 0x07
    1182:	82 0f       	add	r24, r18
    1184:	93 1f       	adc	r25, r19
    1186:	fc 01       	movw	r30, r24
    1188:	80 81       	ld	r24, Z
    118a:	88 23       	and	r24, r24
    118c:	39 f0       	breq	.+14     	; 0x119c <prvInitialiseNewTask+0xb6>
    118e:	89 81       	ldd	r24, Y+1	; 0x01
    1190:	8f 5f       	subi	r24, 0xFF	; 255
    1192:	89 83       	std	Y+1, r24	; 0x01
    1194:	89 81       	ldd	r24, Y+1	; 0x01
    1196:	88 30       	cpi	r24, 0x08	; 8
    1198:	e0 f2       	brcs	.-72     	; 0x1152 <prvInitialiseNewTask+0x6c>
    119a:	01 c0       	rjmp	.+2      	; 0x119e <prvInitialiseNewTask+0xb8>
    119c:	00 00       	nop
    119e:	89 89       	ldd	r24, Y+17	; 0x11
    11a0:	9a 89       	ldd	r25, Y+18	; 0x12
    11a2:	fc 01       	movw	r30, r24
    11a4:	10 a2       	std	Z+32, r1	; 0x20
    11a6:	04 c0       	rjmp	.+8      	; 0x11b0 <prvInitialiseNewTask+0xca>
    11a8:	89 89       	ldd	r24, Y+17	; 0x11
    11aa:	9a 89       	ldd	r25, Y+18	; 0x12
    11ac:	fc 01       	movw	r30, r24
    11ae:	11 8e       	std	Z+25, r1	; 0x19
    11b0:	8e 85       	ldd	r24, Y+14	; 0x0e
    11b2:	84 30       	cpi	r24, 0x04	; 4
    11b4:	10 f0       	brcs	.+4      	; 0x11ba <prvInitialiseNewTask+0xd4>
    11b6:	83 e0       	ldi	r24, 0x03	; 3
    11b8:	8e 87       	std	Y+14, r24	; 0x0e
    11ba:	89 89       	ldd	r24, Y+17	; 0x11
    11bc:	9a 89       	ldd	r25, Y+18	; 0x12
    11be:	2e 85       	ldd	r18, Y+14	; 0x0e
    11c0:	fc 01       	movw	r30, r24
    11c2:	26 8b       	std	Z+22, r18	; 0x16
    11c4:	89 89       	ldd	r24, Y+17	; 0x11
    11c6:	9a 89       	ldd	r25, Y+18	; 0x12
    11c8:	02 96       	adiw	r24, 0x02	; 2
    11ca:	0e 94 ca 03 	call	0x794	; 0x794 <vListInitialiseItem>
    11ce:	89 89       	ldd	r24, Y+17	; 0x11
    11d0:	9a 89       	ldd	r25, Y+18	; 0x12
    11d2:	0c 96       	adiw	r24, 0x0c	; 12
    11d4:	0e 94 ca 03 	call	0x794	; 0x794 <vListInitialiseItem>
    11d8:	89 89       	ldd	r24, Y+17	; 0x11
    11da:	9a 89       	ldd	r25, Y+18	; 0x12
    11dc:	29 89       	ldd	r18, Y+17	; 0x11
    11de:	3a 89       	ldd	r19, Y+18	; 0x12
    11e0:	fc 01       	movw	r30, r24
    11e2:	31 87       	std	Z+9, r19	; 0x09
    11e4:	20 87       	std	Z+8, r18	; 0x08
    11e6:	8e 85       	ldd	r24, Y+14	; 0x0e
    11e8:	88 2f       	mov	r24, r24
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	24 e0       	ldi	r18, 0x04	; 4
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	28 1b       	sub	r18, r24
    11f2:	39 0b       	sbc	r19, r25
    11f4:	89 89       	ldd	r24, Y+17	; 0x11
    11f6:	9a 89       	ldd	r25, Y+18	; 0x12
    11f8:	fc 01       	movw	r30, r24
    11fa:	35 87       	std	Z+13, r19	; 0x0d
    11fc:	24 87       	std	Z+12, r18	; 0x0c
    11fe:	89 89       	ldd	r24, Y+17	; 0x11
    1200:	9a 89       	ldd	r25, Y+18	; 0x12
    1202:	29 89       	ldd	r18, Y+17	; 0x11
    1204:	3a 89       	ldd	r19, Y+18	; 0x12
    1206:	fc 01       	movw	r30, r24
    1208:	33 8b       	std	Z+19, r19	; 0x13
    120a:	22 8b       	std	Z+18, r18	; 0x12
    120c:	89 89       	ldd	r24, Y+17	; 0x11
    120e:	9a 89       	ldd	r25, Y+18	; 0x12
    1210:	fc 01       	movw	r30, r24
    1212:	11 a2       	std	Z+33, r1	; 0x21
    1214:	12 a2       	std	Z+34, r1	; 0x22
    1216:	13 a2       	std	Z+35, r1	; 0x23
    1218:	14 a2       	std	Z+36, r1	; 0x24
    121a:	89 89       	ldd	r24, Y+17	; 0x11
    121c:	9a 89       	ldd	r25, Y+18	; 0x12
    121e:	fc 01       	movw	r30, r24
    1220:	15 a2       	std	Z+37, r1	; 0x25
    1222:	4c 85       	ldd	r20, Y+12	; 0x0c
    1224:	5d 85       	ldd	r21, Y+13	; 0x0d
    1226:	2c 81       	ldd	r18, Y+4	; 0x04
    1228:	3d 81       	ldd	r19, Y+5	; 0x05
    122a:	8a 81       	ldd	r24, Y+2	; 0x02
    122c:	9b 81       	ldd	r25, Y+3	; 0x03
    122e:	b9 01       	movw	r22, r18
    1230:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <pxPortInitialiseStack>
    1234:	9c 01       	movw	r18, r24
    1236:	89 89       	ldd	r24, Y+17	; 0x11
    1238:	9a 89       	ldd	r25, Y+18	; 0x12
    123a:	fc 01       	movw	r30, r24
    123c:	31 83       	std	Z+1, r19	; 0x01
    123e:	20 83       	st	Z, r18
    1240:	8f 85       	ldd	r24, Y+15	; 0x0f
    1242:	98 89       	ldd	r25, Y+16	; 0x10
    1244:	89 2b       	or	r24, r25
    1246:	39 f0       	breq	.+14     	; 0x1256 <prvInitialiseNewTask+0x170>
    1248:	8f 85       	ldd	r24, Y+15	; 0x0f
    124a:	98 89       	ldd	r25, Y+16	; 0x10
    124c:	29 89       	ldd	r18, Y+17	; 0x11
    124e:	3a 89       	ldd	r19, Y+18	; 0x12
    1250:	fc 01       	movw	r30, r24
    1252:	31 83       	std	Z+1, r19	; 0x01
    1254:	20 83       	st	Z, r18
    1256:	00 00       	nop
    1258:	64 96       	adiw	r28, 0x14	; 20
    125a:	0f b6       	in	r0, 0x3f	; 63
    125c:	f8 94       	cli
    125e:	de bf       	out	0x3e, r29	; 62
    1260:	0f be       	out	0x3f, r0	; 63
    1262:	cd bf       	out	0x3d, r28	; 61
    1264:	df 91       	pop	r29
    1266:	cf 91       	pop	r28
    1268:	1f 91       	pop	r17
    126a:	0f 91       	pop	r16
    126c:	ef 90       	pop	r14
    126e:	df 90       	pop	r13
    1270:	cf 90       	pop	r12
    1272:	bf 90       	pop	r11
    1274:	af 90       	pop	r10
    1276:	9f 90       	pop	r9
    1278:	8f 90       	pop	r8
    127a:	08 95       	ret

0000127c <prvAddNewTaskToReadyList>:
    127c:	cf 93       	push	r28
    127e:	df 93       	push	r29
    1280:	00 d0       	rcall	.+0      	; 0x1282 <prvAddNewTaskToReadyList+0x6>
    1282:	cd b7       	in	r28, 0x3d	; 61
    1284:	de b7       	in	r29, 0x3e	; 62
    1286:	9a 83       	std	Y+2, r25	; 0x02
    1288:	89 83       	std	Y+1, r24	; 0x01
    128a:	0f b6       	in	r0, 0x3f	; 63
    128c:	f8 94       	cli
    128e:	0f 92       	push	r0
    1290:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <uxCurrentNumberOfTasks>
    1294:	8f 5f       	subi	r24, 0xFF	; 255
    1296:	80 93 4a 07 	sts	0x074A, r24	; 0x80074a <uxCurrentNumberOfTasks>
    129a:	80 91 f2 06 	lds	r24, 0x06F2	; 0x8006f2 <pxCurrentTCB>
    129e:	90 91 f3 06 	lds	r25, 0x06F3	; 0x8006f3 <pxCurrentTCB+0x1>
    12a2:	89 2b       	or	r24, r25
    12a4:	69 f4       	brne	.+26     	; 0x12c0 <prvAddNewTaskToReadyList+0x44>
    12a6:	89 81       	ldd	r24, Y+1	; 0x01
    12a8:	9a 81       	ldd	r25, Y+2	; 0x02
    12aa:	90 93 f3 06 	sts	0x06F3, r25	; 0x8006f3 <pxCurrentTCB+0x1>
    12ae:	80 93 f2 06 	sts	0x06F2, r24	; 0x8006f2 <pxCurrentTCB>
    12b2:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <uxCurrentNumberOfTasks>
    12b6:	81 30       	cpi	r24, 0x01	; 1
    12b8:	c9 f4       	brne	.+50     	; 0x12ec <prvAddNewTaskToReadyList+0x70>
    12ba:	0e 94 90 0c 	call	0x1920	; 0x1920 <prvInitialiseTaskLists>
    12be:	16 c0       	rjmp	.+44     	; 0x12ec <prvAddNewTaskToReadyList+0x70>
    12c0:	80 91 4e 07 	lds	r24, 0x074E	; 0x80074e <xSchedulerRunning>
    12c4:	88 23       	and	r24, r24
    12c6:	91 f4       	brne	.+36     	; 0x12ec <prvAddNewTaskToReadyList+0x70>
    12c8:	80 91 f2 06 	lds	r24, 0x06F2	; 0x8006f2 <pxCurrentTCB>
    12cc:	90 91 f3 06 	lds	r25, 0x06F3	; 0x8006f3 <pxCurrentTCB+0x1>
    12d0:	fc 01       	movw	r30, r24
    12d2:	26 89       	ldd	r18, Z+22	; 0x16
    12d4:	89 81       	ldd	r24, Y+1	; 0x01
    12d6:	9a 81       	ldd	r25, Y+2	; 0x02
    12d8:	fc 01       	movw	r30, r24
    12da:	86 89       	ldd	r24, Z+22	; 0x16
    12dc:	82 17       	cp	r24, r18
    12de:	30 f0       	brcs	.+12     	; 0x12ec <prvAddNewTaskToReadyList+0x70>
    12e0:	89 81       	ldd	r24, Y+1	; 0x01
    12e2:	9a 81       	ldd	r25, Y+2	; 0x02
    12e4:	90 93 f3 06 	sts	0x06F3, r25	; 0x8006f3 <pxCurrentTCB+0x1>
    12e8:	80 93 f2 06 	sts	0x06F2, r24	; 0x8006f2 <pxCurrentTCB>
    12ec:	80 91 52 07 	lds	r24, 0x0752	; 0x800752 <uxTaskNumber>
    12f0:	8f 5f       	subi	r24, 0xFF	; 255
    12f2:	80 93 52 07 	sts	0x0752, r24	; 0x800752 <uxTaskNumber>
    12f6:	89 81       	ldd	r24, Y+1	; 0x01
    12f8:	9a 81       	ldd	r25, Y+2	; 0x02
    12fa:	fc 01       	movw	r30, r24
    12fc:	96 89       	ldd	r25, Z+22	; 0x16
    12fe:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <uxTopReadyPriority>
    1302:	89 17       	cp	r24, r25
    1304:	30 f4       	brcc	.+12     	; 0x1312 <prvAddNewTaskToReadyList+0x96>
    1306:	89 81       	ldd	r24, Y+1	; 0x01
    1308:	9a 81       	ldd	r25, Y+2	; 0x02
    130a:	fc 01       	movw	r30, r24
    130c:	86 89       	ldd	r24, Z+22	; 0x16
    130e:	80 93 4d 07 	sts	0x074D, r24	; 0x80074d <uxTopReadyPriority>
    1312:	89 81       	ldd	r24, Y+1	; 0x01
    1314:	9a 81       	ldd	r25, Y+2	; 0x02
    1316:	ac 01       	movw	r20, r24
    1318:	4e 5f       	subi	r20, 0xFE	; 254
    131a:	5f 4f       	sbci	r21, 0xFF	; 255
    131c:	89 81       	ldd	r24, Y+1	; 0x01
    131e:	9a 81       	ldd	r25, Y+2	; 0x02
    1320:	fc 01       	movw	r30, r24
    1322:	86 89       	ldd	r24, Z+22	; 0x16
    1324:	28 2f       	mov	r18, r24
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	c9 01       	movw	r24, r18
    132a:	88 0f       	add	r24, r24
    132c:	99 1f       	adc	r25, r25
    132e:	88 0f       	add	r24, r24
    1330:	99 1f       	adc	r25, r25
    1332:	88 0f       	add	r24, r24
    1334:	99 1f       	adc	r25, r25
    1336:	82 0f       	add	r24, r18
    1338:	93 1f       	adc	r25, r19
    133a:	8c 50       	subi	r24, 0x0C	; 12
    133c:	99 4f       	sbci	r25, 0xF9	; 249
    133e:	ba 01       	movw	r22, r20
    1340:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <vListInsertEnd>
    1344:	0f 90       	pop	r0
    1346:	0f be       	out	0x3f, r0	; 63
    1348:	80 91 4e 07 	lds	r24, 0x074E	; 0x80074e <xSchedulerRunning>
    134c:	88 23       	and	r24, r24
    134e:	71 f0       	breq	.+28     	; 0x136c <prvAddNewTaskToReadyList+0xf0>
    1350:	80 91 f2 06 	lds	r24, 0x06F2	; 0x8006f2 <pxCurrentTCB>
    1354:	90 91 f3 06 	lds	r25, 0x06F3	; 0x8006f3 <pxCurrentTCB+0x1>
    1358:	fc 01       	movw	r30, r24
    135a:	26 89       	ldd	r18, Z+22	; 0x16
    135c:	89 81       	ldd	r24, Y+1	; 0x01
    135e:	9a 81       	ldd	r25, Y+2	; 0x02
    1360:	fc 01       	movw	r30, r24
    1362:	86 89       	ldd	r24, Z+22	; 0x16
    1364:	28 17       	cp	r18, r24
    1366:	10 f4       	brcc	.+4      	; 0x136c <prvAddNewTaskToReadyList+0xf0>
    1368:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <vPortYield>
    136c:	00 00       	nop
    136e:	0f 90       	pop	r0
    1370:	0f 90       	pop	r0
    1372:	df 91       	pop	r29
    1374:	cf 91       	pop	r28
    1376:	08 95       	ret

00001378 <vTaskDelay>:
    1378:	cf 93       	push	r28
    137a:	df 93       	push	r29
    137c:	00 d0       	rcall	.+0      	; 0x137e <vTaskDelay+0x6>
    137e:	1f 92       	push	r1
    1380:	cd b7       	in	r28, 0x3d	; 61
    1382:	de b7       	in	r29, 0x3e	; 62
    1384:	9b 83       	std	Y+3, r25	; 0x03
    1386:	8a 83       	std	Y+2, r24	; 0x02
    1388:	19 82       	std	Y+1, r1	; 0x01
    138a:	8a 81       	ldd	r24, Y+2	; 0x02
    138c:	9b 81       	ldd	r25, Y+3	; 0x03
    138e:	89 2b       	or	r24, r25
    1390:	51 f0       	breq	.+20     	; 0x13a6 <vTaskDelay+0x2e>
    1392:	0e 94 81 0a 	call	0x1502	; 0x1502 <vTaskSuspendAll>
    1396:	8a 81       	ldd	r24, Y+2	; 0x02
    1398:	9b 81       	ldd	r25, Y+3	; 0x03
    139a:	60 e0       	ldi	r22, 0x00	; 0
    139c:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <prvAddCurrentTaskToDelayedList>
    13a0:	0e 94 8e 0a 	call	0x151c	; 0x151c <xTaskResumeAll>
    13a4:	89 83       	std	Y+1, r24	; 0x01
    13a6:	89 81       	ldd	r24, Y+1	; 0x01
    13a8:	88 23       	and	r24, r24
    13aa:	11 f4       	brne	.+4      	; 0x13b0 <vTaskDelay+0x38>
    13ac:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <vPortYield>
    13b0:	00 00       	nop
    13b2:	0f 90       	pop	r0
    13b4:	0f 90       	pop	r0
    13b6:	0f 90       	pop	r0
    13b8:	df 91       	pop	r29
    13ba:	cf 91       	pop	r28
    13bc:	08 95       	ret

000013be <vTaskSuspend>:
    13be:	cf 93       	push	r28
    13c0:	df 93       	push	r29
    13c2:	00 d0       	rcall	.+0      	; 0x13c4 <vTaskSuspend+0x6>
    13c4:	00 d0       	rcall	.+0      	; 0x13c6 <vTaskSuspend+0x8>
    13c6:	cd b7       	in	r28, 0x3d	; 61
    13c8:	de b7       	in	r29, 0x3e	; 62
    13ca:	9c 83       	std	Y+4, r25	; 0x04
    13cc:	8b 83       	std	Y+3, r24	; 0x03
    13ce:	0f b6       	in	r0, 0x3f	; 63
    13d0:	f8 94       	cli
    13d2:	0f 92       	push	r0
    13d4:	8b 81       	ldd	r24, Y+3	; 0x03
    13d6:	9c 81       	ldd	r25, Y+4	; 0x04
    13d8:	89 2b       	or	r24, r25
    13da:	29 f4       	brne	.+10     	; 0x13e6 <vTaskSuspend+0x28>
    13dc:	80 91 f2 06 	lds	r24, 0x06F2	; 0x8006f2 <pxCurrentTCB>
    13e0:	90 91 f3 06 	lds	r25, 0x06F3	; 0x8006f3 <pxCurrentTCB+0x1>
    13e4:	02 c0       	rjmp	.+4      	; 0x13ea <vTaskSuspend+0x2c>
    13e6:	8b 81       	ldd	r24, Y+3	; 0x03
    13e8:	9c 81       	ldd	r25, Y+4	; 0x04
    13ea:	9a 83       	std	Y+2, r25	; 0x02
    13ec:	89 83       	std	Y+1, r24	; 0x01
    13ee:	89 81       	ldd	r24, Y+1	; 0x01
    13f0:	9a 81       	ldd	r25, Y+2	; 0x02
    13f2:	02 96       	adiw	r24, 0x02	; 2
    13f4:	0e 94 a3 04 	call	0x946	; 0x946 <uxListRemove>
    13f8:	89 81       	ldd	r24, Y+1	; 0x01
    13fa:	9a 81       	ldd	r25, Y+2	; 0x02
    13fc:	fc 01       	movw	r30, r24
    13fe:	84 89       	ldd	r24, Z+20	; 0x14
    1400:	95 89       	ldd	r25, Z+21	; 0x15
    1402:	89 2b       	or	r24, r25
    1404:	29 f0       	breq	.+10     	; 0x1410 <vTaskSuspend+0x52>
    1406:	89 81       	ldd	r24, Y+1	; 0x01
    1408:	9a 81       	ldd	r25, Y+2	; 0x02
    140a:	0c 96       	adiw	r24, 0x0c	; 12
    140c:	0e 94 a3 04 	call	0x946	; 0x946 <uxListRemove>
    1410:	89 81       	ldd	r24, Y+1	; 0x01
    1412:	9a 81       	ldd	r25, Y+2	; 0x02
    1414:	02 96       	adiw	r24, 0x02	; 2
    1416:	bc 01       	movw	r22, r24
    1418:	81 e4       	ldi	r24, 0x41	; 65
    141a:	97 e0       	ldi	r25, 0x07	; 7
    141c:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <vListInsertEnd>
    1420:	89 81       	ldd	r24, Y+1	; 0x01
    1422:	9a 81       	ldd	r25, Y+2	; 0x02
    1424:	fc 01       	movw	r30, r24
    1426:	85 a1       	ldd	r24, Z+37	; 0x25
    1428:	81 30       	cpi	r24, 0x01	; 1
    142a:	21 f4       	brne	.+8      	; 0x1434 <vTaskSuspend+0x76>
    142c:	89 81       	ldd	r24, Y+1	; 0x01
    142e:	9a 81       	ldd	r25, Y+2	; 0x02
    1430:	fc 01       	movw	r30, r24
    1432:	15 a2       	std	Z+37, r1	; 0x25
    1434:	0f 90       	pop	r0
    1436:	0f be       	out	0x3f, r0	; 63
    1438:	80 91 4e 07 	lds	r24, 0x074E	; 0x80074e <xSchedulerRunning>
    143c:	88 23       	and	r24, r24
    143e:	39 f0       	breq	.+14     	; 0x144e <vTaskSuspend+0x90>
    1440:	0f b6       	in	r0, 0x3f	; 63
    1442:	f8 94       	cli
    1444:	0f 92       	push	r0
    1446:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <prvResetNextTaskUnblockTime>
    144a:	0f 90       	pop	r0
    144c:	0f be       	out	0x3f, r0	; 63
    144e:	80 91 f2 06 	lds	r24, 0x06F2	; 0x8006f2 <pxCurrentTCB>
    1452:	90 91 f3 06 	lds	r25, 0x06F3	; 0x8006f3 <pxCurrentTCB+0x1>
    1456:	29 81       	ldd	r18, Y+1	; 0x01
    1458:	3a 81       	ldd	r19, Y+2	; 0x02
    145a:	28 17       	cp	r18, r24
    145c:	39 07       	cpc	r19, r25
    145e:	a1 f4       	brne	.+40     	; 0x1488 <vTaskSuspend+0xca>
    1460:	80 91 4e 07 	lds	r24, 0x074E	; 0x80074e <xSchedulerRunning>
    1464:	88 23       	and	r24, r24
    1466:	19 f0       	breq	.+6      	; 0x146e <vTaskSuspend+0xb0>
    1468:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <vPortYield>
    146c:	0d c0       	rjmp	.+26     	; 0x1488 <vTaskSuspend+0xca>
    146e:	90 91 41 07 	lds	r25, 0x0741	; 0x800741 <xSuspendedTaskList>
    1472:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <uxCurrentNumberOfTasks>
    1476:	98 17       	cp	r25, r24
    1478:	29 f4       	brne	.+10     	; 0x1484 <vTaskSuspend+0xc6>
    147a:	10 92 f3 06 	sts	0x06F3, r1	; 0x8006f3 <pxCurrentTCB+0x1>
    147e:	10 92 f2 06 	sts	0x06F2, r1	; 0x8006f2 <pxCurrentTCB>
    1482:	02 c0       	rjmp	.+4      	; 0x1488 <vTaskSuspend+0xca>
    1484:	0e 94 12 0c 	call	0x1824	; 0x1824 <vTaskSwitchContext>
    1488:	00 00       	nop
    148a:	0f 90       	pop	r0
    148c:	0f 90       	pop	r0
    148e:	0f 90       	pop	r0
    1490:	0f 90       	pop	r0
    1492:	df 91       	pop	r29
    1494:	cf 91       	pop	r28
    1496:	08 95       	ret

00001498 <vTaskStartScheduler>:
    1498:	ef 92       	push	r14
    149a:	ff 92       	push	r15
    149c:	0f 93       	push	r16
    149e:	cf 93       	push	r28
    14a0:	df 93       	push	r29
    14a2:	1f 92       	push	r1
    14a4:	cd b7       	in	r28, 0x3d	; 61
    14a6:	de b7       	in	r29, 0x3e	; 62
    14a8:	0f 2e       	mov	r0, r31
    14aa:	f5 e5       	ldi	r31, 0x55	; 85
    14ac:	ef 2e       	mov	r14, r31
    14ae:	f7 e0       	ldi	r31, 0x07	; 7
    14b0:	ff 2e       	mov	r15, r31
    14b2:	f0 2d       	mov	r31, r0
    14b4:	00 e0       	ldi	r16, 0x00	; 0
    14b6:	20 e0       	ldi	r18, 0x00	; 0
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	45 e5       	ldi	r20, 0x55	; 85
    14bc:	50 e0       	ldi	r21, 0x00	; 0
    14be:	6e ef       	ldi	r22, 0xFE	; 254
    14c0:	70 e0       	ldi	r23, 0x00	; 0
    14c2:	86 e8       	ldi	r24, 0x86	; 134
    14c4:	9c e0       	ldi	r25, 0x0C	; 12
    14c6:	0e 94 f6 07 	call	0xfec	; 0xfec <xTaskCreate>
    14ca:	89 83       	std	Y+1, r24	; 0x01
    14cc:	89 81       	ldd	r24, Y+1	; 0x01
    14ce:	81 30       	cpi	r24, 0x01	; 1
    14d0:	81 f4       	brne	.+32     	; 0x14f2 <vTaskStartScheduler+0x5a>
    14d2:	f8 94       	cli
    14d4:	8f ef       	ldi	r24, 0xFF	; 255
    14d6:	9f ef       	ldi	r25, 0xFF	; 255
    14d8:	90 93 54 07 	sts	0x0754, r25	; 0x800754 <xNextTaskUnblockTime+0x1>
    14dc:	80 93 53 07 	sts	0x0753, r24	; 0x800753 <xNextTaskUnblockTime>
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	80 93 4e 07 	sts	0x074E, r24	; 0x80074e <xSchedulerRunning>
    14e6:	10 92 4c 07 	sts	0x074C, r1	; 0x80074c <xTickCount+0x1>
    14ea:	10 92 4b 07 	sts	0x074B, r1	; 0x80074b <xTickCount>
    14ee:	0e 94 a3 06 	call	0xd46	; 0xd46 <xPortStartScheduler>
    14f2:	00 00       	nop
    14f4:	0f 90       	pop	r0
    14f6:	df 91       	pop	r29
    14f8:	cf 91       	pop	r28
    14fa:	0f 91       	pop	r16
    14fc:	ff 90       	pop	r15
    14fe:	ef 90       	pop	r14
    1500:	08 95       	ret

00001502 <vTaskSuspendAll>:
    1502:	cf 93       	push	r28
    1504:	df 93       	push	r29
    1506:	cd b7       	in	r28, 0x3d	; 61
    1508:	de b7       	in	r29, 0x3e	; 62
    150a:	80 91 57 07 	lds	r24, 0x0757	; 0x800757 <uxSchedulerSuspended>
    150e:	8f 5f       	subi	r24, 0xFF	; 255
    1510:	80 93 57 07 	sts	0x0757, r24	; 0x800757 <uxSchedulerSuspended>
    1514:	00 00       	nop
    1516:	df 91       	pop	r29
    1518:	cf 91       	pop	r28
    151a:	08 95       	ret

0000151c <xTaskResumeAll>:
    151c:	cf 93       	push	r28
    151e:	df 93       	push	r29
    1520:	00 d0       	rcall	.+0      	; 0x1522 <xTaskResumeAll+0x6>
    1522:	00 d0       	rcall	.+0      	; 0x1524 <xTaskResumeAll+0x8>
    1524:	cd b7       	in	r28, 0x3d	; 61
    1526:	de b7       	in	r29, 0x3e	; 62
    1528:	1a 82       	std	Y+2, r1	; 0x02
    152a:	19 82       	std	Y+1, r1	; 0x01
    152c:	1b 82       	std	Y+3, r1	; 0x03
    152e:	0f b6       	in	r0, 0x3f	; 63
    1530:	f8 94       	cli
    1532:	0f 92       	push	r0
    1534:	80 91 57 07 	lds	r24, 0x0757	; 0x800757 <uxSchedulerSuspended>
    1538:	81 50       	subi	r24, 0x01	; 1
    153a:	80 93 57 07 	sts	0x0757, r24	; 0x800757 <uxSchedulerSuspended>
    153e:	80 91 57 07 	lds	r24, 0x0757	; 0x800757 <uxSchedulerSuspended>
    1542:	88 23       	and	r24, r24
    1544:	09 f0       	breq	.+2      	; 0x1548 <xTaskResumeAll+0x2c>
    1546:	77 c0       	rjmp	.+238    	; 0x1636 <xTaskResumeAll+0x11a>
    1548:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <uxCurrentNumberOfTasks>
    154c:	88 23       	and	r24, r24
    154e:	09 f4       	brne	.+2      	; 0x1552 <xTaskResumeAll+0x36>
    1550:	72 c0       	rjmp	.+228    	; 0x1636 <xTaskResumeAll+0x11a>
    1552:	49 c0       	rjmp	.+146    	; 0x15e6 <xTaskResumeAll+0xca>
    1554:	80 91 33 07 	lds	r24, 0x0733	; 0x800733 <xPendingReadyList+0x5>
    1558:	90 91 34 07 	lds	r25, 0x0734	; 0x800734 <xPendingReadyList+0x6>
    155c:	fc 01       	movw	r30, r24
    155e:	86 81       	ldd	r24, Z+6	; 0x06
    1560:	97 81       	ldd	r25, Z+7	; 0x07
    1562:	9a 83       	std	Y+2, r25	; 0x02
    1564:	89 83       	std	Y+1, r24	; 0x01
    1566:	89 81       	ldd	r24, Y+1	; 0x01
    1568:	9a 81       	ldd	r25, Y+2	; 0x02
    156a:	0c 96       	adiw	r24, 0x0c	; 12
    156c:	0e 94 a3 04 	call	0x946	; 0x946 <uxListRemove>
    1570:	89 81       	ldd	r24, Y+1	; 0x01
    1572:	9a 81       	ldd	r25, Y+2	; 0x02
    1574:	02 96       	adiw	r24, 0x02	; 2
    1576:	0e 94 a3 04 	call	0x946	; 0x946 <uxListRemove>
    157a:	89 81       	ldd	r24, Y+1	; 0x01
    157c:	9a 81       	ldd	r25, Y+2	; 0x02
    157e:	fc 01       	movw	r30, r24
    1580:	96 89       	ldd	r25, Z+22	; 0x16
    1582:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <uxTopReadyPriority>
    1586:	89 17       	cp	r24, r25
    1588:	30 f4       	brcc	.+12     	; 0x1596 <xTaskResumeAll+0x7a>
    158a:	89 81       	ldd	r24, Y+1	; 0x01
    158c:	9a 81       	ldd	r25, Y+2	; 0x02
    158e:	fc 01       	movw	r30, r24
    1590:	86 89       	ldd	r24, Z+22	; 0x16
    1592:	80 93 4d 07 	sts	0x074D, r24	; 0x80074d <uxTopReadyPriority>
    1596:	89 81       	ldd	r24, Y+1	; 0x01
    1598:	9a 81       	ldd	r25, Y+2	; 0x02
    159a:	ac 01       	movw	r20, r24
    159c:	4e 5f       	subi	r20, 0xFE	; 254
    159e:	5f 4f       	sbci	r21, 0xFF	; 255
    15a0:	89 81       	ldd	r24, Y+1	; 0x01
    15a2:	9a 81       	ldd	r25, Y+2	; 0x02
    15a4:	fc 01       	movw	r30, r24
    15a6:	86 89       	ldd	r24, Z+22	; 0x16
    15a8:	28 2f       	mov	r18, r24
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	c9 01       	movw	r24, r18
    15ae:	88 0f       	add	r24, r24
    15b0:	99 1f       	adc	r25, r25
    15b2:	88 0f       	add	r24, r24
    15b4:	99 1f       	adc	r25, r25
    15b6:	88 0f       	add	r24, r24
    15b8:	99 1f       	adc	r25, r25
    15ba:	82 0f       	add	r24, r18
    15bc:	93 1f       	adc	r25, r19
    15be:	8c 50       	subi	r24, 0x0C	; 12
    15c0:	99 4f       	sbci	r25, 0xF9	; 249
    15c2:	ba 01       	movw	r22, r20
    15c4:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <vListInsertEnd>
    15c8:	89 81       	ldd	r24, Y+1	; 0x01
    15ca:	9a 81       	ldd	r25, Y+2	; 0x02
    15cc:	fc 01       	movw	r30, r24
    15ce:	26 89       	ldd	r18, Z+22	; 0x16
    15d0:	80 91 f2 06 	lds	r24, 0x06F2	; 0x8006f2 <pxCurrentTCB>
    15d4:	90 91 f3 06 	lds	r25, 0x06F3	; 0x8006f3 <pxCurrentTCB+0x1>
    15d8:	fc 01       	movw	r30, r24
    15da:	86 89       	ldd	r24, Z+22	; 0x16
    15dc:	28 17       	cp	r18, r24
    15de:	18 f0       	brcs	.+6      	; 0x15e6 <xTaskResumeAll+0xca>
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	80 93 50 07 	sts	0x0750, r24	; 0x800750 <xYieldPending>
    15e6:	80 91 2e 07 	lds	r24, 0x072E	; 0x80072e <xPendingReadyList>
    15ea:	88 23       	and	r24, r24
    15ec:	09 f0       	breq	.+2      	; 0x15f0 <xTaskResumeAll+0xd4>
    15ee:	b2 cf       	rjmp	.-156    	; 0x1554 <xTaskResumeAll+0x38>
    15f0:	89 81       	ldd	r24, Y+1	; 0x01
    15f2:	9a 81       	ldd	r25, Y+2	; 0x02
    15f4:	89 2b       	or	r24, r25
    15f6:	11 f0       	breq	.+4      	; 0x15fc <xTaskResumeAll+0xe0>
    15f8:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <prvResetNextTaskUnblockTime>
    15fc:	80 91 4f 07 	lds	r24, 0x074F	; 0x80074f <uxPendedTicks>
    1600:	8c 83       	std	Y+4, r24	; 0x04
    1602:	8c 81       	ldd	r24, Y+4	; 0x04
    1604:	88 23       	and	r24, r24
    1606:	79 f0       	breq	.+30     	; 0x1626 <xTaskResumeAll+0x10a>
    1608:	0e 94 25 0b 	call	0x164a	; 0x164a <xTaskIncrementTick>
    160c:	88 23       	and	r24, r24
    160e:	19 f0       	breq	.+6      	; 0x1616 <xTaskResumeAll+0xfa>
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	80 93 50 07 	sts	0x0750, r24	; 0x800750 <xYieldPending>
    1616:	8c 81       	ldd	r24, Y+4	; 0x04
    1618:	81 50       	subi	r24, 0x01	; 1
    161a:	8c 83       	std	Y+4, r24	; 0x04
    161c:	8c 81       	ldd	r24, Y+4	; 0x04
    161e:	88 23       	and	r24, r24
    1620:	99 f7       	brne	.-26     	; 0x1608 <xTaskResumeAll+0xec>
    1622:	10 92 4f 07 	sts	0x074F, r1	; 0x80074f <uxPendedTicks>
    1626:	80 91 50 07 	lds	r24, 0x0750	; 0x800750 <xYieldPending>
    162a:	88 23       	and	r24, r24
    162c:	21 f0       	breq	.+8      	; 0x1636 <xTaskResumeAll+0x11a>
    162e:	81 e0       	ldi	r24, 0x01	; 1
    1630:	8b 83       	std	Y+3, r24	; 0x03
    1632:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <vPortYield>
    1636:	0f 90       	pop	r0
    1638:	0f be       	out	0x3f, r0	; 63
    163a:	8b 81       	ldd	r24, Y+3	; 0x03
    163c:	0f 90       	pop	r0
    163e:	0f 90       	pop	r0
    1640:	0f 90       	pop	r0
    1642:	0f 90       	pop	r0
    1644:	df 91       	pop	r29
    1646:	cf 91       	pop	r28
    1648:	08 95       	ret

0000164a <xTaskIncrementTick>:
    164a:	cf 93       	push	r28
    164c:	df 93       	push	r29
    164e:	cd b7       	in	r28, 0x3d	; 61
    1650:	de b7       	in	r29, 0x3e	; 62
    1652:	29 97       	sbiw	r28, 0x09	; 9
    1654:	0f b6       	in	r0, 0x3f	; 63
    1656:	f8 94       	cli
    1658:	de bf       	out	0x3e, r29	; 62
    165a:	0f be       	out	0x3f, r0	; 63
    165c:	cd bf       	out	0x3d, r28	; 61
    165e:	19 82       	std	Y+1, r1	; 0x01
    1660:	80 91 57 07 	lds	r24, 0x0757	; 0x800757 <uxSchedulerSuspended>
    1664:	88 23       	and	r24, r24
    1666:	09 f0       	breq	.+2      	; 0x166a <xTaskIncrementTick+0x20>
    1668:	c8 c0       	rjmp	.+400    	; 0x17fa <xTaskIncrementTick+0x1b0>
    166a:	80 91 4b 07 	lds	r24, 0x074B	; 0x80074b <xTickCount>
    166e:	90 91 4c 07 	lds	r25, 0x074C	; 0x80074c <xTickCount+0x1>
    1672:	01 96       	adiw	r24, 0x01	; 1
    1674:	9b 83       	std	Y+3, r25	; 0x03
    1676:	8a 83       	std	Y+2, r24	; 0x02
    1678:	8a 81       	ldd	r24, Y+2	; 0x02
    167a:	9b 81       	ldd	r25, Y+3	; 0x03
    167c:	90 93 4c 07 	sts	0x074C, r25	; 0x80074c <xTickCount+0x1>
    1680:	80 93 4b 07 	sts	0x074B, r24	; 0x80074b <xTickCount>
    1684:	8a 81       	ldd	r24, Y+2	; 0x02
    1686:	9b 81       	ldd	r25, Y+3	; 0x03
    1688:	89 2b       	or	r24, r25
    168a:	d9 f4       	brne	.+54     	; 0x16c2 <xTaskIncrementTick+0x78>
    168c:	80 91 2a 07 	lds	r24, 0x072A	; 0x80072a <pxDelayedTaskList>
    1690:	90 91 2b 07 	lds	r25, 0x072B	; 0x80072b <pxDelayedTaskList+0x1>
    1694:	9d 83       	std	Y+5, r25	; 0x05
    1696:	8c 83       	std	Y+4, r24	; 0x04
    1698:	80 91 2c 07 	lds	r24, 0x072C	; 0x80072c <pxOverflowDelayedTaskList>
    169c:	90 91 2d 07 	lds	r25, 0x072D	; 0x80072d <pxOverflowDelayedTaskList+0x1>
    16a0:	90 93 2b 07 	sts	0x072B, r25	; 0x80072b <pxDelayedTaskList+0x1>
    16a4:	80 93 2a 07 	sts	0x072A, r24	; 0x80072a <pxDelayedTaskList>
    16a8:	8c 81       	ldd	r24, Y+4	; 0x04
    16aa:	9d 81       	ldd	r25, Y+5	; 0x05
    16ac:	90 93 2d 07 	sts	0x072D, r25	; 0x80072d <pxOverflowDelayedTaskList+0x1>
    16b0:	80 93 2c 07 	sts	0x072C, r24	; 0x80072c <pxOverflowDelayedTaskList>
    16b4:	80 91 51 07 	lds	r24, 0x0751	; 0x800751 <xNumOfOverflows>
    16b8:	8f 5f       	subi	r24, 0xFF	; 255
    16ba:	80 93 51 07 	sts	0x0751, r24	; 0x800751 <xNumOfOverflows>
    16be:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <prvResetNextTaskUnblockTime>
    16c2:	80 91 53 07 	lds	r24, 0x0753	; 0x800753 <xNextTaskUnblockTime>
    16c6:	90 91 54 07 	lds	r25, 0x0754	; 0x800754 <xNextTaskUnblockTime+0x1>
    16ca:	2a 81       	ldd	r18, Y+2	; 0x02
    16cc:	3b 81       	ldd	r19, Y+3	; 0x03
    16ce:	28 17       	cp	r18, r24
    16d0:	39 07       	cpc	r19, r25
    16d2:	08 f4       	brcc	.+2      	; 0x16d6 <xTaskIncrementTick+0x8c>
    16d4:	78 c0       	rjmp	.+240    	; 0x17c6 <xTaskIncrementTick+0x17c>
    16d6:	80 91 2a 07 	lds	r24, 0x072A	; 0x80072a <pxDelayedTaskList>
    16da:	90 91 2b 07 	lds	r25, 0x072B	; 0x80072b <pxDelayedTaskList+0x1>
    16de:	fc 01       	movw	r30, r24
    16e0:	80 81       	ld	r24, Z
    16e2:	88 23       	and	r24, r24
    16e4:	39 f4       	brne	.+14     	; 0x16f4 <xTaskIncrementTick+0xaa>
    16e6:	8f ef       	ldi	r24, 0xFF	; 255
    16e8:	9f ef       	ldi	r25, 0xFF	; 255
    16ea:	90 93 54 07 	sts	0x0754, r25	; 0x800754 <xNextTaskUnblockTime+0x1>
    16ee:	80 93 53 07 	sts	0x0753, r24	; 0x800753 <xNextTaskUnblockTime>
    16f2:	69 c0       	rjmp	.+210    	; 0x17c6 <xTaskIncrementTick+0x17c>
    16f4:	80 91 2a 07 	lds	r24, 0x072A	; 0x80072a <pxDelayedTaskList>
    16f8:	90 91 2b 07 	lds	r25, 0x072B	; 0x80072b <pxDelayedTaskList+0x1>
    16fc:	fc 01       	movw	r30, r24
    16fe:	85 81       	ldd	r24, Z+5	; 0x05
    1700:	96 81       	ldd	r25, Z+6	; 0x06
    1702:	fc 01       	movw	r30, r24
    1704:	86 81       	ldd	r24, Z+6	; 0x06
    1706:	97 81       	ldd	r25, Z+7	; 0x07
    1708:	9f 83       	std	Y+7, r25	; 0x07
    170a:	8e 83       	std	Y+6, r24	; 0x06
    170c:	8e 81       	ldd	r24, Y+6	; 0x06
    170e:	9f 81       	ldd	r25, Y+7	; 0x07
    1710:	fc 01       	movw	r30, r24
    1712:	82 81       	ldd	r24, Z+2	; 0x02
    1714:	93 81       	ldd	r25, Z+3	; 0x03
    1716:	99 87       	std	Y+9, r25	; 0x09
    1718:	88 87       	std	Y+8, r24	; 0x08
    171a:	2a 81       	ldd	r18, Y+2	; 0x02
    171c:	3b 81       	ldd	r19, Y+3	; 0x03
    171e:	88 85       	ldd	r24, Y+8	; 0x08
    1720:	99 85       	ldd	r25, Y+9	; 0x09
    1722:	28 17       	cp	r18, r24
    1724:	39 07       	cpc	r19, r25
    1726:	38 f4       	brcc	.+14     	; 0x1736 <xTaskIncrementTick+0xec>
    1728:	88 85       	ldd	r24, Y+8	; 0x08
    172a:	99 85       	ldd	r25, Y+9	; 0x09
    172c:	90 93 54 07 	sts	0x0754, r25	; 0x800754 <xNextTaskUnblockTime+0x1>
    1730:	80 93 53 07 	sts	0x0753, r24	; 0x800753 <xNextTaskUnblockTime>
    1734:	48 c0       	rjmp	.+144    	; 0x17c6 <xTaskIncrementTick+0x17c>
    1736:	8e 81       	ldd	r24, Y+6	; 0x06
    1738:	9f 81       	ldd	r25, Y+7	; 0x07
    173a:	02 96       	adiw	r24, 0x02	; 2
    173c:	0e 94 a3 04 	call	0x946	; 0x946 <uxListRemove>
    1740:	8e 81       	ldd	r24, Y+6	; 0x06
    1742:	9f 81       	ldd	r25, Y+7	; 0x07
    1744:	fc 01       	movw	r30, r24
    1746:	84 89       	ldd	r24, Z+20	; 0x14
    1748:	95 89       	ldd	r25, Z+21	; 0x15
    174a:	89 2b       	or	r24, r25
    174c:	29 f0       	breq	.+10     	; 0x1758 <xTaskIncrementTick+0x10e>
    174e:	8e 81       	ldd	r24, Y+6	; 0x06
    1750:	9f 81       	ldd	r25, Y+7	; 0x07
    1752:	0c 96       	adiw	r24, 0x0c	; 12
    1754:	0e 94 a3 04 	call	0x946	; 0x946 <uxListRemove>
    1758:	8e 81       	ldd	r24, Y+6	; 0x06
    175a:	9f 81       	ldd	r25, Y+7	; 0x07
    175c:	fc 01       	movw	r30, r24
    175e:	96 89       	ldd	r25, Z+22	; 0x16
    1760:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <uxTopReadyPriority>
    1764:	89 17       	cp	r24, r25
    1766:	30 f4       	brcc	.+12     	; 0x1774 <xTaskIncrementTick+0x12a>
    1768:	8e 81       	ldd	r24, Y+6	; 0x06
    176a:	9f 81       	ldd	r25, Y+7	; 0x07
    176c:	fc 01       	movw	r30, r24
    176e:	86 89       	ldd	r24, Z+22	; 0x16
    1770:	80 93 4d 07 	sts	0x074D, r24	; 0x80074d <uxTopReadyPriority>
    1774:	8e 81       	ldd	r24, Y+6	; 0x06
    1776:	9f 81       	ldd	r25, Y+7	; 0x07
    1778:	ac 01       	movw	r20, r24
    177a:	4e 5f       	subi	r20, 0xFE	; 254
    177c:	5f 4f       	sbci	r21, 0xFF	; 255
    177e:	8e 81       	ldd	r24, Y+6	; 0x06
    1780:	9f 81       	ldd	r25, Y+7	; 0x07
    1782:	fc 01       	movw	r30, r24
    1784:	86 89       	ldd	r24, Z+22	; 0x16
    1786:	28 2f       	mov	r18, r24
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	c9 01       	movw	r24, r18
    178c:	88 0f       	add	r24, r24
    178e:	99 1f       	adc	r25, r25
    1790:	88 0f       	add	r24, r24
    1792:	99 1f       	adc	r25, r25
    1794:	88 0f       	add	r24, r24
    1796:	99 1f       	adc	r25, r25
    1798:	82 0f       	add	r24, r18
    179a:	93 1f       	adc	r25, r19
    179c:	8c 50       	subi	r24, 0x0C	; 12
    179e:	99 4f       	sbci	r25, 0xF9	; 249
    17a0:	ba 01       	movw	r22, r20
    17a2:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <vListInsertEnd>
    17a6:	8e 81       	ldd	r24, Y+6	; 0x06
    17a8:	9f 81       	ldd	r25, Y+7	; 0x07
    17aa:	fc 01       	movw	r30, r24
    17ac:	26 89       	ldd	r18, Z+22	; 0x16
    17ae:	80 91 f2 06 	lds	r24, 0x06F2	; 0x8006f2 <pxCurrentTCB>
    17b2:	90 91 f3 06 	lds	r25, 0x06F3	; 0x8006f3 <pxCurrentTCB+0x1>
    17b6:	fc 01       	movw	r30, r24
    17b8:	86 89       	ldd	r24, Z+22	; 0x16
    17ba:	28 17       	cp	r18, r24
    17bc:	08 f4       	brcc	.+2      	; 0x17c0 <xTaskIncrementTick+0x176>
    17be:	8b cf       	rjmp	.-234    	; 0x16d6 <xTaskIncrementTick+0x8c>
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	89 83       	std	Y+1, r24	; 0x01
    17c4:	88 cf       	rjmp	.-240    	; 0x16d6 <xTaskIncrementTick+0x8c>
    17c6:	80 91 f2 06 	lds	r24, 0x06F2	; 0x8006f2 <pxCurrentTCB>
    17ca:	90 91 f3 06 	lds	r25, 0x06F3	; 0x8006f3 <pxCurrentTCB+0x1>
    17ce:	fc 01       	movw	r30, r24
    17d0:	86 89       	ldd	r24, Z+22	; 0x16
    17d2:	28 2f       	mov	r18, r24
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	c9 01       	movw	r24, r18
    17d8:	88 0f       	add	r24, r24
    17da:	99 1f       	adc	r25, r25
    17dc:	88 0f       	add	r24, r24
    17de:	99 1f       	adc	r25, r25
    17e0:	88 0f       	add	r24, r24
    17e2:	99 1f       	adc	r25, r25
    17e4:	82 0f       	add	r24, r18
    17e6:	93 1f       	adc	r25, r19
    17e8:	8c 50       	subi	r24, 0x0C	; 12
    17ea:	99 4f       	sbci	r25, 0xF9	; 249
    17ec:	fc 01       	movw	r30, r24
    17ee:	80 81       	ld	r24, Z
    17f0:	82 30       	cpi	r24, 0x02	; 2
    17f2:	40 f0       	brcs	.+16     	; 0x1804 <xTaskIncrementTick+0x1ba>
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	89 83       	std	Y+1, r24	; 0x01
    17f8:	05 c0       	rjmp	.+10     	; 0x1804 <xTaskIncrementTick+0x1ba>
    17fa:	80 91 4f 07 	lds	r24, 0x074F	; 0x80074f <uxPendedTicks>
    17fe:	8f 5f       	subi	r24, 0xFF	; 255
    1800:	80 93 4f 07 	sts	0x074F, r24	; 0x80074f <uxPendedTicks>
    1804:	80 91 50 07 	lds	r24, 0x0750	; 0x800750 <xYieldPending>
    1808:	88 23       	and	r24, r24
    180a:	11 f0       	breq	.+4      	; 0x1810 <xTaskIncrementTick+0x1c6>
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	89 83       	std	Y+1, r24	; 0x01
    1810:	89 81       	ldd	r24, Y+1	; 0x01
    1812:	29 96       	adiw	r28, 0x09	; 9
    1814:	0f b6       	in	r0, 0x3f	; 63
    1816:	f8 94       	cli
    1818:	de bf       	out	0x3e, r29	; 62
    181a:	0f be       	out	0x3f, r0	; 63
    181c:	cd bf       	out	0x3d, r28	; 61
    181e:	df 91       	pop	r29
    1820:	cf 91       	pop	r28
    1822:	08 95       	ret

00001824 <vTaskSwitchContext>:
    1824:	cf 93       	push	r28
    1826:	df 93       	push	r29
    1828:	00 d0       	rcall	.+0      	; 0x182a <vTaskSwitchContext+0x6>
    182a:	1f 92       	push	r1
    182c:	cd b7       	in	r28, 0x3d	; 61
    182e:	de b7       	in	r29, 0x3e	; 62
    1830:	80 91 57 07 	lds	r24, 0x0757	; 0x800757 <uxSchedulerSuspended>
    1834:	88 23       	and	r24, r24
    1836:	21 f0       	breq	.+8      	; 0x1840 <vTaskSwitchContext+0x1c>
    1838:	81 e0       	ldi	r24, 0x01	; 1
    183a:	80 93 50 07 	sts	0x0750, r24	; 0x800750 <xYieldPending>
    183e:	5f c0       	rjmp	.+190    	; 0x18fe <vTaskSwitchContext+0xda>
    1840:	10 92 50 07 	sts	0x0750, r1	; 0x800750 <xYieldPending>
    1844:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <uxTopReadyPriority>
    1848:	89 83       	std	Y+1, r24	; 0x01
    184a:	03 c0       	rjmp	.+6      	; 0x1852 <vTaskSwitchContext+0x2e>
    184c:	89 81       	ldd	r24, Y+1	; 0x01
    184e:	81 50       	subi	r24, 0x01	; 1
    1850:	89 83       	std	Y+1, r24	; 0x01
    1852:	89 81       	ldd	r24, Y+1	; 0x01
    1854:	28 2f       	mov	r18, r24
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	c9 01       	movw	r24, r18
    185a:	88 0f       	add	r24, r24
    185c:	99 1f       	adc	r25, r25
    185e:	88 0f       	add	r24, r24
    1860:	99 1f       	adc	r25, r25
    1862:	88 0f       	add	r24, r24
    1864:	99 1f       	adc	r25, r25
    1866:	82 0f       	add	r24, r18
    1868:	93 1f       	adc	r25, r19
    186a:	8c 50       	subi	r24, 0x0C	; 12
    186c:	99 4f       	sbci	r25, 0xF9	; 249
    186e:	fc 01       	movw	r30, r24
    1870:	80 81       	ld	r24, Z
    1872:	88 23       	and	r24, r24
    1874:	59 f3       	breq	.-42     	; 0x184c <vTaskSwitchContext+0x28>
    1876:	89 81       	ldd	r24, Y+1	; 0x01
    1878:	28 2f       	mov	r18, r24
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	c9 01       	movw	r24, r18
    187e:	88 0f       	add	r24, r24
    1880:	99 1f       	adc	r25, r25
    1882:	88 0f       	add	r24, r24
    1884:	99 1f       	adc	r25, r25
    1886:	88 0f       	add	r24, r24
    1888:	99 1f       	adc	r25, r25
    188a:	82 0f       	add	r24, r18
    188c:	93 1f       	adc	r25, r19
    188e:	8c 50       	subi	r24, 0x0C	; 12
    1890:	99 4f       	sbci	r25, 0xF9	; 249
    1892:	9b 83       	std	Y+3, r25	; 0x03
    1894:	8a 83       	std	Y+2, r24	; 0x02
    1896:	8a 81       	ldd	r24, Y+2	; 0x02
    1898:	9b 81       	ldd	r25, Y+3	; 0x03
    189a:	fc 01       	movw	r30, r24
    189c:	81 81       	ldd	r24, Z+1	; 0x01
    189e:	92 81       	ldd	r25, Z+2	; 0x02
    18a0:	fc 01       	movw	r30, r24
    18a2:	22 81       	ldd	r18, Z+2	; 0x02
    18a4:	33 81       	ldd	r19, Z+3	; 0x03
    18a6:	8a 81       	ldd	r24, Y+2	; 0x02
    18a8:	9b 81       	ldd	r25, Y+3	; 0x03
    18aa:	fc 01       	movw	r30, r24
    18ac:	32 83       	std	Z+2, r19	; 0x02
    18ae:	21 83       	std	Z+1, r18	; 0x01
    18b0:	8a 81       	ldd	r24, Y+2	; 0x02
    18b2:	9b 81       	ldd	r25, Y+3	; 0x03
    18b4:	fc 01       	movw	r30, r24
    18b6:	21 81       	ldd	r18, Z+1	; 0x01
    18b8:	32 81       	ldd	r19, Z+2	; 0x02
    18ba:	8a 81       	ldd	r24, Y+2	; 0x02
    18bc:	9b 81       	ldd	r25, Y+3	; 0x03
    18be:	03 96       	adiw	r24, 0x03	; 3
    18c0:	28 17       	cp	r18, r24
    18c2:	39 07       	cpc	r19, r25
    18c4:	69 f4       	brne	.+26     	; 0x18e0 <vTaskSwitchContext+0xbc>
    18c6:	8a 81       	ldd	r24, Y+2	; 0x02
    18c8:	9b 81       	ldd	r25, Y+3	; 0x03
    18ca:	fc 01       	movw	r30, r24
    18cc:	81 81       	ldd	r24, Z+1	; 0x01
    18ce:	92 81       	ldd	r25, Z+2	; 0x02
    18d0:	fc 01       	movw	r30, r24
    18d2:	22 81       	ldd	r18, Z+2	; 0x02
    18d4:	33 81       	ldd	r19, Z+3	; 0x03
    18d6:	8a 81       	ldd	r24, Y+2	; 0x02
    18d8:	9b 81       	ldd	r25, Y+3	; 0x03
    18da:	fc 01       	movw	r30, r24
    18dc:	32 83       	std	Z+2, r19	; 0x02
    18de:	21 83       	std	Z+1, r18	; 0x01
    18e0:	8a 81       	ldd	r24, Y+2	; 0x02
    18e2:	9b 81       	ldd	r25, Y+3	; 0x03
    18e4:	fc 01       	movw	r30, r24
    18e6:	81 81       	ldd	r24, Z+1	; 0x01
    18e8:	92 81       	ldd	r25, Z+2	; 0x02
    18ea:	fc 01       	movw	r30, r24
    18ec:	86 81       	ldd	r24, Z+6	; 0x06
    18ee:	97 81       	ldd	r25, Z+7	; 0x07
    18f0:	90 93 f3 06 	sts	0x06F3, r25	; 0x8006f3 <pxCurrentTCB+0x1>
    18f4:	80 93 f2 06 	sts	0x06F2, r24	; 0x8006f2 <pxCurrentTCB>
    18f8:	89 81       	ldd	r24, Y+1	; 0x01
    18fa:	80 93 4d 07 	sts	0x074D, r24	; 0x80074d <uxTopReadyPriority>
    18fe:	00 00       	nop
    1900:	0f 90       	pop	r0
    1902:	0f 90       	pop	r0
    1904:	0f 90       	pop	r0
    1906:	df 91       	pop	r29
    1908:	cf 91       	pop	r28
    190a:	08 95       	ret

0000190c <prvIdleTask>:
    190c:	cf 93       	push	r28
    190e:	df 93       	push	r29
    1910:	00 d0       	rcall	.+0      	; 0x1912 <prvIdleTask+0x6>
    1912:	cd b7       	in	r28, 0x3d	; 61
    1914:	de b7       	in	r29, 0x3e	; 62
    1916:	9a 83       	std	Y+2, r25	; 0x02
    1918:	89 83       	std	Y+1, r24	; 0x01
    191a:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <prvCheckTasksWaitingTermination>
    191e:	fd cf       	rjmp	.-6      	; 0x191a <prvIdleTask+0xe>

00001920 <prvInitialiseTaskLists>:
    1920:	cf 93       	push	r28
    1922:	df 93       	push	r29
    1924:	1f 92       	push	r1
    1926:	cd b7       	in	r28, 0x3d	; 61
    1928:	de b7       	in	r29, 0x3e	; 62
    192a:	19 82       	std	Y+1, r1	; 0x01
    192c:	13 c0       	rjmp	.+38     	; 0x1954 <prvInitialiseTaskLists+0x34>
    192e:	89 81       	ldd	r24, Y+1	; 0x01
    1930:	28 2f       	mov	r18, r24
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	c9 01       	movw	r24, r18
    1936:	88 0f       	add	r24, r24
    1938:	99 1f       	adc	r25, r25
    193a:	88 0f       	add	r24, r24
    193c:	99 1f       	adc	r25, r25
    193e:	88 0f       	add	r24, r24
    1940:	99 1f       	adc	r25, r25
    1942:	82 0f       	add	r24, r18
    1944:	93 1f       	adc	r25, r19
    1946:	8c 50       	subi	r24, 0x0C	; 12
    1948:	99 4f       	sbci	r25, 0xF9	; 249
    194a:	0e 94 94 03 	call	0x728	; 0x728 <vListInitialise>
    194e:	89 81       	ldd	r24, Y+1	; 0x01
    1950:	8f 5f       	subi	r24, 0xFF	; 255
    1952:	89 83       	std	Y+1, r24	; 0x01
    1954:	89 81       	ldd	r24, Y+1	; 0x01
    1956:	84 30       	cpi	r24, 0x04	; 4
    1958:	50 f3       	brcs	.-44     	; 0x192e <prvInitialiseTaskLists+0xe>
    195a:	88 e1       	ldi	r24, 0x18	; 24
    195c:	97 e0       	ldi	r25, 0x07	; 7
    195e:	0e 94 94 03 	call	0x728	; 0x728 <vListInitialise>
    1962:	81 e2       	ldi	r24, 0x21	; 33
    1964:	97 e0       	ldi	r25, 0x07	; 7
    1966:	0e 94 94 03 	call	0x728	; 0x728 <vListInitialise>
    196a:	8e e2       	ldi	r24, 0x2E	; 46
    196c:	97 e0       	ldi	r25, 0x07	; 7
    196e:	0e 94 94 03 	call	0x728	; 0x728 <vListInitialise>
    1972:	87 e3       	ldi	r24, 0x37	; 55
    1974:	97 e0       	ldi	r25, 0x07	; 7
    1976:	0e 94 94 03 	call	0x728	; 0x728 <vListInitialise>
    197a:	81 e4       	ldi	r24, 0x41	; 65
    197c:	97 e0       	ldi	r25, 0x07	; 7
    197e:	0e 94 94 03 	call	0x728	; 0x728 <vListInitialise>
    1982:	88 e1       	ldi	r24, 0x18	; 24
    1984:	97 e0       	ldi	r25, 0x07	; 7
    1986:	90 93 2b 07 	sts	0x072B, r25	; 0x80072b <pxDelayedTaskList+0x1>
    198a:	80 93 2a 07 	sts	0x072A, r24	; 0x80072a <pxDelayedTaskList>
    198e:	81 e2       	ldi	r24, 0x21	; 33
    1990:	97 e0       	ldi	r25, 0x07	; 7
    1992:	90 93 2d 07 	sts	0x072D, r25	; 0x80072d <pxOverflowDelayedTaskList+0x1>
    1996:	80 93 2c 07 	sts	0x072C, r24	; 0x80072c <pxOverflowDelayedTaskList>
    199a:	00 00       	nop
    199c:	0f 90       	pop	r0
    199e:	df 91       	pop	r29
    19a0:	cf 91       	pop	r28
    19a2:	08 95       	ret

000019a4 <prvCheckTasksWaitingTermination>:
    19a4:	cf 93       	push	r28
    19a6:	df 93       	push	r29
    19a8:	00 d0       	rcall	.+0      	; 0x19aa <prvCheckTasksWaitingTermination+0x6>
    19aa:	cd b7       	in	r28, 0x3d	; 61
    19ac:	de b7       	in	r29, 0x3e	; 62
    19ae:	21 c0       	rjmp	.+66     	; 0x19f2 <prvCheckTasksWaitingTermination+0x4e>
    19b0:	0f b6       	in	r0, 0x3f	; 63
    19b2:	f8 94       	cli
    19b4:	0f 92       	push	r0
    19b6:	80 91 3c 07 	lds	r24, 0x073C	; 0x80073c <xTasksWaitingTermination+0x5>
    19ba:	90 91 3d 07 	lds	r25, 0x073D	; 0x80073d <xTasksWaitingTermination+0x6>
    19be:	fc 01       	movw	r30, r24
    19c0:	86 81       	ldd	r24, Z+6	; 0x06
    19c2:	97 81       	ldd	r25, Z+7	; 0x07
    19c4:	9a 83       	std	Y+2, r25	; 0x02
    19c6:	89 83       	std	Y+1, r24	; 0x01
    19c8:	89 81       	ldd	r24, Y+1	; 0x01
    19ca:	9a 81       	ldd	r25, Y+2	; 0x02
    19cc:	02 96       	adiw	r24, 0x02	; 2
    19ce:	0e 94 a3 04 	call	0x946	; 0x946 <uxListRemove>
    19d2:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <uxCurrentNumberOfTasks>
    19d6:	81 50       	subi	r24, 0x01	; 1
    19d8:	80 93 4a 07 	sts	0x074A, r24	; 0x80074a <uxCurrentNumberOfTasks>
    19dc:	80 91 40 07 	lds	r24, 0x0740	; 0x800740 <uxDeletedTasksWaitingCleanUp>
    19e0:	81 50       	subi	r24, 0x01	; 1
    19e2:	80 93 40 07 	sts	0x0740, r24	; 0x800740 <uxDeletedTasksWaitingCleanUp>
    19e6:	0f 90       	pop	r0
    19e8:	0f be       	out	0x3f, r0	; 63
    19ea:	89 81       	ldd	r24, Y+1	; 0x01
    19ec:	9a 81       	ldd	r25, Y+2	; 0x02
    19ee:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <prvDeleteTCB>
    19f2:	80 91 40 07 	lds	r24, 0x0740	; 0x800740 <uxDeletedTasksWaitingCleanUp>
    19f6:	88 23       	and	r24, r24
    19f8:	d9 f6       	brne	.-74     	; 0x19b0 <prvCheckTasksWaitingTermination+0xc>
    19fa:	00 00       	nop
    19fc:	0f 90       	pop	r0
    19fe:	0f 90       	pop	r0
    1a00:	df 91       	pop	r29
    1a02:	cf 91       	pop	r28
    1a04:	08 95       	ret

00001a06 <prvDeleteTCB>:
    1a06:	cf 93       	push	r28
    1a08:	df 93       	push	r29
    1a0a:	00 d0       	rcall	.+0      	; 0x1a0c <prvDeleteTCB+0x6>
    1a0c:	cd b7       	in	r28, 0x3d	; 61
    1a0e:	de b7       	in	r29, 0x3e	; 62
    1a10:	9a 83       	std	Y+2, r25	; 0x02
    1a12:	89 83       	std	Y+1, r24	; 0x01
    1a14:	89 81       	ldd	r24, Y+1	; 0x01
    1a16:	9a 81       	ldd	r25, Y+2	; 0x02
    1a18:	fc 01       	movw	r30, r24
    1a1a:	87 89       	ldd	r24, Z+23	; 0x17
    1a1c:	90 8d       	ldd	r25, Z+24	; 0x18
    1a1e:	0e 94 87 03 	call	0x70e	; 0x70e <vPortFree>
    1a22:	89 81       	ldd	r24, Y+1	; 0x01
    1a24:	9a 81       	ldd	r25, Y+2	; 0x02
    1a26:	0e 94 87 03 	call	0x70e	; 0x70e <vPortFree>
    1a2a:	00 00       	nop
    1a2c:	0f 90       	pop	r0
    1a2e:	0f 90       	pop	r0
    1a30:	df 91       	pop	r29
    1a32:	cf 91       	pop	r28
    1a34:	08 95       	ret

00001a36 <prvResetNextTaskUnblockTime>:
    1a36:	cf 93       	push	r28
    1a38:	df 93       	push	r29
    1a3a:	00 d0       	rcall	.+0      	; 0x1a3c <prvResetNextTaskUnblockTime+0x6>
    1a3c:	cd b7       	in	r28, 0x3d	; 61
    1a3e:	de b7       	in	r29, 0x3e	; 62
    1a40:	80 91 2a 07 	lds	r24, 0x072A	; 0x80072a <pxDelayedTaskList>
    1a44:	90 91 2b 07 	lds	r25, 0x072B	; 0x80072b <pxDelayedTaskList+0x1>
    1a48:	fc 01       	movw	r30, r24
    1a4a:	80 81       	ld	r24, Z
    1a4c:	88 23       	and	r24, r24
    1a4e:	39 f4       	brne	.+14     	; 0x1a5e <prvResetNextTaskUnblockTime+0x28>
    1a50:	8f ef       	ldi	r24, 0xFF	; 255
    1a52:	9f ef       	ldi	r25, 0xFF	; 255
    1a54:	90 93 54 07 	sts	0x0754, r25	; 0x800754 <xNextTaskUnblockTime+0x1>
    1a58:	80 93 53 07 	sts	0x0753, r24	; 0x800753 <xNextTaskUnblockTime>
    1a5c:	15 c0       	rjmp	.+42     	; 0x1a88 <prvResetNextTaskUnblockTime+0x52>
    1a5e:	80 91 2a 07 	lds	r24, 0x072A	; 0x80072a <pxDelayedTaskList>
    1a62:	90 91 2b 07 	lds	r25, 0x072B	; 0x80072b <pxDelayedTaskList+0x1>
    1a66:	fc 01       	movw	r30, r24
    1a68:	85 81       	ldd	r24, Z+5	; 0x05
    1a6a:	96 81       	ldd	r25, Z+6	; 0x06
    1a6c:	fc 01       	movw	r30, r24
    1a6e:	86 81       	ldd	r24, Z+6	; 0x06
    1a70:	97 81       	ldd	r25, Z+7	; 0x07
    1a72:	9a 83       	std	Y+2, r25	; 0x02
    1a74:	89 83       	std	Y+1, r24	; 0x01
    1a76:	89 81       	ldd	r24, Y+1	; 0x01
    1a78:	9a 81       	ldd	r25, Y+2	; 0x02
    1a7a:	fc 01       	movw	r30, r24
    1a7c:	82 81       	ldd	r24, Z+2	; 0x02
    1a7e:	93 81       	ldd	r25, Z+3	; 0x03
    1a80:	90 93 54 07 	sts	0x0754, r25	; 0x800754 <xNextTaskUnblockTime+0x1>
    1a84:	80 93 53 07 	sts	0x0753, r24	; 0x800753 <xNextTaskUnblockTime>
    1a88:	00 00       	nop
    1a8a:	0f 90       	pop	r0
    1a8c:	0f 90       	pop	r0
    1a8e:	df 91       	pop	r29
    1a90:	cf 91       	pop	r28
    1a92:	08 95       	ret

00001a94 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    1a94:	cf 93       	push	r28
    1a96:	df 93       	push	r29
    1a98:	cd b7       	in	r28, 0x3d	; 61
    1a9a:	de b7       	in	r29, 0x3e	; 62
    1a9c:	27 97       	sbiw	r28, 0x07	; 7
    1a9e:	0f b6       	in	r0, 0x3f	; 63
    1aa0:	f8 94       	cli
    1aa2:	de bf       	out	0x3e, r29	; 62
    1aa4:	0f be       	out	0x3f, r0	; 63
    1aa6:	cd bf       	out	0x3d, r28	; 61
    1aa8:	9e 83       	std	Y+6, r25	; 0x06
    1aaa:	8d 83       	std	Y+5, r24	; 0x05
    1aac:	6f 83       	std	Y+7, r22	; 0x07
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    1aae:	80 91 4b 07 	lds	r24, 0x074B	; 0x80074b <xTickCount>
    1ab2:	90 91 4c 07 	lds	r25, 0x074C	; 0x80074c <xTickCount+0x1>
    1ab6:	9a 83       	std	Y+2, r25	; 0x02
    1ab8:	89 83       	std	Y+1, r24	; 0x01
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    1aba:	80 91 f2 06 	lds	r24, 0x06F2	; 0x8006f2 <pxCurrentTCB>
    1abe:	90 91 f3 06 	lds	r25, 0x06F3	; 0x8006f3 <pxCurrentTCB+0x1>
    1ac2:	02 96       	adiw	r24, 0x02	; 2
    1ac4:	0e 94 a3 04 	call	0x946	; 0x946 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    1ac8:	8d 81       	ldd	r24, Y+5	; 0x05
    1aca:	9e 81       	ldd	r25, Y+6	; 0x06
    1acc:	01 96       	adiw	r24, 0x01	; 1
    1ace:	71 f4       	brne	.+28     	; 0x1aec <prvAddCurrentTaskToDelayedList+0x58>
    1ad0:	8f 81       	ldd	r24, Y+7	; 0x07
    1ad2:	88 23       	and	r24, r24
    1ad4:	59 f0       	breq	.+22     	; 0x1aec <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    1ad6:	80 91 f2 06 	lds	r24, 0x06F2	; 0x8006f2 <pxCurrentTCB>
    1ada:	90 91 f3 06 	lds	r25, 0x06F3	; 0x8006f3 <pxCurrentTCB+0x1>
    1ade:	02 96       	adiw	r24, 0x02	; 2
    1ae0:	bc 01       	movw	r22, r24
    1ae2:	81 e4       	ldi	r24, 0x41	; 65
    1ae4:	97 e0       	ldi	r25, 0x07	; 7
    1ae6:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    1aea:	44 c0       	rjmp	.+136    	; 0x1b74 <prvAddCurrentTaskToDelayedList+0xe0>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    1aec:	29 81       	ldd	r18, Y+1	; 0x01
    1aee:	3a 81       	ldd	r19, Y+2	; 0x02
    1af0:	8d 81       	ldd	r24, Y+5	; 0x05
    1af2:	9e 81       	ldd	r25, Y+6	; 0x06
    1af4:	82 0f       	add	r24, r18
    1af6:	93 1f       	adc	r25, r19
    1af8:	9c 83       	std	Y+4, r25	; 0x04
    1afa:	8b 83       	std	Y+3, r24	; 0x03

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    1afc:	80 91 f2 06 	lds	r24, 0x06F2	; 0x8006f2 <pxCurrentTCB>
    1b00:	90 91 f3 06 	lds	r25, 0x06F3	; 0x8006f3 <pxCurrentTCB+0x1>
    1b04:	2b 81       	ldd	r18, Y+3	; 0x03
    1b06:	3c 81       	ldd	r19, Y+4	; 0x04
    1b08:	fc 01       	movw	r30, r24
    1b0a:	33 83       	std	Z+3, r19	; 0x03
    1b0c:	22 83       	std	Z+2, r18	; 0x02

			if( xTimeToWake < xConstTickCount )
    1b0e:	2b 81       	ldd	r18, Y+3	; 0x03
    1b10:	3c 81       	ldd	r19, Y+4	; 0x04
    1b12:	89 81       	ldd	r24, Y+1	; 0x01
    1b14:	9a 81       	ldd	r25, Y+2	; 0x02
    1b16:	28 17       	cp	r18, r24
    1b18:	39 07       	cpc	r19, r25
    1b1a:	78 f4       	brcc	.+30     	; 0x1b3a <prvAddCurrentTaskToDelayedList+0xa6>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    1b1c:	80 91 f2 06 	lds	r24, 0x06F2	; 0x8006f2 <pxCurrentTCB>
    1b20:	90 91 f3 06 	lds	r25, 0x06F3	; 0x8006f3 <pxCurrentTCB+0x1>
    1b24:	9c 01       	movw	r18, r24
    1b26:	2e 5f       	subi	r18, 0xFE	; 254
    1b28:	3f 4f       	sbci	r19, 0xFF	; 255
    1b2a:	80 91 2c 07 	lds	r24, 0x072C	; 0x80072c <pxOverflowDelayedTaskList>
    1b2e:	90 91 2d 07 	lds	r25, 0x072D	; 0x80072d <pxOverflowDelayedTaskList+0x1>
    1b32:	b9 01       	movw	r22, r18
    1b34:	0e 94 2b 04 	call	0x856	; 0x856 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    1b38:	1d c0       	rjmp	.+58     	; 0x1b74 <prvAddCurrentTaskToDelayedList+0xe0>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    1b3a:	80 91 f2 06 	lds	r24, 0x06F2	; 0x8006f2 <pxCurrentTCB>
    1b3e:	90 91 f3 06 	lds	r25, 0x06F3	; 0x8006f3 <pxCurrentTCB+0x1>
    1b42:	9c 01       	movw	r18, r24
    1b44:	2e 5f       	subi	r18, 0xFE	; 254
    1b46:	3f 4f       	sbci	r19, 0xFF	; 255
    1b48:	80 91 2a 07 	lds	r24, 0x072A	; 0x80072a <pxDelayedTaskList>
    1b4c:	90 91 2b 07 	lds	r25, 0x072B	; 0x80072b <pxDelayedTaskList+0x1>
    1b50:	b9 01       	movw	r22, r18
    1b52:	0e 94 2b 04 	call	0x856	; 0x856 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
    1b56:	80 91 53 07 	lds	r24, 0x0753	; 0x800753 <xNextTaskUnblockTime>
    1b5a:	90 91 54 07 	lds	r25, 0x0754	; 0x800754 <xNextTaskUnblockTime+0x1>
    1b5e:	2b 81       	ldd	r18, Y+3	; 0x03
    1b60:	3c 81       	ldd	r19, Y+4	; 0x04
    1b62:	28 17       	cp	r18, r24
    1b64:	39 07       	cpc	r19, r25
    1b66:	30 f4       	brcc	.+12     	; 0x1b74 <prvAddCurrentTaskToDelayedList+0xe0>
				{
					xNextTaskUnblockTime = xTimeToWake;
    1b68:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b6c:	90 93 54 07 	sts	0x0754, r25	; 0x800754 <xNextTaskUnblockTime+0x1>
    1b70:	80 93 53 07 	sts	0x0753, r24	; 0x800753 <xNextTaskUnblockTime>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    1b74:	00 00       	nop
    1b76:	27 96       	adiw	r28, 0x07	; 7
    1b78:	0f b6       	in	r0, 0x3f	; 63
    1b7a:	f8 94       	cli
    1b7c:	de bf       	out	0x3e, r29	; 62
    1b7e:	0f be       	out	0x3f, r0	; 63
    1b80:	cd bf       	out	0x3d, r28	; 61
    1b82:	df 91       	pop	r29
    1b84:	cf 91       	pop	r28
    1b86:	08 95       	ret

00001b88 <Gpio_PortDirection>:
		case MYPORTD :
		result = PIN_D;
		break;
	}
	return result;
}
    1b88:	cf 93       	push	r28
    1b8a:	df 93       	push	r29
    1b8c:	00 d0       	rcall	.+0      	; 0x1b8e <Gpio_PortDirection+0x6>
    1b8e:	cd b7       	in	r28, 0x3d	; 61
    1b90:	de b7       	in	r29, 0x3e	; 62
    1b92:	89 83       	std	Y+1, r24	; 0x01
    1b94:	6a 83       	std	Y+2, r22	; 0x02
    1b96:	89 81       	ldd	r24, Y+1	; 0x01
    1b98:	88 2f       	mov	r24, r24
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	81 30       	cpi	r24, 0x01	; 1
    1b9e:	91 05       	cpc	r25, r1
    1ba0:	91 f0       	breq	.+36     	; 0x1bc6 <Gpio_PortDirection+0x3e>
    1ba2:	82 30       	cpi	r24, 0x02	; 2
    1ba4:	91 05       	cpc	r25, r1
    1ba6:	1c f4       	brge	.+6      	; 0x1bae <Gpio_PortDirection+0x26>
    1ba8:	89 2b       	or	r24, r25
    1baa:	39 f0       	breq	.+14     	; 0x1bba <Gpio_PortDirection+0x32>
    1bac:	1e c0       	rjmp	.+60     	; 0x1bea <Gpio_PortDirection+0x62>
    1bae:	82 30       	cpi	r24, 0x02	; 2
    1bb0:	91 05       	cpc	r25, r1
    1bb2:	79 f0       	breq	.+30     	; 0x1bd2 <Gpio_PortDirection+0x4a>
    1bb4:	03 97       	sbiw	r24, 0x03	; 3
    1bb6:	99 f0       	breq	.+38     	; 0x1bde <Gpio_PortDirection+0x56>
    1bb8:	18 c0       	rjmp	.+48     	; 0x1bea <Gpio_PortDirection+0x62>
    1bba:	8a e3       	ldi	r24, 0x3A	; 58
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	2a 81       	ldd	r18, Y+2	; 0x02
    1bc0:	fc 01       	movw	r30, r24
    1bc2:	20 83       	st	Z, r18
    1bc4:	12 c0       	rjmp	.+36     	; 0x1bea <Gpio_PortDirection+0x62>
    1bc6:	87 e3       	ldi	r24, 0x37	; 55
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	2a 81       	ldd	r18, Y+2	; 0x02
    1bcc:	fc 01       	movw	r30, r24
    1bce:	20 83       	st	Z, r18
    1bd0:	0c c0       	rjmp	.+24     	; 0x1bea <Gpio_PortDirection+0x62>
    1bd2:	84 e3       	ldi	r24, 0x34	; 52
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	2a 81       	ldd	r18, Y+2	; 0x02
    1bd8:	fc 01       	movw	r30, r24
    1bda:	20 83       	st	Z, r18
    1bdc:	06 c0       	rjmp	.+12     	; 0x1bea <Gpio_PortDirection+0x62>
    1bde:	81 e3       	ldi	r24, 0x31	; 49
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	2a 81       	ldd	r18, Y+2	; 0x02
    1be4:	fc 01       	movw	r30, r24
    1be6:	20 83       	st	Z, r18
    1be8:	00 00       	nop
    1bea:	00 00       	nop
    1bec:	0f 90       	pop	r0
    1bee:	0f 90       	pop	r0
    1bf0:	df 91       	pop	r29
    1bf2:	cf 91       	pop	r28
    1bf4:	08 95       	ret

00001bf6 <Gpio_PinDirection>:
 * @param pins : the pin Number {BIT0,BIT1,BIT2,BIT3,BIT4,BIT5,BIT6,BIT7}
 * @param direction : The Direction of the PIN >> {SET_IN , SET_OUT}
 * Return : void
 */
void Gpio_PinDirection(uint8 port, uint8 pins, uint8 direction)
{
    1bf6:	cf 93       	push	r28
    1bf8:	df 93       	push	r29
    1bfa:	00 d0       	rcall	.+0      	; 0x1bfc <Gpio_PinDirection+0x6>
    1bfc:	1f 92       	push	r1
    1bfe:	cd b7       	in	r28, 0x3d	; 61
    1c00:	de b7       	in	r29, 0x3e	; 62
    1c02:	89 83       	std	Y+1, r24	; 0x01
    1c04:	6a 83       	std	Y+2, r22	; 0x02
    1c06:	4b 83       	std	Y+3, r20	; 0x03
	switch(port)
    1c08:	89 81       	ldd	r24, Y+1	; 0x01
    1c0a:	88 2f       	mov	r24, r24
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	81 30       	cpi	r24, 0x01	; 1
    1c10:	91 05       	cpc	r25, r1
    1c12:	81 f1       	breq	.+96     	; 0x1c74 <Gpio_PinDirection+0x7e>
    1c14:	82 30       	cpi	r24, 0x02	; 2
    1c16:	91 05       	cpc	r25, r1
    1c18:	1c f4       	brge	.+6      	; 0x1c20 <Gpio_PinDirection+0x2a>
    1c1a:	89 2b       	or	r24, r25
    1c1c:	49 f0       	breq	.+18     	; 0x1c30 <Gpio_PinDirection+0x3a>
				break;
			}
		}
		break;
	}
}
    1c1e:	90 c0       	rjmp	.+288    	; 0x1d40 <Gpio_PinDirection+0x14a>
 * @param direction : The Direction of the PIN >> {SET_IN , SET_OUT}
 * Return : void
 */
void Gpio_PinDirection(uint8 port, uint8 pins, uint8 direction)
{
	switch(port)
    1c20:	82 30       	cpi	r24, 0x02	; 2
    1c22:	91 05       	cpc	r25, r1
    1c24:	09 f4       	brne	.+2      	; 0x1c28 <Gpio_PinDirection+0x32>
    1c26:	48 c0       	rjmp	.+144    	; 0x1cb8 <Gpio_PinDirection+0xc2>
    1c28:	03 97       	sbiw	r24, 0x03	; 3
    1c2a:	09 f4       	brne	.+2      	; 0x1c2e <Gpio_PinDirection+0x38>
    1c2c:	67 c0       	rjmp	.+206    	; 0x1cfc <Gpio_PinDirection+0x106>
				break;
			}
		}
		break;
	}
}
    1c2e:	88 c0       	rjmp	.+272    	; 0x1d40 <Gpio_PinDirection+0x14a>
{
	switch(port)
	{
		case MYPORTA :
		{
		switch(direction)
    1c30:	8b 81       	ldd	r24, Y+3	; 0x03
    1c32:	88 2f       	mov	r24, r24
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	00 97       	sbiw	r24, 0x00	; 0
    1c38:	21 f0       	breq	.+8      	; 0x1c42 <Gpio_PinDirection+0x4c>
    1c3a:	8f 3f       	cpi	r24, 0xFF	; 255
    1c3c:	91 05       	cpc	r25, r1
    1c3e:	71 f0       	breq	.+28     	; 0x1c5c <Gpio_PinDirection+0x66>
		case SET_OUT : 
		DDR_A |= (pins);
		break;
		}
		}
		break;
    1c40:	7f c0       	rjmp	.+254    	; 0x1d40 <Gpio_PinDirection+0x14a>
		case MYPORTA :
		{
		switch(direction)
		{
		case SET_IN : 
		DDR_A &= ~(pins);
    1c42:	8a e3       	ldi	r24, 0x3A	; 58
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	2a e3       	ldi	r18, 0x3A	; 58
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	f9 01       	movw	r30, r18
    1c4c:	20 81       	ld	r18, Z
    1c4e:	32 2f       	mov	r19, r18
    1c50:	2a 81       	ldd	r18, Y+2	; 0x02
    1c52:	20 95       	com	r18
    1c54:	23 23       	and	r18, r19
    1c56:	fc 01       	movw	r30, r24
    1c58:	20 83       	st	Z, r18
		break;
    1c5a:	0b c0       	rjmp	.+22     	; 0x1c72 <Gpio_PinDirection+0x7c>
		case SET_OUT : 
		DDR_A |= (pins);
    1c5c:	8a e3       	ldi	r24, 0x3A	; 58
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	2a e3       	ldi	r18, 0x3A	; 58
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	f9 01       	movw	r30, r18
    1c66:	30 81       	ld	r19, Z
    1c68:	2a 81       	ldd	r18, Y+2	; 0x02
    1c6a:	23 2b       	or	r18, r19
    1c6c:	fc 01       	movw	r30, r24
    1c6e:	20 83       	st	Z, r18
		break;
    1c70:	00 00       	nop
		}
		}
		break;
    1c72:	66 c0       	rjmp	.+204    	; 0x1d40 <Gpio_PinDirection+0x14a>
		
		case MYPORTB :
		{
		switch(direction)
    1c74:	8b 81       	ldd	r24, Y+3	; 0x03
    1c76:	88 2f       	mov	r24, r24
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	00 97       	sbiw	r24, 0x00	; 0
    1c7c:	21 f0       	breq	.+8      	; 0x1c86 <Gpio_PinDirection+0x90>
    1c7e:	8f 3f       	cpi	r24, 0xFF	; 255
    1c80:	91 05       	cpc	r25, r1
    1c82:	71 f0       	breq	.+28     	; 0x1ca0 <Gpio_PinDirection+0xaa>
		case SET_OUT :
			DDR_B |= (pins);
			break;
		}
		}
		break;
    1c84:	5d c0       	rjmp	.+186    	; 0x1d40 <Gpio_PinDirection+0x14a>
		case MYPORTB :
		{
		switch(direction)
		{
		case SET_IN :
			DDR_B &= ~(pins);
    1c86:	87 e3       	ldi	r24, 0x37	; 55
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	27 e3       	ldi	r18, 0x37	; 55
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	f9 01       	movw	r30, r18
    1c90:	20 81       	ld	r18, Z
    1c92:	32 2f       	mov	r19, r18
    1c94:	2a 81       	ldd	r18, Y+2	; 0x02
    1c96:	20 95       	com	r18
    1c98:	23 23       	and	r18, r19
    1c9a:	fc 01       	movw	r30, r24
    1c9c:	20 83       	st	Z, r18
			break;
    1c9e:	0b c0       	rjmp	.+22     	; 0x1cb6 <Gpio_PinDirection+0xc0>
		case SET_OUT :
			DDR_B |= (pins);
    1ca0:	87 e3       	ldi	r24, 0x37	; 55
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	27 e3       	ldi	r18, 0x37	; 55
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	f9 01       	movw	r30, r18
    1caa:	30 81       	ld	r19, Z
    1cac:	2a 81       	ldd	r18, Y+2	; 0x02
    1cae:	23 2b       	or	r18, r19
    1cb0:	fc 01       	movw	r30, r24
    1cb2:	20 83       	st	Z, r18
			break;
    1cb4:	00 00       	nop
		}
		}
		break;
    1cb6:	44 c0       	rjmp	.+136    	; 0x1d40 <Gpio_PinDirection+0x14a>
		case MYPORTC :
		{
			switch(direction)
    1cb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cba:	88 2f       	mov	r24, r24
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	00 97       	sbiw	r24, 0x00	; 0
    1cc0:	21 f0       	breq	.+8      	; 0x1cca <Gpio_PinDirection+0xd4>
    1cc2:	8f 3f       	cpi	r24, 0xFF	; 255
    1cc4:	91 05       	cpc	r25, r1
    1cc6:	71 f0       	breq	.+28     	; 0x1ce4 <Gpio_PinDirection+0xee>
				case SET_OUT :
				DDR_C |= (pins);
				break;
			}
		}
		break;
    1cc8:	3b c0       	rjmp	.+118    	; 0x1d40 <Gpio_PinDirection+0x14a>
		case MYPORTC :
		{
			switch(direction)
			{
				case SET_IN :
				DDR_C &= ~(pins);
    1cca:	84 e3       	ldi	r24, 0x34	; 52
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	24 e3       	ldi	r18, 0x34	; 52
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	f9 01       	movw	r30, r18
    1cd4:	20 81       	ld	r18, Z
    1cd6:	32 2f       	mov	r19, r18
    1cd8:	2a 81       	ldd	r18, Y+2	; 0x02
    1cda:	20 95       	com	r18
    1cdc:	23 23       	and	r18, r19
    1cde:	fc 01       	movw	r30, r24
    1ce0:	20 83       	st	Z, r18
				break;
    1ce2:	0b c0       	rjmp	.+22     	; 0x1cfa <Gpio_PinDirection+0x104>
				case SET_OUT :
				DDR_C |= (pins);
    1ce4:	84 e3       	ldi	r24, 0x34	; 52
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	24 e3       	ldi	r18, 0x34	; 52
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	f9 01       	movw	r30, r18
    1cee:	30 81       	ld	r19, Z
    1cf0:	2a 81       	ldd	r18, Y+2	; 0x02
    1cf2:	23 2b       	or	r18, r19
    1cf4:	fc 01       	movw	r30, r24
    1cf6:	20 83       	st	Z, r18
				break;
    1cf8:	00 00       	nop
			}
		}
		break;
    1cfa:	22 c0       	rjmp	.+68     	; 0x1d40 <Gpio_PinDirection+0x14a>
		case MYPORTD :
		{
			switch(direction)
    1cfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfe:	88 2f       	mov	r24, r24
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	00 97       	sbiw	r24, 0x00	; 0
    1d04:	21 f0       	breq	.+8      	; 0x1d0e <Gpio_PinDirection+0x118>
    1d06:	8f 3f       	cpi	r24, 0xFF	; 255
    1d08:	91 05       	cpc	r25, r1
    1d0a:	71 f0       	breq	.+28     	; 0x1d28 <Gpio_PinDirection+0x132>
				case SET_OUT :
				DDR_D |= (pins);
				break;
			}
		}
		break;
    1d0c:	18 c0       	rjmp	.+48     	; 0x1d3e <Gpio_PinDirection+0x148>
		case MYPORTD :
		{
			switch(direction)
			{
				case SET_IN :
				DDR_D &= ~(pins);
    1d0e:	81 e3       	ldi	r24, 0x31	; 49
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	21 e3       	ldi	r18, 0x31	; 49
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	f9 01       	movw	r30, r18
    1d18:	20 81       	ld	r18, Z
    1d1a:	32 2f       	mov	r19, r18
    1d1c:	2a 81       	ldd	r18, Y+2	; 0x02
    1d1e:	20 95       	com	r18
    1d20:	23 23       	and	r18, r19
    1d22:	fc 01       	movw	r30, r24
    1d24:	20 83       	st	Z, r18
				break;
    1d26:	0b c0       	rjmp	.+22     	; 0x1d3e <Gpio_PinDirection+0x148>
				case SET_OUT :
				DDR_D |= (pins);
    1d28:	81 e3       	ldi	r24, 0x31	; 49
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	21 e3       	ldi	r18, 0x31	; 49
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	f9 01       	movw	r30, r18
    1d32:	30 81       	ld	r19, Z
    1d34:	2a 81       	ldd	r18, Y+2	; 0x02
    1d36:	23 2b       	or	r18, r19
    1d38:	fc 01       	movw	r30, r24
    1d3a:	20 83       	st	Z, r18
				break;
    1d3c:	00 00       	nop
			}
		}
		break;
    1d3e:	00 00       	nop
	}
}
    1d40:	00 00       	nop
    1d42:	0f 90       	pop	r0
    1d44:	0f 90       	pop	r0
    1d46:	0f 90       	pop	r0
    1d48:	df 91       	pop	r29
    1d4a:	cf 91       	pop	r28
    1d4c:	08 95       	ret

00001d4e <Gpio_PinWrite>:
 * @param pins : the pin Number {BIT0,BIT1,BIT2,BIT3,BIT4,BIT5,BIT6,BIT7}
 * @param value : The value of the PIN >> {HIGH , LOW}
 * Return : void
 */
void Gpio_PinWrite(uint8 port, uint8 pins, uint8 value)
{
    1d4e:	cf 93       	push	r28
    1d50:	df 93       	push	r29
    1d52:	00 d0       	rcall	.+0      	; 0x1d54 <Gpio_PinWrite+0x6>
    1d54:	1f 92       	push	r1
    1d56:	cd b7       	in	r28, 0x3d	; 61
    1d58:	de b7       	in	r29, 0x3e	; 62
    1d5a:	89 83       	std	Y+1, r24	; 0x01
    1d5c:	6a 83       	std	Y+2, r22	; 0x02
    1d5e:	4b 83       	std	Y+3, r20	; 0x03
	switch(value)
    1d60:	8b 81       	ldd	r24, Y+3	; 0x03
    1d62:	88 2f       	mov	r24, r24
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	00 97       	sbiw	r24, 0x00	; 0
    1d68:	09 f4       	brne	.+2      	; 0x1d6c <Gpio_PinWrite+0x1e>
    1d6a:	42 c0       	rjmp	.+132    	; 0x1df0 <Gpio_PinWrite+0xa2>
    1d6c:	01 97       	sbiw	r24, 0x01	; 1
    1d6e:	09 f0       	breq	.+2      	; 0x1d72 <Gpio_PinWrite+0x24>
			PORT_D &= ~(pins);
			break;
		}
		break;	
	}
}
    1d70:	86 c0       	rjmp	.+268    	; 0x1e7e <Gpio_PinWrite+0x130>
void Gpio_PinWrite(uint8 port, uint8 pins, uint8 value)
{
	switch(value)
	{
		case HIGH:
			switch(port)
    1d72:	89 81       	ldd	r24, Y+1	; 0x01
    1d74:	88 2f       	mov	r24, r24
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	81 30       	cpi	r24, 0x01	; 1
    1d7a:	91 05       	cpc	r25, r1
    1d7c:	b9 f0       	breq	.+46     	; 0x1dac <Gpio_PinWrite+0x5e>
    1d7e:	82 30       	cpi	r24, 0x02	; 2
    1d80:	91 05       	cpc	r25, r1
    1d82:	1c f4       	brge	.+6      	; 0x1d8a <Gpio_PinWrite+0x3c>
    1d84:	89 2b       	or	r24, r25
    1d86:	39 f0       	breq	.+14     	; 0x1d96 <Gpio_PinWrite+0x48>
						break;
					case MYPORTD :
						PORT_D |= (pins);
						break;
		}
		break;
    1d88:	7a c0       	rjmp	.+244    	; 0x1e7e <Gpio_PinWrite+0x130>
void Gpio_PinWrite(uint8 port, uint8 pins, uint8 value)
{
	switch(value)
	{
		case HIGH:
			switch(port)
    1d8a:	82 30       	cpi	r24, 0x02	; 2
    1d8c:	91 05       	cpc	r25, r1
    1d8e:	c9 f0       	breq	.+50     	; 0x1dc2 <Gpio_PinWrite+0x74>
    1d90:	03 97       	sbiw	r24, 0x03	; 3
    1d92:	11 f1       	breq	.+68     	; 0x1dd8 <Gpio_PinWrite+0x8a>
						break;
					case MYPORTD :
						PORT_D |= (pins);
						break;
		}
		break;
    1d94:	74 c0       	rjmp	.+232    	; 0x1e7e <Gpio_PinWrite+0x130>
	{
		case HIGH:
			switch(port)
			{
					case MYPORTA :
						PORT_A |= (pins);
    1d96:	8b e3       	ldi	r24, 0x3B	; 59
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	2b e3       	ldi	r18, 0x3B	; 59
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	f9 01       	movw	r30, r18
    1da0:	30 81       	ld	r19, Z
    1da2:	2a 81       	ldd	r18, Y+2	; 0x02
    1da4:	23 2b       	or	r18, r19
    1da6:	fc 01       	movw	r30, r24
    1da8:	20 83       	st	Z, r18
						break;
    1daa:	21 c0       	rjmp	.+66     	; 0x1dee <Gpio_PinWrite+0xa0>
					case MYPORTB :
						PORT_B |= (pins);
    1dac:	88 e3       	ldi	r24, 0x38	; 56
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	28 e3       	ldi	r18, 0x38	; 56
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	f9 01       	movw	r30, r18
    1db6:	30 81       	ld	r19, Z
    1db8:	2a 81       	ldd	r18, Y+2	; 0x02
    1dba:	23 2b       	or	r18, r19
    1dbc:	fc 01       	movw	r30, r24
    1dbe:	20 83       	st	Z, r18
						break;
    1dc0:	16 c0       	rjmp	.+44     	; 0x1dee <Gpio_PinWrite+0xa0>
					case MYPORTC :
						PORT_C |= (pins);
    1dc2:	85 e3       	ldi	r24, 0x35	; 53
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	25 e3       	ldi	r18, 0x35	; 53
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	f9 01       	movw	r30, r18
    1dcc:	30 81       	ld	r19, Z
    1dce:	2a 81       	ldd	r18, Y+2	; 0x02
    1dd0:	23 2b       	or	r18, r19
    1dd2:	fc 01       	movw	r30, r24
    1dd4:	20 83       	st	Z, r18
						break;
    1dd6:	0b c0       	rjmp	.+22     	; 0x1dee <Gpio_PinWrite+0xa0>
					case MYPORTD :
						PORT_D |= (pins);
    1dd8:	82 e3       	ldi	r24, 0x32	; 50
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	22 e3       	ldi	r18, 0x32	; 50
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	f9 01       	movw	r30, r18
    1de2:	30 81       	ld	r19, Z
    1de4:	2a 81       	ldd	r18, Y+2	; 0x02
    1de6:	23 2b       	or	r18, r19
    1de8:	fc 01       	movw	r30, r24
    1dea:	20 83       	st	Z, r18
						break;
    1dec:	00 00       	nop
		}
		break;
    1dee:	47 c0       	rjmp	.+142    	; 0x1e7e <Gpio_PinWrite+0x130>
		
		case LOW : 
		switch(port)
    1df0:	89 81       	ldd	r24, Y+1	; 0x01
    1df2:	88 2f       	mov	r24, r24
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	81 30       	cpi	r24, 0x01	; 1
    1df8:	91 05       	cpc	r25, r1
    1dfa:	c9 f0       	breq	.+50     	; 0x1e2e <Gpio_PinWrite+0xe0>
    1dfc:	82 30       	cpi	r24, 0x02	; 2
    1dfe:	91 05       	cpc	r25, r1
    1e00:	1c f4       	brge	.+6      	; 0x1e08 <Gpio_PinWrite+0xba>
    1e02:	89 2b       	or	r24, r25
    1e04:	39 f0       	breq	.+14     	; 0x1e14 <Gpio_PinWrite+0xc6>
			break;
			case MYPORTD :
			PORT_D &= ~(pins);
			break;
		}
		break;	
    1e06:	3a c0       	rjmp	.+116    	; 0x1e7c <Gpio_PinWrite+0x12e>
						break;
		}
		break;
		
		case LOW : 
		switch(port)
    1e08:	82 30       	cpi	r24, 0x02	; 2
    1e0a:	91 05       	cpc	r25, r1
    1e0c:	e9 f0       	breq	.+58     	; 0x1e48 <Gpio_PinWrite+0xfa>
    1e0e:	03 97       	sbiw	r24, 0x03	; 3
    1e10:	41 f1       	breq	.+80     	; 0x1e62 <Gpio_PinWrite+0x114>
			break;
			case MYPORTD :
			PORT_D &= ~(pins);
			break;
		}
		break;	
    1e12:	34 c0       	rjmp	.+104    	; 0x1e7c <Gpio_PinWrite+0x12e>
		
		case LOW : 
		switch(port)
		{
			case MYPORTA :
			PORT_A &= ~(pins);
    1e14:	8b e3       	ldi	r24, 0x3B	; 59
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	2b e3       	ldi	r18, 0x3B	; 59
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	f9 01       	movw	r30, r18
    1e1e:	20 81       	ld	r18, Z
    1e20:	32 2f       	mov	r19, r18
    1e22:	2a 81       	ldd	r18, Y+2	; 0x02
    1e24:	20 95       	com	r18
    1e26:	23 23       	and	r18, r19
    1e28:	fc 01       	movw	r30, r24
    1e2a:	20 83       	st	Z, r18
			break;
    1e2c:	27 c0       	rjmp	.+78     	; 0x1e7c <Gpio_PinWrite+0x12e>
			case MYPORTB :
			PORT_B &= ~(pins);
    1e2e:	88 e3       	ldi	r24, 0x38	; 56
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	28 e3       	ldi	r18, 0x38	; 56
    1e34:	30 e0       	ldi	r19, 0x00	; 0
    1e36:	f9 01       	movw	r30, r18
    1e38:	20 81       	ld	r18, Z
    1e3a:	32 2f       	mov	r19, r18
    1e3c:	2a 81       	ldd	r18, Y+2	; 0x02
    1e3e:	20 95       	com	r18
    1e40:	23 23       	and	r18, r19
    1e42:	fc 01       	movw	r30, r24
    1e44:	20 83       	st	Z, r18
			break;
    1e46:	1a c0       	rjmp	.+52     	; 0x1e7c <Gpio_PinWrite+0x12e>
			case MYPORTC :
			PORT_C &= ~(pins);
    1e48:	85 e3       	ldi	r24, 0x35	; 53
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	25 e3       	ldi	r18, 0x35	; 53
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	f9 01       	movw	r30, r18
    1e52:	20 81       	ld	r18, Z
    1e54:	32 2f       	mov	r19, r18
    1e56:	2a 81       	ldd	r18, Y+2	; 0x02
    1e58:	20 95       	com	r18
    1e5a:	23 23       	and	r18, r19
    1e5c:	fc 01       	movw	r30, r24
    1e5e:	20 83       	st	Z, r18
			break;
    1e60:	0d c0       	rjmp	.+26     	; 0x1e7c <Gpio_PinWrite+0x12e>
			case MYPORTD :
			PORT_D &= ~(pins);
    1e62:	82 e3       	ldi	r24, 0x32	; 50
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	22 e3       	ldi	r18, 0x32	; 50
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	f9 01       	movw	r30, r18
    1e6c:	20 81       	ld	r18, Z
    1e6e:	32 2f       	mov	r19, r18
    1e70:	2a 81       	ldd	r18, Y+2	; 0x02
    1e72:	20 95       	com	r18
    1e74:	23 23       	and	r18, r19
    1e76:	fc 01       	movw	r30, r24
    1e78:	20 83       	st	Z, r18
			break;
    1e7a:	00 00       	nop
		}
		break;	
    1e7c:	00 00       	nop
	}
}
    1e7e:	00 00       	nop
    1e80:	0f 90       	pop	r0
    1e82:	0f 90       	pop	r0
    1e84:	0f 90       	pop	r0
    1e86:	df 91       	pop	r29
    1e88:	cf 91       	pop	r28
    1e8a:	08 95       	ret

00001e8c <Gpio_PinToggle>:
 * @param port : the port that includes the pin {MYPORTA,MYPORTB,MYPORTC,MYPORTD}
 * @param pins : the pin Number {BIT0,BIT1,BIT2,BIT3,BIT4,BIT5,BIT6,BIT7}
 * Return : void
 */
void Gpio_PinToggle(uint8 port, uint8 pins)
{
    1e8c:	cf 93       	push	r28
    1e8e:	df 93       	push	r29
    1e90:	00 d0       	rcall	.+0      	; 0x1e92 <Gpio_PinToggle+0x6>
    1e92:	cd b7       	in	r28, 0x3d	; 61
    1e94:	de b7       	in	r29, 0x3e	; 62
    1e96:	89 83       	std	Y+1, r24	; 0x01
    1e98:	6a 83       	std	Y+2, r22	; 0x02
	switch(port)
    1e9a:	89 81       	ldd	r24, Y+1	; 0x01
    1e9c:	88 2f       	mov	r24, r24
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	81 30       	cpi	r24, 0x01	; 1
    1ea2:	91 05       	cpc	r25, r1
    1ea4:	b9 f0       	breq	.+46     	; 0x1ed4 <Gpio_PinToggle+0x48>
    1ea6:	82 30       	cpi	r24, 0x02	; 2
    1ea8:	91 05       	cpc	r25, r1
    1eaa:	1c f4       	brge	.+6      	; 0x1eb2 <Gpio_PinToggle+0x26>
    1eac:	89 2b       	or	r24, r25
    1eae:	39 f0       	breq	.+14     	; 0x1ebe <Gpio_PinToggle+0x32>
		break;
		case MYPORTD :
		PORT_D ^= (pins);
		break;
	}
}
    1eb0:	32 c0       	rjmp	.+100    	; 0x1f16 <Gpio_PinToggle+0x8a>
 * @param pins : the pin Number {BIT0,BIT1,BIT2,BIT3,BIT4,BIT5,BIT6,BIT7}
 * Return : void
 */
void Gpio_PinToggle(uint8 port, uint8 pins)
{
	switch(port)
    1eb2:	82 30       	cpi	r24, 0x02	; 2
    1eb4:	91 05       	cpc	r25, r1
    1eb6:	c9 f0       	breq	.+50     	; 0x1eea <Gpio_PinToggle+0x5e>
    1eb8:	03 97       	sbiw	r24, 0x03	; 3
    1eba:	11 f1       	breq	.+68     	; 0x1f00 <Gpio_PinToggle+0x74>
		break;
		case MYPORTD :
		PORT_D ^= (pins);
		break;
	}
}
    1ebc:	2c c0       	rjmp	.+88     	; 0x1f16 <Gpio_PinToggle+0x8a>
void Gpio_PinToggle(uint8 port, uint8 pins)
{
	switch(port)
	{
		case MYPORTA :
		PORT_A ^= (pins);
    1ebe:	8b e3       	ldi	r24, 0x3B	; 59
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	2b e3       	ldi	r18, 0x3B	; 59
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	f9 01       	movw	r30, r18
    1ec8:	30 81       	ld	r19, Z
    1eca:	2a 81       	ldd	r18, Y+2	; 0x02
    1ecc:	23 27       	eor	r18, r19
    1ece:	fc 01       	movw	r30, r24
    1ed0:	20 83       	st	Z, r18
		break;
    1ed2:	21 c0       	rjmp	.+66     	; 0x1f16 <Gpio_PinToggle+0x8a>
		case MYPORTB :
		PORT_B ^= (pins);
    1ed4:	88 e3       	ldi	r24, 0x38	; 56
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	28 e3       	ldi	r18, 0x38	; 56
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	f9 01       	movw	r30, r18
    1ede:	30 81       	ld	r19, Z
    1ee0:	2a 81       	ldd	r18, Y+2	; 0x02
    1ee2:	23 27       	eor	r18, r19
    1ee4:	fc 01       	movw	r30, r24
    1ee6:	20 83       	st	Z, r18
		break;
    1ee8:	16 c0       	rjmp	.+44     	; 0x1f16 <Gpio_PinToggle+0x8a>
		case MYPORTC :
		PORT_C ^= (pins);
    1eea:	85 e3       	ldi	r24, 0x35	; 53
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	25 e3       	ldi	r18, 0x35	; 53
    1ef0:	30 e0       	ldi	r19, 0x00	; 0
    1ef2:	f9 01       	movw	r30, r18
    1ef4:	30 81       	ld	r19, Z
    1ef6:	2a 81       	ldd	r18, Y+2	; 0x02
    1ef8:	23 27       	eor	r18, r19
    1efa:	fc 01       	movw	r30, r24
    1efc:	20 83       	st	Z, r18
		break;
    1efe:	0b c0       	rjmp	.+22     	; 0x1f16 <Gpio_PinToggle+0x8a>
		case MYPORTD :
		PORT_D ^= (pins);
    1f00:	82 e3       	ldi	r24, 0x32	; 50
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	22 e3       	ldi	r18, 0x32	; 50
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	f9 01       	movw	r30, r18
    1f0a:	30 81       	ld	r19, Z
    1f0c:	2a 81       	ldd	r18, Y+2	; 0x02
    1f0e:	23 27       	eor	r18, r19
    1f10:	fc 01       	movw	r30, r24
    1f12:	20 83       	st	Z, r18
		break;
    1f14:	00 00       	nop
	}
}
    1f16:	00 00       	nop
    1f18:	0f 90       	pop	r0
    1f1a:	0f 90       	pop	r0
    1f1c:	df 91       	pop	r29
    1f1e:	cf 91       	pop	r28
    1f20:	08 95       	ret

00001f22 <_exit>:
    1f22:	f8 94       	cli

00001f24 <__stop_program>:
    1f24:	ff cf       	rjmp	.-2      	; 0x1f24 <__stop_program>
