
Sprint1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ad4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005e  00800060  00002ad4  00002b68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000661  008000be  008000be  00002bc6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002bc6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002bf8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000488  00000000  00000000  00002c34  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000033a7  00000000  00000000  000030bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001044  00000000  00000000  00006463  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003529  00000000  00000000  000074a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000f30  00000000  00000000  0000a9d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000018c9  00000000  00000000  0000b900  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001f29  00000000  00000000  0000d1c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003c8  00000000  00000000  0000f0f2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 5d 0b 	jmp	0x16ba	; 0x16ba <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ed       	ldi	r30, 0xD4	; 212
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ae 3b       	cpi	r26, 0xBE	; 190
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	27 e0       	ldi	r18, 0x07	; 7
      78:	ae eb       	ldi	r26, 0xBE	; 190
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 31       	cpi	r26, 0x1F	; 31
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b9 01 	call	0x372	; 0x372 <main>
      8a:	0c 94 68 15 	jmp	0x2ad0	; 0x2ad0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Init_Task>:
 * Description: This Task is used to Init the System
 * @param port : input parameter to the Task
 * Return : void
 */
void Init_Task(void* pvParameters)
{
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	00 d0       	rcall	.+0      	; 0x98 <Init_Task+0x6>
      98:	cd b7       	in	r28, 0x3d	; 61
      9a:	de b7       	in	r29, 0x3e	; 62
      9c:	9a 83       	std	Y+2, r25	; 0x02
      9e:	89 83       	std	Y+1, r24	; 0x01
	/* AtMaskCarriert to create the event group. */
    xCreatedEventGroup = xEventGroupCreate();
      a0:	0e 94 8c 04 	call	0x918	; 0x918 <xEventGroupCreate>
      a4:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <xCreatedEventGroup+0x1>
      a8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <xCreatedEventGroup>
    {
        /* The event group was created. */
    }
	
	/* Suspend all other tasks before initializing */
	vTaskSuspend(Display_Handle);
      ac:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <Display_Handle>
      b0:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <Display_Handle+0x1>
      b4:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <vTaskSuspend>
	vTaskSuspend(PB0_Handle);
      b8:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <PB0_Handle>
      bc:	90 91 c3 00 	lds	r25, 0x00C3	; 0x8000c3 <PB0_Handle+0x1>
      c0:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <vTaskSuspend>
	
	/* initializing the Leds */
	Led_Init(LED0);
      c4:	80 e1       	ldi	r24, 0x10	; 16
      c6:	0e 94 61 03 	call	0x6c2	; 0x6c2 <Led_Init>
	Led_Init(LED1);
      ca:	80 e2       	ldi	r24, 0x20	; 32
      cc:	0e 94 61 03 	call	0x6c2	; 0x6c2 <Led_Init>
	Led_Init(LED2);
      d0:	80 e4       	ldi	r24, 0x40	; 64
      d2:	0e 94 61 03 	call	0x6c2	; 0x6c2 <Led_Init>
	
	/* initializing the pushButtons */
	pushButton_Init(PUSH_BUTTON0);
      d6:	80 e1       	ldi	r24, 0x10	; 16
      d8:	90 e0       	ldi	r25, 0x00	; 0
      da:	0e 94 17 04 	call	0x82e	; 0x82e <pushButton_Init>
	
	/* initializing the Seven Segment */
	SSD_Init_BCD(ssd1);
      de:	80 e0       	ldi	r24, 0x00	; 0
      e0:	0e 94 29 04 	call	0x852	; 0x852 <SSD_Init_BCD>
	
	/* initializing the LCD */
	LCD_Init();
      e4:	0e 94 75 02 	call	0x4ea	; 0x4ea <LCD_Init>

	/* Resume all other tasks before initializing */
	vTaskResume(Display_Handle);
      e8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <Display_Handle>
      ec:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <Display_Handle+0x1>
      f0:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <vTaskResume>
	vTaskResume(PB0_Handle);
      f4:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <PB0_Handle>
      f8:	90 91 c3 00 	lds	r25, 0x00C3	; 0x8000c3 <PB0_Handle+0x1>
      fc:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <vTaskResume>

	/* Suspend the Init Task */
	vTaskSuspend(Init_Task_Handle);
     100:	80 91 be 00 	lds	r24, 0x00BE	; 0x8000be <__data_end>
     104:	90 91 bf 00 	lds	r25, 0x00BF	; 0x8000bf <__data_end+0x1>
     108:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <vTaskSuspend>
	
	while(TRUE){}
     10c:	ff cf       	rjmp	.-2      	; 0x10c <Init_Task+0x7a>

0000010e <Display_Task>:
 * Description: This Task is used to Display String of Characters on the LCD
 * @param port : input parameter to the Task
 * Return : void
 */
void Display_Task(void* pvParameters)
{
     10e:	0f 93       	push	r16
     110:	1f 93       	push	r17
     112:	cf 93       	push	r28
     114:	df 93       	push	r29
     116:	cd b7       	in	r28, 0x3d	; 61
     118:	de b7       	in	r29, 0x3e	; 62
     11a:	65 97       	sbiw	r28, 0x15	; 21
     11c:	0f b6       	in	r0, 0x3f	; 63
     11e:	f8 94       	cli
     120:	de bf       	out	0x3e, r29	; 62
     122:	0f be       	out	0x3f, r0	; 63
     124:	cd bf       	out	0x3d, r28	; 61
     126:	9d 8b       	std	Y+21, r25	; 0x15
     128:	8c 8b       	std	Y+20, r24	; 0x14
	uint8 row = FIRST_ROW,col = FIRST_COLUMN;
     12a:	19 82       	std	Y+1, r1	; 0x01
     12c:	1a 82       	std	Y+2, r1	; 0x02
	uint8 Number_Passward[ARRAY_SIZE]		= {1,2,3,3,2};
     12e:	85 e0       	ldi	r24, 0x05	; 5
     130:	ea e8       	ldi	r30, 0x8A	; 138
     132:	f0 e0       	ldi	r31, 0x00	; 0
     134:	de 01       	movw	r26, r28
     136:	1a 96       	adiw	r26, 0x0a	; 10
     138:	01 90       	ld	r0, Z+
     13a:	0d 92       	st	X+, r0
     13c:	8a 95       	dec	r24
     13e:	e1 f7       	brne	.-8      	; 0x138 <Display_Task+0x2a>
	uint8 Number_LCD[ARRAY_SIZE]			= {INITIAL_ZERO};
     140:	25 e0       	ldi	r18, 0x05	; 5
     142:	ce 01       	movw	r24, r28
     144:	0f 96       	adiw	r24, 0x0f	; 15
     146:	fc 01       	movw	r30, r24
     148:	32 2f       	mov	r19, r18
     14a:	11 92       	st	Z+, r1
     14c:	3a 95       	dec	r19
     14e:	e9 f7       	brne	.-6      	; 0x14a <Display_Task+0x3c>
	uint8 Number_Index						= INITIAL_ZERO;
     150:	1b 82       	std	Y+3, r1	; 0x03
	uint8 Number_SSD						= INITIAL_ZERO;
     152:	1c 82       	std	Y+4, r1	; 0x04
	uint8 Success_Password					= FALSE;	
     154:	1d 82       	std	Y+5, r1	; 0x05
	EventBits_t uxBits						= FALSE;
     156:	1f 82       	std	Y+7, r1	; 0x07
     158:	1e 82       	std	Y+6, r1	; 0x06
	const TickType_t xTicksToWait			= TICK_TO_WAIT / portTICK_PERIOD_MS;
     15a:	84 e6       	ldi	r24, 0x64	; 100
     15c:	90 e0       	ldi	r25, 0x00	; 0
     15e:	99 87       	std	Y+9, r25	; 0x09
     160:	88 87       	std	Y+8, r24	; 0x08

	while(TRUE)
	{
		/* Wait a maximum of 100ms for either bit 0 or bit 4 to be set within
		the event group.  Clear the bits before exiting. */
		uxBits = xEventGroupWaitBits(
     162:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <xCreatedEventGroup>
     166:	90 91 c5 00 	lds	r25, 0x00C5	; 0x8000c5 <xCreatedEventGroup+0x1>
     16a:	28 85       	ldd	r18, Y+8	; 0x08
     16c:	39 85       	ldd	r19, Y+9	; 0x09
     16e:	89 01       	movw	r16, r18
     170:	20 e0       	ldi	r18, 0x00	; 0
     172:	41 e0       	ldi	r20, 0x01	; 1
     174:	67 e0       	ldi	r22, 0x07	; 7
     176:	70 e0       	ldi	r23, 0x00	; 0
     178:	0e 94 ac 04 	call	0x958	; 0x958 <xEventGroupWaitBits>
     17c:	9f 83       	std	Y+7, r25	; 0x07
     17e:	8e 83       	std	Y+6, r24	; 0x06
				( SHORT_PRESSING_BIT | LONG_PRESSING_BIT | LONG_LONG_PRESSING_BIT ),	/* The bits within the event group to wait for. */
				pdTRUE,					/* BITs should be cleared before returning. */
				pdFALSE,			    /* Don't wait for both bits, either bit will do. */
				xTicksToWait );		    /* Wait a maximum of 100ms for either bit to be set. */
		
		if( ( uxBits & ( SHORT_PRESSING_BIT | LONG_PRESSING_BIT | LONG_LONG_PRESSING_BIT ) ) == ( SHORT_PRESSING_BIT | LONG_PRESSING_BIT | LONG_LONG_PRESSING_BIT ) )
     180:	8e 81       	ldd	r24, Y+6	; 0x06
     182:	9f 81       	ldd	r25, Y+7	; 0x07
     184:	87 70       	andi	r24, 0x07	; 7
     186:	99 27       	eor	r25, r25
     188:	07 97       	sbiw	r24, 0x07	; 7
     18a:	09 f0       	breq	.+2      	; 0x18e <Display_Task+0x80>
     18c:	5e c0       	rjmp	.+188    	; 0x24a <Display_Task+0x13c>
		{
			for(Number_Index = INITIAL_ZERO ; Number_Index < ARRAY_SIZE ; Number_Index++)
     18e:	1b 82       	std	Y+3, r1	; 0x03
     190:	1e c0       	rjmp	.+60     	; 0x1ce <Display_Task+0xc0>
			{
				if (Number_LCD[Number_Index] == Number_Passward[Number_Index])
     192:	8b 81       	ldd	r24, Y+3	; 0x03
     194:	88 2f       	mov	r24, r24
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	9e 01       	movw	r18, r28
     19a:	21 5f       	subi	r18, 0xF1	; 241
     19c:	3f 4f       	sbci	r19, 0xFF	; 255
     19e:	82 0f       	add	r24, r18
     1a0:	93 1f       	adc	r25, r19
     1a2:	fc 01       	movw	r30, r24
     1a4:	40 81       	ld	r20, Z
     1a6:	8b 81       	ldd	r24, Y+3	; 0x03
     1a8:	88 2f       	mov	r24, r24
     1aa:	90 e0       	ldi	r25, 0x00	; 0
     1ac:	9e 01       	movw	r18, r28
     1ae:	26 5f       	subi	r18, 0xF6	; 246
     1b0:	3f 4f       	sbci	r19, 0xFF	; 255
     1b2:	82 0f       	add	r24, r18
     1b4:	93 1f       	adc	r25, r19
     1b6:	fc 01       	movw	r30, r24
     1b8:	80 81       	ld	r24, Z
     1ba:	48 17       	cp	r20, r24
     1bc:	19 f4       	brne	.+6      	; 0x1c4 <Display_Task+0xb6>
				{
					Success_Password = TRUE;
     1be:	81 e0       	ldi	r24, 0x01	; 1
     1c0:	8d 83       	std	Y+5, r24	; 0x05
     1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <Display_Task+0xba>
				}
				else
				{
					Success_Password = FALSE;
     1c4:	1d 82       	std	Y+5, r1	; 0x05
					break;
     1c6:	06 c0       	rjmp	.+12     	; 0x1d4 <Display_Task+0xc6>
				pdFALSE,			    /* Don't wait for both bits, either bit will do. */
				xTicksToWait );		    /* Wait a maximum of 100ms for either bit to be set. */
		
		if( ( uxBits & ( SHORT_PRESSING_BIT | LONG_PRESSING_BIT | LONG_LONG_PRESSING_BIT ) ) == ( SHORT_PRESSING_BIT | LONG_PRESSING_BIT | LONG_LONG_PRESSING_BIT ) )
		{
			for(Number_Index = INITIAL_ZERO ; Number_Index < ARRAY_SIZE ; Number_Index++)
     1c8:	8b 81       	ldd	r24, Y+3	; 0x03
     1ca:	8f 5f       	subi	r24, 0xFF	; 255
     1cc:	8b 83       	std	Y+3, r24	; 0x03
     1ce:	8b 81       	ldd	r24, Y+3	; 0x03
     1d0:	85 30       	cpi	r24, 0x05	; 5
     1d2:	f8 f2       	brcs	.-66     	; 0x192 <Display_Task+0x84>
				{
					Success_Password = FALSE;
					break;
				}
			}
			if (Success_Password)
     1d4:	8d 81       	ldd	r24, Y+5	; 0x05
     1d6:	88 23       	and	r24, r24
     1d8:	a9 f0       	breq	.+42     	; 0x204 <Display_Task+0xf6>
			{
				LCD_GotoRowColumn(FIRST_ROW,FIRST_COLUMN);
     1da:	60 e0       	ldi	r22, 0x00	; 0
     1dc:	80 e0       	ldi	r24, 0x00	; 0
     1de:	0e 94 4a 03 	call	0x694	; 0x694 <LCD_GotoRowColumn>
				LCD_DisplayString("Correct Password!!!");
     1e2:	80 e6       	ldi	r24, 0x60	; 96
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	0e 94 11 03 	call	0x622	; 0x622 <LCD_DisplayString>
				Led_On(LED0);
     1ea:	80 e1       	ldi	r24, 0x10	; 16
     1ec:	0e 94 ab 03 	call	0x756	; 0x756 <Led_On>
				vTaskDelay(TASK_DELAY_CORRECT_ENTER_VALUE);
     1f0:	80 ed       	ldi	r24, 0xD0	; 208
     1f2:	97 e0       	ldi	r25, 0x07	; 7
     1f4:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <vTaskDelay>
				Led_Off(LED0);
     1f8:	80 e1       	ldi	r24, 0x10	; 16
     1fa:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <Led_Off>
				LCD_Clear();
     1fe:	0e 94 3f 03 	call	0x67e	; 0x67e <LCD_Clear>
     202:	14 c0       	rjmp	.+40     	; 0x22c <Display_Task+0x11e>
			}
			else
			{
				LCD_GotoRowColumn(FIRST_ROW,FIRST_COLUMN);
     204:	60 e0       	ldi	r22, 0x00	; 0
     206:	80 e0       	ldi	r24, 0x00	; 0
     208:	0e 94 4a 03 	call	0x694	; 0x694 <LCD_GotoRowColumn>
				LCD_DisplayString("Incorrect Password!!!");
     20c:	84 e7       	ldi	r24, 0x74	; 116
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	0e 94 11 03 	call	0x622	; 0x622 <LCD_DisplayString>
				Led_On(LED1);
     214:	80 e2       	ldi	r24, 0x20	; 32
     216:	0e 94 ab 03 	call	0x756	; 0x756 <Led_On>

				vTaskDelay(TASK_DELAY_INCORRECT_ENTER_VALUE);
     21a:	88 eb       	ldi	r24, 0xB8	; 184
     21c:	9b e0       	ldi	r25, 0x0B	; 11
     21e:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <vTaskDelay>
				Led_Off(LED1);
     222:	80 e2       	ldi	r24, 0x20	; 32
     224:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <Led_Off>
				LCD_Clear();
     228:	0e 94 3f 03 	call	0x67e	; 0x67e <LCD_Clear>
			}
			/* return to the Home curser */
			row = FIRST_ROW;
     22c:	19 82       	std	Y+1, r1	; 0x01
			col = FIRST_COLUMN;
     22e:	1a 82       	std	Y+2, r1	; 0x02
			
			/* Clear the variable that holds the Bit masking */
			uxBits = xEventGroupClearBits(
     230:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <xCreatedEventGroup>
     234:	90 91 c5 00 	lds	r25, 0x00C5	; 0x8000c5 <xCreatedEventGroup+0x1>
     238:	64 e0       	ldi	r22, 0x04	; 4
     23a:	70 e0       	ldi	r23, 0x00	; 0
     23c:	0e 94 75 05 	call	0xaea	; 0xaea <xEventGroupClearBits>
     240:	9f 83       	std	Y+7, r25	; 0x07
     242:	8e 83       	std	Y+6, r24	; 0x06
			xCreatedEventGroup,		 /* The event group being updated. */
			LONG_LONG_PRESSING_BIT);
			uxBits = FALSE;					/* The bits being cleared. */
     244:	1f 82       	std	Y+7, r1	; 0x07
     246:	1e 82       	std	Y+6, r1	; 0x06
     248:	4d c0       	rjmp	.+154    	; 0x2e4 <Display_Task+0x1d6>
		}
		else if( ( uxBits & ( SHORT_PRESSING_BIT | LONG_PRESSING_BIT ) ) == ( SHORT_PRESSING_BIT | LONG_PRESSING_BIT ) )
     24a:	8e 81       	ldd	r24, Y+6	; 0x06
     24c:	9f 81       	ldd	r25, Y+7	; 0x07
     24e:	83 70       	andi	r24, 0x03	; 3
     250:	99 27       	eor	r25, r25
     252:	03 97       	sbiw	r24, 0x03	; 3
     254:	49 f5       	brne	.+82     	; 0x2a8 <Display_Task+0x19a>
		{
			/* Display the Number to the LCD */
			LCD_GotoRowColumn(row,col++);
     256:	8a 81       	ldd	r24, Y+2	; 0x02
     258:	91 e0       	ldi	r25, 0x01	; 1
     25a:	98 0f       	add	r25, r24
     25c:	9a 83       	std	Y+2, r25	; 0x02
     25e:	68 2f       	mov	r22, r24
     260:	89 81       	ldd	r24, Y+1	; 0x01
     262:	0e 94 4a 03 	call	0x694	; 0x694 <LCD_GotoRowColumn>
			LCD_DisplayChar(Number_SSD+NUMBER_TO_CHAR);
     266:	8c 81       	ldd	r24, Y+4	; 0x04
     268:	80 5d       	subi	r24, 0xD0	; 208
     26a:	0e 94 9a 02 	call	0x534	; 0x534 <LCD_DisplayChar>
			
			/* Set the Number to the Array to check later */
			Number_LCD[Number_Index] = Number_SSD;
     26e:	8b 81       	ldd	r24, Y+3	; 0x03
     270:	88 2f       	mov	r24, r24
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	9e 01       	movw	r18, r28
     276:	21 5f       	subi	r18, 0xF1	; 241
     278:	3f 4f       	sbci	r19, 0xFF	; 255
     27a:	82 0f       	add	r24, r18
     27c:	93 1f       	adc	r25, r19
     27e:	2c 81       	ldd	r18, Y+4	; 0x04
     280:	fc 01       	movw	r30, r24
     282:	20 83       	st	Z, r18
			Number_Index++;
     284:	8b 81       	ldd	r24, Y+3	; 0x03
     286:	8f 5f       	subi	r24, 0xFF	; 255
     288:	8b 83       	std	Y+3, r24	; 0x03
			
			/* Display the Number Zero to the SSD */
			Number_SSD = INITIAL_ZERO;
     28a:	1c 82       	std	Y+4, r1	; 0x04
			SSD_Display_BCD(Number_SSD);
     28c:	8c 81       	ldd	r24, Y+4	; 0x04
     28e:	0e 94 79 04 	call	0x8f2	; 0x8f2 <SSD_Display_BCD>
			
			/* Clear the Bits 0 and 1 */
			uxBits = xEventGroupClearBits(
     292:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <xCreatedEventGroup>
     296:	90 91 c5 00 	lds	r25, 0x00C5	; 0x8000c5 <xCreatedEventGroup+0x1>
     29a:	63 e0       	ldi	r22, 0x03	; 3
     29c:	70 e0       	ldi	r23, 0x00	; 0
     29e:	0e 94 75 05 	call	0xaea	; 0xaea <xEventGroupClearBits>
     2a2:	9f 83       	std	Y+7, r25	; 0x07
     2a4:	8e 83       	std	Y+6, r24	; 0x06
     2a6:	1e c0       	rjmp	.+60     	; 0x2e4 <Display_Task+0x1d6>
			xCreatedEventGroup,			/* The event group being updated. */
			( SHORT_PRESSING_BIT | LONG_PRESSING_BIT ));			/* The bits being cleared. */
		}
		else if( ( uxBits & SHORT_PRESSING_BIT ) == SHORT_PRESSING_BIT)
     2a8:	8e 81       	ldd	r24, Y+6	; 0x06
     2aa:	9f 81       	ldd	r25, Y+7	; 0x07
     2ac:	81 70       	andi	r24, 0x01	; 1
     2ae:	99 27       	eor	r25, r25
     2b0:	89 2b       	or	r24, r25
     2b2:	c1 f0       	breq	.+48     	; 0x2e4 <Display_Task+0x1d6>
		{
			/* xEventGroupWaitBits() returned because just BIT_0 was set. */
			Number_SSD++;
     2b4:	8c 81       	ldd	r24, Y+4	; 0x04
     2b6:	8f 5f       	subi	r24, 0xFF	; 255
     2b8:	8c 83       	std	Y+4, r24	; 0x04
			if (Number_SSD < MAX_SSD_NUMBER)
     2ba:	8c 81       	ldd	r24, Y+4	; 0x04
     2bc:	8a 30       	cpi	r24, 0x0A	; 10
     2be:	20 f4       	brcc	.+8      	; 0x2c8 <Display_Task+0x1ba>
			{
				SSD_Display_BCD(Number_SSD);
     2c0:	8c 81       	ldd	r24, Y+4	; 0x04
     2c2:	0e 94 79 04 	call	0x8f2	; 0x8f2 <SSD_Display_BCD>
     2c6:	04 c0       	rjmp	.+8      	; 0x2d0 <Display_Task+0x1c2>
			}
			else
			{
				Number_SSD = INITIAL_ZERO;
     2c8:	1c 82       	std	Y+4, r1	; 0x04
				SSD_Display_BCD(Number_SSD);
     2ca:	8c 81       	ldd	r24, Y+4	; 0x04
     2cc:	0e 94 79 04 	call	0x8f2	; 0x8f2 <SSD_Display_BCD>
			}
			/* Clear bit 0 and bit 4 in xEventGroup. */
			uxBits = xEventGroupClearBits(
     2d0:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <xCreatedEventGroup>
     2d4:	90 91 c5 00 	lds	r25, 0x00C5	; 0x8000c5 <xCreatedEventGroup+0x1>
     2d8:	61 e0       	ldi	r22, 0x01	; 1
     2da:	70 e0       	ldi	r23, 0x00	; 0
     2dc:	0e 94 75 05 	call	0xaea	; 0xaea <xEventGroupClearBits>
     2e0:	9f 83       	std	Y+7, r25	; 0x07
     2e2:	8e 83       	std	Y+6, r24	; 0x06
		} 
		else
		{
			//Do Nothing
		}
		uxBits = FALSE;
     2e4:	1f 82       	std	Y+7, r1	; 0x07
     2e6:	1e 82       	std	Y+6, r1	; 0x06
		vTaskDelay(TASK_DELAY_DISPLAY_VALUE);
     2e8:	84 e6       	ldi	r24, 0x64	; 100
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <vTaskDelay>
	}
     2f0:	38 cf       	rjmp	.-400    	; 0x162 <Display_Task+0x54>

000002f2 <PB0_Task>:
 * Description: This Task is used to Check for the Switch 0 
 * @param port : input parameter to the Task 
 * Return : void
 */
void PB0_Task(void* pvParameters)
{	
     2f2:	cf 93       	push	r28
     2f4:	df 93       	push	r29
     2f6:	00 d0       	rcall	.+0      	; 0x2f8 <PB0_Task+0x6>
     2f8:	1f 92       	push	r1
     2fa:	cd b7       	in	r28, 0x3d	; 61
     2fc:	de b7       	in	r29, 0x3e	; 62
     2fe:	9b 83       	std	Y+3, r25	; 0x03
     300:	8a 83       	std	Y+2, r24	; 0x02
	uint8 MaskCarrier	= FALSE;
     302:	19 82       	std	Y+1, r1	; 0x01
	
	while(TRUE)
	{
		if(Gpio_PinRead(PUSH_BUTTON0_PORT,PUSH_BUTTON0_PIN))
     304:	64 e0       	ldi	r22, 0x04	; 4
     306:	82 e0       	ldi	r24, 0x02	; 2
     308:	0e 94 12 14 	call	0x2824	; 0x2824 <Gpio_PinRead>
     30c:	88 23       	and	r24, r24
     30e:	59 f1       	breq	.+86     	; 0x366 <PB0_Task+0x74>
		{
			MaskCarrier |= SHORT_PRESSING_BIT;
     310:	89 81       	ldd	r24, Y+1	; 0x01
     312:	81 60       	ori	r24, 0x01	; 1
     314:	89 83       	std	Y+1, r24	; 0x01
			vTaskDelay(TASK_DELAY_LONG_PRESSING_VALUE);
     316:	88 ee       	ldi	r24, 0xE8	; 232
     318:	93 e0       	ldi	r25, 0x03	; 3
     31a:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <vTaskDelay>
			if(Gpio_PinRead(PUSH_BUTTON0_PORT,PUSH_BUTTON0_PIN))
     31e:	64 e0       	ldi	r22, 0x04	; 4
     320:	82 e0       	ldi	r24, 0x02	; 2
     322:	0e 94 12 14 	call	0x2824	; 0x2824 <Gpio_PinRead>
     326:	88 23       	and	r24, r24
     328:	81 f0       	breq	.+32     	; 0x34a <PB0_Task+0x58>
			{
				MaskCarrier |= LONG_PRESSING_BIT;
     32a:	89 81       	ldd	r24, Y+1	; 0x01
     32c:	82 60       	ori	r24, 0x02	; 2
     32e:	89 83       	std	Y+1, r24	; 0x01
				vTaskDelay(TASK_DELAY_LONG_PRESSING_VALUE);
     330:	88 ee       	ldi	r24, 0xE8	; 232
     332:	93 e0       	ldi	r25, 0x03	; 3
     334:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <vTaskDelay>
				if(Gpio_PinRead(PUSH_BUTTON0_PORT,PUSH_BUTTON0_PIN))
     338:	64 e0       	ldi	r22, 0x04	; 4
     33a:	82 e0       	ldi	r24, 0x02	; 2
     33c:	0e 94 12 14 	call	0x2824	; 0x2824 <Gpio_PinRead>
     340:	88 23       	and	r24, r24
     342:	19 f0       	breq	.+6      	; 0x34a <PB0_Task+0x58>
				{
					MaskCarrier |= LONG_LONG_PRESSING_BIT;
     344:	89 81       	ldd	r24, Y+1	; 0x01
     346:	84 60       	ori	r24, 0x04	; 4
     348:	89 83       	std	Y+1, r24	; 0x01
				}
			}
			xEventGroupSetBits(
     34a:	89 81       	ldd	r24, Y+1	; 0x01
     34c:	28 2f       	mov	r18, r24
     34e:	30 e0       	ldi	r19, 0x00	; 0
     350:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <xCreatedEventGroup>
     354:	90 91 c5 00 	lds	r25, 0x00C5	; 0x8000c5 <xCreatedEventGroup+0x1>
     358:	b9 01       	movw	r22, r18
     35a:	0e 94 ae 05 	call	0xb5c	; 0xb5c <xEventGroupSetBits>
			xCreatedEventGroup,    /* The event group being updated. */
			MaskCarrier);/* The bits being set. */
			vTaskDelay(TASK_DELAY_LONG_PRESSING_VALUE);			
     35e:	88 ee       	ldi	r24, 0xE8	; 232
     360:	93 e0       	ldi	r25, 0x03	; 3
     362:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <vTaskDelay>
		}
		MaskCarrier = FALSE;
     366:	19 82       	std	Y+1, r1	; 0x01
		vTaskDelay(TASK_DELAY_PB0_VALUE);
     368:	84 e6       	ldi	r24, 0x64	; 100
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <vTaskDelay>
	}
     370:	c9 cf       	rjmp	.-110    	; 0x304 <PB0_Task+0x12>

00000372 <main>:

/************************************************************************/
/*				      Main Function Implementation			            */
/************************************************************************/
int main(void)
{
     372:	ef 92       	push	r14
     374:	ff 92       	push	r15
     376:	0f 93       	push	r16
     378:	cf 93       	push	r28
     37a:	df 93       	push	r29
     37c:	1f 92       	push	r1
     37e:	cd b7       	in	r28, 0x3d	; 61
     380:	de b7       	in	r29, 0x3e	; 62
	BaseType_t xReturned = FALSE;
     382:	19 82       	std	Y+1, r1	; 0x01

/******** Init Task ******************/
	xReturned = xTaskCreate(Init_Task, 
     384:	0f 2e       	mov	r0, r31
     386:	fe eb       	ldi	r31, 0xBE	; 190
     388:	ef 2e       	mov	r14, r31
     38a:	f0 e0       	ldi	r31, 0x00	; 0
     38c:	ff 2e       	mov	r15, r31
     38e:	f0 2d       	mov	r31, r0
     390:	04 e0       	ldi	r16, 0x04	; 4
     392:	20 e0       	ldi	r18, 0x00	; 0
     394:	30 e0       	ldi	r19, 0x00	; 0
     396:	44 e6       	ldi	r20, 0x64	; 100
     398:	50 e0       	ldi	r21, 0x00	; 0
     39a:	6f e8       	ldi	r22, 0x8F	; 143
     39c:	70 e0       	ldi	r23, 0x00	; 0
     39e:	89 e4       	ldi	r24, 0x49	; 73
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <xTaskCreate>
     3a6:	89 83       	std	Y+1, r24	; 0x01
	{
		 // Error Handling Code
	}



     3a8:	0f 2e       	mov	r0, r31
     3aa:	f0 ec       	ldi	r31, 0xC0	; 192
     3ac:	ef 2e       	mov	r14, r31
     3ae:	f0 e0       	ldi	r31, 0x00	; 0
     3b0:	ff 2e       	mov	r15, r31
     3b2:	f0 2d       	mov	r31, r0
     3b4:	01 e0       	ldi	r16, 0x01	; 1
     3b6:	20 e0       	ldi	r18, 0x00	; 0
     3b8:	30 e0       	ldi	r19, 0x00	; 0
     3ba:	40 e9       	ldi	r20, 0x90	; 144
     3bc:	51 e0       	ldi	r21, 0x01	; 1
     3be:	63 ea       	ldi	r22, 0xA3	; 163
     3c0:	70 e0       	ldi	r23, 0x00	; 0
     3c2:	87 e8       	ldi	r24, 0x87	; 135
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <xTaskCreate>
     3ca:	89 83       	std	Y+1, r24	; 0x01
	);
	
	if( xReturned != pdPASS )
	{
		// Error Handling Code
	}
     3cc:	0f 2e       	mov	r0, r31
     3ce:	f2 ec       	ldi	r31, 0xC2	; 194
     3d0:	ef 2e       	mov	r14, r31
     3d2:	f0 e0       	ldi	r31, 0x00	; 0
     3d4:	ff 2e       	mov	r15, r31
     3d6:	f0 2d       	mov	r31, r0
     3d8:	03 e0       	ldi	r16, 0x03	; 3
     3da:	20 e0       	ldi	r18, 0x00	; 0
     3dc:	30 e0       	ldi	r19, 0x00	; 0
     3de:	40 e9       	ldi	r20, 0x90	; 144
     3e0:	51 e0       	ldi	r21, 0x01	; 1
     3e2:	60 eb       	ldi	r22, 0xB0	; 176
     3e4:	70 e0       	ldi	r23, 0x00	; 0
     3e6:	89 e7       	ldi	r24, 0x79	; 121
     3e8:	91 e0       	ldi	r25, 0x01	; 1
     3ea:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <xTaskCreate>
     3ee:	89 83       	std	Y+1, r24	; 0x01
	&SSD_Display_Handle
	);
	
	if( xReturned != pdPASS )
	{
		// Error Handling Code
     3f0:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <vTaskStartScheduler>
     3f4:	80 e0       	ldi	r24, 0x00	; 0
     3f6:	90 e0       	ldi	r25, 0x00	; 0
	}
     3f8:	0f 90       	pop	r0
     3fa:	df 91       	pop	r29
     3fc:	cf 91       	pop	r28
     3fe:	0f 91       	pop	r16
     400:	ff 90       	pop	r15
     402:	ef 90       	pop	r14
     404:	08 95       	ret

00000406 <LCD_SendCommand>:
		}
		else
		{
			LCD_DisplayChar(Number+NUMBER_TO_CHAR_FACTOR);
		}
}
     406:	cf 93       	push	r28
     408:	df 93       	push	r29
     40a:	1f 92       	push	r1
     40c:	cd b7       	in	r28, 0x3d	; 61
     40e:	de b7       	in	r29, 0x3e	; 62
     410:	89 83       	std	Y+1, r24	; 0x01
     412:	40 e0       	ldi	r20, 0x00	; 0
     414:	62 e0       	ldi	r22, 0x02	; 2
     416:	80 e0       	ldi	r24, 0x00	; 0
     418:	0e 94 73 13 	call	0x26e6	; 0x26e6 <Gpio_PinWrite>
     41c:	40 e0       	ldi	r20, 0x00	; 0
     41e:	64 e0       	ldi	r22, 0x04	; 4
     420:	80 e0       	ldi	r24, 0x00	; 0
     422:	0e 94 73 13 	call	0x26e6	; 0x26e6 <Gpio_PinWrite>
     426:	89 81       	ldd	r24, Y+1	; 0x01
     428:	88 1f       	adc	r24, r24
     42a:	88 27       	eor	r24, r24
     42c:	88 1f       	adc	r24, r24
     42e:	48 2f       	mov	r20, r24
     430:	60 e8       	ldi	r22, 0x80	; 128
     432:	80 e0       	ldi	r24, 0x00	; 0
     434:	0e 94 73 13 	call	0x26e6	; 0x26e6 <Gpio_PinWrite>
     438:	89 81       	ldd	r24, Y+1	; 0x01
     43a:	82 95       	swap	r24
     43c:	86 95       	lsr	r24
     43e:	86 95       	lsr	r24
     440:	83 70       	andi	r24, 0x03	; 3
     442:	81 70       	andi	r24, 0x01	; 1
     444:	48 2f       	mov	r20, r24
     446:	60 e4       	ldi	r22, 0x40	; 64
     448:	80 e0       	ldi	r24, 0x00	; 0
     44a:	0e 94 73 13 	call	0x26e6	; 0x26e6 <Gpio_PinWrite>
     44e:	89 81       	ldd	r24, Y+1	; 0x01
     450:	82 95       	swap	r24
     452:	86 95       	lsr	r24
     454:	87 70       	andi	r24, 0x07	; 7
     456:	81 70       	andi	r24, 0x01	; 1
     458:	48 2f       	mov	r20, r24
     45a:	60 e2       	ldi	r22, 0x20	; 32
     45c:	80 e0       	ldi	r24, 0x00	; 0
     45e:	0e 94 73 13 	call	0x26e6	; 0x26e6 <Gpio_PinWrite>
     462:	89 81       	ldd	r24, Y+1	; 0x01
     464:	82 95       	swap	r24
     466:	8f 70       	andi	r24, 0x0F	; 15
     468:	81 70       	andi	r24, 0x01	; 1
     46a:	48 2f       	mov	r20, r24
     46c:	60 e1       	ldi	r22, 0x10	; 16
     46e:	80 e0       	ldi	r24, 0x00	; 0
     470:	0e 94 73 13 	call	0x26e6	; 0x26e6 <Gpio_PinWrite>
     474:	41 e0       	ldi	r20, 0x01	; 1
     476:	68 e0       	ldi	r22, 0x08	; 8
     478:	80 e0       	ldi	r24, 0x00	; 0
     47a:	0e 94 73 13 	call	0x26e6	; 0x26e6 <Gpio_PinWrite>
     47e:	40 e0       	ldi	r20, 0x00	; 0
     480:	68 e0       	ldi	r22, 0x08	; 8
     482:	80 e0       	ldi	r24, 0x00	; 0
     484:	0e 94 73 13 	call	0x26e6	; 0x26e6 <Gpio_PinWrite>
     488:	89 81       	ldd	r24, Y+1	; 0x01
     48a:	86 95       	lsr	r24
     48c:	86 95       	lsr	r24
     48e:	86 95       	lsr	r24
     490:	81 70       	andi	r24, 0x01	; 1
     492:	48 2f       	mov	r20, r24
     494:	60 e8       	ldi	r22, 0x80	; 128
     496:	80 e0       	ldi	r24, 0x00	; 0
     498:	0e 94 73 13 	call	0x26e6	; 0x26e6 <Gpio_PinWrite>
     49c:	89 81       	ldd	r24, Y+1	; 0x01
     49e:	86 95       	lsr	r24
     4a0:	86 95       	lsr	r24
     4a2:	81 70       	andi	r24, 0x01	; 1
     4a4:	48 2f       	mov	r20, r24
     4a6:	60 e4       	ldi	r22, 0x40	; 64
     4a8:	80 e0       	ldi	r24, 0x00	; 0
     4aa:	0e 94 73 13 	call	0x26e6	; 0x26e6 <Gpio_PinWrite>
     4ae:	89 81       	ldd	r24, Y+1	; 0x01
     4b0:	86 95       	lsr	r24
     4b2:	81 70       	andi	r24, 0x01	; 1
     4b4:	48 2f       	mov	r20, r24
     4b6:	60 e2       	ldi	r22, 0x20	; 32
     4b8:	80 e0       	ldi	r24, 0x00	; 0
     4ba:	0e 94 73 13 	call	0x26e6	; 0x26e6 <Gpio_PinWrite>
     4be:	89 81       	ldd	r24, Y+1	; 0x01
     4c0:	81 70       	andi	r24, 0x01	; 1
     4c2:	48 2f       	mov	r20, r24
     4c4:	60 e1       	ldi	r22, 0x10	; 16
     4c6:	80 e0       	ldi	r24, 0x00	; 0
     4c8:	0e 94 73 13 	call	0x26e6	; 0x26e6 <Gpio_PinWrite>
     4cc:	41 e0       	ldi	r20, 0x01	; 1
     4ce:	68 e0       	ldi	r22, 0x08	; 8
     4d0:	80 e0       	ldi	r24, 0x00	; 0
     4d2:	0e 94 73 13 	call	0x26e6	; 0x26e6 <Gpio_PinWrite>
     4d6:	40 e0       	ldi	r20, 0x00	; 0
     4d8:	68 e0       	ldi	r22, 0x08	; 8
     4da:	80 e0       	ldi	r24, 0x00	; 0
     4dc:	0e 94 73 13 	call	0x26e6	; 0x26e6 <Gpio_PinWrite>
     4e0:	00 00       	nop
     4e2:	0f 90       	pop	r0
     4e4:	df 91       	pop	r29
     4e6:	cf 91       	pop	r28
     4e8:	08 95       	ret

000004ea <LCD_Init>:
     4ea:	cf 93       	push	r28
     4ec:	df 93       	push	r29
     4ee:	1f 92       	push	r1
     4f0:	cd b7       	in	r28, 0x3d	; 61
     4f2:	de b7       	in	r29, 0x3e	; 62
     4f4:	19 82       	std	Y+1, r1	; 0x01
     4f6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <InitState>
     4fa:	88 23       	and	r24, r24
     4fc:	a1 f4       	brne	.+40     	; 0x526 <LCD_Init+0x3c>
     4fe:	6f ef       	ldi	r22, 0xFF	; 255
     500:	80 e0       	ldi	r24, 0x00	; 0
     502:	0e 94 90 12 	call	0x2520	; 0x2520 <Gpio_PortDirection>
     506:	82 e0       	ldi	r24, 0x02	; 2
     508:	0e 94 03 02 	call	0x406	; 0x406 <LCD_SendCommand>
     50c:	88 e2       	ldi	r24, 0x28	; 40
     50e:	0e 94 03 02 	call	0x406	; 0x406 <LCD_SendCommand>
     512:	8e e0       	ldi	r24, 0x0E	; 14
     514:	0e 94 03 02 	call	0x406	; 0x406 <LCD_SendCommand>
     518:	86 e0       	ldi	r24, 0x06	; 6
     51a:	0e 94 03 02 	call	0x406	; 0x406 <LCD_SendCommand>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <InitState>
     524:	02 c0       	rjmp	.+4      	; 0x52a <LCD_Init+0x40>
     526:	83 e0       	ldi	r24, 0x03	; 3
     528:	89 83       	std	Y+1, r24	; 0x01
     52a:	89 81       	ldd	r24, Y+1	; 0x01
     52c:	0f 90       	pop	r0
     52e:	df 91       	pop	r29
     530:	cf 91       	pop	r28
     532:	08 95       	ret

00000534 <LCD_DisplayChar>:
     534:	cf 93       	push	r28
     536:	df 93       	push	r29
     538:	1f 92       	push	r1
     53a:	cd b7       	in	r28, 0x3d	; 61
     53c:	de b7       	in	r29, 0x3e	; 62
     53e:	89 83       	std	Y+1, r24	; 0x01
     540:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <InitState>
     544:	81 30       	cpi	r24, 0x01	; 1
     546:	09 f0       	breq	.+2      	; 0x54a <LCD_DisplayChar+0x16>
     548:	67 c0       	rjmp	.+206    	; 0x618 <LCD_DisplayChar+0xe4>
     54a:	41 e0       	ldi	r20, 0x01	; 1
     54c:	62 e0       	ldi	r22, 0x02	; 2
     54e:	80 e0       	ldi	r24, 0x00	; 0
     550:	0e 94 73 13 	call	0x26e6	; 0x26e6 <Gpio_PinWrite>
     554:	40 e0       	ldi	r20, 0x00	; 0
     556:	64 e0       	ldi	r22, 0x04	; 4
     558:	80 e0       	ldi	r24, 0x00	; 0
     55a:	0e 94 73 13 	call	0x26e6	; 0x26e6 <Gpio_PinWrite>
     55e:	89 81       	ldd	r24, Y+1	; 0x01
     560:	88 1f       	adc	r24, r24
     562:	88 27       	eor	r24, r24
     564:	88 1f       	adc	r24, r24
     566:	48 2f       	mov	r20, r24
     568:	60 e8       	ldi	r22, 0x80	; 128
     56a:	80 e0       	ldi	r24, 0x00	; 0
     56c:	0e 94 73 13 	call	0x26e6	; 0x26e6 <Gpio_PinWrite>
     570:	89 81       	ldd	r24, Y+1	; 0x01
     572:	82 95       	swap	r24
     574:	86 95       	lsr	r24
     576:	86 95       	lsr	r24
     578:	83 70       	andi	r24, 0x03	; 3
     57a:	81 70       	andi	r24, 0x01	; 1
     57c:	48 2f       	mov	r20, r24
     57e:	60 e4       	ldi	r22, 0x40	; 64
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	0e 94 73 13 	call	0x26e6	; 0x26e6 <Gpio_PinWrite>
     586:	89 81       	ldd	r24, Y+1	; 0x01
     588:	82 95       	swap	r24
     58a:	86 95       	lsr	r24
     58c:	87 70       	andi	r24, 0x07	; 7
     58e:	81 70       	andi	r24, 0x01	; 1
     590:	48 2f       	mov	r20, r24
     592:	60 e2       	ldi	r22, 0x20	; 32
     594:	80 e0       	ldi	r24, 0x00	; 0
     596:	0e 94 73 13 	call	0x26e6	; 0x26e6 <Gpio_PinWrite>
     59a:	89 81       	ldd	r24, Y+1	; 0x01
     59c:	82 95       	swap	r24
     59e:	8f 70       	andi	r24, 0x0F	; 15
     5a0:	81 70       	andi	r24, 0x01	; 1
     5a2:	48 2f       	mov	r20, r24
     5a4:	60 e1       	ldi	r22, 0x10	; 16
     5a6:	80 e0       	ldi	r24, 0x00	; 0
     5a8:	0e 94 73 13 	call	0x26e6	; 0x26e6 <Gpio_PinWrite>
     5ac:	41 e0       	ldi	r20, 0x01	; 1
     5ae:	68 e0       	ldi	r22, 0x08	; 8
     5b0:	80 e0       	ldi	r24, 0x00	; 0
     5b2:	0e 94 73 13 	call	0x26e6	; 0x26e6 <Gpio_PinWrite>
     5b6:	40 e0       	ldi	r20, 0x00	; 0
     5b8:	68 e0       	ldi	r22, 0x08	; 8
     5ba:	80 e0       	ldi	r24, 0x00	; 0
     5bc:	0e 94 73 13 	call	0x26e6	; 0x26e6 <Gpio_PinWrite>
     5c0:	89 81       	ldd	r24, Y+1	; 0x01
     5c2:	86 95       	lsr	r24
     5c4:	86 95       	lsr	r24
     5c6:	86 95       	lsr	r24
     5c8:	81 70       	andi	r24, 0x01	; 1
     5ca:	48 2f       	mov	r20, r24
     5cc:	60 e8       	ldi	r22, 0x80	; 128
     5ce:	80 e0       	ldi	r24, 0x00	; 0
     5d0:	0e 94 73 13 	call	0x26e6	; 0x26e6 <Gpio_PinWrite>
     5d4:	89 81       	ldd	r24, Y+1	; 0x01
     5d6:	86 95       	lsr	r24
     5d8:	86 95       	lsr	r24
     5da:	81 70       	andi	r24, 0x01	; 1
     5dc:	48 2f       	mov	r20, r24
     5de:	60 e4       	ldi	r22, 0x40	; 64
     5e0:	80 e0       	ldi	r24, 0x00	; 0
     5e2:	0e 94 73 13 	call	0x26e6	; 0x26e6 <Gpio_PinWrite>
     5e6:	89 81       	ldd	r24, Y+1	; 0x01
     5e8:	86 95       	lsr	r24
     5ea:	81 70       	andi	r24, 0x01	; 1
     5ec:	48 2f       	mov	r20, r24
     5ee:	60 e2       	ldi	r22, 0x20	; 32
     5f0:	80 e0       	ldi	r24, 0x00	; 0
     5f2:	0e 94 73 13 	call	0x26e6	; 0x26e6 <Gpio_PinWrite>
     5f6:	89 81       	ldd	r24, Y+1	; 0x01
     5f8:	81 70       	andi	r24, 0x01	; 1
     5fa:	48 2f       	mov	r20, r24
     5fc:	60 e1       	ldi	r22, 0x10	; 16
     5fe:	80 e0       	ldi	r24, 0x00	; 0
     600:	0e 94 73 13 	call	0x26e6	; 0x26e6 <Gpio_PinWrite>
     604:	41 e0       	ldi	r20, 0x01	; 1
     606:	68 e0       	ldi	r22, 0x08	; 8
     608:	80 e0       	ldi	r24, 0x00	; 0
     60a:	0e 94 73 13 	call	0x26e6	; 0x26e6 <Gpio_PinWrite>
     60e:	40 e0       	ldi	r20, 0x00	; 0
     610:	68 e0       	ldi	r22, 0x08	; 8
     612:	80 e0       	ldi	r24, 0x00	; 0
     614:	0e 94 73 13 	call	0x26e6	; 0x26e6 <Gpio_PinWrite>
     618:	00 00       	nop
     61a:	0f 90       	pop	r0
     61c:	df 91       	pop	r29
     61e:	cf 91       	pop	r28
     620:	08 95       	ret

00000622 <LCD_DisplayString>:
     622:	cf 93       	push	r28
     624:	df 93       	push	r29
     626:	00 d0       	rcall	.+0      	; 0x628 <LCD_DisplayString+0x6>
     628:	1f 92       	push	r1
     62a:	cd b7       	in	r28, 0x3d	; 61
     62c:	de b7       	in	r29, 0x3e	; 62
     62e:	9b 83       	std	Y+3, r25	; 0x03
     630:	8a 83       	std	Y+2, r24	; 0x02
     632:	19 82       	std	Y+1, r1	; 0x01
     634:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <InitState>
     638:	81 30       	cpi	r24, 0x01	; 1
     63a:	d1 f4       	brne	.+52     	; 0x670 <LCD_DisplayString+0x4e>
     63c:	0e c0       	rjmp	.+28     	; 0x65a <LCD_DisplayString+0x38>
     63e:	89 81       	ldd	r24, Y+1	; 0x01
     640:	88 2f       	mov	r24, r24
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	2a 81       	ldd	r18, Y+2	; 0x02
     646:	3b 81       	ldd	r19, Y+3	; 0x03
     648:	82 0f       	add	r24, r18
     64a:	93 1f       	adc	r25, r19
     64c:	fc 01       	movw	r30, r24
     64e:	80 81       	ld	r24, Z
     650:	0e 94 9a 02 	call	0x534	; 0x534 <LCD_DisplayChar>
     654:	89 81       	ldd	r24, Y+1	; 0x01
     656:	8f 5f       	subi	r24, 0xFF	; 255
     658:	89 83       	std	Y+1, r24	; 0x01
     65a:	89 81       	ldd	r24, Y+1	; 0x01
     65c:	88 2f       	mov	r24, r24
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	2a 81       	ldd	r18, Y+2	; 0x02
     662:	3b 81       	ldd	r19, Y+3	; 0x03
     664:	82 0f       	add	r24, r18
     666:	93 1f       	adc	r25, r19
     668:	fc 01       	movw	r30, r24
     66a:	80 81       	ld	r24, Z
     66c:	88 23       	and	r24, r24
     66e:	39 f7       	brne	.-50     	; 0x63e <LCD_DisplayString+0x1c>
     670:	00 00       	nop
     672:	0f 90       	pop	r0
     674:	0f 90       	pop	r0
     676:	0f 90       	pop	r0
     678:	df 91       	pop	r29
     67a:	cf 91       	pop	r28
     67c:	08 95       	ret

0000067e <LCD_Clear>:
 * Function : LCD_GotoRowColumn
 * Description: this function is to Clear the LCD
 * @return void                        
 */
void LCD_Clear(void)
{
     67e:	cf 93       	push	r28
     680:	df 93       	push	r29
     682:	cd b7       	in	r28, 0x3d	; 61
     684:	de b7       	in	r29, 0x3e	; 62
	LCD_SendCommand(LCD_ClearScreen);
     686:	81 e0       	ldi	r24, 0x01	; 1
     688:	0e 94 03 02 	call	0x406	; 0x406 <LCD_SendCommand>
}
     68c:	00 00       	nop
     68e:	df 91       	pop	r29
     690:	cf 91       	pop	r28
     692:	08 95       	ret

00000694 <LCD_GotoRowColumn>:
 * param row: the row of the cursor should range is [0 to 1]
 * param col: the column of the cursor should range is [0 to 15]
 * @return void                                                          
 */
void LCD_GotoRowColumn(uint8 row , uint8 col)
{
     694:	cf 93       	push	r28
     696:	df 93       	push	r29
     698:	00 d0       	rcall	.+0      	; 0x69a <LCD_GotoRowColumn+0x6>
     69a:	cd b7       	in	r28, 0x3d	; 61
     69c:	de b7       	in	r29, 0x3e	; 62
     69e:	89 83       	std	Y+1, r24	; 0x01
     6a0:	6a 83       	std	Y+2, r22	; 0x02
	LCD_SendCommand( (GOTO_ROW_COL_MASK1) | ( col + (GOTO_ROW_COL_MASK2 * row ) ) );
     6a2:	99 81       	ldd	r25, Y+1	; 0x01
     6a4:	89 2f       	mov	r24, r25
     6a6:	88 0f       	add	r24, r24
     6a8:	88 0f       	add	r24, r24
     6aa:	98 0f       	add	r25, r24
     6ac:	8a 81       	ldd	r24, Y+2	; 0x02
     6ae:	89 0f       	add	r24, r25
     6b0:	80 68       	ori	r24, 0x80	; 128
     6b2:	0e 94 03 02 	call	0x406	; 0x406 <LCD_SendCommand>
     6b6:	00 00       	nop
     6b8:	0f 90       	pop	r0
     6ba:	0f 90       	pop	r0
     6bc:	df 91       	pop	r29
     6be:	cf 91       	pop	r28
     6c0:	08 95       	ret

000006c2 <Led_Init>:
/**
 * Description: Initializing Function to the Led
 * @param led_Num the number of the Led [LED0,LED1,LED2,LED3]
 */
void Led_Init(led led_Num)
{
     6c2:	cf 93       	push	r28
     6c4:	df 93       	push	r29
     6c6:	1f 92       	push	r1
     6c8:	cd b7       	in	r28, 0x3d	; 61
     6ca:	de b7       	in	r29, 0x3e	; 62
     6cc:	89 83       	std	Y+1, r24	; 0x01
	switch(led_Num)
     6ce:	89 81       	ldd	r24, Y+1	; 0x01
     6d0:	88 2f       	mov	r24, r24
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	80 32       	cpi	r24, 0x20	; 32
     6d6:	91 05       	cpc	r25, r1
     6d8:	c1 f0       	breq	.+48     	; 0x70a <Led_Init+0x48>
     6da:	81 32       	cpi	r24, 0x21	; 33
     6dc:	91 05       	cpc	r25, r1
     6de:	1c f4       	brge	.+6      	; 0x6e6 <Led_Init+0x24>
     6e0:	40 97       	sbiw	r24, 0x10	; 16
     6e2:	41 f0       	breq	.+16     	; 0x6f4 <Led_Init+0x32>
		case LED3 :
		Gpio_PinDirection(LED_PORT,LED3,SET_OUT);
		Gpio_PinWrite(LED_PORT,LED3,FALSE);
		break;
		default:
		break;
     6e4:	33 c0       	rjmp	.+102    	; 0x74c <Led_Init+0x8a>
 * Description: Initializing Function to the Led
 * @param led_Num the number of the Led [LED0,LED1,LED2,LED3]
 */
void Led_Init(led led_Num)
{
	switch(led_Num)
     6e6:	80 34       	cpi	r24, 0x40	; 64
     6e8:	91 05       	cpc	r25, r1
     6ea:	d1 f0       	breq	.+52     	; 0x720 <Led_Init+0x5e>
     6ec:	80 38       	cpi	r24, 0x80	; 128
     6ee:	91 05       	cpc	r25, r1
     6f0:	11 f1       	breq	.+68     	; 0x736 <Led_Init+0x74>
		case LED3 :
		Gpio_PinDirection(LED_PORT,LED3,SET_OUT);
		Gpio_PinWrite(LED_PORT,LED3,FALSE);
		break;
		default:
		break;
     6f2:	2c c0       	rjmp	.+88     	; 0x74c <Led_Init+0x8a>
void Led_Init(led led_Num)
{
	switch(led_Num)
	{
		case LED0 :
		Gpio_PinDirection(LED_PORT,LED0,SET_OUT);
     6f4:	4f ef       	ldi	r20, 0xFF	; 255
     6f6:	60 e1       	ldi	r22, 0x10	; 16
     6f8:	81 e0       	ldi	r24, 0x01	; 1
     6fa:	0e 94 c7 12 	call	0x258e	; 0x258e <Gpio_PinDirection>
		Gpio_PinWrite(LED_PORT,LED0,FALSE);
     6fe:	40 e0       	ldi	r20, 0x00	; 0
     700:	60 e1       	ldi	r22, 0x10	; 16
     702:	81 e0       	ldi	r24, 0x01	; 1
     704:	0e 94 73 13 	call	0x26e6	; 0x26e6 <Gpio_PinWrite>
		break;
     708:	21 c0       	rjmp	.+66     	; 0x74c <Led_Init+0x8a>
		case LED1 :
		Gpio_PinDirection(LED_PORT,LED1,SET_OUT);
     70a:	4f ef       	ldi	r20, 0xFF	; 255
     70c:	60 e2       	ldi	r22, 0x20	; 32
     70e:	81 e0       	ldi	r24, 0x01	; 1
     710:	0e 94 c7 12 	call	0x258e	; 0x258e <Gpio_PinDirection>
		Gpio_PinWrite(LED_PORT,LED1,FALSE);
     714:	40 e0       	ldi	r20, 0x00	; 0
     716:	60 e2       	ldi	r22, 0x20	; 32
     718:	81 e0       	ldi	r24, 0x01	; 1
     71a:	0e 94 73 13 	call	0x26e6	; 0x26e6 <Gpio_PinWrite>
		break;
     71e:	16 c0       	rjmp	.+44     	; 0x74c <Led_Init+0x8a>
		case LED2 :
		Gpio_PinDirection(LED_PORT,LED2,SET_OUT);
     720:	4f ef       	ldi	r20, 0xFF	; 255
     722:	60 e4       	ldi	r22, 0x40	; 64
     724:	81 e0       	ldi	r24, 0x01	; 1
     726:	0e 94 c7 12 	call	0x258e	; 0x258e <Gpio_PinDirection>
		Gpio_PinWrite(LED_PORT,LED2,FALSE);
     72a:	40 e0       	ldi	r20, 0x00	; 0
     72c:	60 e4       	ldi	r22, 0x40	; 64
     72e:	81 e0       	ldi	r24, 0x01	; 1
     730:	0e 94 73 13 	call	0x26e6	; 0x26e6 <Gpio_PinWrite>
		break;
     734:	0b c0       	rjmp	.+22     	; 0x74c <Led_Init+0x8a>
		case LED3 :
		Gpio_PinDirection(LED_PORT,LED3,SET_OUT);
     736:	4f ef       	ldi	r20, 0xFF	; 255
     738:	60 e8       	ldi	r22, 0x80	; 128
     73a:	81 e0       	ldi	r24, 0x01	; 1
     73c:	0e 94 c7 12 	call	0x258e	; 0x258e <Gpio_PinDirection>
		Gpio_PinWrite(LED_PORT,LED3,FALSE);
     740:	40 e0       	ldi	r20, 0x00	; 0
     742:	60 e8       	ldi	r22, 0x80	; 128
     744:	81 e0       	ldi	r24, 0x01	; 1
     746:	0e 94 73 13 	call	0x26e6	; 0x26e6 <Gpio_PinWrite>
		break;
     74a:	00 00       	nop
		default:
		break;
	}
}
     74c:	00 00       	nop
     74e:	0f 90       	pop	r0
     750:	df 91       	pop	r29
     752:	cf 91       	pop	r28
     754:	08 95       	ret

00000756 <Led_On>:
/**
 * Description: Function to set the Led to On
 * @param led_Num the number of the Led [LED0,LED1,LED2,LED3]
 */
void Led_On(led led_Num)
{
     756:	cf 93       	push	r28
     758:	df 93       	push	r29
     75a:	1f 92       	push	r1
     75c:	cd b7       	in	r28, 0x3d	; 61
     75e:	de b7       	in	r29, 0x3e	; 62
     760:	89 83       	std	Y+1, r24	; 0x01
	switch(led_Num)
     762:	89 81       	ldd	r24, Y+1	; 0x01
     764:	88 2f       	mov	r24, r24
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	80 32       	cpi	r24, 0x20	; 32
     76a:	91 05       	cpc	r25, r1
     76c:	99 f0       	breq	.+38     	; 0x794 <Led_On+0x3e>
     76e:	81 32       	cpi	r24, 0x21	; 33
     770:	91 05       	cpc	r25, r1
     772:	1c f4       	brge	.+6      	; 0x77a <Led_On+0x24>
     774:	40 97       	sbiw	r24, 0x10	; 16
     776:	41 f0       	breq	.+16     	; 0x788 <Led_On+0x32>
		break;
		case LED3 :
		Gpio_PinWrite(LED_PORT,LED3,HIGH);
		break;
		default:
		break;
     778:	1f c0       	rjmp	.+62     	; 0x7b8 <Led_On+0x62>
 * Description: Function to set the Led to On
 * @param led_Num the number of the Led [LED0,LED1,LED2,LED3]
 */
void Led_On(led led_Num)
{
	switch(led_Num)
     77a:	80 34       	cpi	r24, 0x40	; 64
     77c:	91 05       	cpc	r25, r1
     77e:	81 f0       	breq	.+32     	; 0x7a0 <Led_On+0x4a>
     780:	80 38       	cpi	r24, 0x80	; 128
     782:	91 05       	cpc	r25, r1
     784:	99 f0       	breq	.+38     	; 0x7ac <Led_On+0x56>
		break;
		case LED3 :
		Gpio_PinWrite(LED_PORT,LED3,HIGH);
		break;
		default:
		break;
     786:	18 c0       	rjmp	.+48     	; 0x7b8 <Led_On+0x62>
void Led_On(led led_Num)
{
	switch(led_Num)
	{
		case LED0 :
		Gpio_PinWrite(LED_PORT,LED0,HIGH);
     788:	41 e0       	ldi	r20, 0x01	; 1
     78a:	60 e1       	ldi	r22, 0x10	; 16
     78c:	81 e0       	ldi	r24, 0x01	; 1
     78e:	0e 94 73 13 	call	0x26e6	; 0x26e6 <Gpio_PinWrite>
		break;
     792:	12 c0       	rjmp	.+36     	; 0x7b8 <Led_On+0x62>
		case LED1 :
		Gpio_PinWrite(LED_PORT,LED1,HIGH);
     794:	41 e0       	ldi	r20, 0x01	; 1
     796:	60 e2       	ldi	r22, 0x20	; 32
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	0e 94 73 13 	call	0x26e6	; 0x26e6 <Gpio_PinWrite>
		break;
     79e:	0c c0       	rjmp	.+24     	; 0x7b8 <Led_On+0x62>
		case LED2 :
		Gpio_PinWrite(LED_PORT,LED2,HIGH);
     7a0:	41 e0       	ldi	r20, 0x01	; 1
     7a2:	60 e4       	ldi	r22, 0x40	; 64
     7a4:	81 e0       	ldi	r24, 0x01	; 1
     7a6:	0e 94 73 13 	call	0x26e6	; 0x26e6 <Gpio_PinWrite>
		break;
     7aa:	06 c0       	rjmp	.+12     	; 0x7b8 <Led_On+0x62>
		case LED3 :
		Gpio_PinWrite(LED_PORT,LED3,HIGH);
     7ac:	41 e0       	ldi	r20, 0x01	; 1
     7ae:	60 e8       	ldi	r22, 0x80	; 128
     7b0:	81 e0       	ldi	r24, 0x01	; 1
     7b2:	0e 94 73 13 	call	0x26e6	; 0x26e6 <Gpio_PinWrite>
		break;
     7b6:	00 00       	nop
		default:
		break;
	}
}
     7b8:	00 00       	nop
     7ba:	0f 90       	pop	r0
     7bc:	df 91       	pop	r29
     7be:	cf 91       	pop	r28
     7c0:	08 95       	ret

000007c2 <Led_Off>:
/**
 * Description: Function to set the Led to Off.
 * @param led_Num the number of the Led [LED0,LED1,LED2,LED3].
 */
void Led_Off(led led_Num)
{
     7c2:	cf 93       	push	r28
     7c4:	df 93       	push	r29
     7c6:	1f 92       	push	r1
     7c8:	cd b7       	in	r28, 0x3d	; 61
     7ca:	de b7       	in	r29, 0x3e	; 62
     7cc:	89 83       	std	Y+1, r24	; 0x01
	switch(led_Num)
     7ce:	89 81       	ldd	r24, Y+1	; 0x01
     7d0:	88 2f       	mov	r24, r24
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	80 32       	cpi	r24, 0x20	; 32
     7d6:	91 05       	cpc	r25, r1
     7d8:	99 f0       	breq	.+38     	; 0x800 <Led_Off+0x3e>
     7da:	81 32       	cpi	r24, 0x21	; 33
     7dc:	91 05       	cpc	r25, r1
     7de:	1c f4       	brge	.+6      	; 0x7e6 <Led_Off+0x24>
     7e0:	40 97       	sbiw	r24, 0x10	; 16
     7e2:	41 f0       	breq	.+16     	; 0x7f4 <Led_Off+0x32>
		break;
		case LED3 :
		Gpio_PinWrite(LED_PORT,LED3,FALSE);
		break;
		default:
		break;
     7e4:	1f c0       	rjmp	.+62     	; 0x824 <Led_Off+0x62>
 * Description: Function to set the Led to Off.
 * @param led_Num the number of the Led [LED0,LED1,LED2,LED3].
 */
void Led_Off(led led_Num)
{
	switch(led_Num)
     7e6:	80 34       	cpi	r24, 0x40	; 64
     7e8:	91 05       	cpc	r25, r1
     7ea:	81 f0       	breq	.+32     	; 0x80c <Led_Off+0x4a>
     7ec:	80 38       	cpi	r24, 0x80	; 128
     7ee:	91 05       	cpc	r25, r1
     7f0:	99 f0       	breq	.+38     	; 0x818 <Led_Off+0x56>
		break;
		case LED3 :
		Gpio_PinWrite(LED_PORT,LED3,FALSE);
		break;
		default:
		break;
     7f2:	18 c0       	rjmp	.+48     	; 0x824 <Led_Off+0x62>
void Led_Off(led led_Num)
{
	switch(led_Num)
	{
		case LED0 :
		Gpio_PinWrite(LED_PORT,LED0,FALSE);
     7f4:	40 e0       	ldi	r20, 0x00	; 0
     7f6:	60 e1       	ldi	r22, 0x10	; 16
     7f8:	81 e0       	ldi	r24, 0x01	; 1
     7fa:	0e 94 73 13 	call	0x26e6	; 0x26e6 <Gpio_PinWrite>
		break;
     7fe:	12 c0       	rjmp	.+36     	; 0x824 <Led_Off+0x62>
		case LED1 :
		Gpio_PinWrite(LED_PORT,LED1,FALSE);
     800:	40 e0       	ldi	r20, 0x00	; 0
     802:	60 e2       	ldi	r22, 0x20	; 32
     804:	81 e0       	ldi	r24, 0x01	; 1
     806:	0e 94 73 13 	call	0x26e6	; 0x26e6 <Gpio_PinWrite>
		break;
     80a:	0c c0       	rjmp	.+24     	; 0x824 <Led_Off+0x62>
		case LED2 :
		Gpio_PinWrite(LED_PORT,LED2,FALSE);
     80c:	40 e0       	ldi	r20, 0x00	; 0
     80e:	60 e4       	ldi	r22, 0x40	; 64
     810:	81 e0       	ldi	r24, 0x01	; 1
     812:	0e 94 73 13 	call	0x26e6	; 0x26e6 <Gpio_PinWrite>
		break;
     816:	06 c0       	rjmp	.+12     	; 0x824 <Led_Off+0x62>
		case LED3 :
		Gpio_PinWrite(LED_PORT,LED3,FALSE);
     818:	40 e0       	ldi	r20, 0x00	; 0
     81a:	60 e8       	ldi	r22, 0x80	; 128
     81c:	81 e0       	ldi	r24, 0x01	; 1
     81e:	0e 94 73 13 	call	0x26e6	; 0x26e6 <Gpio_PinWrite>
		break;
     822:	00 00       	nop
		default:
		break;
	}
}
     824:	00 00       	nop
     826:	0f 90       	pop	r0
     828:	df 91       	pop	r29
     82a:	cf 91       	pop	r28
     82c:	08 95       	ret

0000082e <pushButton_Init>:
/**
 * Description: Function to Initiate the Push Button.
 * @param push_Button the number of the pushButton [PUSH_BUTTON0,PUSH_BUTTON1]
 */
void pushButton_Init()
{
     82e:	cf 93       	push	r28
     830:	df 93       	push	r29
     832:	cd b7       	in	r28, 0x3d	; 61
     834:	de b7       	in	r29, 0x3e	; 62
	Gpio_PinDirection(PUSH_BUTTON0_PORT,PUSH_BUTTON0_PIN,SET_IN);
     836:	40 e0       	ldi	r20, 0x00	; 0
     838:	64 e0       	ldi	r22, 0x04	; 4
     83a:	82 e0       	ldi	r24, 0x02	; 2
     83c:	0e 94 c7 12 	call	0x258e	; 0x258e <Gpio_PinDirection>
	Gpio_PinDirection(PUSH_BUTTON1_PORT,PUSH_BUTTON1_PIN,SET_IN);
     840:	40 e0       	ldi	r20, 0x00	; 0
     842:	62 e0       	ldi	r22, 0x02	; 2
     844:	81 e0       	ldi	r24, 0x01	; 1
     846:	0e 94 c7 12 	call	0x258e	; 0x258e <Gpio_PinDirection>
}
     84a:	00 00       	nop
     84c:	df 91       	pop	r29
     84e:	cf 91       	pop	r28
     850:	08 95       	ret

00000852 <SSD_Init_BCD>:
		SSD_Display_BCD(number/10);
		Gpio_PinWrite(ssd_Enable_PORT,ssd2_Enable_Pin,FALSE);
		Gpio_PinWrite(ssd_Enable_PORT,ssd1_Enable_Pin,TRUE);
		SSD_Display_BCD(number%10);
	}
}
     852:	cf 93       	push	r28
     854:	df 93       	push	r29
     856:	1f 92       	push	r1
     858:	cd b7       	in	r28, 0x3d	; 61
     85a:	de b7       	in	r29, 0x3e	; 62
     85c:	89 83       	std	Y+1, r24	; 0x01
     85e:	6f ef       	ldi	r22, 0xFF	; 255
     860:	81 e0       	ldi	r24, 0x01	; 1
     862:	0e 94 78 14 	call	0x28f0	; 0x28f0 <Gpio_LowerNibbleDirection>
     866:	89 81       	ldd	r24, Y+1	; 0x01
     868:	88 2f       	mov	r24, r24
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	81 30       	cpi	r24, 0x01	; 1
     86e:	91 05       	cpc	r25, r1
     870:	b9 f0       	breq	.+46     	; 0x8a0 <__stack+0x41>
     872:	82 30       	cpi	r24, 0x02	; 2
     874:	91 05       	cpc	r25, r1
     876:	1c f4       	brge	.+6      	; 0x87e <__stack+0x1f>
     878:	89 2b       	or	r24, r25
     87a:	39 f0       	breq	.+14     	; 0x88a <__stack+0x2b>
     87c:	32 c0       	rjmp	.+100    	; 0x8e2 <__stack+0x83>
     87e:	82 30       	cpi	r24, 0x02	; 2
     880:	91 05       	cpc	r25, r1
     882:	c9 f0       	breq	.+50     	; 0x8b6 <__stack+0x57>
     884:	03 97       	sbiw	r24, 0x03	; 3
     886:	11 f1       	breq	.+68     	; 0x8cc <__stack+0x6d>
     888:	2c c0       	rjmp	.+88     	; 0x8e2 <__stack+0x83>
     88a:	4f ef       	ldi	r20, 0xFF	; 255
     88c:	64 e0       	ldi	r22, 0x04	; 4
     88e:	83 e0       	ldi	r24, 0x03	; 3
     890:	0e 94 c7 12 	call	0x258e	; 0x258e <Gpio_PinDirection>
     894:	41 e0       	ldi	r20, 0x01	; 1
     896:	64 e0       	ldi	r22, 0x04	; 4
     898:	83 e0       	ldi	r24, 0x03	; 3
     89a:	0e 94 73 13 	call	0x26e6	; 0x26e6 <Gpio_PinWrite>
     89e:	21 c0       	rjmp	.+66     	; 0x8e2 <__stack+0x83>
     8a0:	4f ef       	ldi	r20, 0xFF	; 255
     8a2:	68 e0       	ldi	r22, 0x08	; 8
     8a4:	83 e0       	ldi	r24, 0x03	; 3
     8a6:	0e 94 c7 12 	call	0x258e	; 0x258e <Gpio_PinDirection>
     8aa:	41 e0       	ldi	r20, 0x01	; 1
     8ac:	68 e0       	ldi	r22, 0x08	; 8
     8ae:	83 e0       	ldi	r24, 0x03	; 3
     8b0:	0e 94 73 13 	call	0x26e6	; 0x26e6 <Gpio_PinWrite>
     8b4:	16 c0       	rjmp	.+44     	; 0x8e2 <__stack+0x83>
     8b6:	4f ef       	ldi	r20, 0xFF	; 255
     8b8:	60 e4       	ldi	r22, 0x40	; 64
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	0e 94 c7 12 	call	0x258e	; 0x258e <Gpio_PinDirection>
     8c0:	41 e0       	ldi	r20, 0x01	; 1
     8c2:	60 e4       	ldi	r22, 0x40	; 64
     8c4:	83 e0       	ldi	r24, 0x03	; 3
     8c6:	0e 94 73 13 	call	0x26e6	; 0x26e6 <Gpio_PinWrite>
     8ca:	0b c0       	rjmp	.+22     	; 0x8e2 <__stack+0x83>
     8cc:	4f ef       	ldi	r20, 0xFF	; 255
     8ce:	60 e8       	ldi	r22, 0x80	; 128
     8d0:	83 e0       	ldi	r24, 0x03	; 3
     8d2:	0e 94 c7 12 	call	0x258e	; 0x258e <Gpio_PinDirection>
     8d6:	41 e0       	ldi	r20, 0x01	; 1
     8d8:	60 e8       	ldi	r22, 0x80	; 128
     8da:	83 e0       	ldi	r24, 0x03	; 3
     8dc:	0e 94 73 13 	call	0x26e6	; 0x26e6 <Gpio_PinWrite>
     8e0:	00 00       	nop
     8e2:	80 e0       	ldi	r24, 0x00	; 0
     8e4:	0e 94 79 04 	call	0x8f2	; 0x8f2 <SSD_Display_BCD>
     8e8:	00 00       	nop
     8ea:	0f 90       	pop	r0
     8ec:	df 91       	pop	r29
     8ee:	cf 91       	pop	r28
     8f0:	08 95       	ret

000008f2 <SSD_Display_BCD>:
/**
 * Description: Function to set the Lower Nibble to the value of the number 
 * @param number the number to display [0 to F only]
 */
void SSD_Display_BCD(uint8 number)
{
     8f2:	cf 93       	push	r28
     8f4:	df 93       	push	r29
     8f6:	1f 92       	push	r1
     8f8:	cd b7       	in	r28, 0x3d	; 61
     8fa:	de b7       	in	r29, 0x3e	; 62
     8fc:	89 83       	std	Y+1, r24	; 0x01
	Gpio_LowerNibbleDirection(SSD_PORT,SET_OUT);
     8fe:	6f ef       	ldi	r22, 0xFF	; 255
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	0e 94 78 14 	call	0x28f0	; 0x28f0 <Gpio_LowerNibbleDirection>
	Gpio_LowerNibbleWrite(SSD_PORT,number);
     906:	69 81       	ldd	r22, Y+1	; 0x01
     908:	81 e0       	ldi	r24, 0x01	; 1
     90a:	0e 94 11 15 	call	0x2a22	; 0x2a22 <Gpio_LowerNibbleWrite>
}
     90e:	00 00       	nop
     910:	0f 90       	pop	r0
     912:	df 91       	pop	r29
     914:	cf 91       	pop	r28
     916:	08 95       	ret

00000918 <xEventGroupCreate>:
/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
     918:	cf 93       	push	r28
     91a:	df 93       	push	r29
     91c:	00 d0       	rcall	.+0      	; 0x91e <xEventGroupCreate+0x6>
     91e:	cd b7       	in	r28, 0x3d	; 61
     920:	de b7       	in	r29, 0x3e	; 62
     922:	8b e0       	ldi	r24, 0x0B	; 11
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	0e 94 9d 06 	call	0xd3a	; 0xd3a <pvPortMalloc>
     92a:	9a 83       	std	Y+2, r25	; 0x02
     92c:	89 83       	std	Y+1, r24	; 0x01
     92e:	89 81       	ldd	r24, Y+1	; 0x01
     930:	9a 81       	ldd	r25, Y+2	; 0x02
     932:	89 2b       	or	r24, r25
     934:	51 f0       	breq	.+20     	; 0x94a <xEventGroupCreate+0x32>
     936:	89 81       	ldd	r24, Y+1	; 0x01
     938:	9a 81       	ldd	r25, Y+2	; 0x02
     93a:	fc 01       	movw	r30, r24
     93c:	11 82       	std	Z+1, r1	; 0x01
     93e:	10 82       	st	Z, r1
     940:	89 81       	ldd	r24, Y+1	; 0x01
     942:	9a 81       	ldd	r25, Y+2	; 0x02
     944:	02 96       	adiw	r24, 0x02	; 2
     946:	0e 94 ff 06 	call	0xdfe	; 0xdfe <vListInitialise>
     94a:	89 81       	ldd	r24, Y+1	; 0x01
     94c:	9a 81       	ldd	r25, Y+2	; 0x02
     94e:	0f 90       	pop	r0
     950:	0f 90       	pop	r0
     952:	df 91       	pop	r29
     954:	cf 91       	pop	r28
     956:	08 95       	ret

00000958 <xEventGroupWaitBits>:
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	cf 93       	push	r28
     95e:	df 93       	push	r29
     960:	cd b7       	in	r28, 0x3d	; 61
     962:	de b7       	in	r29, 0x3e	; 62
     964:	63 97       	sbiw	r28, 0x13	; 19
     966:	0f b6       	in	r0, 0x3f	; 63
     968:	f8 94       	cli
     96a:	de bf       	out	0x3e, r29	; 62
     96c:	0f be       	out	0x3f, r0	; 63
     96e:	cd bf       	out	0x3d, r28	; 61
     970:	9d 87       	std	Y+13, r25	; 0x0d
     972:	8c 87       	std	Y+12, r24	; 0x0c
     974:	7f 87       	std	Y+15, r23	; 0x0f
     976:	6e 87       	std	Y+14, r22	; 0x0e
     978:	48 8b       	std	Y+16, r20	; 0x10
     97a:	29 8b       	std	Y+17, r18	; 0x11
     97c:	1b 8b       	std	Y+19, r17	; 0x13
     97e:	0a 8b       	std	Y+18, r16	; 0x12
     980:	8c 85       	ldd	r24, Y+12	; 0x0c
     982:	9d 85       	ldd	r25, Y+13	; 0x0d
     984:	9e 83       	std	Y+6, r25	; 0x06
     986:	8d 83       	std	Y+5, r24	; 0x05
     988:	1c 82       	std	Y+4, r1	; 0x04
     98a:	1b 82       	std	Y+3, r1	; 0x03
     98c:	1f 82       	std	Y+7, r1	; 0x07
     98e:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <vTaskSuspendAll>
     992:	8d 81       	ldd	r24, Y+5	; 0x05
     994:	9e 81       	ldd	r25, Y+6	; 0x06
     996:	fc 01       	movw	r30, r24
     998:	80 81       	ld	r24, Z
     99a:	91 81       	ldd	r25, Z+1	; 0x01
     99c:	99 87       	std	Y+9, r25	; 0x09
     99e:	88 87       	std	Y+8, r24	; 0x08
     9a0:	2e 85       	ldd	r18, Y+14	; 0x0e
     9a2:	3f 85       	ldd	r19, Y+15	; 0x0f
     9a4:	88 85       	ldd	r24, Y+8	; 0x08
     9a6:	99 85       	ldd	r25, Y+9	; 0x09
     9a8:	49 89       	ldd	r20, Y+17	; 0x11
     9aa:	b9 01       	movw	r22, r18
     9ac:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <prvTestWaitCondition>
     9b0:	8a 87       	std	Y+10, r24	; 0x0a
     9b2:	8a 85       	ldd	r24, Y+10	; 0x0a
     9b4:	88 23       	and	r24, r24
     9b6:	d1 f0       	breq	.+52     	; 0x9ec <xEventGroupWaitBits+0x94>
     9b8:	88 85       	ldd	r24, Y+8	; 0x08
     9ba:	99 85       	ldd	r25, Y+9	; 0x09
     9bc:	9a 83       	std	Y+2, r25	; 0x02
     9be:	89 83       	std	Y+1, r24	; 0x01
     9c0:	1b 8a       	std	Y+19, r1	; 0x13
     9c2:	1a 8a       	std	Y+18, r1	; 0x12
     9c4:	88 89       	ldd	r24, Y+16	; 0x10
     9c6:	88 23       	and	r24, r24
     9c8:	e1 f1       	breq	.+120    	; 0xa42 <xEventGroupWaitBits+0xea>
     9ca:	8d 81       	ldd	r24, Y+5	; 0x05
     9cc:	9e 81       	ldd	r25, Y+6	; 0x06
     9ce:	fc 01       	movw	r30, r24
     9d0:	20 81       	ld	r18, Z
     9d2:	31 81       	ldd	r19, Z+1	; 0x01
     9d4:	8e 85       	ldd	r24, Y+14	; 0x0e
     9d6:	9f 85       	ldd	r25, Y+15	; 0x0f
     9d8:	80 95       	com	r24
     9da:	90 95       	com	r25
     9dc:	28 23       	and	r18, r24
     9de:	39 23       	and	r19, r25
     9e0:	8d 81       	ldd	r24, Y+5	; 0x05
     9e2:	9e 81       	ldd	r25, Y+6	; 0x06
     9e4:	fc 01       	movw	r30, r24
     9e6:	31 83       	std	Z+1, r19	; 0x01
     9e8:	20 83       	st	Z, r18
     9ea:	2b c0       	rjmp	.+86     	; 0xa42 <xEventGroupWaitBits+0xea>
     9ec:	8a 89       	ldd	r24, Y+18	; 0x12
     9ee:	9b 89       	ldd	r25, Y+19	; 0x13
     9f0:	89 2b       	or	r24, r25
     9f2:	39 f4       	brne	.+14     	; 0xa02 <xEventGroupWaitBits+0xaa>
     9f4:	88 85       	ldd	r24, Y+8	; 0x08
     9f6:	99 85       	ldd	r25, Y+9	; 0x09
     9f8:	9a 83       	std	Y+2, r25	; 0x02
     9fa:	89 83       	std	Y+1, r24	; 0x01
     9fc:	81 e0       	ldi	r24, 0x01	; 1
     9fe:	8f 83       	std	Y+7, r24	; 0x07
     a00:	20 c0       	rjmp	.+64     	; 0xa42 <xEventGroupWaitBits+0xea>
     a02:	88 89       	ldd	r24, Y+16	; 0x10
     a04:	88 23       	and	r24, r24
     a06:	29 f0       	breq	.+10     	; 0xa12 <xEventGroupWaitBits+0xba>
     a08:	8b 81       	ldd	r24, Y+3	; 0x03
     a0a:	9c 81       	ldd	r25, Y+4	; 0x04
     a0c:	91 60       	ori	r25, 0x01	; 1
     a0e:	9c 83       	std	Y+4, r25	; 0x04
     a10:	8b 83       	std	Y+3, r24	; 0x03
     a12:	89 89       	ldd	r24, Y+17	; 0x11
     a14:	88 23       	and	r24, r24
     a16:	29 f0       	breq	.+10     	; 0xa22 <xEventGroupWaitBits+0xca>
     a18:	8b 81       	ldd	r24, Y+3	; 0x03
     a1a:	9c 81       	ldd	r25, Y+4	; 0x04
     a1c:	94 60       	ori	r25, 0x04	; 4
     a1e:	9c 83       	std	Y+4, r25	; 0x04
     a20:	8b 83       	std	Y+3, r24	; 0x03
     a22:	2e 85       	ldd	r18, Y+14	; 0x0e
     a24:	3f 85       	ldd	r19, Y+15	; 0x0f
     a26:	8b 81       	ldd	r24, Y+3	; 0x03
     a28:	9c 81       	ldd	r25, Y+4	; 0x04
     a2a:	28 2b       	or	r18, r24
     a2c:	39 2b       	or	r19, r25
     a2e:	8d 81       	ldd	r24, Y+5	; 0x05
     a30:	9e 81       	ldd	r25, Y+6	; 0x06
     a32:	02 96       	adiw	r24, 0x02	; 2
     a34:	4a 89       	ldd	r20, Y+18	; 0x12
     a36:	5b 89       	ldd	r21, Y+19	; 0x13
     a38:	b9 01       	movw	r22, r18
     a3a:	0e 94 92 10 	call	0x2124	; 0x2124 <vTaskPlaceOnUnorderedEventList>
     a3e:	1a 82       	std	Y+2, r1	; 0x02
     a40:	19 82       	std	Y+1, r1	; 0x01
     a42:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <xTaskResumeAll>
     a46:	8b 87       	std	Y+11, r24	; 0x0b
     a48:	8a 89       	ldd	r24, Y+18	; 0x12
     a4a:	9b 89       	ldd	r25, Y+19	; 0x13
     a4c:	89 2b       	or	r24, r25
     a4e:	09 f4       	brne	.+2      	; 0xa52 <xEventGroupWaitBits+0xfa>
     a50:	3f c0       	rjmp	.+126    	; 0xad0 <xEventGroupWaitBits+0x178>
     a52:	8b 85       	ldd	r24, Y+11	; 0x0b
     a54:	88 23       	and	r24, r24
     a56:	11 f4       	brne	.+4      	; 0xa5c <xEventGroupWaitBits+0x104>
     a58:	0e 94 43 0a 	call	0x1486	; 0x1486 <vPortYield>
     a5c:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <uxTaskResetEventItemValue>
     a60:	9a 83       	std	Y+2, r25	; 0x02
     a62:	89 83       	std	Y+1, r24	; 0x01
     a64:	89 81       	ldd	r24, Y+1	; 0x01
     a66:	9a 81       	ldd	r25, Y+2	; 0x02
     a68:	88 27       	eor	r24, r24
     a6a:	92 70       	andi	r25, 0x02	; 2
     a6c:	89 2b       	or	r24, r25
     a6e:	59 f5       	brne	.+86     	; 0xac6 <xEventGroupWaitBits+0x16e>
     a70:	0f b6       	in	r0, 0x3f	; 63
     a72:	f8 94       	cli
     a74:	0f 92       	push	r0
     a76:	8d 81       	ldd	r24, Y+5	; 0x05
     a78:	9e 81       	ldd	r25, Y+6	; 0x06
     a7a:	fc 01       	movw	r30, r24
     a7c:	80 81       	ld	r24, Z
     a7e:	91 81       	ldd	r25, Z+1	; 0x01
     a80:	9a 83       	std	Y+2, r25	; 0x02
     a82:	89 83       	std	Y+1, r24	; 0x01
     a84:	2e 85       	ldd	r18, Y+14	; 0x0e
     a86:	3f 85       	ldd	r19, Y+15	; 0x0f
     a88:	89 81       	ldd	r24, Y+1	; 0x01
     a8a:	9a 81       	ldd	r25, Y+2	; 0x02
     a8c:	49 89       	ldd	r20, Y+17	; 0x11
     a8e:	b9 01       	movw	r22, r18
     a90:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <prvTestWaitCondition>
     a94:	88 23       	and	r24, r24
     a96:	99 f0       	breq	.+38     	; 0xabe <xEventGroupWaitBits+0x166>
     a98:	88 89       	ldd	r24, Y+16	; 0x10
     a9a:	88 23       	and	r24, r24
     a9c:	81 f0       	breq	.+32     	; 0xabe <xEventGroupWaitBits+0x166>
     a9e:	8d 81       	ldd	r24, Y+5	; 0x05
     aa0:	9e 81       	ldd	r25, Y+6	; 0x06
     aa2:	fc 01       	movw	r30, r24
     aa4:	20 81       	ld	r18, Z
     aa6:	31 81       	ldd	r19, Z+1	; 0x01
     aa8:	8e 85       	ldd	r24, Y+14	; 0x0e
     aaa:	9f 85       	ldd	r25, Y+15	; 0x0f
     aac:	80 95       	com	r24
     aae:	90 95       	com	r25
     ab0:	28 23       	and	r18, r24
     ab2:	39 23       	and	r19, r25
     ab4:	8d 81       	ldd	r24, Y+5	; 0x05
     ab6:	9e 81       	ldd	r25, Y+6	; 0x06
     ab8:	fc 01       	movw	r30, r24
     aba:	31 83       	std	Z+1, r19	; 0x01
     abc:	20 83       	st	Z, r18
     abe:	81 e0       	ldi	r24, 0x01	; 1
     ac0:	8f 83       	std	Y+7, r24	; 0x07
     ac2:	0f 90       	pop	r0
     ac4:	0f be       	out	0x3f, r0	; 63
     ac6:	89 81       	ldd	r24, Y+1	; 0x01
     ac8:	9a 81       	ldd	r25, Y+2	; 0x02
     aca:	99 27       	eor	r25, r25
     acc:	9a 83       	std	Y+2, r25	; 0x02
     ace:	89 83       	std	Y+1, r24	; 0x01
     ad0:	89 81       	ldd	r24, Y+1	; 0x01
     ad2:	9a 81       	ldd	r25, Y+2	; 0x02
     ad4:	63 96       	adiw	r28, 0x13	; 19
     ad6:	0f b6       	in	r0, 0x3f	; 63
     ad8:	f8 94       	cli
     ada:	de bf       	out	0x3e, r29	; 62
     adc:	0f be       	out	0x3f, r0	; 63
     ade:	cd bf       	out	0x3d, r28	; 61
     ae0:	df 91       	pop	r29
     ae2:	cf 91       	pop	r28
     ae4:	1f 91       	pop	r17
     ae6:	0f 91       	pop	r16
     ae8:	08 95       	ret

00000aea <xEventGroupClearBits>:
     aea:	cf 93       	push	r28
     aec:	df 93       	push	r29
     aee:	cd b7       	in	r28, 0x3d	; 61
     af0:	de b7       	in	r29, 0x3e	; 62
     af2:	28 97       	sbiw	r28, 0x08	; 8
     af4:	0f b6       	in	r0, 0x3f	; 63
     af6:	f8 94       	cli
     af8:	de bf       	out	0x3e, r29	; 62
     afa:	0f be       	out	0x3f, r0	; 63
     afc:	cd bf       	out	0x3d, r28	; 61
     afe:	9e 83       	std	Y+6, r25	; 0x06
     b00:	8d 83       	std	Y+5, r24	; 0x05
     b02:	78 87       	std	Y+8, r23	; 0x08
     b04:	6f 83       	std	Y+7, r22	; 0x07
     b06:	8d 81       	ldd	r24, Y+5	; 0x05
     b08:	9e 81       	ldd	r25, Y+6	; 0x06
     b0a:	9a 83       	std	Y+2, r25	; 0x02
     b0c:	89 83       	std	Y+1, r24	; 0x01
     b0e:	0f b6       	in	r0, 0x3f	; 63
     b10:	f8 94       	cli
     b12:	0f 92       	push	r0
     b14:	89 81       	ldd	r24, Y+1	; 0x01
     b16:	9a 81       	ldd	r25, Y+2	; 0x02
     b18:	fc 01       	movw	r30, r24
     b1a:	80 81       	ld	r24, Z
     b1c:	91 81       	ldd	r25, Z+1	; 0x01
     b1e:	9c 83       	std	Y+4, r25	; 0x04
     b20:	8b 83       	std	Y+3, r24	; 0x03
     b22:	89 81       	ldd	r24, Y+1	; 0x01
     b24:	9a 81       	ldd	r25, Y+2	; 0x02
     b26:	fc 01       	movw	r30, r24
     b28:	20 81       	ld	r18, Z
     b2a:	31 81       	ldd	r19, Z+1	; 0x01
     b2c:	8f 81       	ldd	r24, Y+7	; 0x07
     b2e:	98 85       	ldd	r25, Y+8	; 0x08
     b30:	80 95       	com	r24
     b32:	90 95       	com	r25
     b34:	28 23       	and	r18, r24
     b36:	39 23       	and	r19, r25
     b38:	89 81       	ldd	r24, Y+1	; 0x01
     b3a:	9a 81       	ldd	r25, Y+2	; 0x02
     b3c:	fc 01       	movw	r30, r24
     b3e:	31 83       	std	Z+1, r19	; 0x01
     b40:	20 83       	st	Z, r18
     b42:	0f 90       	pop	r0
     b44:	0f be       	out	0x3f, r0	; 63
     b46:	8b 81       	ldd	r24, Y+3	; 0x03
     b48:	9c 81       	ldd	r25, Y+4	; 0x04
     b4a:	28 96       	adiw	r28, 0x08	; 8
     b4c:	0f b6       	in	r0, 0x3f	; 63
     b4e:	f8 94       	cli
     b50:	de bf       	out	0x3e, r29	; 62
     b52:	0f be       	out	0x3f, r0	; 63
     b54:	cd bf       	out	0x3d, r28	; 61
     b56:	df 91       	pop	r29
     b58:	cf 91       	pop	r28
     b5a:	08 95       	ret

00000b5c <xEventGroupSetBits>:
     b5c:	cf 93       	push	r28
     b5e:	df 93       	push	r29
     b60:	cd b7       	in	r28, 0x3d	; 61
     b62:	de b7       	in	r29, 0x3e	; 62
     b64:	65 97       	sbiw	r28, 0x15	; 21
     b66:	0f b6       	in	r0, 0x3f	; 63
     b68:	f8 94       	cli
     b6a:	de bf       	out	0x3e, r29	; 62
     b6c:	0f be       	out	0x3f, r0	; 63
     b6e:	cd bf       	out	0x3d, r28	; 61
     b70:	9b 8b       	std	Y+19, r25	; 0x13
     b72:	8a 8b       	std	Y+18, r24	; 0x12
     b74:	7d 8b       	std	Y+21, r23	; 0x15
     b76:	6c 8b       	std	Y+20, r22	; 0x14
     b78:	1c 82       	std	Y+4, r1	; 0x04
     b7a:	1b 82       	std	Y+3, r1	; 0x03
     b7c:	8a 89       	ldd	r24, Y+18	; 0x12
     b7e:	9b 89       	ldd	r25, Y+19	; 0x13
     b80:	9f 83       	std	Y+7, r25	; 0x07
     b82:	8e 83       	std	Y+6, r24	; 0x06
     b84:	1d 82       	std	Y+5, r1	; 0x05
     b86:	8e 81       	ldd	r24, Y+6	; 0x06
     b88:	9f 81       	ldd	r25, Y+7	; 0x07
     b8a:	02 96       	adiw	r24, 0x02	; 2
     b8c:	99 87       	std	Y+9, r25	; 0x09
     b8e:	88 87       	std	Y+8, r24	; 0x08
     b90:	88 85       	ldd	r24, Y+8	; 0x08
     b92:	99 85       	ldd	r25, Y+9	; 0x09
     b94:	03 96       	adiw	r24, 0x03	; 3
     b96:	9b 87       	std	Y+11, r25	; 0x0b
     b98:	8a 87       	std	Y+10, r24	; 0x0a
     b9a:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <vTaskSuspendAll>
     b9e:	88 85       	ldd	r24, Y+8	; 0x08
     ba0:	99 85       	ldd	r25, Y+9	; 0x09
     ba2:	fc 01       	movw	r30, r24
     ba4:	85 81       	ldd	r24, Z+5	; 0x05
     ba6:	96 81       	ldd	r25, Z+6	; 0x06
     ba8:	9a 83       	std	Y+2, r25	; 0x02
     baa:	89 83       	std	Y+1, r24	; 0x01
     bac:	8e 81       	ldd	r24, Y+6	; 0x06
     bae:	9f 81       	ldd	r25, Y+7	; 0x07
     bb0:	fc 01       	movw	r30, r24
     bb2:	20 81       	ld	r18, Z
     bb4:	31 81       	ldd	r19, Z+1	; 0x01
     bb6:	8c 89       	ldd	r24, Y+20	; 0x14
     bb8:	9d 89       	ldd	r25, Y+21	; 0x15
     bba:	28 2b       	or	r18, r24
     bbc:	39 2b       	or	r19, r25
     bbe:	8e 81       	ldd	r24, Y+6	; 0x06
     bc0:	9f 81       	ldd	r25, Y+7	; 0x07
     bc2:	fc 01       	movw	r30, r24
     bc4:	31 83       	std	Z+1, r19	; 0x01
     bc6:	20 83       	st	Z, r18
     bc8:	5e c0       	rjmp	.+188    	; 0xc86 <xEventGroupSetBits+0x12a>
     bca:	89 81       	ldd	r24, Y+1	; 0x01
     bcc:	9a 81       	ldd	r25, Y+2	; 0x02
     bce:	fc 01       	movw	r30, r24
     bd0:	82 81       	ldd	r24, Z+2	; 0x02
     bd2:	93 81       	ldd	r25, Z+3	; 0x03
     bd4:	9d 87       	std	Y+13, r25	; 0x0d
     bd6:	8c 87       	std	Y+12, r24	; 0x0c
     bd8:	89 81       	ldd	r24, Y+1	; 0x01
     bda:	9a 81       	ldd	r25, Y+2	; 0x02
     bdc:	fc 01       	movw	r30, r24
     bde:	80 81       	ld	r24, Z
     be0:	91 81       	ldd	r25, Z+1	; 0x01
     be2:	9f 87       	std	Y+15, r25	; 0x0f
     be4:	8e 87       	std	Y+14, r24	; 0x0e
     be6:	1d 82       	std	Y+5, r1	; 0x05
     be8:	8e 85       	ldd	r24, Y+14	; 0x0e
     bea:	9f 85       	ldd	r25, Y+15	; 0x0f
     bec:	88 27       	eor	r24, r24
     bee:	99 8b       	std	Y+17, r25	; 0x11
     bf0:	88 8b       	std	Y+16, r24	; 0x10
     bf2:	8e 85       	ldd	r24, Y+14	; 0x0e
     bf4:	9f 85       	ldd	r25, Y+15	; 0x0f
     bf6:	99 27       	eor	r25, r25
     bf8:	9f 87       	std	Y+15, r25	; 0x0f
     bfa:	8e 87       	std	Y+14, r24	; 0x0e
     bfc:	88 89       	ldd	r24, Y+16	; 0x10
     bfe:	99 89       	ldd	r25, Y+17	; 0x11
     c00:	88 27       	eor	r24, r24
     c02:	94 70       	andi	r25, 0x04	; 4
     c04:	89 2b       	or	r24, r25
     c06:	71 f4       	brne	.+28     	; 0xc24 <xEventGroupSetBits+0xc8>
     c08:	8e 81       	ldd	r24, Y+6	; 0x06
     c0a:	9f 81       	ldd	r25, Y+7	; 0x07
     c0c:	fc 01       	movw	r30, r24
     c0e:	20 81       	ld	r18, Z
     c10:	31 81       	ldd	r19, Z+1	; 0x01
     c12:	8e 85       	ldd	r24, Y+14	; 0x0e
     c14:	9f 85       	ldd	r25, Y+15	; 0x0f
     c16:	82 23       	and	r24, r18
     c18:	93 23       	and	r25, r19
     c1a:	89 2b       	or	r24, r25
     c1c:	99 f0       	breq	.+38     	; 0xc44 <xEventGroupSetBits+0xe8>
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	8d 83       	std	Y+5, r24	; 0x05
     c22:	10 c0       	rjmp	.+32     	; 0xc44 <xEventGroupSetBits+0xe8>
     c24:	8e 81       	ldd	r24, Y+6	; 0x06
     c26:	9f 81       	ldd	r25, Y+7	; 0x07
     c28:	fc 01       	movw	r30, r24
     c2a:	20 81       	ld	r18, Z
     c2c:	31 81       	ldd	r19, Z+1	; 0x01
     c2e:	8e 85       	ldd	r24, Y+14	; 0x0e
     c30:	9f 85       	ldd	r25, Y+15	; 0x0f
     c32:	28 23       	and	r18, r24
     c34:	39 23       	and	r19, r25
     c36:	8e 85       	ldd	r24, Y+14	; 0x0e
     c38:	9f 85       	ldd	r25, Y+15	; 0x0f
     c3a:	28 17       	cp	r18, r24
     c3c:	39 07       	cpc	r19, r25
     c3e:	11 f4       	brne	.+4      	; 0xc44 <xEventGroupSetBits+0xe8>
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	8d 83       	std	Y+5, r24	; 0x05
     c44:	8d 81       	ldd	r24, Y+5	; 0x05
     c46:	88 23       	and	r24, r24
     c48:	d1 f0       	breq	.+52     	; 0xc7e <xEventGroupSetBits+0x122>
     c4a:	88 89       	ldd	r24, Y+16	; 0x10
     c4c:	99 89       	ldd	r25, Y+17	; 0x11
     c4e:	88 27       	eor	r24, r24
     c50:	91 70       	andi	r25, 0x01	; 1
     c52:	89 2b       	or	r24, r25
     c54:	41 f0       	breq	.+16     	; 0xc66 <xEventGroupSetBits+0x10a>
     c56:	2b 81       	ldd	r18, Y+3	; 0x03
     c58:	3c 81       	ldd	r19, Y+4	; 0x04
     c5a:	8e 85       	ldd	r24, Y+14	; 0x0e
     c5c:	9f 85       	ldd	r25, Y+15	; 0x0f
     c5e:	82 2b       	or	r24, r18
     c60:	93 2b       	or	r25, r19
     c62:	9c 83       	std	Y+4, r25	; 0x04
     c64:	8b 83       	std	Y+3, r24	; 0x03
     c66:	8e 81       	ldd	r24, Y+6	; 0x06
     c68:	9f 81       	ldd	r25, Y+7	; 0x07
     c6a:	fc 01       	movw	r30, r24
     c6c:	80 81       	ld	r24, Z
     c6e:	91 81       	ldd	r25, Z+1	; 0x01
     c70:	9c 01       	movw	r18, r24
     c72:	32 60       	ori	r19, 0x02	; 2
     c74:	89 81       	ldd	r24, Y+1	; 0x01
     c76:	9a 81       	ldd	r25, Y+2	; 0x02
     c78:	b9 01       	movw	r22, r18
     c7a:	0e 94 c4 10 	call	0x2188	; 0x2188 <vTaskRemoveFromUnorderedEventList>
     c7e:	8c 85       	ldd	r24, Y+12	; 0x0c
     c80:	9d 85       	ldd	r25, Y+13	; 0x0d
     c82:	9a 83       	std	Y+2, r25	; 0x02
     c84:	89 83       	std	Y+1, r24	; 0x01
     c86:	29 81       	ldd	r18, Y+1	; 0x01
     c88:	3a 81       	ldd	r19, Y+2	; 0x02
     c8a:	8a 85       	ldd	r24, Y+10	; 0x0a
     c8c:	9b 85       	ldd	r25, Y+11	; 0x0b
     c8e:	28 17       	cp	r18, r24
     c90:	39 07       	cpc	r19, r25
     c92:	09 f0       	breq	.+2      	; 0xc96 <xEventGroupSetBits+0x13a>
     c94:	9a cf       	rjmp	.-204    	; 0xbca <xEventGroupSetBits+0x6e>
     c96:	8e 81       	ldd	r24, Y+6	; 0x06
     c98:	9f 81       	ldd	r25, Y+7	; 0x07
     c9a:	fc 01       	movw	r30, r24
     c9c:	20 81       	ld	r18, Z
     c9e:	31 81       	ldd	r19, Z+1	; 0x01
     ca0:	8b 81       	ldd	r24, Y+3	; 0x03
     ca2:	9c 81       	ldd	r25, Y+4	; 0x04
     ca4:	80 95       	com	r24
     ca6:	90 95       	com	r25
     ca8:	28 23       	and	r18, r24
     caa:	39 23       	and	r19, r25
     cac:	8e 81       	ldd	r24, Y+6	; 0x06
     cae:	9f 81       	ldd	r25, Y+7	; 0x07
     cb0:	fc 01       	movw	r30, r24
     cb2:	31 83       	std	Z+1, r19	; 0x01
     cb4:	20 83       	st	Z, r18
     cb6:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <xTaskResumeAll>
     cba:	8e 81       	ldd	r24, Y+6	; 0x06
     cbc:	9f 81       	ldd	r25, Y+7	; 0x07
     cbe:	fc 01       	movw	r30, r24
     cc0:	80 81       	ld	r24, Z
     cc2:	91 81       	ldd	r25, Z+1	; 0x01
     cc4:	65 96       	adiw	r28, 0x15	; 21
     cc6:	0f b6       	in	r0, 0x3f	; 63
     cc8:	f8 94       	cli
     cca:	de bf       	out	0x3e, r29	; 62
     ccc:	0f be       	out	0x3f, r0	; 63
     cce:	cd bf       	out	0x3d, r28	; 61
     cd0:	df 91       	pop	r29
     cd2:	cf 91       	pop	r28
     cd4:	08 95       	ret

00000cd6 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
     cd6:	cf 93       	push	r28
     cd8:	df 93       	push	r29
     cda:	00 d0       	rcall	.+0      	; 0xcdc <prvTestWaitCondition+0x6>
     cdc:	00 d0       	rcall	.+0      	; 0xcde <prvTestWaitCondition+0x8>
     cde:	00 d0       	rcall	.+0      	; 0xce0 <prvTestWaitCondition+0xa>
     ce0:	cd b7       	in	r28, 0x3d	; 61
     ce2:	de b7       	in	r29, 0x3e	; 62
     ce4:	9b 83       	std	Y+3, r25	; 0x03
     ce6:	8a 83       	std	Y+2, r24	; 0x02
     ce8:	7d 83       	std	Y+5, r23	; 0x05
     cea:	6c 83       	std	Y+4, r22	; 0x04
     cec:	4e 83       	std	Y+6, r20	; 0x06
BaseType_t xWaitConditionMet = pdFALSE;
     cee:	19 82       	std	Y+1, r1	; 0x01

	if( xWaitForAllBits == pdFALSE )
     cf0:	8e 81       	ldd	r24, Y+6	; 0x06
     cf2:	88 23       	and	r24, r24
     cf4:	59 f4       	brne	.+22     	; 0xd0c <prvTestWaitCondition+0x36>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
     cf6:	2a 81       	ldd	r18, Y+2	; 0x02
     cf8:	3b 81       	ldd	r19, Y+3	; 0x03
     cfa:	8c 81       	ldd	r24, Y+4	; 0x04
     cfc:	9d 81       	ldd	r25, Y+5	; 0x05
     cfe:	82 23       	and	r24, r18
     d00:	93 23       	and	r25, r19
     d02:	89 2b       	or	r24, r25
     d04:	81 f0       	breq	.+32     	; 0xd26 <prvTestWaitCondition+0x50>
		{
			xWaitConditionMet = pdTRUE;
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	89 83       	std	Y+1, r24	; 0x01
     d0a:	0d c0       	rjmp	.+26     	; 0xd26 <prvTestWaitCondition+0x50>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
     d0c:	2a 81       	ldd	r18, Y+2	; 0x02
     d0e:	3b 81       	ldd	r19, Y+3	; 0x03
     d10:	8c 81       	ldd	r24, Y+4	; 0x04
     d12:	9d 81       	ldd	r25, Y+5	; 0x05
     d14:	28 23       	and	r18, r24
     d16:	39 23       	and	r19, r25
     d18:	8c 81       	ldd	r24, Y+4	; 0x04
     d1a:	9d 81       	ldd	r25, Y+5	; 0x05
     d1c:	28 17       	cp	r18, r24
     d1e:	39 07       	cpc	r19, r25
     d20:	11 f4       	brne	.+4      	; 0xd26 <prvTestWaitCondition+0x50>
		{
			xWaitConditionMet = pdTRUE;
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	89 83       	std	Y+1, r24	; 0x01
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
     d26:	89 81       	ldd	r24, Y+1	; 0x01
}
     d28:	26 96       	adiw	r28, 0x06	; 6
     d2a:	0f b6       	in	r0, 0x3f	; 63
     d2c:	f8 94       	cli
     d2e:	de bf       	out	0x3e, r29	; 62
     d30:	0f be       	out	0x3f, r0	; 63
     d32:	cd bf       	out	0x3d, r28	; 61
     d34:	df 91       	pop	r29
     d36:	cf 91       	pop	r28
     d38:	08 95       	ret

00000d3a <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     d3a:	cf 93       	push	r28
     d3c:	df 93       	push	r29
     d3e:	00 d0       	rcall	.+0      	; 0xd40 <pvPortMalloc+0x6>
     d40:	00 d0       	rcall	.+0      	; 0xd42 <pvPortMalloc+0x8>
     d42:	cd b7       	in	r28, 0x3d	; 61
     d44:	de b7       	in	r29, 0x3e	; 62
     d46:	9c 83       	std	Y+4, r25	; 0x04
     d48:	8b 83       	std	Y+3, r24	; 0x03
void *pvReturn = NULL;
     d4a:	1a 82       	std	Y+2, r1	; 0x02
     d4c:	19 82       	std	Y+1, r1	; 0x01
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	}
	#endif

	vTaskSuspendAll();
     d4e:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
     d52:	80 91 a5 06 	lds	r24, 0x06A5	; 0x8006a5 <pucAlignedHeap.2085>
     d56:	90 91 a6 06 	lds	r25, 0x06A6	; 0x8006a6 <pucAlignedHeap.2085+0x1>
     d5a:	89 2b       	or	r24, r25
     d5c:	31 f4       	brne	.+12     	; 0xd6a <pvPortMalloc+0x30>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
     d5e:	88 ec       	ldi	r24, 0xC8	; 200
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	90 93 a6 06 	sts	0x06A6, r25	; 0x8006a6 <pucAlignedHeap.2085+0x1>
     d66:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <pucAlignedHeap.2085>
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     d6a:	20 91 a3 06 	lds	r18, 0x06A3	; 0x8006a3 <xNextFreeByte>
     d6e:	30 91 a4 06 	lds	r19, 0x06A4	; 0x8006a4 <xNextFreeByte+0x1>
     d72:	8b 81       	ldd	r24, Y+3	; 0x03
     d74:	9c 81       	ldd	r25, Y+4	; 0x04
     d76:	82 0f       	add	r24, r18
     d78:	93 1f       	adc	r25, r19
     d7a:	8b 3d       	cpi	r24, 0xDB	; 219
     d7c:	95 40       	sbci	r25, 0x05	; 5
     d7e:	38 f5       	brcc	.+78     	; 0xdce <pvPortMalloc+0x94>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
     d80:	20 91 a3 06 	lds	r18, 0x06A3	; 0x8006a3 <xNextFreeByte>
     d84:	30 91 a4 06 	lds	r19, 0x06A4	; 0x8006a4 <xNextFreeByte+0x1>
     d88:	8b 81       	ldd	r24, Y+3	; 0x03
     d8a:	9c 81       	ldd	r25, Y+4	; 0x04
     d8c:	28 0f       	add	r18, r24
     d8e:	39 1f       	adc	r19, r25
     d90:	80 91 a3 06 	lds	r24, 0x06A3	; 0x8006a3 <xNextFreeByte>
     d94:	90 91 a4 06 	lds	r25, 0x06A4	; 0x8006a4 <xNextFreeByte+0x1>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     d98:	82 17       	cp	r24, r18
     d9a:	93 07       	cpc	r25, r19
     d9c:	c0 f4       	brcc	.+48     	; 0xdce <pvPortMalloc+0x94>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
     d9e:	20 91 a5 06 	lds	r18, 0x06A5	; 0x8006a5 <pucAlignedHeap.2085>
     da2:	30 91 a6 06 	lds	r19, 0x06A6	; 0x8006a6 <pucAlignedHeap.2085+0x1>
     da6:	80 91 a3 06 	lds	r24, 0x06A3	; 0x8006a3 <xNextFreeByte>
     daa:	90 91 a4 06 	lds	r25, 0x06A4	; 0x8006a4 <xNextFreeByte+0x1>
     dae:	82 0f       	add	r24, r18
     db0:	93 1f       	adc	r25, r19
     db2:	9a 83       	std	Y+2, r25	; 0x02
     db4:	89 83       	std	Y+1, r24	; 0x01
			xNextFreeByte += xWantedSize;
     db6:	20 91 a3 06 	lds	r18, 0x06A3	; 0x8006a3 <xNextFreeByte>
     dba:	30 91 a4 06 	lds	r19, 0x06A4	; 0x8006a4 <xNextFreeByte+0x1>
     dbe:	8b 81       	ldd	r24, Y+3	; 0x03
     dc0:	9c 81       	ldd	r25, Y+4	; 0x04
     dc2:	82 0f       	add	r24, r18
     dc4:	93 1f       	adc	r25, r19
     dc6:	90 93 a4 06 	sts	0x06A4, r25	; 0x8006a4 <xNextFreeByte+0x1>
     dca:	80 93 a3 06 	sts	0x06A3, r24	; 0x8006a3 <xNextFreeByte>
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     dce:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
     dd2:	89 81       	ldd	r24, Y+1	; 0x01
     dd4:	9a 81       	ldd	r25, Y+2	; 0x02
}
     dd6:	0f 90       	pop	r0
     dd8:	0f 90       	pop	r0
     dda:	0f 90       	pop	r0
     ddc:	0f 90       	pop	r0
     dde:	df 91       	pop	r29
     de0:	cf 91       	pop	r28
     de2:	08 95       	ret

00000de4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     de4:	cf 93       	push	r28
     de6:	df 93       	push	r29
     de8:	00 d0       	rcall	.+0      	; 0xdea <vPortFree+0x6>
     dea:	cd b7       	in	r28, 0x3d	; 61
     dec:	de b7       	in	r29, 0x3e	; 62
     dee:	9a 83       	std	Y+2, r25	; 0x02
     df0:	89 83       	std	Y+1, r24	; 0x01
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
}
     df2:	00 00       	nop
     df4:	0f 90       	pop	r0
     df6:	0f 90       	pop	r0
     df8:	df 91       	pop	r29
     dfa:	cf 91       	pop	r28
     dfc:	08 95       	ret

00000dfe <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     dfe:	cf 93       	push	r28
     e00:	df 93       	push	r29
     e02:	00 d0       	rcall	.+0      	; 0xe04 <vListInitialise+0x6>
     e04:	cd b7       	in	r28, 0x3d	; 61
     e06:	de b7       	in	r29, 0x3e	; 62
     e08:	9a 83       	std	Y+2, r25	; 0x02
     e0a:	89 83       	std	Y+1, r24	; 0x01
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     e0c:	89 81       	ldd	r24, Y+1	; 0x01
     e0e:	9a 81       	ldd	r25, Y+2	; 0x02
     e10:	9c 01       	movw	r18, r24
     e12:	2d 5f       	subi	r18, 0xFD	; 253
     e14:	3f 4f       	sbci	r19, 0xFF	; 255
     e16:	89 81       	ldd	r24, Y+1	; 0x01
     e18:	9a 81       	ldd	r25, Y+2	; 0x02
     e1a:	fc 01       	movw	r30, r24
     e1c:	32 83       	std	Z+2, r19	; 0x02
     e1e:	21 83       	std	Z+1, r18	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     e20:	89 81       	ldd	r24, Y+1	; 0x01
     e22:	9a 81       	ldd	r25, Y+2	; 0x02
     e24:	2f ef       	ldi	r18, 0xFF	; 255
     e26:	3f ef       	ldi	r19, 0xFF	; 255
     e28:	fc 01       	movw	r30, r24
     e2a:	34 83       	std	Z+4, r19	; 0x04
     e2c:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     e2e:	89 81       	ldd	r24, Y+1	; 0x01
     e30:	9a 81       	ldd	r25, Y+2	; 0x02
     e32:	9c 01       	movw	r18, r24
     e34:	2d 5f       	subi	r18, 0xFD	; 253
     e36:	3f 4f       	sbci	r19, 0xFF	; 255
     e38:	89 81       	ldd	r24, Y+1	; 0x01
     e3a:	9a 81       	ldd	r25, Y+2	; 0x02
     e3c:	fc 01       	movw	r30, r24
     e3e:	36 83       	std	Z+6, r19	; 0x06
     e40:	25 83       	std	Z+5, r18	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     e42:	89 81       	ldd	r24, Y+1	; 0x01
     e44:	9a 81       	ldd	r25, Y+2	; 0x02
     e46:	9c 01       	movw	r18, r24
     e48:	2d 5f       	subi	r18, 0xFD	; 253
     e4a:	3f 4f       	sbci	r19, 0xFF	; 255
     e4c:	89 81       	ldd	r24, Y+1	; 0x01
     e4e:	9a 81       	ldd	r25, Y+2	; 0x02
     e50:	fc 01       	movw	r30, r24
     e52:	30 87       	std	Z+8, r19	; 0x08
     e54:	27 83       	std	Z+7, r18	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     e56:	89 81       	ldd	r24, Y+1	; 0x01
     e58:	9a 81       	ldd	r25, Y+2	; 0x02
     e5a:	fc 01       	movw	r30, r24
     e5c:	10 82       	st	Z, r1

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
     e5e:	00 00       	nop
     e60:	0f 90       	pop	r0
     e62:	0f 90       	pop	r0
     e64:	df 91       	pop	r29
     e66:	cf 91       	pop	r28
     e68:	08 95       	ret

00000e6a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
     e6a:	cf 93       	push	r28
     e6c:	df 93       	push	r29
     e6e:	00 d0       	rcall	.+0      	; 0xe70 <vListInitialiseItem+0x6>
     e70:	cd b7       	in	r28, 0x3d	; 61
     e72:	de b7       	in	r29, 0x3e	; 62
     e74:	9a 83       	std	Y+2, r25	; 0x02
     e76:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
     e78:	89 81       	ldd	r24, Y+1	; 0x01
     e7a:	9a 81       	ldd	r25, Y+2	; 0x02
     e7c:	fc 01       	movw	r30, r24
     e7e:	11 86       	std	Z+9, r1	; 0x09
     e80:	10 86       	std	Z+8, r1	; 0x08

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
     e82:	00 00       	nop
     e84:	0f 90       	pop	r0
     e86:	0f 90       	pop	r0
     e88:	df 91       	pop	r29
     e8a:	cf 91       	pop	r28
     e8c:	08 95       	ret

00000e8e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     e8e:	cf 93       	push	r28
     e90:	df 93       	push	r29
     e92:	00 d0       	rcall	.+0      	; 0xe94 <vListInsertEnd+0x6>
     e94:	00 d0       	rcall	.+0      	; 0xe96 <vListInsertEnd+0x8>
     e96:	00 d0       	rcall	.+0      	; 0xe98 <vListInsertEnd+0xa>
     e98:	cd b7       	in	r28, 0x3d	; 61
     e9a:	de b7       	in	r29, 0x3e	; 62
     e9c:	9c 83       	std	Y+4, r25	; 0x04
     e9e:	8b 83       	std	Y+3, r24	; 0x03
     ea0:	7e 83       	std	Y+6, r23	; 0x06
     ea2:	6d 83       	std	Y+5, r22	; 0x05
ListItem_t * const pxIndex = pxList->pxIndex;
     ea4:	8b 81       	ldd	r24, Y+3	; 0x03
     ea6:	9c 81       	ldd	r25, Y+4	; 0x04
     ea8:	fc 01       	movw	r30, r24
     eaa:	81 81       	ldd	r24, Z+1	; 0x01
     eac:	92 81       	ldd	r25, Z+2	; 0x02
     eae:	9a 83       	std	Y+2, r25	; 0x02
     eb0:	89 83       	std	Y+1, r24	; 0x01
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     eb2:	8d 81       	ldd	r24, Y+5	; 0x05
     eb4:	9e 81       	ldd	r25, Y+6	; 0x06
     eb6:	29 81       	ldd	r18, Y+1	; 0x01
     eb8:	3a 81       	ldd	r19, Y+2	; 0x02
     eba:	fc 01       	movw	r30, r24
     ebc:	33 83       	std	Z+3, r19	; 0x03
     ebe:	22 83       	std	Z+2, r18	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     ec0:	89 81       	ldd	r24, Y+1	; 0x01
     ec2:	9a 81       	ldd	r25, Y+2	; 0x02
     ec4:	fc 01       	movw	r30, r24
     ec6:	24 81       	ldd	r18, Z+4	; 0x04
     ec8:	35 81       	ldd	r19, Z+5	; 0x05
     eca:	8d 81       	ldd	r24, Y+5	; 0x05
     ecc:	9e 81       	ldd	r25, Y+6	; 0x06
     ece:	fc 01       	movw	r30, r24
     ed0:	35 83       	std	Z+5, r19	; 0x05
     ed2:	24 83       	std	Z+4, r18	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     ed4:	89 81       	ldd	r24, Y+1	; 0x01
     ed6:	9a 81       	ldd	r25, Y+2	; 0x02
     ed8:	fc 01       	movw	r30, r24
     eda:	84 81       	ldd	r24, Z+4	; 0x04
     edc:	95 81       	ldd	r25, Z+5	; 0x05
     ede:	2d 81       	ldd	r18, Y+5	; 0x05
     ee0:	3e 81       	ldd	r19, Y+6	; 0x06
     ee2:	fc 01       	movw	r30, r24
     ee4:	33 83       	std	Z+3, r19	; 0x03
     ee6:	22 83       	std	Z+2, r18	; 0x02
	pxIndex->pxPrevious = pxNewListItem;
     ee8:	89 81       	ldd	r24, Y+1	; 0x01
     eea:	9a 81       	ldd	r25, Y+2	; 0x02
     eec:	2d 81       	ldd	r18, Y+5	; 0x05
     eee:	3e 81       	ldd	r19, Y+6	; 0x06
     ef0:	fc 01       	movw	r30, r24
     ef2:	35 83       	std	Z+5, r19	; 0x05
     ef4:	24 83       	std	Z+4, r18	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
     ef6:	8d 81       	ldd	r24, Y+5	; 0x05
     ef8:	9e 81       	ldd	r25, Y+6	; 0x06
     efa:	2b 81       	ldd	r18, Y+3	; 0x03
     efc:	3c 81       	ldd	r19, Y+4	; 0x04
     efe:	fc 01       	movw	r30, r24
     f00:	31 87       	std	Z+9, r19	; 0x09
     f02:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
     f04:	8b 81       	ldd	r24, Y+3	; 0x03
     f06:	9c 81       	ldd	r25, Y+4	; 0x04
     f08:	fc 01       	movw	r30, r24
     f0a:	80 81       	ld	r24, Z
     f0c:	21 e0       	ldi	r18, 0x01	; 1
     f0e:	28 0f       	add	r18, r24
     f10:	8b 81       	ldd	r24, Y+3	; 0x03
     f12:	9c 81       	ldd	r25, Y+4	; 0x04
     f14:	fc 01       	movw	r30, r24
     f16:	20 83       	st	Z, r18
}
     f18:	00 00       	nop
     f1a:	26 96       	adiw	r28, 0x06	; 6
     f1c:	0f b6       	in	r0, 0x3f	; 63
     f1e:	f8 94       	cli
     f20:	de bf       	out	0x3e, r29	; 62
     f22:	0f be       	out	0x3f, r0	; 63
     f24:	cd bf       	out	0x3d, r28	; 61
     f26:	df 91       	pop	r29
     f28:	cf 91       	pop	r28
     f2a:	08 95       	ret

00000f2c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     f2c:	cf 93       	push	r28
     f2e:	df 93       	push	r29
     f30:	cd b7       	in	r28, 0x3d	; 61
     f32:	de b7       	in	r29, 0x3e	; 62
     f34:	28 97       	sbiw	r28, 0x08	; 8
     f36:	0f b6       	in	r0, 0x3f	; 63
     f38:	f8 94       	cli
     f3a:	de bf       	out	0x3e, r29	; 62
     f3c:	0f be       	out	0x3f, r0	; 63
     f3e:	cd bf       	out	0x3d, r28	; 61
     f40:	9e 83       	std	Y+6, r25	; 0x06
     f42:	8d 83       	std	Y+5, r24	; 0x05
     f44:	78 87       	std	Y+8, r23	; 0x08
     f46:	6f 83       	std	Y+7, r22	; 0x07
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     f48:	8f 81       	ldd	r24, Y+7	; 0x07
     f4a:	98 85       	ldd	r25, Y+8	; 0x08
     f4c:	fc 01       	movw	r30, r24
     f4e:	80 81       	ld	r24, Z
     f50:	91 81       	ldd	r25, Z+1	; 0x01
     f52:	9c 83       	std	Y+4, r25	; 0x04
     f54:	8b 83       	std	Y+3, r24	; 0x03
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     f56:	8b 81       	ldd	r24, Y+3	; 0x03
     f58:	9c 81       	ldd	r25, Y+4	; 0x04
     f5a:	01 96       	adiw	r24, 0x01	; 1
     f5c:	41 f4       	brne	.+16     	; 0xf6e <vListInsert+0x42>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     f5e:	8d 81       	ldd	r24, Y+5	; 0x05
     f60:	9e 81       	ldd	r25, Y+6	; 0x06
     f62:	fc 01       	movw	r30, r24
     f64:	87 81       	ldd	r24, Z+7	; 0x07
     f66:	90 85       	ldd	r25, Z+8	; 0x08
     f68:	9a 83       	std	Y+2, r25	; 0x02
     f6a:	89 83       	std	Y+1, r24	; 0x01
     f6c:	1a c0       	rjmp	.+52     	; 0xfa2 <vListInsert+0x76>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     f6e:	8d 81       	ldd	r24, Y+5	; 0x05
     f70:	9e 81       	ldd	r25, Y+6	; 0x06
     f72:	03 96       	adiw	r24, 0x03	; 3
     f74:	9a 83       	std	Y+2, r25	; 0x02
     f76:	89 83       	std	Y+1, r24	; 0x01
     f78:	07 c0       	rjmp	.+14     	; 0xf88 <vListInsert+0x5c>
     f7a:	89 81       	ldd	r24, Y+1	; 0x01
     f7c:	9a 81       	ldd	r25, Y+2	; 0x02
     f7e:	fc 01       	movw	r30, r24
     f80:	82 81       	ldd	r24, Z+2	; 0x02
     f82:	93 81       	ldd	r25, Z+3	; 0x03
     f84:	9a 83       	std	Y+2, r25	; 0x02
     f86:	89 83       	std	Y+1, r24	; 0x01
     f88:	89 81       	ldd	r24, Y+1	; 0x01
     f8a:	9a 81       	ldd	r25, Y+2	; 0x02
     f8c:	fc 01       	movw	r30, r24
     f8e:	82 81       	ldd	r24, Z+2	; 0x02
     f90:	93 81       	ldd	r25, Z+3	; 0x03
     f92:	fc 01       	movw	r30, r24
     f94:	20 81       	ld	r18, Z
     f96:	31 81       	ldd	r19, Z+1	; 0x01
     f98:	8b 81       	ldd	r24, Y+3	; 0x03
     f9a:	9c 81       	ldd	r25, Y+4	; 0x04
     f9c:	82 17       	cp	r24, r18
     f9e:	93 07       	cpc	r25, r19
     fa0:	60 f7       	brcc	.-40     	; 0xf7a <vListInsert+0x4e>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     fa2:	89 81       	ldd	r24, Y+1	; 0x01
     fa4:	9a 81       	ldd	r25, Y+2	; 0x02
     fa6:	fc 01       	movw	r30, r24
     fa8:	22 81       	ldd	r18, Z+2	; 0x02
     faa:	33 81       	ldd	r19, Z+3	; 0x03
     fac:	8f 81       	ldd	r24, Y+7	; 0x07
     fae:	98 85       	ldd	r25, Y+8	; 0x08
     fb0:	fc 01       	movw	r30, r24
     fb2:	33 83       	std	Z+3, r19	; 0x03
     fb4:	22 83       	std	Z+2, r18	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     fb6:	8f 81       	ldd	r24, Y+7	; 0x07
     fb8:	98 85       	ldd	r25, Y+8	; 0x08
     fba:	fc 01       	movw	r30, r24
     fbc:	82 81       	ldd	r24, Z+2	; 0x02
     fbe:	93 81       	ldd	r25, Z+3	; 0x03
     fc0:	2f 81       	ldd	r18, Y+7	; 0x07
     fc2:	38 85       	ldd	r19, Y+8	; 0x08
     fc4:	fc 01       	movw	r30, r24
     fc6:	35 83       	std	Z+5, r19	; 0x05
     fc8:	24 83       	std	Z+4, r18	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
     fca:	8f 81       	ldd	r24, Y+7	; 0x07
     fcc:	98 85       	ldd	r25, Y+8	; 0x08
     fce:	29 81       	ldd	r18, Y+1	; 0x01
     fd0:	3a 81       	ldd	r19, Y+2	; 0x02
     fd2:	fc 01       	movw	r30, r24
     fd4:	35 83       	std	Z+5, r19	; 0x05
     fd6:	24 83       	std	Z+4, r18	; 0x04
	pxIterator->pxNext = pxNewListItem;
     fd8:	89 81       	ldd	r24, Y+1	; 0x01
     fda:	9a 81       	ldd	r25, Y+2	; 0x02
     fdc:	2f 81       	ldd	r18, Y+7	; 0x07
     fde:	38 85       	ldd	r19, Y+8	; 0x08
     fe0:	fc 01       	movw	r30, r24
     fe2:	33 83       	std	Z+3, r19	; 0x03
     fe4:	22 83       	std	Z+2, r18	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
     fe6:	8f 81       	ldd	r24, Y+7	; 0x07
     fe8:	98 85       	ldd	r25, Y+8	; 0x08
     fea:	2d 81       	ldd	r18, Y+5	; 0x05
     fec:	3e 81       	ldd	r19, Y+6	; 0x06
     fee:	fc 01       	movw	r30, r24
     ff0:	31 87       	std	Z+9, r19	; 0x09
     ff2:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
     ff4:	8d 81       	ldd	r24, Y+5	; 0x05
     ff6:	9e 81       	ldd	r25, Y+6	; 0x06
     ff8:	fc 01       	movw	r30, r24
     ffa:	80 81       	ld	r24, Z
     ffc:	21 e0       	ldi	r18, 0x01	; 1
     ffe:	28 0f       	add	r18, r24
    1000:	8d 81       	ldd	r24, Y+5	; 0x05
    1002:	9e 81       	ldd	r25, Y+6	; 0x06
    1004:	fc 01       	movw	r30, r24
    1006:	20 83       	st	Z, r18
}
    1008:	00 00       	nop
    100a:	28 96       	adiw	r28, 0x08	; 8
    100c:	0f b6       	in	r0, 0x3f	; 63
    100e:	f8 94       	cli
    1010:	de bf       	out	0x3e, r29	; 62
    1012:	0f be       	out	0x3f, r0	; 63
    1014:	cd bf       	out	0x3d, r28	; 61
    1016:	df 91       	pop	r29
    1018:	cf 91       	pop	r28
    101a:	08 95       	ret

0000101c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    101c:	cf 93       	push	r28
    101e:	df 93       	push	r29
    1020:	00 d0       	rcall	.+0      	; 0x1022 <uxListRemove+0x6>
    1022:	00 d0       	rcall	.+0      	; 0x1024 <uxListRemove+0x8>
    1024:	cd b7       	in	r28, 0x3d	; 61
    1026:	de b7       	in	r29, 0x3e	; 62
    1028:	9c 83       	std	Y+4, r25	; 0x04
    102a:	8b 83       	std	Y+3, r24	; 0x03
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    102c:	8b 81       	ldd	r24, Y+3	; 0x03
    102e:	9c 81       	ldd	r25, Y+4	; 0x04
    1030:	fc 01       	movw	r30, r24
    1032:	80 85       	ldd	r24, Z+8	; 0x08
    1034:	91 85       	ldd	r25, Z+9	; 0x09
    1036:	9a 83       	std	Y+2, r25	; 0x02
    1038:	89 83       	std	Y+1, r24	; 0x01

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    103a:	8b 81       	ldd	r24, Y+3	; 0x03
    103c:	9c 81       	ldd	r25, Y+4	; 0x04
    103e:	fc 01       	movw	r30, r24
    1040:	82 81       	ldd	r24, Z+2	; 0x02
    1042:	93 81       	ldd	r25, Z+3	; 0x03
    1044:	2b 81       	ldd	r18, Y+3	; 0x03
    1046:	3c 81       	ldd	r19, Y+4	; 0x04
    1048:	f9 01       	movw	r30, r18
    104a:	24 81       	ldd	r18, Z+4	; 0x04
    104c:	35 81       	ldd	r19, Z+5	; 0x05
    104e:	fc 01       	movw	r30, r24
    1050:	35 83       	std	Z+5, r19	; 0x05
    1052:	24 83       	std	Z+4, r18	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1054:	8b 81       	ldd	r24, Y+3	; 0x03
    1056:	9c 81       	ldd	r25, Y+4	; 0x04
    1058:	fc 01       	movw	r30, r24
    105a:	84 81       	ldd	r24, Z+4	; 0x04
    105c:	95 81       	ldd	r25, Z+5	; 0x05
    105e:	2b 81       	ldd	r18, Y+3	; 0x03
    1060:	3c 81       	ldd	r19, Y+4	; 0x04
    1062:	f9 01       	movw	r30, r18
    1064:	22 81       	ldd	r18, Z+2	; 0x02
    1066:	33 81       	ldd	r19, Z+3	; 0x03
    1068:	fc 01       	movw	r30, r24
    106a:	33 83       	std	Z+3, r19	; 0x03
    106c:	22 83       	std	Z+2, r18	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    106e:	89 81       	ldd	r24, Y+1	; 0x01
    1070:	9a 81       	ldd	r25, Y+2	; 0x02
    1072:	fc 01       	movw	r30, r24
    1074:	21 81       	ldd	r18, Z+1	; 0x01
    1076:	32 81       	ldd	r19, Z+2	; 0x02
    1078:	8b 81       	ldd	r24, Y+3	; 0x03
    107a:	9c 81       	ldd	r25, Y+4	; 0x04
    107c:	28 17       	cp	r18, r24
    107e:	39 07       	cpc	r19, r25
    1080:	51 f4       	brne	.+20     	; 0x1096 <uxListRemove+0x7a>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    1082:	8b 81       	ldd	r24, Y+3	; 0x03
    1084:	9c 81       	ldd	r25, Y+4	; 0x04
    1086:	fc 01       	movw	r30, r24
    1088:	24 81       	ldd	r18, Z+4	; 0x04
    108a:	35 81       	ldd	r19, Z+5	; 0x05
    108c:	89 81       	ldd	r24, Y+1	; 0x01
    108e:	9a 81       	ldd	r25, Y+2	; 0x02
    1090:	fc 01       	movw	r30, r24
    1092:	32 83       	std	Z+2, r19	; 0x02
    1094:	21 83       	std	Z+1, r18	; 0x01
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
    1096:	8b 81       	ldd	r24, Y+3	; 0x03
    1098:	9c 81       	ldd	r25, Y+4	; 0x04
    109a:	fc 01       	movw	r30, r24
    109c:	11 86       	std	Z+9, r1	; 0x09
    109e:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
    10a0:	89 81       	ldd	r24, Y+1	; 0x01
    10a2:	9a 81       	ldd	r25, Y+2	; 0x02
    10a4:	fc 01       	movw	r30, r24
    10a6:	80 81       	ld	r24, Z
    10a8:	2f ef       	ldi	r18, 0xFF	; 255
    10aa:	28 0f       	add	r18, r24
    10ac:	89 81       	ldd	r24, Y+1	; 0x01
    10ae:	9a 81       	ldd	r25, Y+2	; 0x02
    10b0:	fc 01       	movw	r30, r24
    10b2:	20 83       	st	Z, r18

	return pxList->uxNumberOfItems;
    10b4:	89 81       	ldd	r24, Y+1	; 0x01
    10b6:	9a 81       	ldd	r25, Y+2	; 0x02
    10b8:	fc 01       	movw	r30, r24
    10ba:	80 81       	ld	r24, Z
}
    10bc:	0f 90       	pop	r0
    10be:	0f 90       	pop	r0
    10c0:	0f 90       	pop	r0
    10c2:	0f 90       	pop	r0
    10c4:	df 91       	pop	r29
    10c6:	cf 91       	pop	r28
    10c8:	08 95       	ret

000010ca <pxPortInitialiseStack>:

void vPortEndScheduler( void )
{
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    10ca:	cf 93       	push	r28
    10cc:	df 93       	push	r29
    10ce:	cd b7       	in	r28, 0x3d	; 61
    10d0:	de b7       	in	r29, 0x3e	; 62
    10d2:	28 97       	sbiw	r28, 0x08	; 8
    10d4:	0f b6       	in	r0, 0x3f	; 63
    10d6:	f8 94       	cli
    10d8:	de bf       	out	0x3e, r29	; 62
    10da:	0f be       	out	0x3f, r0	; 63
    10dc:	cd bf       	out	0x3d, r28	; 61
    10de:	9c 83       	std	Y+4, r25	; 0x04
    10e0:	8b 83       	std	Y+3, r24	; 0x03
    10e2:	7e 83       	std	Y+6, r23	; 0x06
    10e4:	6d 83       	std	Y+5, r22	; 0x05
    10e6:	58 87       	std	Y+8, r21	; 0x08
    10e8:	4f 83       	std	Y+7, r20	; 0x07
    10ea:	8b 81       	ldd	r24, Y+3	; 0x03
    10ec:	9c 81       	ldd	r25, Y+4	; 0x04
    10ee:	21 e1       	ldi	r18, 0x11	; 17
    10f0:	fc 01       	movw	r30, r24
    10f2:	20 83       	st	Z, r18
    10f4:	8b 81       	ldd	r24, Y+3	; 0x03
    10f6:	9c 81       	ldd	r25, Y+4	; 0x04
    10f8:	01 97       	sbiw	r24, 0x01	; 1
    10fa:	9c 83       	std	Y+4, r25	; 0x04
    10fc:	8b 83       	std	Y+3, r24	; 0x03
    10fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1100:	9c 81       	ldd	r25, Y+4	; 0x04
    1102:	22 e2       	ldi	r18, 0x22	; 34
    1104:	fc 01       	movw	r30, r24
    1106:	20 83       	st	Z, r18
    1108:	8b 81       	ldd	r24, Y+3	; 0x03
    110a:	9c 81       	ldd	r25, Y+4	; 0x04
    110c:	01 97       	sbiw	r24, 0x01	; 1
    110e:	9c 83       	std	Y+4, r25	; 0x04
    1110:	8b 83       	std	Y+3, r24	; 0x03
    1112:	8b 81       	ldd	r24, Y+3	; 0x03
    1114:	9c 81       	ldd	r25, Y+4	; 0x04
    1116:	23 e3       	ldi	r18, 0x33	; 51
    1118:	fc 01       	movw	r30, r24
    111a:	20 83       	st	Z, r18
    111c:	8b 81       	ldd	r24, Y+3	; 0x03
    111e:	9c 81       	ldd	r25, Y+4	; 0x04
    1120:	01 97       	sbiw	r24, 0x01	; 1
    1122:	9c 83       	std	Y+4, r25	; 0x04
    1124:	8b 83       	std	Y+3, r24	; 0x03
    1126:	8d 81       	ldd	r24, Y+5	; 0x05
    1128:	9e 81       	ldd	r25, Y+6	; 0x06
    112a:	9a 83       	std	Y+2, r25	; 0x02
    112c:	89 83       	std	Y+1, r24	; 0x01
    112e:	29 81       	ldd	r18, Y+1	; 0x01
    1130:	8b 81       	ldd	r24, Y+3	; 0x03
    1132:	9c 81       	ldd	r25, Y+4	; 0x04
    1134:	fc 01       	movw	r30, r24
    1136:	20 83       	st	Z, r18
    1138:	8b 81       	ldd	r24, Y+3	; 0x03
    113a:	9c 81       	ldd	r25, Y+4	; 0x04
    113c:	01 97       	sbiw	r24, 0x01	; 1
    113e:	9c 83       	std	Y+4, r25	; 0x04
    1140:	8b 83       	std	Y+3, r24	; 0x03
    1142:	89 81       	ldd	r24, Y+1	; 0x01
    1144:	9a 81       	ldd	r25, Y+2	; 0x02
    1146:	89 2f       	mov	r24, r25
    1148:	99 27       	eor	r25, r25
    114a:	9a 83       	std	Y+2, r25	; 0x02
    114c:	89 83       	std	Y+1, r24	; 0x01
    114e:	29 81       	ldd	r18, Y+1	; 0x01
    1150:	8b 81       	ldd	r24, Y+3	; 0x03
    1152:	9c 81       	ldd	r25, Y+4	; 0x04
    1154:	fc 01       	movw	r30, r24
    1156:	20 83       	st	Z, r18
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	9c 81       	ldd	r25, Y+4	; 0x04
    115c:	01 97       	sbiw	r24, 0x01	; 1
    115e:	9c 83       	std	Y+4, r25	; 0x04
    1160:	8b 83       	std	Y+3, r24	; 0x03
    1162:	8b 81       	ldd	r24, Y+3	; 0x03
    1164:	9c 81       	ldd	r25, Y+4	; 0x04
    1166:	fc 01       	movw	r30, r24
    1168:	10 82       	st	Z, r1
    116a:	8b 81       	ldd	r24, Y+3	; 0x03
    116c:	9c 81       	ldd	r25, Y+4	; 0x04
    116e:	01 97       	sbiw	r24, 0x01	; 1
    1170:	9c 83       	std	Y+4, r25	; 0x04
    1172:	8b 83       	std	Y+3, r24	; 0x03
    1174:	8b 81       	ldd	r24, Y+3	; 0x03
    1176:	9c 81       	ldd	r25, Y+4	; 0x04
    1178:	20 e8       	ldi	r18, 0x80	; 128
    117a:	fc 01       	movw	r30, r24
    117c:	20 83       	st	Z, r18
    117e:	8b 81       	ldd	r24, Y+3	; 0x03
    1180:	9c 81       	ldd	r25, Y+4	; 0x04
    1182:	01 97       	sbiw	r24, 0x01	; 1
    1184:	9c 83       	std	Y+4, r25	; 0x04
    1186:	8b 83       	std	Y+3, r24	; 0x03
    1188:	8b 81       	ldd	r24, Y+3	; 0x03
    118a:	9c 81       	ldd	r25, Y+4	; 0x04
    118c:	fc 01       	movw	r30, r24
    118e:	10 82       	st	Z, r1
    1190:	8b 81       	ldd	r24, Y+3	; 0x03
    1192:	9c 81       	ldd	r25, Y+4	; 0x04
    1194:	01 97       	sbiw	r24, 0x01	; 1
    1196:	9c 83       	std	Y+4, r25	; 0x04
    1198:	8b 83       	std	Y+3, r24	; 0x03
    119a:	8b 81       	ldd	r24, Y+3	; 0x03
    119c:	9c 81       	ldd	r25, Y+4	; 0x04
    119e:	22 e0       	ldi	r18, 0x02	; 2
    11a0:	fc 01       	movw	r30, r24
    11a2:	20 83       	st	Z, r18
    11a4:	8b 81       	ldd	r24, Y+3	; 0x03
    11a6:	9c 81       	ldd	r25, Y+4	; 0x04
    11a8:	01 97       	sbiw	r24, 0x01	; 1
    11aa:	9c 83       	std	Y+4, r25	; 0x04
    11ac:	8b 83       	std	Y+3, r24	; 0x03
    11ae:	8b 81       	ldd	r24, Y+3	; 0x03
    11b0:	9c 81       	ldd	r25, Y+4	; 0x04
    11b2:	23 e0       	ldi	r18, 0x03	; 3
    11b4:	fc 01       	movw	r30, r24
    11b6:	20 83       	st	Z, r18
    11b8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ba:	9c 81       	ldd	r25, Y+4	; 0x04
    11bc:	01 97       	sbiw	r24, 0x01	; 1
    11be:	9c 83       	std	Y+4, r25	; 0x04
    11c0:	8b 83       	std	Y+3, r24	; 0x03
    11c2:	8b 81       	ldd	r24, Y+3	; 0x03
    11c4:	9c 81       	ldd	r25, Y+4	; 0x04
    11c6:	24 e0       	ldi	r18, 0x04	; 4
    11c8:	fc 01       	movw	r30, r24
    11ca:	20 83       	st	Z, r18
    11cc:	8b 81       	ldd	r24, Y+3	; 0x03
    11ce:	9c 81       	ldd	r25, Y+4	; 0x04
    11d0:	01 97       	sbiw	r24, 0x01	; 1
    11d2:	9c 83       	std	Y+4, r25	; 0x04
    11d4:	8b 83       	std	Y+3, r24	; 0x03
    11d6:	8b 81       	ldd	r24, Y+3	; 0x03
    11d8:	9c 81       	ldd	r25, Y+4	; 0x04
    11da:	25 e0       	ldi	r18, 0x05	; 5
    11dc:	fc 01       	movw	r30, r24
    11de:	20 83       	st	Z, r18
    11e0:	8b 81       	ldd	r24, Y+3	; 0x03
    11e2:	9c 81       	ldd	r25, Y+4	; 0x04
    11e4:	01 97       	sbiw	r24, 0x01	; 1
    11e6:	9c 83       	std	Y+4, r25	; 0x04
    11e8:	8b 83       	std	Y+3, r24	; 0x03
    11ea:	8b 81       	ldd	r24, Y+3	; 0x03
    11ec:	9c 81       	ldd	r25, Y+4	; 0x04
    11ee:	26 e0       	ldi	r18, 0x06	; 6
    11f0:	fc 01       	movw	r30, r24
    11f2:	20 83       	st	Z, r18
    11f4:	8b 81       	ldd	r24, Y+3	; 0x03
    11f6:	9c 81       	ldd	r25, Y+4	; 0x04
    11f8:	01 97       	sbiw	r24, 0x01	; 1
    11fa:	9c 83       	std	Y+4, r25	; 0x04
    11fc:	8b 83       	std	Y+3, r24	; 0x03
    11fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1200:	9c 81       	ldd	r25, Y+4	; 0x04
    1202:	27 e0       	ldi	r18, 0x07	; 7
    1204:	fc 01       	movw	r30, r24
    1206:	20 83       	st	Z, r18
    1208:	8b 81       	ldd	r24, Y+3	; 0x03
    120a:	9c 81       	ldd	r25, Y+4	; 0x04
    120c:	01 97       	sbiw	r24, 0x01	; 1
    120e:	9c 83       	std	Y+4, r25	; 0x04
    1210:	8b 83       	std	Y+3, r24	; 0x03
    1212:	8b 81       	ldd	r24, Y+3	; 0x03
    1214:	9c 81       	ldd	r25, Y+4	; 0x04
    1216:	28 e0       	ldi	r18, 0x08	; 8
    1218:	fc 01       	movw	r30, r24
    121a:	20 83       	st	Z, r18
    121c:	8b 81       	ldd	r24, Y+3	; 0x03
    121e:	9c 81       	ldd	r25, Y+4	; 0x04
    1220:	01 97       	sbiw	r24, 0x01	; 1
    1222:	9c 83       	std	Y+4, r25	; 0x04
    1224:	8b 83       	std	Y+3, r24	; 0x03
    1226:	8b 81       	ldd	r24, Y+3	; 0x03
    1228:	9c 81       	ldd	r25, Y+4	; 0x04
    122a:	29 e0       	ldi	r18, 0x09	; 9
    122c:	fc 01       	movw	r30, r24
    122e:	20 83       	st	Z, r18
    1230:	8b 81       	ldd	r24, Y+3	; 0x03
    1232:	9c 81       	ldd	r25, Y+4	; 0x04
    1234:	01 97       	sbiw	r24, 0x01	; 1
    1236:	9c 83       	std	Y+4, r25	; 0x04
    1238:	8b 83       	std	Y+3, r24	; 0x03
    123a:	8b 81       	ldd	r24, Y+3	; 0x03
    123c:	9c 81       	ldd	r25, Y+4	; 0x04
    123e:	20 e1       	ldi	r18, 0x10	; 16
    1240:	fc 01       	movw	r30, r24
    1242:	20 83       	st	Z, r18
    1244:	8b 81       	ldd	r24, Y+3	; 0x03
    1246:	9c 81       	ldd	r25, Y+4	; 0x04
    1248:	01 97       	sbiw	r24, 0x01	; 1
    124a:	9c 83       	std	Y+4, r25	; 0x04
    124c:	8b 83       	std	Y+3, r24	; 0x03
    124e:	8b 81       	ldd	r24, Y+3	; 0x03
    1250:	9c 81       	ldd	r25, Y+4	; 0x04
    1252:	21 e1       	ldi	r18, 0x11	; 17
    1254:	fc 01       	movw	r30, r24
    1256:	20 83       	st	Z, r18
    1258:	8b 81       	ldd	r24, Y+3	; 0x03
    125a:	9c 81       	ldd	r25, Y+4	; 0x04
    125c:	01 97       	sbiw	r24, 0x01	; 1
    125e:	9c 83       	std	Y+4, r25	; 0x04
    1260:	8b 83       	std	Y+3, r24	; 0x03
    1262:	8b 81       	ldd	r24, Y+3	; 0x03
    1264:	9c 81       	ldd	r25, Y+4	; 0x04
    1266:	22 e1       	ldi	r18, 0x12	; 18
    1268:	fc 01       	movw	r30, r24
    126a:	20 83       	st	Z, r18
    126c:	8b 81       	ldd	r24, Y+3	; 0x03
    126e:	9c 81       	ldd	r25, Y+4	; 0x04
    1270:	01 97       	sbiw	r24, 0x01	; 1
    1272:	9c 83       	std	Y+4, r25	; 0x04
    1274:	8b 83       	std	Y+3, r24	; 0x03
    1276:	8b 81       	ldd	r24, Y+3	; 0x03
    1278:	9c 81       	ldd	r25, Y+4	; 0x04
    127a:	23 e1       	ldi	r18, 0x13	; 19
    127c:	fc 01       	movw	r30, r24
    127e:	20 83       	st	Z, r18
    1280:	8b 81       	ldd	r24, Y+3	; 0x03
    1282:	9c 81       	ldd	r25, Y+4	; 0x04
    1284:	01 97       	sbiw	r24, 0x01	; 1
    1286:	9c 83       	std	Y+4, r25	; 0x04
    1288:	8b 83       	std	Y+3, r24	; 0x03
    128a:	8b 81       	ldd	r24, Y+3	; 0x03
    128c:	9c 81       	ldd	r25, Y+4	; 0x04
    128e:	24 e1       	ldi	r18, 0x14	; 20
    1290:	fc 01       	movw	r30, r24
    1292:	20 83       	st	Z, r18
    1294:	8b 81       	ldd	r24, Y+3	; 0x03
    1296:	9c 81       	ldd	r25, Y+4	; 0x04
    1298:	01 97       	sbiw	r24, 0x01	; 1
    129a:	9c 83       	std	Y+4, r25	; 0x04
    129c:	8b 83       	std	Y+3, r24	; 0x03
    129e:	8b 81       	ldd	r24, Y+3	; 0x03
    12a0:	9c 81       	ldd	r25, Y+4	; 0x04
    12a2:	25 e1       	ldi	r18, 0x15	; 21
    12a4:	fc 01       	movw	r30, r24
    12a6:	20 83       	st	Z, r18
    12a8:	8b 81       	ldd	r24, Y+3	; 0x03
    12aa:	9c 81       	ldd	r25, Y+4	; 0x04
    12ac:	01 97       	sbiw	r24, 0x01	; 1
    12ae:	9c 83       	std	Y+4, r25	; 0x04
    12b0:	8b 83       	std	Y+3, r24	; 0x03
    12b2:	8b 81       	ldd	r24, Y+3	; 0x03
    12b4:	9c 81       	ldd	r25, Y+4	; 0x04
    12b6:	26 e1       	ldi	r18, 0x16	; 22
    12b8:	fc 01       	movw	r30, r24
    12ba:	20 83       	st	Z, r18
    12bc:	8b 81       	ldd	r24, Y+3	; 0x03
    12be:	9c 81       	ldd	r25, Y+4	; 0x04
    12c0:	01 97       	sbiw	r24, 0x01	; 1
    12c2:	9c 83       	std	Y+4, r25	; 0x04
    12c4:	8b 83       	std	Y+3, r24	; 0x03
    12c6:	8b 81       	ldd	r24, Y+3	; 0x03
    12c8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ca:	27 e1       	ldi	r18, 0x17	; 23
    12cc:	fc 01       	movw	r30, r24
    12ce:	20 83       	st	Z, r18
    12d0:	8b 81       	ldd	r24, Y+3	; 0x03
    12d2:	9c 81       	ldd	r25, Y+4	; 0x04
    12d4:	01 97       	sbiw	r24, 0x01	; 1
    12d6:	9c 83       	std	Y+4, r25	; 0x04
    12d8:	8b 83       	std	Y+3, r24	; 0x03
    12da:	8b 81       	ldd	r24, Y+3	; 0x03
    12dc:	9c 81       	ldd	r25, Y+4	; 0x04
    12de:	28 e1       	ldi	r18, 0x18	; 24
    12e0:	fc 01       	movw	r30, r24
    12e2:	20 83       	st	Z, r18
    12e4:	8b 81       	ldd	r24, Y+3	; 0x03
    12e6:	9c 81       	ldd	r25, Y+4	; 0x04
    12e8:	01 97       	sbiw	r24, 0x01	; 1
    12ea:	9c 83       	std	Y+4, r25	; 0x04
    12ec:	8b 83       	std	Y+3, r24	; 0x03
    12ee:	8b 81       	ldd	r24, Y+3	; 0x03
    12f0:	9c 81       	ldd	r25, Y+4	; 0x04
    12f2:	29 e1       	ldi	r18, 0x19	; 25
    12f4:	fc 01       	movw	r30, r24
    12f6:	20 83       	st	Z, r18
    12f8:	8b 81       	ldd	r24, Y+3	; 0x03
    12fa:	9c 81       	ldd	r25, Y+4	; 0x04
    12fc:	01 97       	sbiw	r24, 0x01	; 1
    12fe:	9c 83       	std	Y+4, r25	; 0x04
    1300:	8b 83       	std	Y+3, r24	; 0x03
    1302:	8b 81       	ldd	r24, Y+3	; 0x03
    1304:	9c 81       	ldd	r25, Y+4	; 0x04
    1306:	20 e2       	ldi	r18, 0x20	; 32
    1308:	fc 01       	movw	r30, r24
    130a:	20 83       	st	Z, r18
    130c:	8b 81       	ldd	r24, Y+3	; 0x03
    130e:	9c 81       	ldd	r25, Y+4	; 0x04
    1310:	01 97       	sbiw	r24, 0x01	; 1
    1312:	9c 83       	std	Y+4, r25	; 0x04
    1314:	8b 83       	std	Y+3, r24	; 0x03
    1316:	8b 81       	ldd	r24, Y+3	; 0x03
    1318:	9c 81       	ldd	r25, Y+4	; 0x04
    131a:	21 e2       	ldi	r18, 0x21	; 33
    131c:	fc 01       	movw	r30, r24
    131e:	20 83       	st	Z, r18
    1320:	8b 81       	ldd	r24, Y+3	; 0x03
    1322:	9c 81       	ldd	r25, Y+4	; 0x04
    1324:	01 97       	sbiw	r24, 0x01	; 1
    1326:	9c 83       	std	Y+4, r25	; 0x04
    1328:	8b 83       	std	Y+3, r24	; 0x03
    132a:	8b 81       	ldd	r24, Y+3	; 0x03
    132c:	9c 81       	ldd	r25, Y+4	; 0x04
    132e:	22 e2       	ldi	r18, 0x22	; 34
    1330:	fc 01       	movw	r30, r24
    1332:	20 83       	st	Z, r18
    1334:	8b 81       	ldd	r24, Y+3	; 0x03
    1336:	9c 81       	ldd	r25, Y+4	; 0x04
    1338:	01 97       	sbiw	r24, 0x01	; 1
    133a:	9c 83       	std	Y+4, r25	; 0x04
    133c:	8b 83       	std	Y+3, r24	; 0x03
    133e:	8b 81       	ldd	r24, Y+3	; 0x03
    1340:	9c 81       	ldd	r25, Y+4	; 0x04
    1342:	23 e2       	ldi	r18, 0x23	; 35
    1344:	fc 01       	movw	r30, r24
    1346:	20 83       	st	Z, r18
    1348:	8b 81       	ldd	r24, Y+3	; 0x03
    134a:	9c 81       	ldd	r25, Y+4	; 0x04
    134c:	01 97       	sbiw	r24, 0x01	; 1
    134e:	9c 83       	std	Y+4, r25	; 0x04
    1350:	8b 83       	std	Y+3, r24	; 0x03
    1352:	8f 81       	ldd	r24, Y+7	; 0x07
    1354:	98 85       	ldd	r25, Y+8	; 0x08
    1356:	9a 83       	std	Y+2, r25	; 0x02
    1358:	89 83       	std	Y+1, r24	; 0x01
    135a:	29 81       	ldd	r18, Y+1	; 0x01
    135c:	8b 81       	ldd	r24, Y+3	; 0x03
    135e:	9c 81       	ldd	r25, Y+4	; 0x04
    1360:	fc 01       	movw	r30, r24
    1362:	20 83       	st	Z, r18
    1364:	8b 81       	ldd	r24, Y+3	; 0x03
    1366:	9c 81       	ldd	r25, Y+4	; 0x04
    1368:	01 97       	sbiw	r24, 0x01	; 1
    136a:	9c 83       	std	Y+4, r25	; 0x04
    136c:	8b 83       	std	Y+3, r24	; 0x03
    136e:	89 81       	ldd	r24, Y+1	; 0x01
    1370:	9a 81       	ldd	r25, Y+2	; 0x02
    1372:	89 2f       	mov	r24, r25
    1374:	99 27       	eor	r25, r25
    1376:	9a 83       	std	Y+2, r25	; 0x02
    1378:	89 83       	std	Y+1, r24	; 0x01
    137a:	29 81       	ldd	r18, Y+1	; 0x01
    137c:	8b 81       	ldd	r24, Y+3	; 0x03
    137e:	9c 81       	ldd	r25, Y+4	; 0x04
    1380:	fc 01       	movw	r30, r24
    1382:	20 83       	st	Z, r18
    1384:	8b 81       	ldd	r24, Y+3	; 0x03
    1386:	9c 81       	ldd	r25, Y+4	; 0x04
    1388:	01 97       	sbiw	r24, 0x01	; 1
    138a:	9c 83       	std	Y+4, r25	; 0x04
    138c:	8b 83       	std	Y+3, r24	; 0x03
    138e:	8b 81       	ldd	r24, Y+3	; 0x03
    1390:	9c 81       	ldd	r25, Y+4	; 0x04
    1392:	26 e2       	ldi	r18, 0x26	; 38
    1394:	fc 01       	movw	r30, r24
    1396:	20 83       	st	Z, r18
    1398:	8b 81       	ldd	r24, Y+3	; 0x03
    139a:	9c 81       	ldd	r25, Y+4	; 0x04
    139c:	01 97       	sbiw	r24, 0x01	; 1
    139e:	9c 83       	std	Y+4, r25	; 0x04
    13a0:	8b 83       	std	Y+3, r24	; 0x03
    13a2:	8b 81       	ldd	r24, Y+3	; 0x03
    13a4:	9c 81       	ldd	r25, Y+4	; 0x04
    13a6:	27 e2       	ldi	r18, 0x27	; 39
    13a8:	fc 01       	movw	r30, r24
    13aa:	20 83       	st	Z, r18
    13ac:	8b 81       	ldd	r24, Y+3	; 0x03
    13ae:	9c 81       	ldd	r25, Y+4	; 0x04
    13b0:	01 97       	sbiw	r24, 0x01	; 1
    13b2:	9c 83       	std	Y+4, r25	; 0x04
    13b4:	8b 83       	std	Y+3, r24	; 0x03
    13b6:	8b 81       	ldd	r24, Y+3	; 0x03
    13b8:	9c 81       	ldd	r25, Y+4	; 0x04
    13ba:	28 e2       	ldi	r18, 0x28	; 40
    13bc:	fc 01       	movw	r30, r24
    13be:	20 83       	st	Z, r18
    13c0:	8b 81       	ldd	r24, Y+3	; 0x03
    13c2:	9c 81       	ldd	r25, Y+4	; 0x04
    13c4:	01 97       	sbiw	r24, 0x01	; 1
    13c6:	9c 83       	std	Y+4, r25	; 0x04
    13c8:	8b 83       	std	Y+3, r24	; 0x03
    13ca:	8b 81       	ldd	r24, Y+3	; 0x03
    13cc:	9c 81       	ldd	r25, Y+4	; 0x04
    13ce:	29 e2       	ldi	r18, 0x29	; 41
    13d0:	fc 01       	movw	r30, r24
    13d2:	20 83       	st	Z, r18
    13d4:	8b 81       	ldd	r24, Y+3	; 0x03
    13d6:	9c 81       	ldd	r25, Y+4	; 0x04
    13d8:	01 97       	sbiw	r24, 0x01	; 1
    13da:	9c 83       	std	Y+4, r25	; 0x04
    13dc:	8b 83       	std	Y+3, r24	; 0x03
    13de:	8b 81       	ldd	r24, Y+3	; 0x03
    13e0:	9c 81       	ldd	r25, Y+4	; 0x04
    13e2:	20 e3       	ldi	r18, 0x30	; 48
    13e4:	fc 01       	movw	r30, r24
    13e6:	20 83       	st	Z, r18
    13e8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ea:	9c 81       	ldd	r25, Y+4	; 0x04
    13ec:	01 97       	sbiw	r24, 0x01	; 1
    13ee:	9c 83       	std	Y+4, r25	; 0x04
    13f0:	8b 83       	std	Y+3, r24	; 0x03
    13f2:	8b 81       	ldd	r24, Y+3	; 0x03
    13f4:	9c 81       	ldd	r25, Y+4	; 0x04
    13f6:	21 e3       	ldi	r18, 0x31	; 49
    13f8:	fc 01       	movw	r30, r24
    13fa:	20 83       	st	Z, r18
    13fc:	8b 81       	ldd	r24, Y+3	; 0x03
    13fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1400:	01 97       	sbiw	r24, 0x01	; 1
    1402:	9c 83       	std	Y+4, r25	; 0x04
    1404:	8b 83       	std	Y+3, r24	; 0x03
    1406:	8b 81       	ldd	r24, Y+3	; 0x03
    1408:	9c 81       	ldd	r25, Y+4	; 0x04
    140a:	28 96       	adiw	r28, 0x08	; 8
    140c:	0f b6       	in	r0, 0x3f	; 63
    140e:	f8 94       	cli
    1410:	de bf       	out	0x3e, r29	; 62
    1412:	0f be       	out	0x3f, r0	; 63
    1414:	cd bf       	out	0x3d, r28	; 61
    1416:	df 91       	pop	r29
    1418:	cf 91       	pop	r28
    141a:	08 95       	ret

0000141c <xPortStartScheduler>:
    141c:	cf 93       	push	r28
    141e:	df 93       	push	r29
    1420:	cd b7       	in	r28, 0x3d	; 61
    1422:	de b7       	in	r29, 0x3e	; 62
    1424:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <prvSetupTimerInterrupt>
    1428:	a0 91 a7 06 	lds	r26, 0x06A7	; 0x8006a7 <pxCurrentTCB>
    142c:	b0 91 a8 06 	lds	r27, 0x06A8	; 0x8006a8 <pxCurrentTCB+0x1>
    1430:	cd 91       	ld	r28, X+
    1432:	cd bf       	out	0x3d, r28	; 61
    1434:	dd 91       	ld	r29, X+
    1436:	de bf       	out	0x3e, r29	; 62
    1438:	ff 91       	pop	r31
    143a:	ef 91       	pop	r30
    143c:	df 91       	pop	r29
    143e:	cf 91       	pop	r28
    1440:	bf 91       	pop	r27
    1442:	af 91       	pop	r26
    1444:	9f 91       	pop	r25
    1446:	8f 91       	pop	r24
    1448:	7f 91       	pop	r23
    144a:	6f 91       	pop	r22
    144c:	5f 91       	pop	r21
    144e:	4f 91       	pop	r20
    1450:	3f 91       	pop	r19
    1452:	2f 91       	pop	r18
    1454:	1f 91       	pop	r17
    1456:	0f 91       	pop	r16
    1458:	ff 90       	pop	r15
    145a:	ef 90       	pop	r14
    145c:	df 90       	pop	r13
    145e:	cf 90       	pop	r12
    1460:	bf 90       	pop	r11
    1462:	af 90       	pop	r10
    1464:	9f 90       	pop	r9
    1466:	8f 90       	pop	r8
    1468:	7f 90       	pop	r7
    146a:	6f 90       	pop	r6
    146c:	5f 90       	pop	r5
    146e:	4f 90       	pop	r4
    1470:	3f 90       	pop	r3
    1472:	2f 90       	pop	r2
    1474:	1f 90       	pop	r1
    1476:	0f 90       	pop	r0
    1478:	0f be       	out	0x3f, r0	; 63
    147a:	0f 90       	pop	r0
    147c:	08 95       	ret
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	df 91       	pop	r29
    1482:	cf 91       	pop	r28
    1484:	08 95       	ret

00001486 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    1486:	0f 92       	push	r0
    1488:	0f b6       	in	r0, 0x3f	; 63
    148a:	f8 94       	cli
    148c:	0f 92       	push	r0
    148e:	1f 92       	push	r1
    1490:	11 24       	eor	r1, r1
    1492:	2f 92       	push	r2
    1494:	3f 92       	push	r3
    1496:	4f 92       	push	r4
    1498:	5f 92       	push	r5
    149a:	6f 92       	push	r6
    149c:	7f 92       	push	r7
    149e:	8f 92       	push	r8
    14a0:	9f 92       	push	r9
    14a2:	af 92       	push	r10
    14a4:	bf 92       	push	r11
    14a6:	cf 92       	push	r12
    14a8:	df 92       	push	r13
    14aa:	ef 92       	push	r14
    14ac:	ff 92       	push	r15
    14ae:	0f 93       	push	r16
    14b0:	1f 93       	push	r17
    14b2:	2f 93       	push	r18
    14b4:	3f 93       	push	r19
    14b6:	4f 93       	push	r20
    14b8:	5f 93       	push	r21
    14ba:	6f 93       	push	r22
    14bc:	7f 93       	push	r23
    14be:	8f 93       	push	r24
    14c0:	9f 93       	push	r25
    14c2:	af 93       	push	r26
    14c4:	bf 93       	push	r27
    14c6:	cf 93       	push	r28
    14c8:	df 93       	push	r29
    14ca:	ef 93       	push	r30
    14cc:	ff 93       	push	r31
    14ce:	a0 91 a7 06 	lds	r26, 0x06A7	; 0x8006a7 <pxCurrentTCB>
    14d2:	b0 91 a8 06 	lds	r27, 0x06A8	; 0x8006a8 <pxCurrentTCB+0x1>
    14d6:	0d b6       	in	r0, 0x3d	; 61
    14d8:	0d 92       	st	X+, r0
    14da:	0e b6       	in	r0, 0x3e	; 62
    14dc:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    14de:	0e 94 1e 10 	call	0x203c	; 0x203c <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    14e2:	a0 91 a7 06 	lds	r26, 0x06A7	; 0x8006a7 <pxCurrentTCB>
    14e6:	b0 91 a8 06 	lds	r27, 0x06A8	; 0x8006a8 <pxCurrentTCB+0x1>
    14ea:	cd 91       	ld	r28, X+
    14ec:	cd bf       	out	0x3d, r28	; 61
    14ee:	dd 91       	ld	r29, X+
    14f0:	de bf       	out	0x3e, r29	; 62
    14f2:	ff 91       	pop	r31
    14f4:	ef 91       	pop	r30
    14f6:	df 91       	pop	r29
    14f8:	cf 91       	pop	r28
    14fa:	bf 91       	pop	r27
    14fc:	af 91       	pop	r26
    14fe:	9f 91       	pop	r25
    1500:	8f 91       	pop	r24
    1502:	7f 91       	pop	r23
    1504:	6f 91       	pop	r22
    1506:	5f 91       	pop	r21
    1508:	4f 91       	pop	r20
    150a:	3f 91       	pop	r19
    150c:	2f 91       	pop	r18
    150e:	1f 91       	pop	r17
    1510:	0f 91       	pop	r16
    1512:	ff 90       	pop	r15
    1514:	ef 90       	pop	r14
    1516:	df 90       	pop	r13
    1518:	cf 90       	pop	r12
    151a:	bf 90       	pop	r11
    151c:	af 90       	pop	r10
    151e:	9f 90       	pop	r9
    1520:	8f 90       	pop	r8
    1522:	7f 90       	pop	r7
    1524:	6f 90       	pop	r6
    1526:	5f 90       	pop	r5
    1528:	4f 90       	pop	r4
    152a:	3f 90       	pop	r3
    152c:	2f 90       	pop	r2
    152e:	1f 90       	pop	r1
    1530:	0f 90       	pop	r0
    1532:	0f be       	out	0x3f, r0	; 63
    1534:	0f 90       	pop	r0

	asm volatile ( "ret" );
    1536:	08 95       	ret
	...

0000153a <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    153a:	0f 92       	push	r0
    153c:	0f b6       	in	r0, 0x3f	; 63
    153e:	f8 94       	cli
    1540:	0f 92       	push	r0
    1542:	1f 92       	push	r1
    1544:	11 24       	eor	r1, r1
    1546:	2f 92       	push	r2
    1548:	3f 92       	push	r3
    154a:	4f 92       	push	r4
    154c:	5f 92       	push	r5
    154e:	6f 92       	push	r6
    1550:	7f 92       	push	r7
    1552:	8f 92       	push	r8
    1554:	9f 92       	push	r9
    1556:	af 92       	push	r10
    1558:	bf 92       	push	r11
    155a:	cf 92       	push	r12
    155c:	df 92       	push	r13
    155e:	ef 92       	push	r14
    1560:	ff 92       	push	r15
    1562:	0f 93       	push	r16
    1564:	1f 93       	push	r17
    1566:	2f 93       	push	r18
    1568:	3f 93       	push	r19
    156a:	4f 93       	push	r20
    156c:	5f 93       	push	r21
    156e:	6f 93       	push	r22
    1570:	7f 93       	push	r23
    1572:	8f 93       	push	r24
    1574:	9f 93       	push	r25
    1576:	af 93       	push	r26
    1578:	bf 93       	push	r27
    157a:	cf 93       	push	r28
    157c:	df 93       	push	r29
    157e:	ef 93       	push	r30
    1580:	ff 93       	push	r31
    1582:	a0 91 a7 06 	lds	r26, 0x06A7	; 0x8006a7 <pxCurrentTCB>
    1586:	b0 91 a8 06 	lds	r27, 0x06A8	; 0x8006a8 <pxCurrentTCB+0x1>
    158a:	0d b6       	in	r0, 0x3d	; 61
    158c:	0d 92       	st	X+, r0
    158e:	0e b6       	in	r0, 0x3e	; 62
    1590:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
    1592:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <xTaskIncrementTick>
    1596:	88 23       	and	r24, r24
    1598:	11 f0       	breq	.+4      	; 0x159e <vPortYieldFromTick+0x64>
	{
		vTaskSwitchContext();
    159a:	0e 94 1e 10 	call	0x203c	; 0x203c <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
    159e:	a0 91 a7 06 	lds	r26, 0x06A7	; 0x8006a7 <pxCurrentTCB>
    15a2:	b0 91 a8 06 	lds	r27, 0x06A8	; 0x8006a8 <pxCurrentTCB+0x1>
    15a6:	cd 91       	ld	r28, X+
    15a8:	cd bf       	out	0x3d, r28	; 61
    15aa:	dd 91       	ld	r29, X+
    15ac:	de bf       	out	0x3e, r29	; 62
    15ae:	ff 91       	pop	r31
    15b0:	ef 91       	pop	r30
    15b2:	df 91       	pop	r29
    15b4:	cf 91       	pop	r28
    15b6:	bf 91       	pop	r27
    15b8:	af 91       	pop	r26
    15ba:	9f 91       	pop	r25
    15bc:	8f 91       	pop	r24
    15be:	7f 91       	pop	r23
    15c0:	6f 91       	pop	r22
    15c2:	5f 91       	pop	r21
    15c4:	4f 91       	pop	r20
    15c6:	3f 91       	pop	r19
    15c8:	2f 91       	pop	r18
    15ca:	1f 91       	pop	r17
    15cc:	0f 91       	pop	r16
    15ce:	ff 90       	pop	r15
    15d0:	ef 90       	pop	r14
    15d2:	df 90       	pop	r13
    15d4:	cf 90       	pop	r12
    15d6:	bf 90       	pop	r11
    15d8:	af 90       	pop	r10
    15da:	9f 90       	pop	r9
    15dc:	8f 90       	pop	r8
    15de:	7f 90       	pop	r7
    15e0:	6f 90       	pop	r6
    15e2:	5f 90       	pop	r5
    15e4:	4f 90       	pop	r4
    15e6:	3f 90       	pop	r3
    15e8:	2f 90       	pop	r2
    15ea:	1f 90       	pop	r1
    15ec:	0f 90       	pop	r0
    15ee:	0f be       	out	0x3f, r0	; 63
    15f0:	0f 90       	pop	r0

	asm volatile ( "ret" );
    15f2:	08 95       	ret
	...

000015f6 <prvSetupTimerInterrupt>:

/*
 * Setup timer 1 compare match A to generate a tick interrupt.
 */
static void prvSetupTimerInterrupt( void )
{
    15f6:	cf 93       	push	r28
    15f8:	df 93       	push	r29
    15fa:	00 d0       	rcall	.+0      	; 0x15fc <prvSetupTimerInterrupt+0x6>
    15fc:	00 d0       	rcall	.+0      	; 0x15fe <prvSetupTimerInterrupt+0x8>
    15fe:	00 d0       	rcall	.+0      	; 0x1600 <prvSetupTimerInterrupt+0xa>
    1600:	cd b7       	in	r28, 0x3d	; 61
    1602:	de b7       	in	r29, 0x3e	; 62
uint8_t ucHighByte, ucLowByte;

	/* Using 16bit timer 1 to generate the tick.  Correct fuses must be
	selected for the configCPU_CLOCK_HZ clock. */

	ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    1604:	80 e8       	ldi	r24, 0x80	; 128
    1606:	9e e3       	ldi	r25, 0x3E	; 62
    1608:	a0 e0       	ldi	r26, 0x00	; 0
    160a:	b0 e0       	ldi	r27, 0x00	; 0
    160c:	89 83       	std	Y+1, r24	; 0x01
    160e:	9a 83       	std	Y+2, r25	; 0x02
    1610:	ab 83       	std	Y+3, r26	; 0x03
    1612:	bc 83       	std	Y+4, r27	; 0x04

	/* We only have 16 bits so have to scale to get our required tick rate. */
	ulCompareMatch /= portCLOCK_PRESCALER;
    1614:	89 81       	ldd	r24, Y+1	; 0x01
    1616:	9a 81       	ldd	r25, Y+2	; 0x02
    1618:	ab 81       	ldd	r26, Y+3	; 0x03
    161a:	bc 81       	ldd	r27, Y+4	; 0x04
    161c:	68 94       	set
    161e:	15 f8       	bld	r1, 5
    1620:	b6 95       	lsr	r27
    1622:	a7 95       	ror	r26
    1624:	97 95       	ror	r25
    1626:	87 95       	ror	r24
    1628:	16 94       	lsr	r1
    162a:	d1 f7       	brne	.-12     	; 0x1620 <prvSetupTimerInterrupt+0x2a>
    162c:	89 83       	std	Y+1, r24	; 0x01
    162e:	9a 83       	std	Y+2, r25	; 0x02
    1630:	ab 83       	std	Y+3, r26	; 0x03
    1632:	bc 83       	std	Y+4, r27	; 0x04

	/* Adjust for correct value. */
	ulCompareMatch -= ( uint32_t ) 1;
    1634:	89 81       	ldd	r24, Y+1	; 0x01
    1636:	9a 81       	ldd	r25, Y+2	; 0x02
    1638:	ab 81       	ldd	r26, Y+3	; 0x03
    163a:	bc 81       	ldd	r27, Y+4	; 0x04
    163c:	01 97       	sbiw	r24, 0x01	; 1
    163e:	a1 09       	sbc	r26, r1
    1640:	b1 09       	sbc	r27, r1
    1642:	89 83       	std	Y+1, r24	; 0x01
    1644:	9a 83       	std	Y+2, r25	; 0x02
    1646:	ab 83       	std	Y+3, r26	; 0x03
    1648:	bc 83       	std	Y+4, r27	; 0x04

	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    164a:	89 81       	ldd	r24, Y+1	; 0x01
    164c:	8d 83       	std	Y+5, r24	; 0x05
	ulCompareMatch >>= 8;
    164e:	89 81       	ldd	r24, Y+1	; 0x01
    1650:	9a 81       	ldd	r25, Y+2	; 0x02
    1652:	ab 81       	ldd	r26, Y+3	; 0x03
    1654:	bc 81       	ldd	r27, Y+4	; 0x04
    1656:	89 2f       	mov	r24, r25
    1658:	9a 2f       	mov	r25, r26
    165a:	ab 2f       	mov	r26, r27
    165c:	bb 27       	eor	r27, r27
    165e:	89 83       	std	Y+1, r24	; 0x01
    1660:	9a 83       	std	Y+2, r25	; 0x02
    1662:	ab 83       	std	Y+3, r26	; 0x03
    1664:	bc 83       	std	Y+4, r27	; 0x04
	ucHighByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    1666:	89 81       	ldd	r24, Y+1	; 0x01
    1668:	8e 83       	std	Y+6, r24	; 0x06
	OCR1AH = ucHighByte;
    166a:	8b e4       	ldi	r24, 0x4B	; 75
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	2e 81       	ldd	r18, Y+6	; 0x06
    1670:	fc 01       	movw	r30, r24
    1672:	20 83       	st	Z, r18
	OCR1AL = ucLowByte;
    1674:	8a e4       	ldi	r24, 0x4A	; 74
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	2d 81       	ldd	r18, Y+5	; 0x05
    167a:	fc 01       	movw	r30, r24
    167c:	20 83       	st	Z, r18

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
    167e:	8b e0       	ldi	r24, 0x0B	; 11
    1680:	8d 83       	std	Y+5, r24	; 0x05
	TCCR1B = ucLowByte;
    1682:	8e e4       	ldi	r24, 0x4E	; 78
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	2d 81       	ldd	r18, Y+5	; 0x05
    1688:	fc 01       	movw	r30, r24
    168a:	20 83       	st	Z, r18

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK;
    168c:	89 e5       	ldi	r24, 0x59	; 89
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	fc 01       	movw	r30, r24
    1692:	80 81       	ld	r24, Z
    1694:	8d 83       	std	Y+5, r24	; 0x05
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    1696:	8d 81       	ldd	r24, Y+5	; 0x05
    1698:	80 61       	ori	r24, 0x10	; 16
    169a:	8d 83       	std	Y+5, r24	; 0x05
	TIMSK = ucLowByte;
    169c:	89 e5       	ldi	r24, 0x59	; 89
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	2d 81       	ldd	r18, Y+5	; 0x05
    16a2:	fc 01       	movw	r30, r24
    16a4:	20 83       	st	Z, r18
}
    16a6:	00 00       	nop
    16a8:	26 96       	adiw	r28, 0x06	; 6
    16aa:	0f b6       	in	r0, 0x3f	; 63
    16ac:	f8 94       	cli
    16ae:	de bf       	out	0x3e, r29	; 62
    16b0:	0f be       	out	0x3f, r0	; 63
    16b2:	cd bf       	out	0x3d, r28	; 61
    16b4:	df 91       	pop	r29
    16b6:	cf 91       	pop	r28
    16b8:	08 95       	ret

000016ba <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
    16ba:	0e 94 9d 0a 	call	0x153a	; 0x153a <vPortYieldFromTick>
		asm volatile ( "reti" );
    16be:	18 95       	reti
	...

000016c2 <xTaskCreate>:
			}
		}
		taskEXIT_CRITICAL();

		return xReturn;
	}
    16c2:	8f 92       	push	r8
    16c4:	9f 92       	push	r9
    16c6:	af 92       	push	r10
    16c8:	bf 92       	push	r11
    16ca:	cf 92       	push	r12
    16cc:	df 92       	push	r13
    16ce:	ef 92       	push	r14
    16d0:	ff 92       	push	r15
    16d2:	0f 93       	push	r16
    16d4:	1f 93       	push	r17
    16d6:	cf 93       	push	r28
    16d8:	df 93       	push	r29
    16da:	cd b7       	in	r28, 0x3d	; 61
    16dc:	de b7       	in	r29, 0x3e	; 62
    16de:	60 97       	sbiw	r28, 0x10	; 16
    16e0:	0f b6       	in	r0, 0x3f	; 63
    16e2:	f8 94       	cli
    16e4:	de bf       	out	0x3e, r29	; 62
    16e6:	0f be       	out	0x3f, r0	; 63
    16e8:	cd bf       	out	0x3d, r28	; 61
    16ea:	9f 83       	std	Y+7, r25	; 0x07
    16ec:	8e 83       	std	Y+6, r24	; 0x06
    16ee:	79 87       	std	Y+9, r23	; 0x09
    16f0:	68 87       	std	Y+8, r22	; 0x08
    16f2:	5b 87       	std	Y+11, r21	; 0x0b
    16f4:	4a 87       	std	Y+10, r20	; 0x0a
    16f6:	3d 87       	std	Y+13, r19	; 0x0d
    16f8:	2c 87       	std	Y+12, r18	; 0x0c
    16fa:	0e 87       	std	Y+14, r16	; 0x0e
    16fc:	f8 8a       	std	Y+16, r15	; 0x10
    16fe:	ef 86       	std	Y+15, r14	; 0x0f
    1700:	8a 85       	ldd	r24, Y+10	; 0x0a
    1702:	9b 85       	ldd	r25, Y+11	; 0x0b
    1704:	0e 94 9d 06 	call	0xd3a	; 0xd3a <pvPortMalloc>
    1708:	9d 83       	std	Y+5, r25	; 0x05
    170a:	8c 83       	std	Y+4, r24	; 0x04
    170c:	8c 81       	ldd	r24, Y+4	; 0x04
    170e:	9d 81       	ldd	r25, Y+5	; 0x05
    1710:	89 2b       	or	r24, r25
    1712:	b9 f0       	breq	.+46     	; 0x1742 <xTaskCreate+0x80>
    1714:	88 e2       	ldi	r24, 0x28	; 40
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	0e 94 9d 06 	call	0xd3a	; 0xd3a <pvPortMalloc>
    171c:	9a 83       	std	Y+2, r25	; 0x02
    171e:	89 83       	std	Y+1, r24	; 0x01
    1720:	89 81       	ldd	r24, Y+1	; 0x01
    1722:	9a 81       	ldd	r25, Y+2	; 0x02
    1724:	89 2b       	or	r24, r25
    1726:	41 f0       	breq	.+16     	; 0x1738 <xTaskCreate+0x76>
    1728:	89 81       	ldd	r24, Y+1	; 0x01
    172a:	9a 81       	ldd	r25, Y+2	; 0x02
    172c:	2c 81       	ldd	r18, Y+4	; 0x04
    172e:	3d 81       	ldd	r19, Y+5	; 0x05
    1730:	fc 01       	movw	r30, r24
    1732:	30 8f       	std	Z+24, r19	; 0x18
    1734:	27 8b       	std	Z+23, r18	; 0x17
    1736:	07 c0       	rjmp	.+14     	; 0x1746 <xTaskCreate+0x84>
    1738:	8c 81       	ldd	r24, Y+4	; 0x04
    173a:	9d 81       	ldd	r25, Y+5	; 0x05
    173c:	0e 94 f2 06 	call	0xde4	; 0xde4 <vPortFree>
    1740:	02 c0       	rjmp	.+4      	; 0x1746 <xTaskCreate+0x84>
    1742:	1a 82       	std	Y+2, r1	; 0x02
    1744:	19 82       	std	Y+1, r1	; 0x01
    1746:	89 81       	ldd	r24, Y+1	; 0x01
    1748:	9a 81       	ldd	r25, Y+2	; 0x02
    174a:	89 2b       	or	r24, r25
    174c:	09 f1       	breq	.+66     	; 0x1790 <xTaskCreate+0xce>
    174e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1750:	9b 85       	ldd	r25, Y+11	; 0x0b
    1752:	cc 01       	movw	r24, r24
    1754:	a0 e0       	ldi	r26, 0x00	; 0
    1756:	b0 e0       	ldi	r27, 0x00	; 0
    1758:	09 81       	ldd	r16, Y+1	; 0x01
    175a:	1a 81       	ldd	r17, Y+2	; 0x02
    175c:	4f 85       	ldd	r20, Y+15	; 0x0f
    175e:	58 89       	ldd	r21, Y+16	; 0x10
    1760:	2c 85       	ldd	r18, Y+12	; 0x0c
    1762:	3d 85       	ldd	r19, Y+13	; 0x0d
    1764:	68 85       	ldd	r22, Y+8	; 0x08
    1766:	79 85       	ldd	r23, Y+9	; 0x09
    1768:	ee 81       	ldd	r30, Y+6	; 0x06
    176a:	ff 81       	ldd	r31, Y+7	; 0x07
    176c:	81 2c       	mov	r8, r1
    176e:	91 2c       	mov	r9, r1
    1770:	58 01       	movw	r10, r16
    1772:	6a 01       	movw	r12, r20
    1774:	ee 84       	ldd	r14, Y+14	; 0x0e
    1776:	89 01       	movw	r16, r18
    1778:	9c 01       	movw	r18, r24
    177a:	ad 01       	movw	r20, r26
    177c:	cf 01       	movw	r24, r30
    177e:	0e 94 de 0b 	call	0x17bc	; 0x17bc <prvInitialiseNewTask>
    1782:	89 81       	ldd	r24, Y+1	; 0x01
    1784:	9a 81       	ldd	r25, Y+2	; 0x02
    1786:	0e 94 b2 0c 	call	0x1964	; 0x1964 <prvAddNewTaskToReadyList>
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	8b 83       	std	Y+3, r24	; 0x03
    178e:	02 c0       	rjmp	.+4      	; 0x1794 <xTaskCreate+0xd2>
    1790:	8f ef       	ldi	r24, 0xFF	; 255
    1792:	8b 83       	std	Y+3, r24	; 0x03
    1794:	8b 81       	ldd	r24, Y+3	; 0x03
    1796:	60 96       	adiw	r28, 0x10	; 16
    1798:	0f b6       	in	r0, 0x3f	; 63
    179a:	f8 94       	cli
    179c:	de bf       	out	0x3e, r29	; 62
    179e:	0f be       	out	0x3f, r0	; 63
    17a0:	cd bf       	out	0x3d, r28	; 61
    17a2:	df 91       	pop	r29
    17a4:	cf 91       	pop	r28
    17a6:	1f 91       	pop	r17
    17a8:	0f 91       	pop	r16
    17aa:	ff 90       	pop	r15
    17ac:	ef 90       	pop	r14
    17ae:	df 90       	pop	r13
    17b0:	cf 90       	pop	r12
    17b2:	bf 90       	pop	r11
    17b4:	af 90       	pop	r10
    17b6:	9f 90       	pop	r9
    17b8:	8f 90       	pop	r8
    17ba:	08 95       	ret

000017bc <prvInitialiseNewTask>:
    17bc:	8f 92       	push	r8
    17be:	9f 92       	push	r9
    17c0:	af 92       	push	r10
    17c2:	bf 92       	push	r11
    17c4:	cf 92       	push	r12
    17c6:	df 92       	push	r13
    17c8:	ef 92       	push	r14
    17ca:	0f 93       	push	r16
    17cc:	1f 93       	push	r17
    17ce:	cf 93       	push	r28
    17d0:	df 93       	push	r29
    17d2:	cd b7       	in	r28, 0x3d	; 61
    17d4:	de b7       	in	r29, 0x3e	; 62
    17d6:	64 97       	sbiw	r28, 0x14	; 20
    17d8:	0f b6       	in	r0, 0x3f	; 63
    17da:	f8 94       	cli
    17dc:	de bf       	out	0x3e, r29	; 62
    17de:	0f be       	out	0x3f, r0	; 63
    17e0:	cd bf       	out	0x3d, r28	; 61
    17e2:	9d 83       	std	Y+5, r25	; 0x05
    17e4:	8c 83       	std	Y+4, r24	; 0x04
    17e6:	7f 83       	std	Y+7, r23	; 0x07
    17e8:	6e 83       	std	Y+6, r22	; 0x06
    17ea:	28 87       	std	Y+8, r18	; 0x08
    17ec:	39 87       	std	Y+9, r19	; 0x09
    17ee:	4a 87       	std	Y+10, r20	; 0x0a
    17f0:	5b 87       	std	Y+11, r21	; 0x0b
    17f2:	1d 87       	std	Y+13, r17	; 0x0d
    17f4:	0c 87       	std	Y+12, r16	; 0x0c
    17f6:	ee 86       	std	Y+14, r14	; 0x0e
    17f8:	d8 8a       	std	Y+16, r13	; 0x10
    17fa:	cf 86       	std	Y+15, r12	; 0x0f
    17fc:	ba 8a       	std	Y+18, r11	; 0x12
    17fe:	a9 8a       	std	Y+17, r10	; 0x11
    1800:	9c 8a       	std	Y+20, r9	; 0x14
    1802:	8b 8a       	std	Y+19, r8	; 0x13
    1804:	89 89       	ldd	r24, Y+17	; 0x11
    1806:	9a 89       	ldd	r25, Y+18	; 0x12
    1808:	fc 01       	movw	r30, r24
    180a:	27 89       	ldd	r18, Z+23	; 0x17
    180c:	30 8d       	ldd	r19, Z+24	; 0x18
    180e:	88 85       	ldd	r24, Y+8	; 0x08
    1810:	99 85       	ldd	r25, Y+9	; 0x09
    1812:	01 97       	sbiw	r24, 0x01	; 1
    1814:	82 0f       	add	r24, r18
    1816:	93 1f       	adc	r25, r19
    1818:	9b 83       	std	Y+3, r25	; 0x03
    181a:	8a 83       	std	Y+2, r24	; 0x02
    181c:	8e 81       	ldd	r24, Y+6	; 0x06
    181e:	9f 81       	ldd	r25, Y+7	; 0x07
    1820:	89 2b       	or	r24, r25
    1822:	69 f1       	breq	.+90     	; 0x187e <prvInitialiseNewTask+0xc2>
    1824:	19 82       	std	Y+1, r1	; 0x01
    1826:	21 c0       	rjmp	.+66     	; 0x186a <prvInitialiseNewTask+0xae>
    1828:	89 81       	ldd	r24, Y+1	; 0x01
    182a:	88 2f       	mov	r24, r24
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	29 81       	ldd	r18, Y+1	; 0x01
    1830:	22 2f       	mov	r18, r18
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	4e 81       	ldd	r20, Y+6	; 0x06
    1836:	5f 81       	ldd	r21, Y+7	; 0x07
    1838:	24 0f       	add	r18, r20
    183a:	35 1f       	adc	r19, r21
    183c:	f9 01       	movw	r30, r18
    183e:	40 81       	ld	r20, Z
    1840:	29 89       	ldd	r18, Y+17	; 0x11
    1842:	3a 89       	ldd	r19, Y+18	; 0x12
    1844:	82 0f       	add	r24, r18
    1846:	93 1f       	adc	r25, r19
    1848:	49 96       	adiw	r24, 0x19	; 25
    184a:	fc 01       	movw	r30, r24
    184c:	40 83       	st	Z, r20
    184e:	89 81       	ldd	r24, Y+1	; 0x01
    1850:	88 2f       	mov	r24, r24
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	2e 81       	ldd	r18, Y+6	; 0x06
    1856:	3f 81       	ldd	r19, Y+7	; 0x07
    1858:	82 0f       	add	r24, r18
    185a:	93 1f       	adc	r25, r19
    185c:	fc 01       	movw	r30, r24
    185e:	80 81       	ld	r24, Z
    1860:	88 23       	and	r24, r24
    1862:	39 f0       	breq	.+14     	; 0x1872 <prvInitialiseNewTask+0xb6>
    1864:	89 81       	ldd	r24, Y+1	; 0x01
    1866:	8f 5f       	subi	r24, 0xFF	; 255
    1868:	89 83       	std	Y+1, r24	; 0x01
    186a:	89 81       	ldd	r24, Y+1	; 0x01
    186c:	88 30       	cpi	r24, 0x08	; 8
    186e:	e0 f2       	brcs	.-72     	; 0x1828 <prvInitialiseNewTask+0x6c>
    1870:	01 c0       	rjmp	.+2      	; 0x1874 <prvInitialiseNewTask+0xb8>
    1872:	00 00       	nop
    1874:	89 89       	ldd	r24, Y+17	; 0x11
    1876:	9a 89       	ldd	r25, Y+18	; 0x12
    1878:	fc 01       	movw	r30, r24
    187a:	10 a2       	std	Z+32, r1	; 0x20
    187c:	04 c0       	rjmp	.+8      	; 0x1886 <prvInitialiseNewTask+0xca>
    187e:	89 89       	ldd	r24, Y+17	; 0x11
    1880:	9a 89       	ldd	r25, Y+18	; 0x12
    1882:	fc 01       	movw	r30, r24
    1884:	11 8e       	std	Z+25, r1	; 0x19
    1886:	8e 85       	ldd	r24, Y+14	; 0x0e
    1888:	86 30       	cpi	r24, 0x06	; 6
    188a:	10 f0       	brcs	.+4      	; 0x1890 <prvInitialiseNewTask+0xd4>
    188c:	85 e0       	ldi	r24, 0x05	; 5
    188e:	8e 87       	std	Y+14, r24	; 0x0e
    1890:	89 89       	ldd	r24, Y+17	; 0x11
    1892:	9a 89       	ldd	r25, Y+18	; 0x12
    1894:	2e 85       	ldd	r18, Y+14	; 0x0e
    1896:	fc 01       	movw	r30, r24
    1898:	26 8b       	std	Z+22, r18	; 0x16
    189a:	89 89       	ldd	r24, Y+17	; 0x11
    189c:	9a 89       	ldd	r25, Y+18	; 0x12
    189e:	2e 85       	ldd	r18, Y+14	; 0x0e
    18a0:	fc 01       	movw	r30, r24
    18a2:	21 a3       	std	Z+33, r18	; 0x21
    18a4:	89 89       	ldd	r24, Y+17	; 0x11
    18a6:	9a 89       	ldd	r25, Y+18	; 0x12
    18a8:	fc 01       	movw	r30, r24
    18aa:	12 a2       	std	Z+34, r1	; 0x22
    18ac:	89 89       	ldd	r24, Y+17	; 0x11
    18ae:	9a 89       	ldd	r25, Y+18	; 0x12
    18b0:	02 96       	adiw	r24, 0x02	; 2
    18b2:	0e 94 35 07 	call	0xe6a	; 0xe6a <vListInitialiseItem>
    18b6:	89 89       	ldd	r24, Y+17	; 0x11
    18b8:	9a 89       	ldd	r25, Y+18	; 0x12
    18ba:	0c 96       	adiw	r24, 0x0c	; 12
    18bc:	0e 94 35 07 	call	0xe6a	; 0xe6a <vListInitialiseItem>
    18c0:	89 89       	ldd	r24, Y+17	; 0x11
    18c2:	9a 89       	ldd	r25, Y+18	; 0x12
    18c4:	29 89       	ldd	r18, Y+17	; 0x11
    18c6:	3a 89       	ldd	r19, Y+18	; 0x12
    18c8:	fc 01       	movw	r30, r24
    18ca:	31 87       	std	Z+9, r19	; 0x09
    18cc:	20 87       	std	Z+8, r18	; 0x08
    18ce:	8e 85       	ldd	r24, Y+14	; 0x0e
    18d0:	88 2f       	mov	r24, r24
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	26 e0       	ldi	r18, 0x06	; 6
    18d6:	30 e0       	ldi	r19, 0x00	; 0
    18d8:	28 1b       	sub	r18, r24
    18da:	39 0b       	sbc	r19, r25
    18dc:	89 89       	ldd	r24, Y+17	; 0x11
    18de:	9a 89       	ldd	r25, Y+18	; 0x12
    18e0:	fc 01       	movw	r30, r24
    18e2:	35 87       	std	Z+13, r19	; 0x0d
    18e4:	24 87       	std	Z+12, r18	; 0x0c
    18e6:	89 89       	ldd	r24, Y+17	; 0x11
    18e8:	9a 89       	ldd	r25, Y+18	; 0x12
    18ea:	29 89       	ldd	r18, Y+17	; 0x11
    18ec:	3a 89       	ldd	r19, Y+18	; 0x12
    18ee:	fc 01       	movw	r30, r24
    18f0:	33 8b       	std	Z+19, r19	; 0x13
    18f2:	22 8b       	std	Z+18, r18	; 0x12
    18f4:	89 89       	ldd	r24, Y+17	; 0x11
    18f6:	9a 89       	ldd	r25, Y+18	; 0x12
    18f8:	fc 01       	movw	r30, r24
    18fa:	13 a2       	std	Z+35, r1	; 0x23
    18fc:	14 a2       	std	Z+36, r1	; 0x24
    18fe:	15 a2       	std	Z+37, r1	; 0x25
    1900:	16 a2       	std	Z+38, r1	; 0x26
    1902:	89 89       	ldd	r24, Y+17	; 0x11
    1904:	9a 89       	ldd	r25, Y+18	; 0x12
    1906:	fc 01       	movw	r30, r24
    1908:	17 a2       	std	Z+39, r1	; 0x27
    190a:	4c 85       	ldd	r20, Y+12	; 0x0c
    190c:	5d 85       	ldd	r21, Y+13	; 0x0d
    190e:	2c 81       	ldd	r18, Y+4	; 0x04
    1910:	3d 81       	ldd	r19, Y+5	; 0x05
    1912:	8a 81       	ldd	r24, Y+2	; 0x02
    1914:	9b 81       	ldd	r25, Y+3	; 0x03
    1916:	b9 01       	movw	r22, r18
    1918:	0e 94 65 08 	call	0x10ca	; 0x10ca <pxPortInitialiseStack>
    191c:	9c 01       	movw	r18, r24
    191e:	89 89       	ldd	r24, Y+17	; 0x11
    1920:	9a 89       	ldd	r25, Y+18	; 0x12
    1922:	fc 01       	movw	r30, r24
    1924:	31 83       	std	Z+1, r19	; 0x01
    1926:	20 83       	st	Z, r18
    1928:	8f 85       	ldd	r24, Y+15	; 0x0f
    192a:	98 89       	ldd	r25, Y+16	; 0x10
    192c:	89 2b       	or	r24, r25
    192e:	39 f0       	breq	.+14     	; 0x193e <prvInitialiseNewTask+0x182>
    1930:	8f 85       	ldd	r24, Y+15	; 0x0f
    1932:	98 89       	ldd	r25, Y+16	; 0x10
    1934:	29 89       	ldd	r18, Y+17	; 0x11
    1936:	3a 89       	ldd	r19, Y+18	; 0x12
    1938:	fc 01       	movw	r30, r24
    193a:	31 83       	std	Z+1, r19	; 0x01
    193c:	20 83       	st	Z, r18
    193e:	00 00       	nop
    1940:	64 96       	adiw	r28, 0x14	; 20
    1942:	0f b6       	in	r0, 0x3f	; 63
    1944:	f8 94       	cli
    1946:	de bf       	out	0x3e, r29	; 62
    1948:	0f be       	out	0x3f, r0	; 63
    194a:	cd bf       	out	0x3d, r28	; 61
    194c:	df 91       	pop	r29
    194e:	cf 91       	pop	r28
    1950:	1f 91       	pop	r17
    1952:	0f 91       	pop	r16
    1954:	ef 90       	pop	r14
    1956:	df 90       	pop	r13
    1958:	cf 90       	pop	r12
    195a:	bf 90       	pop	r11
    195c:	af 90       	pop	r10
    195e:	9f 90       	pop	r9
    1960:	8f 90       	pop	r8
    1962:	08 95       	ret

00001964 <prvAddNewTaskToReadyList>:
    1964:	cf 93       	push	r28
    1966:	df 93       	push	r29
    1968:	00 d0       	rcall	.+0      	; 0x196a <prvAddNewTaskToReadyList+0x6>
    196a:	cd b7       	in	r28, 0x3d	; 61
    196c:	de b7       	in	r29, 0x3e	; 62
    196e:	9a 83       	std	Y+2, r25	; 0x02
    1970:	89 83       	std	Y+1, r24	; 0x01
    1972:	0f b6       	in	r0, 0x3f	; 63
    1974:	f8 94       	cli
    1976:	0f 92       	push	r0
    1978:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <uxCurrentNumberOfTasks>
    197c:	8f 5f       	subi	r24, 0xFF	; 255
    197e:	80 93 11 07 	sts	0x0711, r24	; 0x800711 <uxCurrentNumberOfTasks>
    1982:	80 91 a7 06 	lds	r24, 0x06A7	; 0x8006a7 <pxCurrentTCB>
    1986:	90 91 a8 06 	lds	r25, 0x06A8	; 0x8006a8 <pxCurrentTCB+0x1>
    198a:	89 2b       	or	r24, r25
    198c:	69 f4       	brne	.+26     	; 0x19a8 <prvAddNewTaskToReadyList+0x44>
    198e:	89 81       	ldd	r24, Y+1	; 0x01
    1990:	9a 81       	ldd	r25, Y+2	; 0x02
    1992:	90 93 a8 06 	sts	0x06A8, r25	; 0x8006a8 <pxCurrentTCB+0x1>
    1996:	80 93 a7 06 	sts	0x06A7, r24	; 0x8006a7 <pxCurrentTCB>
    199a:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <uxCurrentNumberOfTasks>
    199e:	81 30       	cpi	r24, 0x01	; 1
    19a0:	c9 f4       	brne	.+50     	; 0x19d4 <prvAddNewTaskToReadyList+0x70>
    19a2:	0e 94 32 11 	call	0x2264	; 0x2264 <prvInitialiseTaskLists>
    19a6:	16 c0       	rjmp	.+44     	; 0x19d4 <prvAddNewTaskToReadyList+0x70>
    19a8:	80 91 15 07 	lds	r24, 0x0715	; 0x800715 <xSchedulerRunning>
    19ac:	88 23       	and	r24, r24
    19ae:	91 f4       	brne	.+36     	; 0x19d4 <prvAddNewTaskToReadyList+0x70>
    19b0:	80 91 a7 06 	lds	r24, 0x06A7	; 0x8006a7 <pxCurrentTCB>
    19b4:	90 91 a8 06 	lds	r25, 0x06A8	; 0x8006a8 <pxCurrentTCB+0x1>
    19b8:	fc 01       	movw	r30, r24
    19ba:	26 89       	ldd	r18, Z+22	; 0x16
    19bc:	89 81       	ldd	r24, Y+1	; 0x01
    19be:	9a 81       	ldd	r25, Y+2	; 0x02
    19c0:	fc 01       	movw	r30, r24
    19c2:	86 89       	ldd	r24, Z+22	; 0x16
    19c4:	82 17       	cp	r24, r18
    19c6:	30 f0       	brcs	.+12     	; 0x19d4 <prvAddNewTaskToReadyList+0x70>
    19c8:	89 81       	ldd	r24, Y+1	; 0x01
    19ca:	9a 81       	ldd	r25, Y+2	; 0x02
    19cc:	90 93 a8 06 	sts	0x06A8, r25	; 0x8006a8 <pxCurrentTCB+0x1>
    19d0:	80 93 a7 06 	sts	0x06A7, r24	; 0x8006a7 <pxCurrentTCB>
    19d4:	80 91 19 07 	lds	r24, 0x0719	; 0x800719 <uxTaskNumber>
    19d8:	8f 5f       	subi	r24, 0xFF	; 255
    19da:	80 93 19 07 	sts	0x0719, r24	; 0x800719 <uxTaskNumber>
    19de:	89 81       	ldd	r24, Y+1	; 0x01
    19e0:	9a 81       	ldd	r25, Y+2	; 0x02
    19e2:	fc 01       	movw	r30, r24
    19e4:	96 89       	ldd	r25, Z+22	; 0x16
    19e6:	80 91 14 07 	lds	r24, 0x0714	; 0x800714 <uxTopReadyPriority>
    19ea:	89 17       	cp	r24, r25
    19ec:	30 f4       	brcc	.+12     	; 0x19fa <prvAddNewTaskToReadyList+0x96>
    19ee:	89 81       	ldd	r24, Y+1	; 0x01
    19f0:	9a 81       	ldd	r25, Y+2	; 0x02
    19f2:	fc 01       	movw	r30, r24
    19f4:	86 89       	ldd	r24, Z+22	; 0x16
    19f6:	80 93 14 07 	sts	0x0714, r24	; 0x800714 <uxTopReadyPriority>
    19fa:	89 81       	ldd	r24, Y+1	; 0x01
    19fc:	9a 81       	ldd	r25, Y+2	; 0x02
    19fe:	ac 01       	movw	r20, r24
    1a00:	4e 5f       	subi	r20, 0xFE	; 254
    1a02:	5f 4f       	sbci	r21, 0xFF	; 255
    1a04:	89 81       	ldd	r24, Y+1	; 0x01
    1a06:	9a 81       	ldd	r25, Y+2	; 0x02
    1a08:	fc 01       	movw	r30, r24
    1a0a:	86 89       	ldd	r24, Z+22	; 0x16
    1a0c:	28 2f       	mov	r18, r24
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	c9 01       	movw	r24, r18
    1a12:	88 0f       	add	r24, r24
    1a14:	99 1f       	adc	r25, r25
    1a16:	88 0f       	add	r24, r24
    1a18:	99 1f       	adc	r25, r25
    1a1a:	88 0f       	add	r24, r24
    1a1c:	99 1f       	adc	r25, r25
    1a1e:	82 0f       	add	r24, r18
    1a20:	93 1f       	adc	r25, r19
    1a22:	87 55       	subi	r24, 0x57	; 87
    1a24:	99 4f       	sbci	r25, 0xF9	; 249
    1a26:	ba 01       	movw	r22, r20
    1a28:	0e 94 47 07 	call	0xe8e	; 0xe8e <vListInsertEnd>
    1a2c:	0f 90       	pop	r0
    1a2e:	0f be       	out	0x3f, r0	; 63
    1a30:	80 91 15 07 	lds	r24, 0x0715	; 0x800715 <xSchedulerRunning>
    1a34:	88 23       	and	r24, r24
    1a36:	71 f0       	breq	.+28     	; 0x1a54 <prvAddNewTaskToReadyList+0xf0>
    1a38:	80 91 a7 06 	lds	r24, 0x06A7	; 0x8006a7 <pxCurrentTCB>
    1a3c:	90 91 a8 06 	lds	r25, 0x06A8	; 0x8006a8 <pxCurrentTCB+0x1>
    1a40:	fc 01       	movw	r30, r24
    1a42:	26 89       	ldd	r18, Z+22	; 0x16
    1a44:	89 81       	ldd	r24, Y+1	; 0x01
    1a46:	9a 81       	ldd	r25, Y+2	; 0x02
    1a48:	fc 01       	movw	r30, r24
    1a4a:	86 89       	ldd	r24, Z+22	; 0x16
    1a4c:	28 17       	cp	r18, r24
    1a4e:	10 f4       	brcc	.+4      	; 0x1a54 <prvAddNewTaskToReadyList+0xf0>
    1a50:	0e 94 43 0a 	call	0x1486	; 0x1486 <vPortYield>
    1a54:	00 00       	nop
    1a56:	0f 90       	pop	r0
    1a58:	0f 90       	pop	r0
    1a5a:	df 91       	pop	r29
    1a5c:	cf 91       	pop	r28
    1a5e:	08 95       	ret

00001a60 <vTaskDelay>:
    1a60:	cf 93       	push	r28
    1a62:	df 93       	push	r29
    1a64:	00 d0       	rcall	.+0      	; 0x1a66 <vTaskDelay+0x6>
    1a66:	1f 92       	push	r1
    1a68:	cd b7       	in	r28, 0x3d	; 61
    1a6a:	de b7       	in	r29, 0x3e	; 62
    1a6c:	9b 83       	std	Y+3, r25	; 0x03
    1a6e:	8a 83       	std	Y+2, r24	; 0x02
    1a70:	19 82       	std	Y+1, r1	; 0x01
    1a72:	8a 81       	ldd	r24, Y+2	; 0x02
    1a74:	9b 81       	ldd	r25, Y+3	; 0x03
    1a76:	89 2b       	or	r24, r25
    1a78:	51 f0       	breq	.+20     	; 0x1a8e <vTaskDelay+0x2e>
    1a7a:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <vTaskSuspendAll>
    1a7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a80:	9b 81       	ldd	r25, Y+3	; 0x03
    1a82:	60 e0       	ldi	r22, 0x00	; 0
    1a84:	0e 94 16 12 	call	0x242c	; 0x242c <prvAddCurrentTaskToDelayedList>
    1a88:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <xTaskResumeAll>
    1a8c:	89 83       	std	Y+1, r24	; 0x01
    1a8e:	89 81       	ldd	r24, Y+1	; 0x01
    1a90:	88 23       	and	r24, r24
    1a92:	11 f4       	brne	.+4      	; 0x1a98 <vTaskDelay+0x38>
    1a94:	0e 94 43 0a 	call	0x1486	; 0x1486 <vPortYield>
    1a98:	00 00       	nop
    1a9a:	0f 90       	pop	r0
    1a9c:	0f 90       	pop	r0
    1a9e:	0f 90       	pop	r0
    1aa0:	df 91       	pop	r29
    1aa2:	cf 91       	pop	r28
    1aa4:	08 95       	ret

00001aa6 <vTaskSuspend>:
    1aa6:	cf 93       	push	r28
    1aa8:	df 93       	push	r29
    1aaa:	00 d0       	rcall	.+0      	; 0x1aac <vTaskSuspend+0x6>
    1aac:	00 d0       	rcall	.+0      	; 0x1aae <vTaskSuspend+0x8>
    1aae:	cd b7       	in	r28, 0x3d	; 61
    1ab0:	de b7       	in	r29, 0x3e	; 62
    1ab2:	9c 83       	std	Y+4, r25	; 0x04
    1ab4:	8b 83       	std	Y+3, r24	; 0x03
    1ab6:	0f b6       	in	r0, 0x3f	; 63
    1ab8:	f8 94       	cli
    1aba:	0f 92       	push	r0
    1abc:	8b 81       	ldd	r24, Y+3	; 0x03
    1abe:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac0:	89 2b       	or	r24, r25
    1ac2:	29 f4       	brne	.+10     	; 0x1ace <vTaskSuspend+0x28>
    1ac4:	80 91 a7 06 	lds	r24, 0x06A7	; 0x8006a7 <pxCurrentTCB>
    1ac8:	90 91 a8 06 	lds	r25, 0x06A8	; 0x8006a8 <pxCurrentTCB+0x1>
    1acc:	02 c0       	rjmp	.+4      	; 0x1ad2 <vTaskSuspend+0x2c>
    1ace:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad2:	9a 83       	std	Y+2, r25	; 0x02
    1ad4:	89 83       	std	Y+1, r24	; 0x01
    1ad6:	89 81       	ldd	r24, Y+1	; 0x01
    1ad8:	9a 81       	ldd	r25, Y+2	; 0x02
    1ada:	02 96       	adiw	r24, 0x02	; 2
    1adc:	0e 94 0e 08 	call	0x101c	; 0x101c <uxListRemove>
    1ae0:	89 81       	ldd	r24, Y+1	; 0x01
    1ae2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae4:	fc 01       	movw	r30, r24
    1ae6:	84 89       	ldd	r24, Z+20	; 0x14
    1ae8:	95 89       	ldd	r25, Z+21	; 0x15
    1aea:	89 2b       	or	r24, r25
    1aec:	29 f0       	breq	.+10     	; 0x1af8 <vTaskSuspend+0x52>
    1aee:	89 81       	ldd	r24, Y+1	; 0x01
    1af0:	9a 81       	ldd	r25, Y+2	; 0x02
    1af2:	0c 96       	adiw	r24, 0x0c	; 12
    1af4:	0e 94 0e 08 	call	0x101c	; 0x101c <uxListRemove>
    1af8:	89 81       	ldd	r24, Y+1	; 0x01
    1afa:	9a 81       	ldd	r25, Y+2	; 0x02
    1afc:	02 96       	adiw	r24, 0x02	; 2
    1afe:	bc 01       	movw	r22, r24
    1b00:	88 e0       	ldi	r24, 0x08	; 8
    1b02:	97 e0       	ldi	r25, 0x07	; 7
    1b04:	0e 94 47 07 	call	0xe8e	; 0xe8e <vListInsertEnd>
    1b08:	89 81       	ldd	r24, Y+1	; 0x01
    1b0a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b0c:	fc 01       	movw	r30, r24
    1b0e:	87 a1       	ldd	r24, Z+39	; 0x27
    1b10:	81 30       	cpi	r24, 0x01	; 1
    1b12:	21 f4       	brne	.+8      	; 0x1b1c <vTaskSuspend+0x76>
    1b14:	89 81       	ldd	r24, Y+1	; 0x01
    1b16:	9a 81       	ldd	r25, Y+2	; 0x02
    1b18:	fc 01       	movw	r30, r24
    1b1a:	17 a2       	std	Z+39, r1	; 0x27
    1b1c:	0f 90       	pop	r0
    1b1e:	0f be       	out	0x3f, r0	; 63
    1b20:	80 91 15 07 	lds	r24, 0x0715	; 0x800715 <xSchedulerRunning>
    1b24:	88 23       	and	r24, r24
    1b26:	39 f0       	breq	.+14     	; 0x1b36 <vTaskSuspend+0x90>
    1b28:	0f b6       	in	r0, 0x3f	; 63
    1b2a:	f8 94       	cli
    1b2c:	0f 92       	push	r0
    1b2e:	0e 94 bd 11 	call	0x237a	; 0x237a <prvResetNextTaskUnblockTime>
    1b32:	0f 90       	pop	r0
    1b34:	0f be       	out	0x3f, r0	; 63
    1b36:	80 91 a7 06 	lds	r24, 0x06A7	; 0x8006a7 <pxCurrentTCB>
    1b3a:	90 91 a8 06 	lds	r25, 0x06A8	; 0x8006a8 <pxCurrentTCB+0x1>
    1b3e:	29 81       	ldd	r18, Y+1	; 0x01
    1b40:	3a 81       	ldd	r19, Y+2	; 0x02
    1b42:	28 17       	cp	r18, r24
    1b44:	39 07       	cpc	r19, r25
    1b46:	a1 f4       	brne	.+40     	; 0x1b70 <vTaskSuspend+0xca>
    1b48:	80 91 15 07 	lds	r24, 0x0715	; 0x800715 <xSchedulerRunning>
    1b4c:	88 23       	and	r24, r24
    1b4e:	19 f0       	breq	.+6      	; 0x1b56 <vTaskSuspend+0xb0>
    1b50:	0e 94 43 0a 	call	0x1486	; 0x1486 <vPortYield>
    1b54:	0d c0       	rjmp	.+26     	; 0x1b70 <vTaskSuspend+0xca>
    1b56:	90 91 08 07 	lds	r25, 0x0708	; 0x800708 <xSuspendedTaskList>
    1b5a:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <uxCurrentNumberOfTasks>
    1b5e:	98 17       	cp	r25, r24
    1b60:	29 f4       	brne	.+10     	; 0x1b6c <vTaskSuspend+0xc6>
    1b62:	10 92 a8 06 	sts	0x06A8, r1	; 0x8006a8 <pxCurrentTCB+0x1>
    1b66:	10 92 a7 06 	sts	0x06A7, r1	; 0x8006a7 <pxCurrentTCB>
    1b6a:	02 c0       	rjmp	.+4      	; 0x1b70 <vTaskSuspend+0xca>
    1b6c:	0e 94 1e 10 	call	0x203c	; 0x203c <vTaskSwitchContext>
    1b70:	00 00       	nop
    1b72:	0f 90       	pop	r0
    1b74:	0f 90       	pop	r0
    1b76:	0f 90       	pop	r0
    1b78:	0f 90       	pop	r0
    1b7a:	df 91       	pop	r29
    1b7c:	cf 91       	pop	r28
    1b7e:	08 95       	ret

00001b80 <prvTaskIsTaskSuspended>:
    1b80:	cf 93       	push	r28
    1b82:	df 93       	push	r29
    1b84:	00 d0       	rcall	.+0      	; 0x1b86 <prvTaskIsTaskSuspended+0x6>
    1b86:	00 d0       	rcall	.+0      	; 0x1b88 <prvTaskIsTaskSuspended+0x8>
    1b88:	1f 92       	push	r1
    1b8a:	cd b7       	in	r28, 0x3d	; 61
    1b8c:	de b7       	in	r29, 0x3e	; 62
    1b8e:	9d 83       	std	Y+5, r25	; 0x05
    1b90:	8c 83       	std	Y+4, r24	; 0x04
    1b92:	19 82       	std	Y+1, r1	; 0x01
    1b94:	8c 81       	ldd	r24, Y+4	; 0x04
    1b96:	9d 81       	ldd	r25, Y+5	; 0x05
    1b98:	9b 83       	std	Y+3, r25	; 0x03
    1b9a:	8a 83       	std	Y+2, r24	; 0x02
    1b9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9e:	9b 81       	ldd	r25, Y+3	; 0x03
    1ba0:	fc 01       	movw	r30, r24
    1ba2:	82 85       	ldd	r24, Z+10	; 0x0a
    1ba4:	93 85       	ldd	r25, Z+11	; 0x0b
    1ba6:	88 50       	subi	r24, 0x08	; 8
    1ba8:	97 40       	sbci	r25, 0x07	; 7
    1baa:	89 f4       	brne	.+34     	; 0x1bce <prvTaskIsTaskSuspended+0x4e>
    1bac:	8a 81       	ldd	r24, Y+2	; 0x02
    1bae:	9b 81       	ldd	r25, Y+3	; 0x03
    1bb0:	fc 01       	movw	r30, r24
    1bb2:	84 89       	ldd	r24, Z+20	; 0x14
    1bb4:	95 89       	ldd	r25, Z+21	; 0x15
    1bb6:	85 5f       	subi	r24, 0xF5	; 245
    1bb8:	96 40       	sbci	r25, 0x06	; 6
    1bba:	49 f0       	breq	.+18     	; 0x1bce <prvTaskIsTaskSuspended+0x4e>
    1bbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bbe:	9b 81       	ldd	r25, Y+3	; 0x03
    1bc0:	fc 01       	movw	r30, r24
    1bc2:	84 89       	ldd	r24, Z+20	; 0x14
    1bc4:	95 89       	ldd	r25, Z+21	; 0x15
    1bc6:	89 2b       	or	r24, r25
    1bc8:	11 f4       	brne	.+4      	; 0x1bce <prvTaskIsTaskSuspended+0x4e>
    1bca:	81 e0       	ldi	r24, 0x01	; 1
    1bcc:	89 83       	std	Y+1, r24	; 0x01
    1bce:	89 81       	ldd	r24, Y+1	; 0x01
    1bd0:	0f 90       	pop	r0
    1bd2:	0f 90       	pop	r0
    1bd4:	0f 90       	pop	r0
    1bd6:	0f 90       	pop	r0
    1bd8:	0f 90       	pop	r0
    1bda:	df 91       	pop	r29
    1bdc:	cf 91       	pop	r28
    1bde:	08 95       	ret

00001be0 <vTaskResume>:
    1be0:	cf 93       	push	r28
    1be2:	df 93       	push	r29
    1be4:	00 d0       	rcall	.+0      	; 0x1be6 <vTaskResume+0x6>
    1be6:	00 d0       	rcall	.+0      	; 0x1be8 <vTaskResume+0x8>
    1be8:	cd b7       	in	r28, 0x3d	; 61
    1bea:	de b7       	in	r29, 0x3e	; 62
    1bec:	9c 83       	std	Y+4, r25	; 0x04
    1bee:	8b 83       	std	Y+3, r24	; 0x03
    1bf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf2:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf4:	9a 83       	std	Y+2, r25	; 0x02
    1bf6:	89 83       	std	Y+1, r24	; 0x01
    1bf8:	80 91 a7 06 	lds	r24, 0x06A7	; 0x8006a7 <pxCurrentTCB>
    1bfc:	90 91 a8 06 	lds	r25, 0x06A8	; 0x8006a8 <pxCurrentTCB+0x1>
    1c00:	29 81       	ldd	r18, Y+1	; 0x01
    1c02:	3a 81       	ldd	r19, Y+2	; 0x02
    1c04:	28 17       	cp	r18, r24
    1c06:	39 07       	cpc	r19, r25
    1c08:	09 f4       	brne	.+2      	; 0x1c0c <vTaskResume+0x2c>
    1c0a:	4a c0       	rjmp	.+148    	; 0x1ca0 <vTaskResume+0xc0>
    1c0c:	89 81       	ldd	r24, Y+1	; 0x01
    1c0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c10:	89 2b       	or	r24, r25
    1c12:	09 f4       	brne	.+2      	; 0x1c16 <vTaskResume+0x36>
    1c14:	45 c0       	rjmp	.+138    	; 0x1ca0 <vTaskResume+0xc0>
    1c16:	0f b6       	in	r0, 0x3f	; 63
    1c18:	f8 94       	cli
    1c1a:	0f 92       	push	r0
    1c1c:	89 81       	ldd	r24, Y+1	; 0x01
    1c1e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c20:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <prvTaskIsTaskSuspended>
    1c24:	88 23       	and	r24, r24
    1c26:	d1 f1       	breq	.+116    	; 0x1c9c <vTaskResume+0xbc>
    1c28:	89 81       	ldd	r24, Y+1	; 0x01
    1c2a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c2c:	02 96       	adiw	r24, 0x02	; 2
    1c2e:	0e 94 0e 08 	call	0x101c	; 0x101c <uxListRemove>
    1c32:	89 81       	ldd	r24, Y+1	; 0x01
    1c34:	9a 81       	ldd	r25, Y+2	; 0x02
    1c36:	fc 01       	movw	r30, r24
    1c38:	96 89       	ldd	r25, Z+22	; 0x16
    1c3a:	80 91 14 07 	lds	r24, 0x0714	; 0x800714 <uxTopReadyPriority>
    1c3e:	89 17       	cp	r24, r25
    1c40:	30 f4       	brcc	.+12     	; 0x1c4e <vTaskResume+0x6e>
    1c42:	89 81       	ldd	r24, Y+1	; 0x01
    1c44:	9a 81       	ldd	r25, Y+2	; 0x02
    1c46:	fc 01       	movw	r30, r24
    1c48:	86 89       	ldd	r24, Z+22	; 0x16
    1c4a:	80 93 14 07 	sts	0x0714, r24	; 0x800714 <uxTopReadyPriority>
    1c4e:	89 81       	ldd	r24, Y+1	; 0x01
    1c50:	9a 81       	ldd	r25, Y+2	; 0x02
    1c52:	ac 01       	movw	r20, r24
    1c54:	4e 5f       	subi	r20, 0xFE	; 254
    1c56:	5f 4f       	sbci	r21, 0xFF	; 255
    1c58:	89 81       	ldd	r24, Y+1	; 0x01
    1c5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c5c:	fc 01       	movw	r30, r24
    1c5e:	86 89       	ldd	r24, Z+22	; 0x16
    1c60:	28 2f       	mov	r18, r24
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	c9 01       	movw	r24, r18
    1c66:	88 0f       	add	r24, r24
    1c68:	99 1f       	adc	r25, r25
    1c6a:	88 0f       	add	r24, r24
    1c6c:	99 1f       	adc	r25, r25
    1c6e:	88 0f       	add	r24, r24
    1c70:	99 1f       	adc	r25, r25
    1c72:	82 0f       	add	r24, r18
    1c74:	93 1f       	adc	r25, r19
    1c76:	87 55       	subi	r24, 0x57	; 87
    1c78:	99 4f       	sbci	r25, 0xF9	; 249
    1c7a:	ba 01       	movw	r22, r20
    1c7c:	0e 94 47 07 	call	0xe8e	; 0xe8e <vListInsertEnd>
    1c80:	89 81       	ldd	r24, Y+1	; 0x01
    1c82:	9a 81       	ldd	r25, Y+2	; 0x02
    1c84:	fc 01       	movw	r30, r24
    1c86:	26 89       	ldd	r18, Z+22	; 0x16
    1c88:	80 91 a7 06 	lds	r24, 0x06A7	; 0x8006a7 <pxCurrentTCB>
    1c8c:	90 91 a8 06 	lds	r25, 0x06A8	; 0x8006a8 <pxCurrentTCB+0x1>
    1c90:	fc 01       	movw	r30, r24
    1c92:	86 89       	ldd	r24, Z+22	; 0x16
    1c94:	28 17       	cp	r18, r24
    1c96:	10 f0       	brcs	.+4      	; 0x1c9c <vTaskResume+0xbc>
    1c98:	0e 94 43 0a 	call	0x1486	; 0x1486 <vPortYield>
    1c9c:	0f 90       	pop	r0
    1c9e:	0f be       	out	0x3f, r0	; 63
    1ca0:	00 00       	nop
    1ca2:	0f 90       	pop	r0
    1ca4:	0f 90       	pop	r0
    1ca6:	0f 90       	pop	r0
    1ca8:	0f 90       	pop	r0
    1caa:	df 91       	pop	r29
    1cac:	cf 91       	pop	r28
    1cae:	08 95       	ret

00001cb0 <vTaskStartScheduler>:
    1cb0:	ef 92       	push	r14
    1cb2:	ff 92       	push	r15
    1cb4:	0f 93       	push	r16
    1cb6:	cf 93       	push	r28
    1cb8:	df 93       	push	r29
    1cba:	1f 92       	push	r1
    1cbc:	cd b7       	in	r28, 0x3d	; 61
    1cbe:	de b7       	in	r29, 0x3e	; 62
    1cc0:	0f 2e       	mov	r0, r31
    1cc2:	fc e1       	ldi	r31, 0x1C	; 28
    1cc4:	ef 2e       	mov	r14, r31
    1cc6:	f7 e0       	ldi	r31, 0x07	; 7
    1cc8:	ff 2e       	mov	r15, r31
    1cca:	f0 2d       	mov	r31, r0
    1ccc:	00 e0       	ldi	r16, 0x00	; 0
    1cce:	20 e0       	ldi	r18, 0x00	; 0
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	45 e5       	ldi	r20, 0x55	; 85
    1cd4:	50 e0       	ldi	r21, 0x00	; 0
    1cd6:	69 eb       	ldi	r22, 0xB9	; 185
    1cd8:	70 e0       	ldi	r23, 0x00	; 0
    1cda:	88 e2       	ldi	r24, 0x28	; 40
    1cdc:	91 e1       	ldi	r25, 0x11	; 17
    1cde:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <xTaskCreate>
    1ce2:	89 83       	std	Y+1, r24	; 0x01
    1ce4:	89 81       	ldd	r24, Y+1	; 0x01
    1ce6:	81 30       	cpi	r24, 0x01	; 1
    1ce8:	81 f4       	brne	.+32     	; 0x1d0a <vTaskStartScheduler+0x5a>
    1cea:	f8 94       	cli
    1cec:	8f ef       	ldi	r24, 0xFF	; 255
    1cee:	9f ef       	ldi	r25, 0xFF	; 255
    1cf0:	90 93 1b 07 	sts	0x071B, r25	; 0x80071b <xNextTaskUnblockTime+0x1>
    1cf4:	80 93 1a 07 	sts	0x071A, r24	; 0x80071a <xNextTaskUnblockTime>
    1cf8:	81 e0       	ldi	r24, 0x01	; 1
    1cfa:	80 93 15 07 	sts	0x0715, r24	; 0x800715 <xSchedulerRunning>
    1cfe:	10 92 13 07 	sts	0x0713, r1	; 0x800713 <xTickCount+0x1>
    1d02:	10 92 12 07 	sts	0x0712, r1	; 0x800712 <xTickCount>
    1d06:	0e 94 0e 0a 	call	0x141c	; 0x141c <xPortStartScheduler>
    1d0a:	00 00       	nop
    1d0c:	0f 90       	pop	r0
    1d0e:	df 91       	pop	r29
    1d10:	cf 91       	pop	r28
    1d12:	0f 91       	pop	r16
    1d14:	ff 90       	pop	r15
    1d16:	ef 90       	pop	r14
    1d18:	08 95       	ret

00001d1a <vTaskSuspendAll>:
    1d1a:	cf 93       	push	r28
    1d1c:	df 93       	push	r29
    1d1e:	cd b7       	in	r28, 0x3d	; 61
    1d20:	de b7       	in	r29, 0x3e	; 62
    1d22:	80 91 1e 07 	lds	r24, 0x071E	; 0x80071e <uxSchedulerSuspended>
    1d26:	8f 5f       	subi	r24, 0xFF	; 255
    1d28:	80 93 1e 07 	sts	0x071E, r24	; 0x80071e <uxSchedulerSuspended>
    1d2c:	00 00       	nop
    1d2e:	df 91       	pop	r29
    1d30:	cf 91       	pop	r28
    1d32:	08 95       	ret

00001d34 <xTaskResumeAll>:
    1d34:	cf 93       	push	r28
    1d36:	df 93       	push	r29
    1d38:	00 d0       	rcall	.+0      	; 0x1d3a <xTaskResumeAll+0x6>
    1d3a:	00 d0       	rcall	.+0      	; 0x1d3c <xTaskResumeAll+0x8>
    1d3c:	cd b7       	in	r28, 0x3d	; 61
    1d3e:	de b7       	in	r29, 0x3e	; 62
    1d40:	1a 82       	std	Y+2, r1	; 0x02
    1d42:	19 82       	std	Y+1, r1	; 0x01
    1d44:	1b 82       	std	Y+3, r1	; 0x03
    1d46:	0f b6       	in	r0, 0x3f	; 63
    1d48:	f8 94       	cli
    1d4a:	0f 92       	push	r0
    1d4c:	80 91 1e 07 	lds	r24, 0x071E	; 0x80071e <uxSchedulerSuspended>
    1d50:	81 50       	subi	r24, 0x01	; 1
    1d52:	80 93 1e 07 	sts	0x071E, r24	; 0x80071e <uxSchedulerSuspended>
    1d56:	80 91 1e 07 	lds	r24, 0x071E	; 0x80071e <uxSchedulerSuspended>
    1d5a:	88 23       	and	r24, r24
    1d5c:	09 f0       	breq	.+2      	; 0x1d60 <xTaskResumeAll+0x2c>
    1d5e:	77 c0       	rjmp	.+238    	; 0x1e4e <xTaskResumeAll+0x11a>
    1d60:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <uxCurrentNumberOfTasks>
    1d64:	88 23       	and	r24, r24
    1d66:	09 f4       	brne	.+2      	; 0x1d6a <xTaskResumeAll+0x36>
    1d68:	72 c0       	rjmp	.+228    	; 0x1e4e <xTaskResumeAll+0x11a>
    1d6a:	49 c0       	rjmp	.+146    	; 0x1dfe <xTaskResumeAll+0xca>
    1d6c:	80 91 fa 06 	lds	r24, 0x06FA	; 0x8006fa <xPendingReadyList+0x5>
    1d70:	90 91 fb 06 	lds	r25, 0x06FB	; 0x8006fb <xPendingReadyList+0x6>
    1d74:	fc 01       	movw	r30, r24
    1d76:	86 81       	ldd	r24, Z+6	; 0x06
    1d78:	97 81       	ldd	r25, Z+7	; 0x07
    1d7a:	9a 83       	std	Y+2, r25	; 0x02
    1d7c:	89 83       	std	Y+1, r24	; 0x01
    1d7e:	89 81       	ldd	r24, Y+1	; 0x01
    1d80:	9a 81       	ldd	r25, Y+2	; 0x02
    1d82:	0c 96       	adiw	r24, 0x0c	; 12
    1d84:	0e 94 0e 08 	call	0x101c	; 0x101c <uxListRemove>
    1d88:	89 81       	ldd	r24, Y+1	; 0x01
    1d8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d8c:	02 96       	adiw	r24, 0x02	; 2
    1d8e:	0e 94 0e 08 	call	0x101c	; 0x101c <uxListRemove>
    1d92:	89 81       	ldd	r24, Y+1	; 0x01
    1d94:	9a 81       	ldd	r25, Y+2	; 0x02
    1d96:	fc 01       	movw	r30, r24
    1d98:	96 89       	ldd	r25, Z+22	; 0x16
    1d9a:	80 91 14 07 	lds	r24, 0x0714	; 0x800714 <uxTopReadyPriority>
    1d9e:	89 17       	cp	r24, r25
    1da0:	30 f4       	brcc	.+12     	; 0x1dae <xTaskResumeAll+0x7a>
    1da2:	89 81       	ldd	r24, Y+1	; 0x01
    1da4:	9a 81       	ldd	r25, Y+2	; 0x02
    1da6:	fc 01       	movw	r30, r24
    1da8:	86 89       	ldd	r24, Z+22	; 0x16
    1daa:	80 93 14 07 	sts	0x0714, r24	; 0x800714 <uxTopReadyPriority>
    1dae:	89 81       	ldd	r24, Y+1	; 0x01
    1db0:	9a 81       	ldd	r25, Y+2	; 0x02
    1db2:	ac 01       	movw	r20, r24
    1db4:	4e 5f       	subi	r20, 0xFE	; 254
    1db6:	5f 4f       	sbci	r21, 0xFF	; 255
    1db8:	89 81       	ldd	r24, Y+1	; 0x01
    1dba:	9a 81       	ldd	r25, Y+2	; 0x02
    1dbc:	fc 01       	movw	r30, r24
    1dbe:	86 89       	ldd	r24, Z+22	; 0x16
    1dc0:	28 2f       	mov	r18, r24
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	c9 01       	movw	r24, r18
    1dc6:	88 0f       	add	r24, r24
    1dc8:	99 1f       	adc	r25, r25
    1dca:	88 0f       	add	r24, r24
    1dcc:	99 1f       	adc	r25, r25
    1dce:	88 0f       	add	r24, r24
    1dd0:	99 1f       	adc	r25, r25
    1dd2:	82 0f       	add	r24, r18
    1dd4:	93 1f       	adc	r25, r19
    1dd6:	87 55       	subi	r24, 0x57	; 87
    1dd8:	99 4f       	sbci	r25, 0xF9	; 249
    1dda:	ba 01       	movw	r22, r20
    1ddc:	0e 94 47 07 	call	0xe8e	; 0xe8e <vListInsertEnd>
    1de0:	89 81       	ldd	r24, Y+1	; 0x01
    1de2:	9a 81       	ldd	r25, Y+2	; 0x02
    1de4:	fc 01       	movw	r30, r24
    1de6:	26 89       	ldd	r18, Z+22	; 0x16
    1de8:	80 91 a7 06 	lds	r24, 0x06A7	; 0x8006a7 <pxCurrentTCB>
    1dec:	90 91 a8 06 	lds	r25, 0x06A8	; 0x8006a8 <pxCurrentTCB+0x1>
    1df0:	fc 01       	movw	r30, r24
    1df2:	86 89       	ldd	r24, Z+22	; 0x16
    1df4:	28 17       	cp	r18, r24
    1df6:	18 f0       	brcs	.+6      	; 0x1dfe <xTaskResumeAll+0xca>
    1df8:	81 e0       	ldi	r24, 0x01	; 1
    1dfa:	80 93 17 07 	sts	0x0717, r24	; 0x800717 <xYieldPending>
    1dfe:	80 91 f5 06 	lds	r24, 0x06F5	; 0x8006f5 <xPendingReadyList>
    1e02:	88 23       	and	r24, r24
    1e04:	09 f0       	breq	.+2      	; 0x1e08 <xTaskResumeAll+0xd4>
    1e06:	b2 cf       	rjmp	.-156    	; 0x1d6c <xTaskResumeAll+0x38>
    1e08:	89 81       	ldd	r24, Y+1	; 0x01
    1e0a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e0c:	89 2b       	or	r24, r25
    1e0e:	11 f0       	breq	.+4      	; 0x1e14 <xTaskResumeAll+0xe0>
    1e10:	0e 94 bd 11 	call	0x237a	; 0x237a <prvResetNextTaskUnblockTime>
    1e14:	80 91 16 07 	lds	r24, 0x0716	; 0x800716 <uxPendedTicks>
    1e18:	8c 83       	std	Y+4, r24	; 0x04
    1e1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e1c:	88 23       	and	r24, r24
    1e1e:	79 f0       	breq	.+30     	; 0x1e3e <xTaskResumeAll+0x10a>
    1e20:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <xTaskIncrementTick>
    1e24:	88 23       	and	r24, r24
    1e26:	19 f0       	breq	.+6      	; 0x1e2e <xTaskResumeAll+0xfa>
    1e28:	81 e0       	ldi	r24, 0x01	; 1
    1e2a:	80 93 17 07 	sts	0x0717, r24	; 0x800717 <xYieldPending>
    1e2e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e30:	81 50       	subi	r24, 0x01	; 1
    1e32:	8c 83       	std	Y+4, r24	; 0x04
    1e34:	8c 81       	ldd	r24, Y+4	; 0x04
    1e36:	88 23       	and	r24, r24
    1e38:	99 f7       	brne	.-26     	; 0x1e20 <xTaskResumeAll+0xec>
    1e3a:	10 92 16 07 	sts	0x0716, r1	; 0x800716 <uxPendedTicks>
    1e3e:	80 91 17 07 	lds	r24, 0x0717	; 0x800717 <xYieldPending>
    1e42:	88 23       	and	r24, r24
    1e44:	21 f0       	breq	.+8      	; 0x1e4e <xTaskResumeAll+0x11a>
    1e46:	81 e0       	ldi	r24, 0x01	; 1
    1e48:	8b 83       	std	Y+3, r24	; 0x03
    1e4a:	0e 94 43 0a 	call	0x1486	; 0x1486 <vPortYield>
    1e4e:	0f 90       	pop	r0
    1e50:	0f be       	out	0x3f, r0	; 63
    1e52:	8b 81       	ldd	r24, Y+3	; 0x03
    1e54:	0f 90       	pop	r0
    1e56:	0f 90       	pop	r0
    1e58:	0f 90       	pop	r0
    1e5a:	0f 90       	pop	r0
    1e5c:	df 91       	pop	r29
    1e5e:	cf 91       	pop	r28
    1e60:	08 95       	ret

00001e62 <xTaskIncrementTick>:
    1e62:	cf 93       	push	r28
    1e64:	df 93       	push	r29
    1e66:	cd b7       	in	r28, 0x3d	; 61
    1e68:	de b7       	in	r29, 0x3e	; 62
    1e6a:	29 97       	sbiw	r28, 0x09	; 9
    1e6c:	0f b6       	in	r0, 0x3f	; 63
    1e6e:	f8 94       	cli
    1e70:	de bf       	out	0x3e, r29	; 62
    1e72:	0f be       	out	0x3f, r0	; 63
    1e74:	cd bf       	out	0x3d, r28	; 61
    1e76:	19 82       	std	Y+1, r1	; 0x01
    1e78:	80 91 1e 07 	lds	r24, 0x071E	; 0x80071e <uxSchedulerSuspended>
    1e7c:	88 23       	and	r24, r24
    1e7e:	09 f0       	breq	.+2      	; 0x1e82 <xTaskIncrementTick+0x20>
    1e80:	c8 c0       	rjmp	.+400    	; 0x2012 <xTaskIncrementTick+0x1b0>
    1e82:	80 91 12 07 	lds	r24, 0x0712	; 0x800712 <xTickCount>
    1e86:	90 91 13 07 	lds	r25, 0x0713	; 0x800713 <xTickCount+0x1>
    1e8a:	01 96       	adiw	r24, 0x01	; 1
    1e8c:	9b 83       	std	Y+3, r25	; 0x03
    1e8e:	8a 83       	std	Y+2, r24	; 0x02
    1e90:	8a 81       	ldd	r24, Y+2	; 0x02
    1e92:	9b 81       	ldd	r25, Y+3	; 0x03
    1e94:	90 93 13 07 	sts	0x0713, r25	; 0x800713 <xTickCount+0x1>
    1e98:	80 93 12 07 	sts	0x0712, r24	; 0x800712 <xTickCount>
    1e9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9e:	9b 81       	ldd	r25, Y+3	; 0x03
    1ea0:	89 2b       	or	r24, r25
    1ea2:	d9 f4       	brne	.+54     	; 0x1eda <xTaskIncrementTick+0x78>
    1ea4:	80 91 f1 06 	lds	r24, 0x06F1	; 0x8006f1 <pxDelayedTaskList>
    1ea8:	90 91 f2 06 	lds	r25, 0x06F2	; 0x8006f2 <pxDelayedTaskList+0x1>
    1eac:	9d 83       	std	Y+5, r25	; 0x05
    1eae:	8c 83       	std	Y+4, r24	; 0x04
    1eb0:	80 91 f3 06 	lds	r24, 0x06F3	; 0x8006f3 <pxOverflowDelayedTaskList>
    1eb4:	90 91 f4 06 	lds	r25, 0x06F4	; 0x8006f4 <pxOverflowDelayedTaskList+0x1>
    1eb8:	90 93 f2 06 	sts	0x06F2, r25	; 0x8006f2 <pxDelayedTaskList+0x1>
    1ebc:	80 93 f1 06 	sts	0x06F1, r24	; 0x8006f1 <pxDelayedTaskList>
    1ec0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ec2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ec4:	90 93 f4 06 	sts	0x06F4, r25	; 0x8006f4 <pxOverflowDelayedTaskList+0x1>
    1ec8:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <pxOverflowDelayedTaskList>
    1ecc:	80 91 18 07 	lds	r24, 0x0718	; 0x800718 <xNumOfOverflows>
    1ed0:	8f 5f       	subi	r24, 0xFF	; 255
    1ed2:	80 93 18 07 	sts	0x0718, r24	; 0x800718 <xNumOfOverflows>
    1ed6:	0e 94 bd 11 	call	0x237a	; 0x237a <prvResetNextTaskUnblockTime>
    1eda:	80 91 1a 07 	lds	r24, 0x071A	; 0x80071a <xNextTaskUnblockTime>
    1ede:	90 91 1b 07 	lds	r25, 0x071B	; 0x80071b <xNextTaskUnblockTime+0x1>
    1ee2:	2a 81       	ldd	r18, Y+2	; 0x02
    1ee4:	3b 81       	ldd	r19, Y+3	; 0x03
    1ee6:	28 17       	cp	r18, r24
    1ee8:	39 07       	cpc	r19, r25
    1eea:	08 f4       	brcc	.+2      	; 0x1eee <xTaskIncrementTick+0x8c>
    1eec:	78 c0       	rjmp	.+240    	; 0x1fde <xTaskIncrementTick+0x17c>
    1eee:	80 91 f1 06 	lds	r24, 0x06F1	; 0x8006f1 <pxDelayedTaskList>
    1ef2:	90 91 f2 06 	lds	r25, 0x06F2	; 0x8006f2 <pxDelayedTaskList+0x1>
    1ef6:	fc 01       	movw	r30, r24
    1ef8:	80 81       	ld	r24, Z
    1efa:	88 23       	and	r24, r24
    1efc:	39 f4       	brne	.+14     	; 0x1f0c <xTaskIncrementTick+0xaa>
    1efe:	8f ef       	ldi	r24, 0xFF	; 255
    1f00:	9f ef       	ldi	r25, 0xFF	; 255
    1f02:	90 93 1b 07 	sts	0x071B, r25	; 0x80071b <xNextTaskUnblockTime+0x1>
    1f06:	80 93 1a 07 	sts	0x071A, r24	; 0x80071a <xNextTaskUnblockTime>
    1f0a:	69 c0       	rjmp	.+210    	; 0x1fde <xTaskIncrementTick+0x17c>
    1f0c:	80 91 f1 06 	lds	r24, 0x06F1	; 0x8006f1 <pxDelayedTaskList>
    1f10:	90 91 f2 06 	lds	r25, 0x06F2	; 0x8006f2 <pxDelayedTaskList+0x1>
    1f14:	fc 01       	movw	r30, r24
    1f16:	85 81       	ldd	r24, Z+5	; 0x05
    1f18:	96 81       	ldd	r25, Z+6	; 0x06
    1f1a:	fc 01       	movw	r30, r24
    1f1c:	86 81       	ldd	r24, Z+6	; 0x06
    1f1e:	97 81       	ldd	r25, Z+7	; 0x07
    1f20:	9f 83       	std	Y+7, r25	; 0x07
    1f22:	8e 83       	std	Y+6, r24	; 0x06
    1f24:	8e 81       	ldd	r24, Y+6	; 0x06
    1f26:	9f 81       	ldd	r25, Y+7	; 0x07
    1f28:	fc 01       	movw	r30, r24
    1f2a:	82 81       	ldd	r24, Z+2	; 0x02
    1f2c:	93 81       	ldd	r25, Z+3	; 0x03
    1f2e:	99 87       	std	Y+9, r25	; 0x09
    1f30:	88 87       	std	Y+8, r24	; 0x08
    1f32:	2a 81       	ldd	r18, Y+2	; 0x02
    1f34:	3b 81       	ldd	r19, Y+3	; 0x03
    1f36:	88 85       	ldd	r24, Y+8	; 0x08
    1f38:	99 85       	ldd	r25, Y+9	; 0x09
    1f3a:	28 17       	cp	r18, r24
    1f3c:	39 07       	cpc	r19, r25
    1f3e:	38 f4       	brcc	.+14     	; 0x1f4e <xTaskIncrementTick+0xec>
    1f40:	88 85       	ldd	r24, Y+8	; 0x08
    1f42:	99 85       	ldd	r25, Y+9	; 0x09
    1f44:	90 93 1b 07 	sts	0x071B, r25	; 0x80071b <xNextTaskUnblockTime+0x1>
    1f48:	80 93 1a 07 	sts	0x071A, r24	; 0x80071a <xNextTaskUnblockTime>
    1f4c:	48 c0       	rjmp	.+144    	; 0x1fde <xTaskIncrementTick+0x17c>
    1f4e:	8e 81       	ldd	r24, Y+6	; 0x06
    1f50:	9f 81       	ldd	r25, Y+7	; 0x07
    1f52:	02 96       	adiw	r24, 0x02	; 2
    1f54:	0e 94 0e 08 	call	0x101c	; 0x101c <uxListRemove>
    1f58:	8e 81       	ldd	r24, Y+6	; 0x06
    1f5a:	9f 81       	ldd	r25, Y+7	; 0x07
    1f5c:	fc 01       	movw	r30, r24
    1f5e:	84 89       	ldd	r24, Z+20	; 0x14
    1f60:	95 89       	ldd	r25, Z+21	; 0x15
    1f62:	89 2b       	or	r24, r25
    1f64:	29 f0       	breq	.+10     	; 0x1f70 <xTaskIncrementTick+0x10e>
    1f66:	8e 81       	ldd	r24, Y+6	; 0x06
    1f68:	9f 81       	ldd	r25, Y+7	; 0x07
    1f6a:	0c 96       	adiw	r24, 0x0c	; 12
    1f6c:	0e 94 0e 08 	call	0x101c	; 0x101c <uxListRemove>
    1f70:	8e 81       	ldd	r24, Y+6	; 0x06
    1f72:	9f 81       	ldd	r25, Y+7	; 0x07
    1f74:	fc 01       	movw	r30, r24
    1f76:	96 89       	ldd	r25, Z+22	; 0x16
    1f78:	80 91 14 07 	lds	r24, 0x0714	; 0x800714 <uxTopReadyPriority>
    1f7c:	89 17       	cp	r24, r25
    1f7e:	30 f4       	brcc	.+12     	; 0x1f8c <xTaskIncrementTick+0x12a>
    1f80:	8e 81       	ldd	r24, Y+6	; 0x06
    1f82:	9f 81       	ldd	r25, Y+7	; 0x07
    1f84:	fc 01       	movw	r30, r24
    1f86:	86 89       	ldd	r24, Z+22	; 0x16
    1f88:	80 93 14 07 	sts	0x0714, r24	; 0x800714 <uxTopReadyPriority>
    1f8c:	8e 81       	ldd	r24, Y+6	; 0x06
    1f8e:	9f 81       	ldd	r25, Y+7	; 0x07
    1f90:	ac 01       	movw	r20, r24
    1f92:	4e 5f       	subi	r20, 0xFE	; 254
    1f94:	5f 4f       	sbci	r21, 0xFF	; 255
    1f96:	8e 81       	ldd	r24, Y+6	; 0x06
    1f98:	9f 81       	ldd	r25, Y+7	; 0x07
    1f9a:	fc 01       	movw	r30, r24
    1f9c:	86 89       	ldd	r24, Z+22	; 0x16
    1f9e:	28 2f       	mov	r18, r24
    1fa0:	30 e0       	ldi	r19, 0x00	; 0
    1fa2:	c9 01       	movw	r24, r18
    1fa4:	88 0f       	add	r24, r24
    1fa6:	99 1f       	adc	r25, r25
    1fa8:	88 0f       	add	r24, r24
    1faa:	99 1f       	adc	r25, r25
    1fac:	88 0f       	add	r24, r24
    1fae:	99 1f       	adc	r25, r25
    1fb0:	82 0f       	add	r24, r18
    1fb2:	93 1f       	adc	r25, r19
    1fb4:	87 55       	subi	r24, 0x57	; 87
    1fb6:	99 4f       	sbci	r25, 0xF9	; 249
    1fb8:	ba 01       	movw	r22, r20
    1fba:	0e 94 47 07 	call	0xe8e	; 0xe8e <vListInsertEnd>
    1fbe:	8e 81       	ldd	r24, Y+6	; 0x06
    1fc0:	9f 81       	ldd	r25, Y+7	; 0x07
    1fc2:	fc 01       	movw	r30, r24
    1fc4:	26 89       	ldd	r18, Z+22	; 0x16
    1fc6:	80 91 a7 06 	lds	r24, 0x06A7	; 0x8006a7 <pxCurrentTCB>
    1fca:	90 91 a8 06 	lds	r25, 0x06A8	; 0x8006a8 <pxCurrentTCB+0x1>
    1fce:	fc 01       	movw	r30, r24
    1fd0:	86 89       	ldd	r24, Z+22	; 0x16
    1fd2:	28 17       	cp	r18, r24
    1fd4:	08 f4       	brcc	.+2      	; 0x1fd8 <xTaskIncrementTick+0x176>
    1fd6:	8b cf       	rjmp	.-234    	; 0x1eee <xTaskIncrementTick+0x8c>
    1fd8:	81 e0       	ldi	r24, 0x01	; 1
    1fda:	89 83       	std	Y+1, r24	; 0x01
    1fdc:	88 cf       	rjmp	.-240    	; 0x1eee <xTaskIncrementTick+0x8c>
    1fde:	80 91 a7 06 	lds	r24, 0x06A7	; 0x8006a7 <pxCurrentTCB>
    1fe2:	90 91 a8 06 	lds	r25, 0x06A8	; 0x8006a8 <pxCurrentTCB+0x1>
    1fe6:	fc 01       	movw	r30, r24
    1fe8:	86 89       	ldd	r24, Z+22	; 0x16
    1fea:	28 2f       	mov	r18, r24
    1fec:	30 e0       	ldi	r19, 0x00	; 0
    1fee:	c9 01       	movw	r24, r18
    1ff0:	88 0f       	add	r24, r24
    1ff2:	99 1f       	adc	r25, r25
    1ff4:	88 0f       	add	r24, r24
    1ff6:	99 1f       	adc	r25, r25
    1ff8:	88 0f       	add	r24, r24
    1ffa:	99 1f       	adc	r25, r25
    1ffc:	82 0f       	add	r24, r18
    1ffe:	93 1f       	adc	r25, r19
    2000:	87 55       	subi	r24, 0x57	; 87
    2002:	99 4f       	sbci	r25, 0xF9	; 249
    2004:	fc 01       	movw	r30, r24
    2006:	80 81       	ld	r24, Z
    2008:	82 30       	cpi	r24, 0x02	; 2
    200a:	40 f0       	brcs	.+16     	; 0x201c <xTaskIncrementTick+0x1ba>
    200c:	81 e0       	ldi	r24, 0x01	; 1
    200e:	89 83       	std	Y+1, r24	; 0x01
    2010:	05 c0       	rjmp	.+10     	; 0x201c <xTaskIncrementTick+0x1ba>
    2012:	80 91 16 07 	lds	r24, 0x0716	; 0x800716 <uxPendedTicks>
    2016:	8f 5f       	subi	r24, 0xFF	; 255
    2018:	80 93 16 07 	sts	0x0716, r24	; 0x800716 <uxPendedTicks>
    201c:	80 91 17 07 	lds	r24, 0x0717	; 0x800717 <xYieldPending>
    2020:	88 23       	and	r24, r24
    2022:	11 f0       	breq	.+4      	; 0x2028 <xTaskIncrementTick+0x1c6>
    2024:	81 e0       	ldi	r24, 0x01	; 1
    2026:	89 83       	std	Y+1, r24	; 0x01
    2028:	89 81       	ldd	r24, Y+1	; 0x01
    202a:	29 96       	adiw	r28, 0x09	; 9
    202c:	0f b6       	in	r0, 0x3f	; 63
    202e:	f8 94       	cli
    2030:	de bf       	out	0x3e, r29	; 62
    2032:	0f be       	out	0x3f, r0	; 63
    2034:	cd bf       	out	0x3d, r28	; 61
    2036:	df 91       	pop	r29
    2038:	cf 91       	pop	r28
    203a:	08 95       	ret

0000203c <vTaskSwitchContext>:
    203c:	cf 93       	push	r28
    203e:	df 93       	push	r29
    2040:	00 d0       	rcall	.+0      	; 0x2042 <vTaskSwitchContext+0x6>
    2042:	1f 92       	push	r1
    2044:	cd b7       	in	r28, 0x3d	; 61
    2046:	de b7       	in	r29, 0x3e	; 62
    2048:	80 91 1e 07 	lds	r24, 0x071E	; 0x80071e <uxSchedulerSuspended>
    204c:	88 23       	and	r24, r24
    204e:	21 f0       	breq	.+8      	; 0x2058 <vTaskSwitchContext+0x1c>
    2050:	81 e0       	ldi	r24, 0x01	; 1
    2052:	80 93 17 07 	sts	0x0717, r24	; 0x800717 <xYieldPending>
    2056:	5f c0       	rjmp	.+190    	; 0x2116 <vTaskSwitchContext+0xda>
    2058:	10 92 17 07 	sts	0x0717, r1	; 0x800717 <xYieldPending>
    205c:	80 91 14 07 	lds	r24, 0x0714	; 0x800714 <uxTopReadyPriority>
    2060:	89 83       	std	Y+1, r24	; 0x01
    2062:	03 c0       	rjmp	.+6      	; 0x206a <vTaskSwitchContext+0x2e>
    2064:	89 81       	ldd	r24, Y+1	; 0x01
    2066:	81 50       	subi	r24, 0x01	; 1
    2068:	89 83       	std	Y+1, r24	; 0x01
    206a:	89 81       	ldd	r24, Y+1	; 0x01
    206c:	28 2f       	mov	r18, r24
    206e:	30 e0       	ldi	r19, 0x00	; 0
    2070:	c9 01       	movw	r24, r18
    2072:	88 0f       	add	r24, r24
    2074:	99 1f       	adc	r25, r25
    2076:	88 0f       	add	r24, r24
    2078:	99 1f       	adc	r25, r25
    207a:	88 0f       	add	r24, r24
    207c:	99 1f       	adc	r25, r25
    207e:	82 0f       	add	r24, r18
    2080:	93 1f       	adc	r25, r19
    2082:	87 55       	subi	r24, 0x57	; 87
    2084:	99 4f       	sbci	r25, 0xF9	; 249
    2086:	fc 01       	movw	r30, r24
    2088:	80 81       	ld	r24, Z
    208a:	88 23       	and	r24, r24
    208c:	59 f3       	breq	.-42     	; 0x2064 <vTaskSwitchContext+0x28>
    208e:	89 81       	ldd	r24, Y+1	; 0x01
    2090:	28 2f       	mov	r18, r24
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	c9 01       	movw	r24, r18
    2096:	88 0f       	add	r24, r24
    2098:	99 1f       	adc	r25, r25
    209a:	88 0f       	add	r24, r24
    209c:	99 1f       	adc	r25, r25
    209e:	88 0f       	add	r24, r24
    20a0:	99 1f       	adc	r25, r25
    20a2:	82 0f       	add	r24, r18
    20a4:	93 1f       	adc	r25, r19
    20a6:	87 55       	subi	r24, 0x57	; 87
    20a8:	99 4f       	sbci	r25, 0xF9	; 249
    20aa:	9b 83       	std	Y+3, r25	; 0x03
    20ac:	8a 83       	std	Y+2, r24	; 0x02
    20ae:	8a 81       	ldd	r24, Y+2	; 0x02
    20b0:	9b 81       	ldd	r25, Y+3	; 0x03
    20b2:	fc 01       	movw	r30, r24
    20b4:	81 81       	ldd	r24, Z+1	; 0x01
    20b6:	92 81       	ldd	r25, Z+2	; 0x02
    20b8:	fc 01       	movw	r30, r24
    20ba:	22 81       	ldd	r18, Z+2	; 0x02
    20bc:	33 81       	ldd	r19, Z+3	; 0x03
    20be:	8a 81       	ldd	r24, Y+2	; 0x02
    20c0:	9b 81       	ldd	r25, Y+3	; 0x03
    20c2:	fc 01       	movw	r30, r24
    20c4:	32 83       	std	Z+2, r19	; 0x02
    20c6:	21 83       	std	Z+1, r18	; 0x01
    20c8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ca:	9b 81       	ldd	r25, Y+3	; 0x03
    20cc:	fc 01       	movw	r30, r24
    20ce:	21 81       	ldd	r18, Z+1	; 0x01
    20d0:	32 81       	ldd	r19, Z+2	; 0x02
    20d2:	8a 81       	ldd	r24, Y+2	; 0x02
    20d4:	9b 81       	ldd	r25, Y+3	; 0x03
    20d6:	03 96       	adiw	r24, 0x03	; 3
    20d8:	28 17       	cp	r18, r24
    20da:	39 07       	cpc	r19, r25
    20dc:	69 f4       	brne	.+26     	; 0x20f8 <vTaskSwitchContext+0xbc>
    20de:	8a 81       	ldd	r24, Y+2	; 0x02
    20e0:	9b 81       	ldd	r25, Y+3	; 0x03
    20e2:	fc 01       	movw	r30, r24
    20e4:	81 81       	ldd	r24, Z+1	; 0x01
    20e6:	92 81       	ldd	r25, Z+2	; 0x02
    20e8:	fc 01       	movw	r30, r24
    20ea:	22 81       	ldd	r18, Z+2	; 0x02
    20ec:	33 81       	ldd	r19, Z+3	; 0x03
    20ee:	8a 81       	ldd	r24, Y+2	; 0x02
    20f0:	9b 81       	ldd	r25, Y+3	; 0x03
    20f2:	fc 01       	movw	r30, r24
    20f4:	32 83       	std	Z+2, r19	; 0x02
    20f6:	21 83       	std	Z+1, r18	; 0x01
    20f8:	8a 81       	ldd	r24, Y+2	; 0x02
    20fa:	9b 81       	ldd	r25, Y+3	; 0x03
    20fc:	fc 01       	movw	r30, r24
    20fe:	81 81       	ldd	r24, Z+1	; 0x01
    2100:	92 81       	ldd	r25, Z+2	; 0x02
    2102:	fc 01       	movw	r30, r24
    2104:	86 81       	ldd	r24, Z+6	; 0x06
    2106:	97 81       	ldd	r25, Z+7	; 0x07
    2108:	90 93 a8 06 	sts	0x06A8, r25	; 0x8006a8 <pxCurrentTCB+0x1>
    210c:	80 93 a7 06 	sts	0x06A7, r24	; 0x8006a7 <pxCurrentTCB>
    2110:	89 81       	ldd	r24, Y+1	; 0x01
    2112:	80 93 14 07 	sts	0x0714, r24	; 0x800714 <uxTopReadyPriority>
    2116:	00 00       	nop
    2118:	0f 90       	pop	r0
    211a:	0f 90       	pop	r0
    211c:	0f 90       	pop	r0
    211e:	df 91       	pop	r29
    2120:	cf 91       	pop	r28
    2122:	08 95       	ret

00002124 <vTaskPlaceOnUnorderedEventList>:
    2124:	cf 93       	push	r28
    2126:	df 93       	push	r29
    2128:	00 d0       	rcall	.+0      	; 0x212a <vTaskPlaceOnUnorderedEventList+0x6>
    212a:	00 d0       	rcall	.+0      	; 0x212c <vTaskPlaceOnUnorderedEventList+0x8>
    212c:	00 d0       	rcall	.+0      	; 0x212e <vTaskPlaceOnUnorderedEventList+0xa>
    212e:	cd b7       	in	r28, 0x3d	; 61
    2130:	de b7       	in	r29, 0x3e	; 62
    2132:	9a 83       	std	Y+2, r25	; 0x02
    2134:	89 83       	std	Y+1, r24	; 0x01
    2136:	7c 83       	std	Y+4, r23	; 0x04
    2138:	6b 83       	std	Y+3, r22	; 0x03
    213a:	5e 83       	std	Y+6, r21	; 0x06
    213c:	4d 83       	std	Y+5, r20	; 0x05
    213e:	80 91 a7 06 	lds	r24, 0x06A7	; 0x8006a7 <pxCurrentTCB>
    2142:	90 91 a8 06 	lds	r25, 0x06A8	; 0x8006a8 <pxCurrentTCB+0x1>
    2146:	2b 81       	ldd	r18, Y+3	; 0x03
    2148:	3c 81       	ldd	r19, Y+4	; 0x04
    214a:	30 68       	ori	r19, 0x80	; 128
    214c:	fc 01       	movw	r30, r24
    214e:	35 87       	std	Z+13, r19	; 0x0d
    2150:	24 87       	std	Z+12, r18	; 0x0c
    2152:	80 91 a7 06 	lds	r24, 0x06A7	; 0x8006a7 <pxCurrentTCB>
    2156:	90 91 a8 06 	lds	r25, 0x06A8	; 0x8006a8 <pxCurrentTCB+0x1>
    215a:	9c 01       	movw	r18, r24
    215c:	24 5f       	subi	r18, 0xF4	; 244
    215e:	3f 4f       	sbci	r19, 0xFF	; 255
    2160:	89 81       	ldd	r24, Y+1	; 0x01
    2162:	9a 81       	ldd	r25, Y+2	; 0x02
    2164:	b9 01       	movw	r22, r18
    2166:	0e 94 47 07 	call	0xe8e	; 0xe8e <vListInsertEnd>
    216a:	8d 81       	ldd	r24, Y+5	; 0x05
    216c:	9e 81       	ldd	r25, Y+6	; 0x06
    216e:	61 e0       	ldi	r22, 0x01	; 1
    2170:	0e 94 16 12 	call	0x242c	; 0x242c <prvAddCurrentTaskToDelayedList>
    2174:	00 00       	nop
    2176:	26 96       	adiw	r28, 0x06	; 6
    2178:	0f b6       	in	r0, 0x3f	; 63
    217a:	f8 94       	cli
    217c:	de bf       	out	0x3e, r29	; 62
    217e:	0f be       	out	0x3f, r0	; 63
    2180:	cd bf       	out	0x3d, r28	; 61
    2182:	df 91       	pop	r29
    2184:	cf 91       	pop	r28
    2186:	08 95       	ret

00002188 <vTaskRemoveFromUnorderedEventList>:
    2188:	cf 93       	push	r28
    218a:	df 93       	push	r29
    218c:	00 d0       	rcall	.+0      	; 0x218e <vTaskRemoveFromUnorderedEventList+0x6>
    218e:	00 d0       	rcall	.+0      	; 0x2190 <vTaskRemoveFromUnorderedEventList+0x8>
    2190:	00 d0       	rcall	.+0      	; 0x2192 <vTaskRemoveFromUnorderedEventList+0xa>
    2192:	cd b7       	in	r28, 0x3d	; 61
    2194:	de b7       	in	r29, 0x3e	; 62
    2196:	9c 83       	std	Y+4, r25	; 0x04
    2198:	8b 83       	std	Y+3, r24	; 0x03
    219a:	7e 83       	std	Y+6, r23	; 0x06
    219c:	6d 83       	std	Y+5, r22	; 0x05
    219e:	8d 81       	ldd	r24, Y+5	; 0x05
    21a0:	9e 81       	ldd	r25, Y+6	; 0x06
    21a2:	9c 01       	movw	r18, r24
    21a4:	30 68       	ori	r19, 0x80	; 128
    21a6:	8b 81       	ldd	r24, Y+3	; 0x03
    21a8:	9c 81       	ldd	r25, Y+4	; 0x04
    21aa:	fc 01       	movw	r30, r24
    21ac:	31 83       	std	Z+1, r19	; 0x01
    21ae:	20 83       	st	Z, r18
    21b0:	8b 81       	ldd	r24, Y+3	; 0x03
    21b2:	9c 81       	ldd	r25, Y+4	; 0x04
    21b4:	fc 01       	movw	r30, r24
    21b6:	86 81       	ldd	r24, Z+6	; 0x06
    21b8:	97 81       	ldd	r25, Z+7	; 0x07
    21ba:	9a 83       	std	Y+2, r25	; 0x02
    21bc:	89 83       	std	Y+1, r24	; 0x01
    21be:	8b 81       	ldd	r24, Y+3	; 0x03
    21c0:	9c 81       	ldd	r25, Y+4	; 0x04
    21c2:	0e 94 0e 08 	call	0x101c	; 0x101c <uxListRemove>
    21c6:	89 81       	ldd	r24, Y+1	; 0x01
    21c8:	9a 81       	ldd	r25, Y+2	; 0x02
    21ca:	02 96       	adiw	r24, 0x02	; 2
    21cc:	0e 94 0e 08 	call	0x101c	; 0x101c <uxListRemove>
    21d0:	89 81       	ldd	r24, Y+1	; 0x01
    21d2:	9a 81       	ldd	r25, Y+2	; 0x02
    21d4:	fc 01       	movw	r30, r24
    21d6:	96 89       	ldd	r25, Z+22	; 0x16
    21d8:	80 91 14 07 	lds	r24, 0x0714	; 0x800714 <uxTopReadyPriority>
    21dc:	89 17       	cp	r24, r25
    21de:	30 f4       	brcc	.+12     	; 0x21ec <vTaskRemoveFromUnorderedEventList+0x64>
    21e0:	89 81       	ldd	r24, Y+1	; 0x01
    21e2:	9a 81       	ldd	r25, Y+2	; 0x02
    21e4:	fc 01       	movw	r30, r24
    21e6:	86 89       	ldd	r24, Z+22	; 0x16
    21e8:	80 93 14 07 	sts	0x0714, r24	; 0x800714 <uxTopReadyPriority>
    21ec:	89 81       	ldd	r24, Y+1	; 0x01
    21ee:	9a 81       	ldd	r25, Y+2	; 0x02
    21f0:	ac 01       	movw	r20, r24
    21f2:	4e 5f       	subi	r20, 0xFE	; 254
    21f4:	5f 4f       	sbci	r21, 0xFF	; 255
    21f6:	89 81       	ldd	r24, Y+1	; 0x01
    21f8:	9a 81       	ldd	r25, Y+2	; 0x02
    21fa:	fc 01       	movw	r30, r24
    21fc:	86 89       	ldd	r24, Z+22	; 0x16
    21fe:	28 2f       	mov	r18, r24
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	c9 01       	movw	r24, r18
    2204:	88 0f       	add	r24, r24
    2206:	99 1f       	adc	r25, r25
    2208:	88 0f       	add	r24, r24
    220a:	99 1f       	adc	r25, r25
    220c:	88 0f       	add	r24, r24
    220e:	99 1f       	adc	r25, r25
    2210:	82 0f       	add	r24, r18
    2212:	93 1f       	adc	r25, r19
    2214:	87 55       	subi	r24, 0x57	; 87
    2216:	99 4f       	sbci	r25, 0xF9	; 249
    2218:	ba 01       	movw	r22, r20
    221a:	0e 94 47 07 	call	0xe8e	; 0xe8e <vListInsertEnd>
    221e:	89 81       	ldd	r24, Y+1	; 0x01
    2220:	9a 81       	ldd	r25, Y+2	; 0x02
    2222:	fc 01       	movw	r30, r24
    2224:	26 89       	ldd	r18, Z+22	; 0x16
    2226:	80 91 a7 06 	lds	r24, 0x06A7	; 0x8006a7 <pxCurrentTCB>
    222a:	90 91 a8 06 	lds	r25, 0x06A8	; 0x8006a8 <pxCurrentTCB+0x1>
    222e:	fc 01       	movw	r30, r24
    2230:	86 89       	ldd	r24, Z+22	; 0x16
    2232:	82 17       	cp	r24, r18
    2234:	18 f4       	brcc	.+6      	; 0x223c <vTaskRemoveFromUnorderedEventList+0xb4>
    2236:	81 e0       	ldi	r24, 0x01	; 1
    2238:	80 93 17 07 	sts	0x0717, r24	; 0x800717 <xYieldPending>
    223c:	00 00       	nop
    223e:	26 96       	adiw	r28, 0x06	; 6
    2240:	0f b6       	in	r0, 0x3f	; 63
    2242:	f8 94       	cli
    2244:	de bf       	out	0x3e, r29	; 62
    2246:	0f be       	out	0x3f, r0	; 63
    2248:	cd bf       	out	0x3d, r28	; 61
    224a:	df 91       	pop	r29
    224c:	cf 91       	pop	r28
    224e:	08 95       	ret

00002250 <prvIdleTask>:
    2250:	cf 93       	push	r28
    2252:	df 93       	push	r29
    2254:	00 d0       	rcall	.+0      	; 0x2256 <prvIdleTask+0x6>
    2256:	cd b7       	in	r28, 0x3d	; 61
    2258:	de b7       	in	r29, 0x3e	; 62
    225a:	9a 83       	std	Y+2, r25	; 0x02
    225c:	89 83       	std	Y+1, r24	; 0x01
    225e:	0e 94 74 11 	call	0x22e8	; 0x22e8 <prvCheckTasksWaitingTermination>
    2262:	fd cf       	rjmp	.-6      	; 0x225e <prvIdleTask+0xe>

00002264 <prvInitialiseTaskLists>:
    2264:	cf 93       	push	r28
    2266:	df 93       	push	r29
    2268:	1f 92       	push	r1
    226a:	cd b7       	in	r28, 0x3d	; 61
    226c:	de b7       	in	r29, 0x3e	; 62
    226e:	19 82       	std	Y+1, r1	; 0x01
    2270:	13 c0       	rjmp	.+38     	; 0x2298 <prvInitialiseTaskLists+0x34>
    2272:	89 81       	ldd	r24, Y+1	; 0x01
    2274:	28 2f       	mov	r18, r24
    2276:	30 e0       	ldi	r19, 0x00	; 0
    2278:	c9 01       	movw	r24, r18
    227a:	88 0f       	add	r24, r24
    227c:	99 1f       	adc	r25, r25
    227e:	88 0f       	add	r24, r24
    2280:	99 1f       	adc	r25, r25
    2282:	88 0f       	add	r24, r24
    2284:	99 1f       	adc	r25, r25
    2286:	82 0f       	add	r24, r18
    2288:	93 1f       	adc	r25, r19
    228a:	87 55       	subi	r24, 0x57	; 87
    228c:	99 4f       	sbci	r25, 0xF9	; 249
    228e:	0e 94 ff 06 	call	0xdfe	; 0xdfe <vListInitialise>
    2292:	89 81       	ldd	r24, Y+1	; 0x01
    2294:	8f 5f       	subi	r24, 0xFF	; 255
    2296:	89 83       	std	Y+1, r24	; 0x01
    2298:	89 81       	ldd	r24, Y+1	; 0x01
    229a:	86 30       	cpi	r24, 0x06	; 6
    229c:	50 f3       	brcs	.-44     	; 0x2272 <prvInitialiseTaskLists+0xe>
    229e:	8f ed       	ldi	r24, 0xDF	; 223
    22a0:	96 e0       	ldi	r25, 0x06	; 6
    22a2:	0e 94 ff 06 	call	0xdfe	; 0xdfe <vListInitialise>
    22a6:	88 ee       	ldi	r24, 0xE8	; 232
    22a8:	96 e0       	ldi	r25, 0x06	; 6
    22aa:	0e 94 ff 06 	call	0xdfe	; 0xdfe <vListInitialise>
    22ae:	85 ef       	ldi	r24, 0xF5	; 245
    22b0:	96 e0       	ldi	r25, 0x06	; 6
    22b2:	0e 94 ff 06 	call	0xdfe	; 0xdfe <vListInitialise>
    22b6:	8e ef       	ldi	r24, 0xFE	; 254
    22b8:	96 e0       	ldi	r25, 0x06	; 6
    22ba:	0e 94 ff 06 	call	0xdfe	; 0xdfe <vListInitialise>
    22be:	88 e0       	ldi	r24, 0x08	; 8
    22c0:	97 e0       	ldi	r25, 0x07	; 7
    22c2:	0e 94 ff 06 	call	0xdfe	; 0xdfe <vListInitialise>
    22c6:	8f ed       	ldi	r24, 0xDF	; 223
    22c8:	96 e0       	ldi	r25, 0x06	; 6
    22ca:	90 93 f2 06 	sts	0x06F2, r25	; 0x8006f2 <pxDelayedTaskList+0x1>
    22ce:	80 93 f1 06 	sts	0x06F1, r24	; 0x8006f1 <pxDelayedTaskList>
    22d2:	88 ee       	ldi	r24, 0xE8	; 232
    22d4:	96 e0       	ldi	r25, 0x06	; 6
    22d6:	90 93 f4 06 	sts	0x06F4, r25	; 0x8006f4 <pxOverflowDelayedTaskList+0x1>
    22da:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <pxOverflowDelayedTaskList>
    22de:	00 00       	nop
    22e0:	0f 90       	pop	r0
    22e2:	df 91       	pop	r29
    22e4:	cf 91       	pop	r28
    22e6:	08 95       	ret

000022e8 <prvCheckTasksWaitingTermination>:
    22e8:	cf 93       	push	r28
    22ea:	df 93       	push	r29
    22ec:	00 d0       	rcall	.+0      	; 0x22ee <prvCheckTasksWaitingTermination+0x6>
    22ee:	cd b7       	in	r28, 0x3d	; 61
    22f0:	de b7       	in	r29, 0x3e	; 62
    22f2:	21 c0       	rjmp	.+66     	; 0x2336 <prvCheckTasksWaitingTermination+0x4e>
    22f4:	0f b6       	in	r0, 0x3f	; 63
    22f6:	f8 94       	cli
    22f8:	0f 92       	push	r0
    22fa:	80 91 03 07 	lds	r24, 0x0703	; 0x800703 <xTasksWaitingTermination+0x5>
    22fe:	90 91 04 07 	lds	r25, 0x0704	; 0x800704 <xTasksWaitingTermination+0x6>
    2302:	fc 01       	movw	r30, r24
    2304:	86 81       	ldd	r24, Z+6	; 0x06
    2306:	97 81       	ldd	r25, Z+7	; 0x07
    2308:	9a 83       	std	Y+2, r25	; 0x02
    230a:	89 83       	std	Y+1, r24	; 0x01
    230c:	89 81       	ldd	r24, Y+1	; 0x01
    230e:	9a 81       	ldd	r25, Y+2	; 0x02
    2310:	02 96       	adiw	r24, 0x02	; 2
    2312:	0e 94 0e 08 	call	0x101c	; 0x101c <uxListRemove>
    2316:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <uxCurrentNumberOfTasks>
    231a:	81 50       	subi	r24, 0x01	; 1
    231c:	80 93 11 07 	sts	0x0711, r24	; 0x800711 <uxCurrentNumberOfTasks>
    2320:	80 91 07 07 	lds	r24, 0x0707	; 0x800707 <uxDeletedTasksWaitingCleanUp>
    2324:	81 50       	subi	r24, 0x01	; 1
    2326:	80 93 07 07 	sts	0x0707, r24	; 0x800707 <uxDeletedTasksWaitingCleanUp>
    232a:	0f 90       	pop	r0
    232c:	0f be       	out	0x3f, r0	; 63
    232e:	89 81       	ldd	r24, Y+1	; 0x01
    2330:	9a 81       	ldd	r25, Y+2	; 0x02
    2332:	0e 94 a5 11 	call	0x234a	; 0x234a <prvDeleteTCB>
    2336:	80 91 07 07 	lds	r24, 0x0707	; 0x800707 <uxDeletedTasksWaitingCleanUp>
    233a:	88 23       	and	r24, r24
    233c:	d9 f6       	brne	.-74     	; 0x22f4 <prvCheckTasksWaitingTermination+0xc>
    233e:	00 00       	nop
    2340:	0f 90       	pop	r0
    2342:	0f 90       	pop	r0
    2344:	df 91       	pop	r29
    2346:	cf 91       	pop	r28
    2348:	08 95       	ret

0000234a <prvDeleteTCB>:
    234a:	cf 93       	push	r28
    234c:	df 93       	push	r29
    234e:	00 d0       	rcall	.+0      	; 0x2350 <prvDeleteTCB+0x6>
    2350:	cd b7       	in	r28, 0x3d	; 61
    2352:	de b7       	in	r29, 0x3e	; 62
    2354:	9a 83       	std	Y+2, r25	; 0x02
    2356:	89 83       	std	Y+1, r24	; 0x01
    2358:	89 81       	ldd	r24, Y+1	; 0x01
    235a:	9a 81       	ldd	r25, Y+2	; 0x02
    235c:	fc 01       	movw	r30, r24
    235e:	87 89       	ldd	r24, Z+23	; 0x17
    2360:	90 8d       	ldd	r25, Z+24	; 0x18
    2362:	0e 94 f2 06 	call	0xde4	; 0xde4 <vPortFree>
    2366:	89 81       	ldd	r24, Y+1	; 0x01
    2368:	9a 81       	ldd	r25, Y+2	; 0x02
    236a:	0e 94 f2 06 	call	0xde4	; 0xde4 <vPortFree>
    236e:	00 00       	nop
    2370:	0f 90       	pop	r0
    2372:	0f 90       	pop	r0
    2374:	df 91       	pop	r29
    2376:	cf 91       	pop	r28
    2378:	08 95       	ret

0000237a <prvResetNextTaskUnblockTime>:
    237a:	cf 93       	push	r28
    237c:	df 93       	push	r29
    237e:	00 d0       	rcall	.+0      	; 0x2380 <prvResetNextTaskUnblockTime+0x6>
    2380:	cd b7       	in	r28, 0x3d	; 61
    2382:	de b7       	in	r29, 0x3e	; 62
    2384:	80 91 f1 06 	lds	r24, 0x06F1	; 0x8006f1 <pxDelayedTaskList>
    2388:	90 91 f2 06 	lds	r25, 0x06F2	; 0x8006f2 <pxDelayedTaskList+0x1>
    238c:	fc 01       	movw	r30, r24
    238e:	80 81       	ld	r24, Z
    2390:	88 23       	and	r24, r24
    2392:	39 f4       	brne	.+14     	; 0x23a2 <prvResetNextTaskUnblockTime+0x28>
    2394:	8f ef       	ldi	r24, 0xFF	; 255
    2396:	9f ef       	ldi	r25, 0xFF	; 255
    2398:	90 93 1b 07 	sts	0x071B, r25	; 0x80071b <xNextTaskUnblockTime+0x1>
    239c:	80 93 1a 07 	sts	0x071A, r24	; 0x80071a <xNextTaskUnblockTime>
    23a0:	15 c0       	rjmp	.+42     	; 0x23cc <prvResetNextTaskUnblockTime+0x52>
    23a2:	80 91 f1 06 	lds	r24, 0x06F1	; 0x8006f1 <pxDelayedTaskList>
    23a6:	90 91 f2 06 	lds	r25, 0x06F2	; 0x8006f2 <pxDelayedTaskList+0x1>
    23aa:	fc 01       	movw	r30, r24
    23ac:	85 81       	ldd	r24, Z+5	; 0x05
    23ae:	96 81       	ldd	r25, Z+6	; 0x06
    23b0:	fc 01       	movw	r30, r24
    23b2:	86 81       	ldd	r24, Z+6	; 0x06
    23b4:	97 81       	ldd	r25, Z+7	; 0x07
    23b6:	9a 83       	std	Y+2, r25	; 0x02
    23b8:	89 83       	std	Y+1, r24	; 0x01
    23ba:	89 81       	ldd	r24, Y+1	; 0x01
    23bc:	9a 81       	ldd	r25, Y+2	; 0x02
    23be:	fc 01       	movw	r30, r24
    23c0:	82 81       	ldd	r24, Z+2	; 0x02
    23c2:	93 81       	ldd	r25, Z+3	; 0x03
    23c4:	90 93 1b 07 	sts	0x071B, r25	; 0x80071b <xNextTaskUnblockTime+0x1>
    23c8:	80 93 1a 07 	sts	0x071A, r24	; 0x80071a <xNextTaskUnblockTime>
    23cc:	00 00       	nop
    23ce:	0f 90       	pop	r0
    23d0:	0f 90       	pop	r0
    23d2:	df 91       	pop	r29
    23d4:	cf 91       	pop	r28
    23d6:	08 95       	ret

000023d8 <uxTaskResetEventItemValue>:
    23d8:	cf 93       	push	r28
    23da:	df 93       	push	r29
    23dc:	00 d0       	rcall	.+0      	; 0x23de <uxTaskResetEventItemValue+0x6>
    23de:	cd b7       	in	r28, 0x3d	; 61
    23e0:	de b7       	in	r29, 0x3e	; 62
    23e2:	80 91 a7 06 	lds	r24, 0x06A7	; 0x8006a7 <pxCurrentTCB>
    23e6:	90 91 a8 06 	lds	r25, 0x06A8	; 0x8006a8 <pxCurrentTCB+0x1>
    23ea:	fc 01       	movw	r30, r24
    23ec:	84 85       	ldd	r24, Z+12	; 0x0c
    23ee:	95 85       	ldd	r25, Z+13	; 0x0d
    23f0:	9a 83       	std	Y+2, r25	; 0x02
    23f2:	89 83       	std	Y+1, r24	; 0x01
    23f4:	80 91 a7 06 	lds	r24, 0x06A7	; 0x8006a7 <pxCurrentTCB>
    23f8:	90 91 a8 06 	lds	r25, 0x06A8	; 0x8006a8 <pxCurrentTCB+0x1>
    23fc:	20 91 a7 06 	lds	r18, 0x06A7	; 0x8006a7 <pxCurrentTCB>
    2400:	30 91 a8 06 	lds	r19, 0x06A8	; 0x8006a8 <pxCurrentTCB+0x1>
    2404:	f9 01       	movw	r30, r18
    2406:	26 89       	ldd	r18, Z+22	; 0x16
    2408:	22 2f       	mov	r18, r18
    240a:	30 e0       	ldi	r19, 0x00	; 0
    240c:	46 e0       	ldi	r20, 0x06	; 6
    240e:	50 e0       	ldi	r21, 0x00	; 0
    2410:	ba 01       	movw	r22, r20
    2412:	62 1b       	sub	r22, r18
    2414:	73 0b       	sbc	r23, r19
    2416:	9b 01       	movw	r18, r22
    2418:	fc 01       	movw	r30, r24
    241a:	35 87       	std	Z+13, r19	; 0x0d
    241c:	24 87       	std	Z+12, r18	; 0x0c
    241e:	89 81       	ldd	r24, Y+1	; 0x01
    2420:	9a 81       	ldd	r25, Y+2	; 0x02
    2422:	0f 90       	pop	r0
    2424:	0f 90       	pop	r0
    2426:	df 91       	pop	r29
    2428:	cf 91       	pop	r28
    242a:	08 95       	ret

0000242c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    242c:	cf 93       	push	r28
    242e:	df 93       	push	r29
    2430:	cd b7       	in	r28, 0x3d	; 61
    2432:	de b7       	in	r29, 0x3e	; 62
    2434:	27 97       	sbiw	r28, 0x07	; 7
    2436:	0f b6       	in	r0, 0x3f	; 63
    2438:	f8 94       	cli
    243a:	de bf       	out	0x3e, r29	; 62
    243c:	0f be       	out	0x3f, r0	; 63
    243e:	cd bf       	out	0x3d, r28	; 61
    2440:	9e 83       	std	Y+6, r25	; 0x06
    2442:	8d 83       	std	Y+5, r24	; 0x05
    2444:	6f 83       	std	Y+7, r22	; 0x07
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    2446:	80 91 12 07 	lds	r24, 0x0712	; 0x800712 <xTickCount>
    244a:	90 91 13 07 	lds	r25, 0x0713	; 0x800713 <xTickCount+0x1>
    244e:	9a 83       	std	Y+2, r25	; 0x02
    2450:	89 83       	std	Y+1, r24	; 0x01
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    2452:	80 91 a7 06 	lds	r24, 0x06A7	; 0x8006a7 <pxCurrentTCB>
    2456:	90 91 a8 06 	lds	r25, 0x06A8	; 0x8006a8 <pxCurrentTCB+0x1>
    245a:	02 96       	adiw	r24, 0x02	; 2
    245c:	0e 94 0e 08 	call	0x101c	; 0x101c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    2460:	8d 81       	ldd	r24, Y+5	; 0x05
    2462:	9e 81       	ldd	r25, Y+6	; 0x06
    2464:	01 96       	adiw	r24, 0x01	; 1
    2466:	71 f4       	brne	.+28     	; 0x2484 <prvAddCurrentTaskToDelayedList+0x58>
    2468:	8f 81       	ldd	r24, Y+7	; 0x07
    246a:	88 23       	and	r24, r24
    246c:	59 f0       	breq	.+22     	; 0x2484 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    246e:	80 91 a7 06 	lds	r24, 0x06A7	; 0x8006a7 <pxCurrentTCB>
    2472:	90 91 a8 06 	lds	r25, 0x06A8	; 0x8006a8 <pxCurrentTCB+0x1>
    2476:	02 96       	adiw	r24, 0x02	; 2
    2478:	bc 01       	movw	r22, r24
    247a:	88 e0       	ldi	r24, 0x08	; 8
    247c:	97 e0       	ldi	r25, 0x07	; 7
    247e:	0e 94 47 07 	call	0xe8e	; 0xe8e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    2482:	44 c0       	rjmp	.+136    	; 0x250c <prvAddCurrentTaskToDelayedList+0xe0>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    2484:	29 81       	ldd	r18, Y+1	; 0x01
    2486:	3a 81       	ldd	r19, Y+2	; 0x02
    2488:	8d 81       	ldd	r24, Y+5	; 0x05
    248a:	9e 81       	ldd	r25, Y+6	; 0x06
    248c:	82 0f       	add	r24, r18
    248e:	93 1f       	adc	r25, r19
    2490:	9c 83       	std	Y+4, r25	; 0x04
    2492:	8b 83       	std	Y+3, r24	; 0x03

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    2494:	80 91 a7 06 	lds	r24, 0x06A7	; 0x8006a7 <pxCurrentTCB>
    2498:	90 91 a8 06 	lds	r25, 0x06A8	; 0x8006a8 <pxCurrentTCB+0x1>
    249c:	2b 81       	ldd	r18, Y+3	; 0x03
    249e:	3c 81       	ldd	r19, Y+4	; 0x04
    24a0:	fc 01       	movw	r30, r24
    24a2:	33 83       	std	Z+3, r19	; 0x03
    24a4:	22 83       	std	Z+2, r18	; 0x02

			if( xTimeToWake < xConstTickCount )
    24a6:	2b 81       	ldd	r18, Y+3	; 0x03
    24a8:	3c 81       	ldd	r19, Y+4	; 0x04
    24aa:	89 81       	ldd	r24, Y+1	; 0x01
    24ac:	9a 81       	ldd	r25, Y+2	; 0x02
    24ae:	28 17       	cp	r18, r24
    24b0:	39 07       	cpc	r19, r25
    24b2:	78 f4       	brcc	.+30     	; 0x24d2 <prvAddCurrentTaskToDelayedList+0xa6>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    24b4:	80 91 a7 06 	lds	r24, 0x06A7	; 0x8006a7 <pxCurrentTCB>
    24b8:	90 91 a8 06 	lds	r25, 0x06A8	; 0x8006a8 <pxCurrentTCB+0x1>
    24bc:	9c 01       	movw	r18, r24
    24be:	2e 5f       	subi	r18, 0xFE	; 254
    24c0:	3f 4f       	sbci	r19, 0xFF	; 255
    24c2:	80 91 f3 06 	lds	r24, 0x06F3	; 0x8006f3 <pxOverflowDelayedTaskList>
    24c6:	90 91 f4 06 	lds	r25, 0x06F4	; 0x8006f4 <pxOverflowDelayedTaskList+0x1>
    24ca:	b9 01       	movw	r22, r18
    24cc:	0e 94 96 07 	call	0xf2c	; 0xf2c <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    24d0:	1d c0       	rjmp	.+58     	; 0x250c <prvAddCurrentTaskToDelayedList+0xe0>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    24d2:	80 91 a7 06 	lds	r24, 0x06A7	; 0x8006a7 <pxCurrentTCB>
    24d6:	90 91 a8 06 	lds	r25, 0x06A8	; 0x8006a8 <pxCurrentTCB+0x1>
    24da:	9c 01       	movw	r18, r24
    24dc:	2e 5f       	subi	r18, 0xFE	; 254
    24de:	3f 4f       	sbci	r19, 0xFF	; 255
    24e0:	80 91 f1 06 	lds	r24, 0x06F1	; 0x8006f1 <pxDelayedTaskList>
    24e4:	90 91 f2 06 	lds	r25, 0x06F2	; 0x8006f2 <pxDelayedTaskList+0x1>
    24e8:	b9 01       	movw	r22, r18
    24ea:	0e 94 96 07 	call	0xf2c	; 0xf2c <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
    24ee:	80 91 1a 07 	lds	r24, 0x071A	; 0x80071a <xNextTaskUnblockTime>
    24f2:	90 91 1b 07 	lds	r25, 0x071B	; 0x80071b <xNextTaskUnblockTime+0x1>
    24f6:	2b 81       	ldd	r18, Y+3	; 0x03
    24f8:	3c 81       	ldd	r19, Y+4	; 0x04
    24fa:	28 17       	cp	r18, r24
    24fc:	39 07       	cpc	r19, r25
    24fe:	30 f4       	brcc	.+12     	; 0x250c <prvAddCurrentTaskToDelayedList+0xe0>
				{
					xNextTaskUnblockTime = xTimeToWake;
    2500:	8b 81       	ldd	r24, Y+3	; 0x03
    2502:	9c 81       	ldd	r25, Y+4	; 0x04
    2504:	90 93 1b 07 	sts	0x071B, r25	; 0x80071b <xNextTaskUnblockTime+0x1>
    2508:	80 93 1a 07 	sts	0x071A, r24	; 0x80071a <xNextTaskUnblockTime>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    250c:	00 00       	nop
    250e:	27 96       	adiw	r28, 0x07	; 7
    2510:	0f b6       	in	r0, 0x3f	; 63
    2512:	f8 94       	cli
    2514:	de bf       	out	0x3e, r29	; 62
    2516:	0f be       	out	0x3f, r0	; 63
    2518:	cd bf       	out	0x3d, r28	; 61
    251a:	df 91       	pop	r29
    251c:	cf 91       	pop	r28
    251e:	08 95       	ret

00002520 <Gpio_PortDirection>:
		case MYPORTD :
		result = (PIN_D >> 4);
		break;
	}
	return result;
}
    2520:	cf 93       	push	r28
    2522:	df 93       	push	r29
    2524:	00 d0       	rcall	.+0      	; 0x2526 <Gpio_PortDirection+0x6>
    2526:	cd b7       	in	r28, 0x3d	; 61
    2528:	de b7       	in	r29, 0x3e	; 62
    252a:	89 83       	std	Y+1, r24	; 0x01
    252c:	6a 83       	std	Y+2, r22	; 0x02
    252e:	89 81       	ldd	r24, Y+1	; 0x01
    2530:	88 2f       	mov	r24, r24
    2532:	90 e0       	ldi	r25, 0x00	; 0
    2534:	81 30       	cpi	r24, 0x01	; 1
    2536:	91 05       	cpc	r25, r1
    2538:	91 f0       	breq	.+36     	; 0x255e <Gpio_PortDirection+0x3e>
    253a:	82 30       	cpi	r24, 0x02	; 2
    253c:	91 05       	cpc	r25, r1
    253e:	1c f4       	brge	.+6      	; 0x2546 <Gpio_PortDirection+0x26>
    2540:	89 2b       	or	r24, r25
    2542:	39 f0       	breq	.+14     	; 0x2552 <Gpio_PortDirection+0x32>
    2544:	1e c0       	rjmp	.+60     	; 0x2582 <Gpio_PortDirection+0x62>
    2546:	82 30       	cpi	r24, 0x02	; 2
    2548:	91 05       	cpc	r25, r1
    254a:	79 f0       	breq	.+30     	; 0x256a <Gpio_PortDirection+0x4a>
    254c:	03 97       	sbiw	r24, 0x03	; 3
    254e:	99 f0       	breq	.+38     	; 0x2576 <Gpio_PortDirection+0x56>
    2550:	18 c0       	rjmp	.+48     	; 0x2582 <Gpio_PortDirection+0x62>
    2552:	8a e3       	ldi	r24, 0x3A	; 58
    2554:	90 e0       	ldi	r25, 0x00	; 0
    2556:	2a 81       	ldd	r18, Y+2	; 0x02
    2558:	fc 01       	movw	r30, r24
    255a:	20 83       	st	Z, r18
    255c:	12 c0       	rjmp	.+36     	; 0x2582 <Gpio_PortDirection+0x62>
    255e:	87 e3       	ldi	r24, 0x37	; 55
    2560:	90 e0       	ldi	r25, 0x00	; 0
    2562:	2a 81       	ldd	r18, Y+2	; 0x02
    2564:	fc 01       	movw	r30, r24
    2566:	20 83       	st	Z, r18
    2568:	0c c0       	rjmp	.+24     	; 0x2582 <Gpio_PortDirection+0x62>
    256a:	84 e3       	ldi	r24, 0x34	; 52
    256c:	90 e0       	ldi	r25, 0x00	; 0
    256e:	2a 81       	ldd	r18, Y+2	; 0x02
    2570:	fc 01       	movw	r30, r24
    2572:	20 83       	st	Z, r18
    2574:	06 c0       	rjmp	.+12     	; 0x2582 <Gpio_PortDirection+0x62>
    2576:	81 e3       	ldi	r24, 0x31	; 49
    2578:	90 e0       	ldi	r25, 0x00	; 0
    257a:	2a 81       	ldd	r18, Y+2	; 0x02
    257c:	fc 01       	movw	r30, r24
    257e:	20 83       	st	Z, r18
    2580:	00 00       	nop
    2582:	00 00       	nop
    2584:	0f 90       	pop	r0
    2586:	0f 90       	pop	r0
    2588:	df 91       	pop	r29
    258a:	cf 91       	pop	r28
    258c:	08 95       	ret

0000258e <Gpio_PinDirection>:
    258e:	cf 93       	push	r28
    2590:	df 93       	push	r29
    2592:	00 d0       	rcall	.+0      	; 0x2594 <Gpio_PinDirection+0x6>
    2594:	1f 92       	push	r1
    2596:	cd b7       	in	r28, 0x3d	; 61
    2598:	de b7       	in	r29, 0x3e	; 62
    259a:	89 83       	std	Y+1, r24	; 0x01
    259c:	6a 83       	std	Y+2, r22	; 0x02
    259e:	4b 83       	std	Y+3, r20	; 0x03
    25a0:	89 81       	ldd	r24, Y+1	; 0x01
    25a2:	88 2f       	mov	r24, r24
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	81 30       	cpi	r24, 0x01	; 1
    25a8:	91 05       	cpc	r25, r1
    25aa:	81 f1       	breq	.+96     	; 0x260c <Gpio_PinDirection+0x7e>
    25ac:	82 30       	cpi	r24, 0x02	; 2
    25ae:	91 05       	cpc	r25, r1
    25b0:	1c f4       	brge	.+6      	; 0x25b8 <Gpio_PinDirection+0x2a>
    25b2:	89 2b       	or	r24, r25
    25b4:	49 f0       	breq	.+18     	; 0x25c8 <Gpio_PinDirection+0x3a>
    25b6:	90 c0       	rjmp	.+288    	; 0x26d8 <Gpio_PinDirection+0x14a>
    25b8:	82 30       	cpi	r24, 0x02	; 2
    25ba:	91 05       	cpc	r25, r1
    25bc:	09 f4       	brne	.+2      	; 0x25c0 <Gpio_PinDirection+0x32>
    25be:	48 c0       	rjmp	.+144    	; 0x2650 <Gpio_PinDirection+0xc2>
    25c0:	03 97       	sbiw	r24, 0x03	; 3
    25c2:	09 f4       	brne	.+2      	; 0x25c6 <Gpio_PinDirection+0x38>
    25c4:	67 c0       	rjmp	.+206    	; 0x2694 <Gpio_PinDirection+0x106>
    25c6:	88 c0       	rjmp	.+272    	; 0x26d8 <Gpio_PinDirection+0x14a>
    25c8:	8b 81       	ldd	r24, Y+3	; 0x03
    25ca:	88 2f       	mov	r24, r24
    25cc:	90 e0       	ldi	r25, 0x00	; 0
    25ce:	00 97       	sbiw	r24, 0x00	; 0
    25d0:	21 f0       	breq	.+8      	; 0x25da <Gpio_PinDirection+0x4c>
    25d2:	8f 3f       	cpi	r24, 0xFF	; 255
    25d4:	91 05       	cpc	r25, r1
    25d6:	71 f0       	breq	.+28     	; 0x25f4 <Gpio_PinDirection+0x66>
    25d8:	7f c0       	rjmp	.+254    	; 0x26d8 <Gpio_PinDirection+0x14a>
    25da:	8a e3       	ldi	r24, 0x3A	; 58
    25dc:	90 e0       	ldi	r25, 0x00	; 0
    25de:	2a e3       	ldi	r18, 0x3A	; 58
    25e0:	30 e0       	ldi	r19, 0x00	; 0
    25e2:	f9 01       	movw	r30, r18
    25e4:	20 81       	ld	r18, Z
    25e6:	32 2f       	mov	r19, r18
    25e8:	2a 81       	ldd	r18, Y+2	; 0x02
    25ea:	20 95       	com	r18
    25ec:	23 23       	and	r18, r19
    25ee:	fc 01       	movw	r30, r24
    25f0:	20 83       	st	Z, r18
    25f2:	0b c0       	rjmp	.+22     	; 0x260a <Gpio_PinDirection+0x7c>
    25f4:	8a e3       	ldi	r24, 0x3A	; 58
    25f6:	90 e0       	ldi	r25, 0x00	; 0
    25f8:	2a e3       	ldi	r18, 0x3A	; 58
    25fa:	30 e0       	ldi	r19, 0x00	; 0
    25fc:	f9 01       	movw	r30, r18
    25fe:	30 81       	ld	r19, Z
    2600:	2a 81       	ldd	r18, Y+2	; 0x02
    2602:	23 2b       	or	r18, r19
    2604:	fc 01       	movw	r30, r24
    2606:	20 83       	st	Z, r18
    2608:	00 00       	nop
    260a:	66 c0       	rjmp	.+204    	; 0x26d8 <Gpio_PinDirection+0x14a>
    260c:	8b 81       	ldd	r24, Y+3	; 0x03
    260e:	88 2f       	mov	r24, r24
    2610:	90 e0       	ldi	r25, 0x00	; 0
    2612:	00 97       	sbiw	r24, 0x00	; 0
    2614:	21 f0       	breq	.+8      	; 0x261e <Gpio_PinDirection+0x90>
    2616:	8f 3f       	cpi	r24, 0xFF	; 255
    2618:	91 05       	cpc	r25, r1
    261a:	71 f0       	breq	.+28     	; 0x2638 <Gpio_PinDirection+0xaa>
    261c:	5d c0       	rjmp	.+186    	; 0x26d8 <Gpio_PinDirection+0x14a>
    261e:	87 e3       	ldi	r24, 0x37	; 55
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	27 e3       	ldi	r18, 0x37	; 55
    2624:	30 e0       	ldi	r19, 0x00	; 0
    2626:	f9 01       	movw	r30, r18
    2628:	20 81       	ld	r18, Z
    262a:	32 2f       	mov	r19, r18
    262c:	2a 81       	ldd	r18, Y+2	; 0x02
    262e:	20 95       	com	r18
    2630:	23 23       	and	r18, r19
    2632:	fc 01       	movw	r30, r24
    2634:	20 83       	st	Z, r18
    2636:	0b c0       	rjmp	.+22     	; 0x264e <Gpio_PinDirection+0xc0>
    2638:	87 e3       	ldi	r24, 0x37	; 55
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	27 e3       	ldi	r18, 0x37	; 55
    263e:	30 e0       	ldi	r19, 0x00	; 0
    2640:	f9 01       	movw	r30, r18
    2642:	30 81       	ld	r19, Z
    2644:	2a 81       	ldd	r18, Y+2	; 0x02
    2646:	23 2b       	or	r18, r19
    2648:	fc 01       	movw	r30, r24
    264a:	20 83       	st	Z, r18
    264c:	00 00       	nop
    264e:	44 c0       	rjmp	.+136    	; 0x26d8 <Gpio_PinDirection+0x14a>
    2650:	8b 81       	ldd	r24, Y+3	; 0x03
    2652:	88 2f       	mov	r24, r24
    2654:	90 e0       	ldi	r25, 0x00	; 0
    2656:	00 97       	sbiw	r24, 0x00	; 0
    2658:	21 f0       	breq	.+8      	; 0x2662 <Gpio_PinDirection+0xd4>
    265a:	8f 3f       	cpi	r24, 0xFF	; 255
    265c:	91 05       	cpc	r25, r1
    265e:	71 f0       	breq	.+28     	; 0x267c <Gpio_PinDirection+0xee>
    2660:	3b c0       	rjmp	.+118    	; 0x26d8 <Gpio_PinDirection+0x14a>
    2662:	84 e3       	ldi	r24, 0x34	; 52
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	24 e3       	ldi	r18, 0x34	; 52
    2668:	30 e0       	ldi	r19, 0x00	; 0
    266a:	f9 01       	movw	r30, r18
    266c:	20 81       	ld	r18, Z
    266e:	32 2f       	mov	r19, r18
    2670:	2a 81       	ldd	r18, Y+2	; 0x02
    2672:	20 95       	com	r18
    2674:	23 23       	and	r18, r19
    2676:	fc 01       	movw	r30, r24
    2678:	20 83       	st	Z, r18
    267a:	0b c0       	rjmp	.+22     	; 0x2692 <Gpio_PinDirection+0x104>
    267c:	84 e3       	ldi	r24, 0x34	; 52
    267e:	90 e0       	ldi	r25, 0x00	; 0
    2680:	24 e3       	ldi	r18, 0x34	; 52
    2682:	30 e0       	ldi	r19, 0x00	; 0
    2684:	f9 01       	movw	r30, r18
    2686:	30 81       	ld	r19, Z
    2688:	2a 81       	ldd	r18, Y+2	; 0x02
    268a:	23 2b       	or	r18, r19
    268c:	fc 01       	movw	r30, r24
    268e:	20 83       	st	Z, r18
    2690:	00 00       	nop
    2692:	22 c0       	rjmp	.+68     	; 0x26d8 <Gpio_PinDirection+0x14a>
    2694:	8b 81       	ldd	r24, Y+3	; 0x03
    2696:	88 2f       	mov	r24, r24
    2698:	90 e0       	ldi	r25, 0x00	; 0
    269a:	00 97       	sbiw	r24, 0x00	; 0
    269c:	21 f0       	breq	.+8      	; 0x26a6 <Gpio_PinDirection+0x118>
    269e:	8f 3f       	cpi	r24, 0xFF	; 255
    26a0:	91 05       	cpc	r25, r1
    26a2:	71 f0       	breq	.+28     	; 0x26c0 <Gpio_PinDirection+0x132>
    26a4:	18 c0       	rjmp	.+48     	; 0x26d6 <Gpio_PinDirection+0x148>
    26a6:	81 e3       	ldi	r24, 0x31	; 49
    26a8:	90 e0       	ldi	r25, 0x00	; 0
    26aa:	21 e3       	ldi	r18, 0x31	; 49
    26ac:	30 e0       	ldi	r19, 0x00	; 0
    26ae:	f9 01       	movw	r30, r18
    26b0:	20 81       	ld	r18, Z
    26b2:	32 2f       	mov	r19, r18
    26b4:	2a 81       	ldd	r18, Y+2	; 0x02
    26b6:	20 95       	com	r18
    26b8:	23 23       	and	r18, r19
    26ba:	fc 01       	movw	r30, r24
    26bc:	20 83       	st	Z, r18
    26be:	0b c0       	rjmp	.+22     	; 0x26d6 <Gpio_PinDirection+0x148>
    26c0:	81 e3       	ldi	r24, 0x31	; 49
    26c2:	90 e0       	ldi	r25, 0x00	; 0
    26c4:	21 e3       	ldi	r18, 0x31	; 49
    26c6:	30 e0       	ldi	r19, 0x00	; 0
    26c8:	f9 01       	movw	r30, r18
    26ca:	30 81       	ld	r19, Z
    26cc:	2a 81       	ldd	r18, Y+2	; 0x02
    26ce:	23 2b       	or	r18, r19
    26d0:	fc 01       	movw	r30, r24
    26d2:	20 83       	st	Z, r18
    26d4:	00 00       	nop
    26d6:	00 00       	nop
    26d8:	00 00       	nop
    26da:	0f 90       	pop	r0
    26dc:	0f 90       	pop	r0
    26de:	0f 90       	pop	r0
    26e0:	df 91       	pop	r29
    26e2:	cf 91       	pop	r28
    26e4:	08 95       	ret

000026e6 <Gpio_PinWrite>:
    26e6:	cf 93       	push	r28
    26e8:	df 93       	push	r29
    26ea:	00 d0       	rcall	.+0      	; 0x26ec <Gpio_PinWrite+0x6>
    26ec:	1f 92       	push	r1
    26ee:	cd b7       	in	r28, 0x3d	; 61
    26f0:	de b7       	in	r29, 0x3e	; 62
    26f2:	89 83       	std	Y+1, r24	; 0x01
    26f4:	6a 83       	std	Y+2, r22	; 0x02
    26f6:	4b 83       	std	Y+3, r20	; 0x03
    26f8:	8b 81       	ldd	r24, Y+3	; 0x03
    26fa:	88 2f       	mov	r24, r24
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	00 97       	sbiw	r24, 0x00	; 0
    2700:	09 f4       	brne	.+2      	; 0x2704 <Gpio_PinWrite+0x1e>
    2702:	42 c0       	rjmp	.+132    	; 0x2788 <Gpio_PinWrite+0xa2>
    2704:	01 97       	sbiw	r24, 0x01	; 1
    2706:	09 f0       	breq	.+2      	; 0x270a <Gpio_PinWrite+0x24>
    2708:	86 c0       	rjmp	.+268    	; 0x2816 <Gpio_PinWrite+0x130>
    270a:	89 81       	ldd	r24, Y+1	; 0x01
    270c:	88 2f       	mov	r24, r24
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	81 30       	cpi	r24, 0x01	; 1
    2712:	91 05       	cpc	r25, r1
    2714:	b9 f0       	breq	.+46     	; 0x2744 <Gpio_PinWrite+0x5e>
    2716:	82 30       	cpi	r24, 0x02	; 2
    2718:	91 05       	cpc	r25, r1
    271a:	1c f4       	brge	.+6      	; 0x2722 <Gpio_PinWrite+0x3c>
    271c:	89 2b       	or	r24, r25
    271e:	39 f0       	breq	.+14     	; 0x272e <Gpio_PinWrite+0x48>
    2720:	7a c0       	rjmp	.+244    	; 0x2816 <Gpio_PinWrite+0x130>
    2722:	82 30       	cpi	r24, 0x02	; 2
    2724:	91 05       	cpc	r25, r1
    2726:	c9 f0       	breq	.+50     	; 0x275a <Gpio_PinWrite+0x74>
    2728:	03 97       	sbiw	r24, 0x03	; 3
    272a:	11 f1       	breq	.+68     	; 0x2770 <Gpio_PinWrite+0x8a>
    272c:	74 c0       	rjmp	.+232    	; 0x2816 <Gpio_PinWrite+0x130>
    272e:	8b e3       	ldi	r24, 0x3B	; 59
    2730:	90 e0       	ldi	r25, 0x00	; 0
    2732:	2b e3       	ldi	r18, 0x3B	; 59
    2734:	30 e0       	ldi	r19, 0x00	; 0
    2736:	f9 01       	movw	r30, r18
    2738:	30 81       	ld	r19, Z
    273a:	2a 81       	ldd	r18, Y+2	; 0x02
    273c:	23 2b       	or	r18, r19
    273e:	fc 01       	movw	r30, r24
    2740:	20 83       	st	Z, r18
    2742:	21 c0       	rjmp	.+66     	; 0x2786 <Gpio_PinWrite+0xa0>
    2744:	88 e3       	ldi	r24, 0x38	; 56
    2746:	90 e0       	ldi	r25, 0x00	; 0
    2748:	28 e3       	ldi	r18, 0x38	; 56
    274a:	30 e0       	ldi	r19, 0x00	; 0
    274c:	f9 01       	movw	r30, r18
    274e:	30 81       	ld	r19, Z
    2750:	2a 81       	ldd	r18, Y+2	; 0x02
    2752:	23 2b       	or	r18, r19
    2754:	fc 01       	movw	r30, r24
    2756:	20 83       	st	Z, r18
    2758:	16 c0       	rjmp	.+44     	; 0x2786 <Gpio_PinWrite+0xa0>
    275a:	85 e3       	ldi	r24, 0x35	; 53
    275c:	90 e0       	ldi	r25, 0x00	; 0
    275e:	25 e3       	ldi	r18, 0x35	; 53
    2760:	30 e0       	ldi	r19, 0x00	; 0
    2762:	f9 01       	movw	r30, r18
    2764:	30 81       	ld	r19, Z
    2766:	2a 81       	ldd	r18, Y+2	; 0x02
    2768:	23 2b       	or	r18, r19
    276a:	fc 01       	movw	r30, r24
    276c:	20 83       	st	Z, r18
    276e:	0b c0       	rjmp	.+22     	; 0x2786 <Gpio_PinWrite+0xa0>
    2770:	82 e3       	ldi	r24, 0x32	; 50
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	22 e3       	ldi	r18, 0x32	; 50
    2776:	30 e0       	ldi	r19, 0x00	; 0
    2778:	f9 01       	movw	r30, r18
    277a:	30 81       	ld	r19, Z
    277c:	2a 81       	ldd	r18, Y+2	; 0x02
    277e:	23 2b       	or	r18, r19
    2780:	fc 01       	movw	r30, r24
    2782:	20 83       	st	Z, r18
    2784:	00 00       	nop
    2786:	47 c0       	rjmp	.+142    	; 0x2816 <Gpio_PinWrite+0x130>
    2788:	89 81       	ldd	r24, Y+1	; 0x01
    278a:	88 2f       	mov	r24, r24
    278c:	90 e0       	ldi	r25, 0x00	; 0
    278e:	81 30       	cpi	r24, 0x01	; 1
    2790:	91 05       	cpc	r25, r1
    2792:	c9 f0       	breq	.+50     	; 0x27c6 <Gpio_PinWrite+0xe0>
    2794:	82 30       	cpi	r24, 0x02	; 2
    2796:	91 05       	cpc	r25, r1
    2798:	1c f4       	brge	.+6      	; 0x27a0 <Gpio_PinWrite+0xba>
    279a:	89 2b       	or	r24, r25
    279c:	39 f0       	breq	.+14     	; 0x27ac <Gpio_PinWrite+0xc6>
    279e:	3a c0       	rjmp	.+116    	; 0x2814 <Gpio_PinWrite+0x12e>
    27a0:	82 30       	cpi	r24, 0x02	; 2
    27a2:	91 05       	cpc	r25, r1
    27a4:	e9 f0       	breq	.+58     	; 0x27e0 <Gpio_PinWrite+0xfa>
    27a6:	03 97       	sbiw	r24, 0x03	; 3
    27a8:	41 f1       	breq	.+80     	; 0x27fa <Gpio_PinWrite+0x114>
    27aa:	34 c0       	rjmp	.+104    	; 0x2814 <Gpio_PinWrite+0x12e>
    27ac:	8b e3       	ldi	r24, 0x3B	; 59
    27ae:	90 e0       	ldi	r25, 0x00	; 0
    27b0:	2b e3       	ldi	r18, 0x3B	; 59
    27b2:	30 e0       	ldi	r19, 0x00	; 0
    27b4:	f9 01       	movw	r30, r18
    27b6:	20 81       	ld	r18, Z
    27b8:	32 2f       	mov	r19, r18
    27ba:	2a 81       	ldd	r18, Y+2	; 0x02
    27bc:	20 95       	com	r18
    27be:	23 23       	and	r18, r19
    27c0:	fc 01       	movw	r30, r24
    27c2:	20 83       	st	Z, r18
    27c4:	27 c0       	rjmp	.+78     	; 0x2814 <Gpio_PinWrite+0x12e>
    27c6:	88 e3       	ldi	r24, 0x38	; 56
    27c8:	90 e0       	ldi	r25, 0x00	; 0
    27ca:	28 e3       	ldi	r18, 0x38	; 56
    27cc:	30 e0       	ldi	r19, 0x00	; 0
    27ce:	f9 01       	movw	r30, r18
    27d0:	20 81       	ld	r18, Z
    27d2:	32 2f       	mov	r19, r18
    27d4:	2a 81       	ldd	r18, Y+2	; 0x02
    27d6:	20 95       	com	r18
    27d8:	23 23       	and	r18, r19
    27da:	fc 01       	movw	r30, r24
    27dc:	20 83       	st	Z, r18
    27de:	1a c0       	rjmp	.+52     	; 0x2814 <Gpio_PinWrite+0x12e>
    27e0:	85 e3       	ldi	r24, 0x35	; 53
    27e2:	90 e0       	ldi	r25, 0x00	; 0
    27e4:	25 e3       	ldi	r18, 0x35	; 53
    27e6:	30 e0       	ldi	r19, 0x00	; 0
    27e8:	f9 01       	movw	r30, r18
    27ea:	20 81       	ld	r18, Z
    27ec:	32 2f       	mov	r19, r18
    27ee:	2a 81       	ldd	r18, Y+2	; 0x02
    27f0:	20 95       	com	r18
    27f2:	23 23       	and	r18, r19
    27f4:	fc 01       	movw	r30, r24
    27f6:	20 83       	st	Z, r18
    27f8:	0d c0       	rjmp	.+26     	; 0x2814 <Gpio_PinWrite+0x12e>
    27fa:	82 e3       	ldi	r24, 0x32	; 50
    27fc:	90 e0       	ldi	r25, 0x00	; 0
    27fe:	22 e3       	ldi	r18, 0x32	; 50
    2800:	30 e0       	ldi	r19, 0x00	; 0
    2802:	f9 01       	movw	r30, r18
    2804:	20 81       	ld	r18, Z
    2806:	32 2f       	mov	r19, r18
    2808:	2a 81       	ldd	r18, Y+2	; 0x02
    280a:	20 95       	com	r18
    280c:	23 23       	and	r18, r19
    280e:	fc 01       	movw	r30, r24
    2810:	20 83       	st	Z, r18
    2812:	00 00       	nop
    2814:	00 00       	nop
    2816:	00 00       	nop
    2818:	0f 90       	pop	r0
    281a:	0f 90       	pop	r0
    281c:	0f 90       	pop	r0
    281e:	df 91       	pop	r29
    2820:	cf 91       	pop	r28
    2822:	08 95       	ret

00002824 <Gpio_PinRead>:
    2824:	cf 93       	push	r28
    2826:	df 93       	push	r29
    2828:	00 d0       	rcall	.+0      	; 0x282a <Gpio_PinRead+0x6>
    282a:	1f 92       	push	r1
    282c:	cd b7       	in	r28, 0x3d	; 61
    282e:	de b7       	in	r29, 0x3e	; 62
    2830:	8a 83       	std	Y+2, r24	; 0x02
    2832:	6b 83       	std	Y+3, r22	; 0x03
    2834:	19 82       	std	Y+1, r1	; 0x01
    2836:	8a 81       	ldd	r24, Y+2	; 0x02
    2838:	88 2f       	mov	r24, r24
    283a:	90 e0       	ldi	r25, 0x00	; 0
    283c:	81 30       	cpi	r24, 0x01	; 1
    283e:	91 05       	cpc	r25, r1
    2840:	e9 f0       	breq	.+58     	; 0x287c <Gpio_PinRead+0x58>
    2842:	82 30       	cpi	r24, 0x02	; 2
    2844:	91 05       	cpc	r25, r1
    2846:	1c f4       	brge	.+6      	; 0x284e <Gpio_PinRead+0x2a>
    2848:	89 2b       	or	r24, r25
    284a:	39 f0       	breq	.+14     	; 0x285a <Gpio_PinRead+0x36>
    284c:	4a c0       	rjmp	.+148    	; 0x28e2 <Gpio_PinRead+0xbe>
    284e:	82 30       	cpi	r24, 0x02	; 2
    2850:	91 05       	cpc	r25, r1
    2852:	29 f1       	breq	.+74     	; 0x289e <Gpio_PinRead+0x7a>
    2854:	03 97       	sbiw	r24, 0x03	; 3
    2856:	a1 f1       	breq	.+104    	; 0x28c0 <Gpio_PinRead+0x9c>
    2858:	44 c0       	rjmp	.+136    	; 0x28e2 <Gpio_PinRead+0xbe>
    285a:	89 e3       	ldi	r24, 0x39	; 57
    285c:	90 e0       	ldi	r25, 0x00	; 0
    285e:	fc 01       	movw	r30, r24
    2860:	80 81       	ld	r24, Z
    2862:	88 2f       	mov	r24, r24
    2864:	90 e0       	ldi	r25, 0x00	; 0
    2866:	2b 81       	ldd	r18, Y+3	; 0x03
    2868:	22 2f       	mov	r18, r18
    286a:	30 e0       	ldi	r19, 0x00	; 0
    286c:	02 c0       	rjmp	.+4      	; 0x2872 <Gpio_PinRead+0x4e>
    286e:	95 95       	asr	r25
    2870:	87 95       	ror	r24
    2872:	2a 95       	dec	r18
    2874:	e2 f7       	brpl	.-8      	; 0x286e <Gpio_PinRead+0x4a>
    2876:	81 70       	andi	r24, 0x01	; 1
    2878:	89 83       	std	Y+1, r24	; 0x01
    287a:	33 c0       	rjmp	.+102    	; 0x28e2 <Gpio_PinRead+0xbe>
    287c:	86 e3       	ldi	r24, 0x36	; 54
    287e:	90 e0       	ldi	r25, 0x00	; 0
    2880:	fc 01       	movw	r30, r24
    2882:	80 81       	ld	r24, Z
    2884:	88 2f       	mov	r24, r24
    2886:	90 e0       	ldi	r25, 0x00	; 0
    2888:	2b 81       	ldd	r18, Y+3	; 0x03
    288a:	22 2f       	mov	r18, r18
    288c:	30 e0       	ldi	r19, 0x00	; 0
    288e:	02 c0       	rjmp	.+4      	; 0x2894 <Gpio_PinRead+0x70>
    2890:	95 95       	asr	r25
    2892:	87 95       	ror	r24
    2894:	2a 95       	dec	r18
    2896:	e2 f7       	brpl	.-8      	; 0x2890 <Gpio_PinRead+0x6c>
    2898:	81 70       	andi	r24, 0x01	; 1
    289a:	89 83       	std	Y+1, r24	; 0x01
    289c:	22 c0       	rjmp	.+68     	; 0x28e2 <Gpio_PinRead+0xbe>
    289e:	83 e3       	ldi	r24, 0x33	; 51
    28a0:	90 e0       	ldi	r25, 0x00	; 0
    28a2:	fc 01       	movw	r30, r24
    28a4:	80 81       	ld	r24, Z
    28a6:	88 2f       	mov	r24, r24
    28a8:	90 e0       	ldi	r25, 0x00	; 0
    28aa:	2b 81       	ldd	r18, Y+3	; 0x03
    28ac:	22 2f       	mov	r18, r18
    28ae:	30 e0       	ldi	r19, 0x00	; 0
    28b0:	02 c0       	rjmp	.+4      	; 0x28b6 <Gpio_PinRead+0x92>
    28b2:	95 95       	asr	r25
    28b4:	87 95       	ror	r24
    28b6:	2a 95       	dec	r18
    28b8:	e2 f7       	brpl	.-8      	; 0x28b2 <Gpio_PinRead+0x8e>
    28ba:	81 70       	andi	r24, 0x01	; 1
    28bc:	89 83       	std	Y+1, r24	; 0x01
    28be:	11 c0       	rjmp	.+34     	; 0x28e2 <Gpio_PinRead+0xbe>
    28c0:	80 e3       	ldi	r24, 0x30	; 48
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	fc 01       	movw	r30, r24
    28c6:	80 81       	ld	r24, Z
    28c8:	88 2f       	mov	r24, r24
    28ca:	90 e0       	ldi	r25, 0x00	; 0
    28cc:	2b 81       	ldd	r18, Y+3	; 0x03
    28ce:	22 2f       	mov	r18, r18
    28d0:	30 e0       	ldi	r19, 0x00	; 0
    28d2:	02 c0       	rjmp	.+4      	; 0x28d8 <Gpio_PinRead+0xb4>
    28d4:	95 95       	asr	r25
    28d6:	87 95       	ror	r24
    28d8:	2a 95       	dec	r18
    28da:	e2 f7       	brpl	.-8      	; 0x28d4 <Gpio_PinRead+0xb0>
    28dc:	81 70       	andi	r24, 0x01	; 1
    28de:	89 83       	std	Y+1, r24	; 0x01
    28e0:	00 00       	nop
    28e2:	89 81       	ldd	r24, Y+1	; 0x01
    28e4:	0f 90       	pop	r0
    28e6:	0f 90       	pop	r0
    28e8:	0f 90       	pop	r0
    28ea:	df 91       	pop	r29
    28ec:	cf 91       	pop	r28
    28ee:	08 95       	ret

000028f0 <Gpio_LowerNibbleDirection>:
 * @param port : the port that includes the LowerNibble {MYPORTA,MYPORTB,MYPORTC,MYPORTD}
 * @param direction : The Direction of the LowerNibble >> {SET_IN , SET_OUT}
 * Return : void
 */
void Gpio_LowerNibbleDirection(uint8 port, uint8 direction)
{
    28f0:	cf 93       	push	r28
    28f2:	df 93       	push	r29
    28f4:	00 d0       	rcall	.+0      	; 0x28f6 <Gpio_LowerNibbleDirection+0x6>
    28f6:	cd b7       	in	r28, 0x3d	; 61
    28f8:	de b7       	in	r29, 0x3e	; 62
    28fa:	89 83       	std	Y+1, r24	; 0x01
    28fc:	6a 83       	std	Y+2, r22	; 0x02
	switch(port)
    28fe:	89 81       	ldd	r24, Y+1	; 0x01
    2900:	88 2f       	mov	r24, r24
    2902:	90 e0       	ldi	r25, 0x00	; 0
    2904:	81 30       	cpi	r24, 0x01	; 1
    2906:	91 05       	cpc	r25, r1
    2908:	61 f1       	breq	.+88     	; 0x2962 <Gpio_LowerNibbleDirection+0x72>
    290a:	82 30       	cpi	r24, 0x02	; 2
    290c:	91 05       	cpc	r25, r1
    290e:	1c f4       	brge	.+6      	; 0x2916 <Gpio_LowerNibbleDirection+0x26>
    2910:	89 2b       	or	r24, r25
    2912:	49 f0       	breq	.+18     	; 0x2926 <Gpio_LowerNibbleDirection+0x36>
				break;
			}
		}
		break;
	}
}
    2914:	80 c0       	rjmp	.+256    	; 0x2a16 <Gpio_LowerNibbleDirection+0x126>
 * @param direction : The Direction of the LowerNibble >> {SET_IN , SET_OUT}
 * Return : void
 */
void Gpio_LowerNibbleDirection(uint8 port, uint8 direction)
{
	switch(port)
    2916:	82 30       	cpi	r24, 0x02	; 2
    2918:	91 05       	cpc	r25, r1
    291a:	09 f4       	brne	.+2      	; 0x291e <Gpio_LowerNibbleDirection+0x2e>
    291c:	40 c0       	rjmp	.+128    	; 0x299e <Gpio_LowerNibbleDirection+0xae>
    291e:	03 97       	sbiw	r24, 0x03	; 3
    2920:	09 f4       	brne	.+2      	; 0x2924 <Gpio_LowerNibbleDirection+0x34>
    2922:	5b c0       	rjmp	.+182    	; 0x29da <Gpio_LowerNibbleDirection+0xea>
				break;
			}
		}
		break;
	}
}
    2924:	78 c0       	rjmp	.+240    	; 0x2a16 <Gpio_LowerNibbleDirection+0x126>
{
	switch(port)
	{
		case MYPORTA :
		{
			switch(direction)
    2926:	8a 81       	ldd	r24, Y+2	; 0x02
    2928:	88 2f       	mov	r24, r24
    292a:	90 e0       	ldi	r25, 0x00	; 0
    292c:	00 97       	sbiw	r24, 0x00	; 0
    292e:	21 f0       	breq	.+8      	; 0x2938 <Gpio_LowerNibbleDirection+0x48>
    2930:	8f 3f       	cpi	r24, 0xFF	; 255
    2932:	91 05       	cpc	r25, r1
    2934:	59 f0       	breq	.+22     	; 0x294c <Gpio_LowerNibbleDirection+0x5c>
				case SET_OUT :
				DDR_A |= 0x0f;
				break;
			}
		}
		break;
    2936:	6f c0       	rjmp	.+222    	; 0x2a16 <Gpio_LowerNibbleDirection+0x126>
		case MYPORTA :
		{
			switch(direction)
			{
				case SET_IN :
				DDR_A &= 0xf0;
    2938:	8a e3       	ldi	r24, 0x3A	; 58
    293a:	90 e0       	ldi	r25, 0x00	; 0
    293c:	2a e3       	ldi	r18, 0x3A	; 58
    293e:	30 e0       	ldi	r19, 0x00	; 0
    2940:	f9 01       	movw	r30, r18
    2942:	20 81       	ld	r18, Z
    2944:	20 7f       	andi	r18, 0xF0	; 240
    2946:	fc 01       	movw	r30, r24
    2948:	20 83       	st	Z, r18
				break;
    294a:	0a c0       	rjmp	.+20     	; 0x2960 <Gpio_LowerNibbleDirection+0x70>
				case SET_OUT :
				DDR_A |= 0x0f;
    294c:	8a e3       	ldi	r24, 0x3A	; 58
    294e:	90 e0       	ldi	r25, 0x00	; 0
    2950:	2a e3       	ldi	r18, 0x3A	; 58
    2952:	30 e0       	ldi	r19, 0x00	; 0
    2954:	f9 01       	movw	r30, r18
    2956:	20 81       	ld	r18, Z
    2958:	2f 60       	ori	r18, 0x0F	; 15
    295a:	fc 01       	movw	r30, r24
    295c:	20 83       	st	Z, r18
				break;
    295e:	00 00       	nop
			}
		}
		break;
    2960:	5a c0       	rjmp	.+180    	; 0x2a16 <Gpio_LowerNibbleDirection+0x126>
		case MYPORTB :
		{
			switch(direction)
    2962:	8a 81       	ldd	r24, Y+2	; 0x02
    2964:	88 2f       	mov	r24, r24
    2966:	90 e0       	ldi	r25, 0x00	; 0
    2968:	00 97       	sbiw	r24, 0x00	; 0
    296a:	21 f0       	breq	.+8      	; 0x2974 <Gpio_LowerNibbleDirection+0x84>
    296c:	8f 3f       	cpi	r24, 0xFF	; 255
    296e:	91 05       	cpc	r25, r1
    2970:	59 f0       	breq	.+22     	; 0x2988 <Gpio_LowerNibbleDirection+0x98>
				case SET_OUT :
				DDR_B |= 0x0f;
				break;
			}
		}
		break;
    2972:	51 c0       	rjmp	.+162    	; 0x2a16 <Gpio_LowerNibbleDirection+0x126>
		case MYPORTB :
		{
			switch(direction)
			{
				case SET_IN :
				DDR_B &= 0xf0;
    2974:	87 e3       	ldi	r24, 0x37	; 55
    2976:	90 e0       	ldi	r25, 0x00	; 0
    2978:	27 e3       	ldi	r18, 0x37	; 55
    297a:	30 e0       	ldi	r19, 0x00	; 0
    297c:	f9 01       	movw	r30, r18
    297e:	20 81       	ld	r18, Z
    2980:	20 7f       	andi	r18, 0xF0	; 240
    2982:	fc 01       	movw	r30, r24
    2984:	20 83       	st	Z, r18
				break;
    2986:	0a c0       	rjmp	.+20     	; 0x299c <Gpio_LowerNibbleDirection+0xac>
				case SET_OUT :
				DDR_B |= 0x0f;
    2988:	87 e3       	ldi	r24, 0x37	; 55
    298a:	90 e0       	ldi	r25, 0x00	; 0
    298c:	27 e3       	ldi	r18, 0x37	; 55
    298e:	30 e0       	ldi	r19, 0x00	; 0
    2990:	f9 01       	movw	r30, r18
    2992:	20 81       	ld	r18, Z
    2994:	2f 60       	ori	r18, 0x0F	; 15
    2996:	fc 01       	movw	r30, r24
    2998:	20 83       	st	Z, r18
				break;
    299a:	00 00       	nop
			}
		}
		break;
    299c:	3c c0       	rjmp	.+120    	; 0x2a16 <Gpio_LowerNibbleDirection+0x126>
		case MYPORTC :
		{
			switch(direction)
    299e:	8a 81       	ldd	r24, Y+2	; 0x02
    29a0:	88 2f       	mov	r24, r24
    29a2:	90 e0       	ldi	r25, 0x00	; 0
    29a4:	00 97       	sbiw	r24, 0x00	; 0
    29a6:	21 f0       	breq	.+8      	; 0x29b0 <Gpio_LowerNibbleDirection+0xc0>
    29a8:	8f 3f       	cpi	r24, 0xFF	; 255
    29aa:	91 05       	cpc	r25, r1
    29ac:	59 f0       	breq	.+22     	; 0x29c4 <Gpio_LowerNibbleDirection+0xd4>
				case SET_OUT :
				DDR_C |= 0x0f;
				break;
			}
		}
		break;
    29ae:	33 c0       	rjmp	.+102    	; 0x2a16 <Gpio_LowerNibbleDirection+0x126>
		case MYPORTC :
		{
			switch(direction)
			{
				case SET_IN :
				DDR_C &= 0xf0;
    29b0:	84 e3       	ldi	r24, 0x34	; 52
    29b2:	90 e0       	ldi	r25, 0x00	; 0
    29b4:	24 e3       	ldi	r18, 0x34	; 52
    29b6:	30 e0       	ldi	r19, 0x00	; 0
    29b8:	f9 01       	movw	r30, r18
    29ba:	20 81       	ld	r18, Z
    29bc:	20 7f       	andi	r18, 0xF0	; 240
    29be:	fc 01       	movw	r30, r24
    29c0:	20 83       	st	Z, r18
				break;
    29c2:	0a c0       	rjmp	.+20     	; 0x29d8 <Gpio_LowerNibbleDirection+0xe8>
				case SET_OUT :
				DDR_C |= 0x0f;
    29c4:	84 e3       	ldi	r24, 0x34	; 52
    29c6:	90 e0       	ldi	r25, 0x00	; 0
    29c8:	24 e3       	ldi	r18, 0x34	; 52
    29ca:	30 e0       	ldi	r19, 0x00	; 0
    29cc:	f9 01       	movw	r30, r18
    29ce:	20 81       	ld	r18, Z
    29d0:	2f 60       	ori	r18, 0x0F	; 15
    29d2:	fc 01       	movw	r30, r24
    29d4:	20 83       	st	Z, r18
				break;
    29d6:	00 00       	nop
			}
		}
		break;
    29d8:	1e c0       	rjmp	.+60     	; 0x2a16 <Gpio_LowerNibbleDirection+0x126>
		case MYPORTD :
		{
			switch(direction)
    29da:	8a 81       	ldd	r24, Y+2	; 0x02
    29dc:	88 2f       	mov	r24, r24
    29de:	90 e0       	ldi	r25, 0x00	; 0
    29e0:	00 97       	sbiw	r24, 0x00	; 0
    29e2:	21 f0       	breq	.+8      	; 0x29ec <Gpio_LowerNibbleDirection+0xfc>
    29e4:	8f 3f       	cpi	r24, 0xFF	; 255
    29e6:	91 05       	cpc	r25, r1
    29e8:	59 f0       	breq	.+22     	; 0x2a00 <Gpio_LowerNibbleDirection+0x110>
				case SET_OUT :
				DDR_D |= 0x0f;
				break;
			}
		}
		break;
    29ea:	14 c0       	rjmp	.+40     	; 0x2a14 <Gpio_LowerNibbleDirection+0x124>
		case MYPORTD :
		{
			switch(direction)
			{
				case SET_IN :
				DDR_D &= 0xf0;
    29ec:	81 e3       	ldi	r24, 0x31	; 49
    29ee:	90 e0       	ldi	r25, 0x00	; 0
    29f0:	21 e3       	ldi	r18, 0x31	; 49
    29f2:	30 e0       	ldi	r19, 0x00	; 0
    29f4:	f9 01       	movw	r30, r18
    29f6:	20 81       	ld	r18, Z
    29f8:	20 7f       	andi	r18, 0xF0	; 240
    29fa:	fc 01       	movw	r30, r24
    29fc:	20 83       	st	Z, r18
				break;
    29fe:	0a c0       	rjmp	.+20     	; 0x2a14 <Gpio_LowerNibbleDirection+0x124>
				case SET_OUT :
				DDR_D |= 0x0f;
    2a00:	81 e3       	ldi	r24, 0x31	; 49
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	21 e3       	ldi	r18, 0x31	; 49
    2a06:	30 e0       	ldi	r19, 0x00	; 0
    2a08:	f9 01       	movw	r30, r18
    2a0a:	20 81       	ld	r18, Z
    2a0c:	2f 60       	ori	r18, 0x0F	; 15
    2a0e:	fc 01       	movw	r30, r24
    2a10:	20 83       	st	Z, r18
				break;
    2a12:	00 00       	nop
			}
		}
		break;
    2a14:	00 00       	nop
	}
}
    2a16:	00 00       	nop
    2a18:	0f 90       	pop	r0
    2a1a:	0f 90       	pop	r0
    2a1c:	df 91       	pop	r29
    2a1e:	cf 91       	pop	r28
    2a20:	08 95       	ret

00002a22 <Gpio_LowerNibbleWrite>:
 * @param port : the port that includes the LowerNibble {MYPORTA,MYPORTB,MYPORTC,MYPORTD}
 * @param value : The value of the LowerNibble
 * Return : void
 */
void Gpio_LowerNibbleWrite(uint8 port, uint8 value)
{
    2a22:	cf 93       	push	r28
    2a24:	df 93       	push	r29
    2a26:	00 d0       	rcall	.+0      	; 0x2a28 <Gpio_LowerNibbleWrite+0x6>
    2a28:	cd b7       	in	r28, 0x3d	; 61
    2a2a:	de b7       	in	r29, 0x3e	; 62
    2a2c:	89 83       	std	Y+1, r24	; 0x01
    2a2e:	6a 83       	std	Y+2, r22	; 0x02
	switch(port)
    2a30:	89 81       	ldd	r24, Y+1	; 0x01
    2a32:	88 2f       	mov	r24, r24
    2a34:	90 e0       	ldi	r25, 0x00	; 0
    2a36:	81 30       	cpi	r24, 0x01	; 1
    2a38:	91 05       	cpc	r25, r1
    2a3a:	d1 f0       	breq	.+52     	; 0x2a70 <Gpio_LowerNibbleWrite+0x4e>
    2a3c:	82 30       	cpi	r24, 0x02	; 2
    2a3e:	91 05       	cpc	r25, r1
    2a40:	1c f4       	brge	.+6      	; 0x2a48 <Gpio_LowerNibbleWrite+0x26>
    2a42:	89 2b       	or	r24, r25
    2a44:	39 f0       	breq	.+14     	; 0x2a54 <Gpio_LowerNibbleWrite+0x32>
		break;
		case MYPORTD :
		PORT_D = (PORT_D & 0xf0) | (value & 0x0f);
		break;
	}
}
    2a46:	3e c0       	rjmp	.+124    	; 0x2ac4 <Gpio_LowerNibbleWrite+0xa2>
 * @param value : The value of the LowerNibble
 * Return : void
 */
void Gpio_LowerNibbleWrite(uint8 port, uint8 value)
{
	switch(port)
    2a48:	82 30       	cpi	r24, 0x02	; 2
    2a4a:	91 05       	cpc	r25, r1
    2a4c:	f9 f0       	breq	.+62     	; 0x2a8c <Gpio_LowerNibbleWrite+0x6a>
    2a4e:	03 97       	sbiw	r24, 0x03	; 3
    2a50:	59 f1       	breq	.+86     	; 0x2aa8 <Gpio_LowerNibbleWrite+0x86>
		break;
		case MYPORTD :
		PORT_D = (PORT_D & 0xf0) | (value & 0x0f);
		break;
	}
}
    2a52:	38 c0       	rjmp	.+112    	; 0x2ac4 <Gpio_LowerNibbleWrite+0xa2>
void Gpio_LowerNibbleWrite(uint8 port, uint8 value)
{
	switch(port)
	{
		case MYPORTA :
		PORT_A = (PORT_A & 0xf0) | (value & 0x0f);
    2a54:	8b e3       	ldi	r24, 0x3B	; 59
    2a56:	90 e0       	ldi	r25, 0x00	; 0
    2a58:	2b e3       	ldi	r18, 0x3B	; 59
    2a5a:	30 e0       	ldi	r19, 0x00	; 0
    2a5c:	f9 01       	movw	r30, r18
    2a5e:	20 81       	ld	r18, Z
    2a60:	32 2f       	mov	r19, r18
    2a62:	30 7f       	andi	r19, 0xF0	; 240
    2a64:	2a 81       	ldd	r18, Y+2	; 0x02
    2a66:	2f 70       	andi	r18, 0x0F	; 15
    2a68:	23 2b       	or	r18, r19
    2a6a:	fc 01       	movw	r30, r24
    2a6c:	20 83       	st	Z, r18
		break;
    2a6e:	2a c0       	rjmp	.+84     	; 0x2ac4 <Gpio_LowerNibbleWrite+0xa2>
		case MYPORTB :
		PORT_B = (PORT_B & 0xf0) | (value & 0x0f);
    2a70:	88 e3       	ldi	r24, 0x38	; 56
    2a72:	90 e0       	ldi	r25, 0x00	; 0
    2a74:	28 e3       	ldi	r18, 0x38	; 56
    2a76:	30 e0       	ldi	r19, 0x00	; 0
    2a78:	f9 01       	movw	r30, r18
    2a7a:	20 81       	ld	r18, Z
    2a7c:	32 2f       	mov	r19, r18
    2a7e:	30 7f       	andi	r19, 0xF0	; 240
    2a80:	2a 81       	ldd	r18, Y+2	; 0x02
    2a82:	2f 70       	andi	r18, 0x0F	; 15
    2a84:	23 2b       	or	r18, r19
    2a86:	fc 01       	movw	r30, r24
    2a88:	20 83       	st	Z, r18
		break;
    2a8a:	1c c0       	rjmp	.+56     	; 0x2ac4 <Gpio_LowerNibbleWrite+0xa2>
		case MYPORTC :
		PORT_C = (PORT_C & 0xf0) | (value & 0x0f);
    2a8c:	85 e3       	ldi	r24, 0x35	; 53
    2a8e:	90 e0       	ldi	r25, 0x00	; 0
    2a90:	25 e3       	ldi	r18, 0x35	; 53
    2a92:	30 e0       	ldi	r19, 0x00	; 0
    2a94:	f9 01       	movw	r30, r18
    2a96:	20 81       	ld	r18, Z
    2a98:	32 2f       	mov	r19, r18
    2a9a:	30 7f       	andi	r19, 0xF0	; 240
    2a9c:	2a 81       	ldd	r18, Y+2	; 0x02
    2a9e:	2f 70       	andi	r18, 0x0F	; 15
    2aa0:	23 2b       	or	r18, r19
    2aa2:	fc 01       	movw	r30, r24
    2aa4:	20 83       	st	Z, r18
		break;
    2aa6:	0e c0       	rjmp	.+28     	; 0x2ac4 <Gpio_LowerNibbleWrite+0xa2>
		case MYPORTD :
		PORT_D = (PORT_D & 0xf0) | (value & 0x0f);
    2aa8:	82 e3       	ldi	r24, 0x32	; 50
    2aaa:	90 e0       	ldi	r25, 0x00	; 0
    2aac:	22 e3       	ldi	r18, 0x32	; 50
    2aae:	30 e0       	ldi	r19, 0x00	; 0
    2ab0:	f9 01       	movw	r30, r18
    2ab2:	20 81       	ld	r18, Z
    2ab4:	32 2f       	mov	r19, r18
    2ab6:	30 7f       	andi	r19, 0xF0	; 240
    2ab8:	2a 81       	ldd	r18, Y+2	; 0x02
    2aba:	2f 70       	andi	r18, 0x0F	; 15
    2abc:	23 2b       	or	r18, r19
    2abe:	fc 01       	movw	r30, r24
    2ac0:	20 83       	st	Z, r18
		break;
    2ac2:	00 00       	nop
	}
}
    2ac4:	00 00       	nop
    2ac6:	0f 90       	pop	r0
    2ac8:	0f 90       	pop	r0
    2aca:	df 91       	pop	r29
    2acc:	cf 91       	pop	r28
    2ace:	08 95       	ret

00002ad0 <_exit>:
    2ad0:	f8 94       	cli

00002ad2 <__stop_program>:
    2ad2:	ff cf       	rjmp	.-2      	; 0x2ad2 <__stop_program>
