
Sprint1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b56  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000068  00800060  00002b56  00002bea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000663  008000c8  008000c8  00002c52  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002c52  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002c84  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000490  00000000  00000000  00002cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000340b  00000000  00000000  00003150  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000107c  00000000  00000000  0000655b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000035ae  00000000  00000000  000075d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000f50  00000000  00000000  0000ab88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001864  00000000  00000000  0000bad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001f71  00000000  00000000  0000d33c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003d0  00000000  00000000  0000f2ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 9e 0b 	jmp	0x173c	; 0x173c <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e5       	ldi	r30, 0x56	; 86
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a8 3c       	cpi	r26, 0xC8	; 200
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	27 e0       	ldi	r18, 0x07	; 7
      78:	a8 ec       	ldi	r26, 0xC8	; 200
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 32       	cpi	r26, 0x2B	; 43
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <main>
      8a:	0c 94 a9 15 	jmp	0x2b52	; 0x2b52 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Init_Task>:
 * Description: This Task is used to Init the System
 * @param port : input parameter to the Task
 * Return : void
 */
void Init_Task(void* pvParameters)
{
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	00 d0       	rcall	.+0      	; 0x98 <Init_Task+0x6>
      98:	cd b7       	in	r28, 0x3d	; 61
      9a:	de b7       	in	r29, 0x3e	; 62
      9c:	9a 83       	std	Y+2, r25	; 0x02
      9e:	89 83       	std	Y+1, r24	; 0x01
	/* AtMaskCarriert to create the event group. */
    xCreatedEventGroup = xEventGroupCreate();
      a0:	0e 94 cd 04 	call	0x99a	; 0x99a <xEventGroupCreate>
      a4:	90 93 d1 00 	sts	0x00D1, r25	; 0x8000d1 <xCreatedEventGroup+0x1>
      a8:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <xCreatedEventGroup>
    }
	
	while(TRUE)
	{
	/* Suspend all other tasks before initializing */
 	vTaskSuspend(Display_Handle);
      ac:	80 91 ca 00 	lds	r24, 0x00CA	; 0x8000ca <Display_Handle>
      b0:	90 91 cb 00 	lds	r25, 0x00CB	; 0x8000cb <Display_Handle+0x1>
      b4:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <vTaskSuspend>
	vTaskSuspend(PB0_Handle);
      b8:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <PB0_Handle>
      bc:	90 91 cd 00 	lds	r25, 0x00CD	; 0x8000cd <PB0_Handle+0x1>
      c0:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <vTaskSuspend>
	vTaskSuspend(PB1_Handle);
      c4:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <PB1_Handle>
      c8:	90 91 cf 00 	lds	r25, 0x00CF	; 0x8000cf <PB1_Handle+0x1>
      cc:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <vTaskSuspend>
	
	/* initializing the Leds */
	Led_Init(LED0);
      d0:	80 e1       	ldi	r24, 0x10	; 16
      d2:	0e 94 a2 03 	call	0x744	; 0x744 <Led_Init>
	Led_Init(LED1);
      d6:	80 e2       	ldi	r24, 0x20	; 32
      d8:	0e 94 a2 03 	call	0x744	; 0x744 <Led_Init>
	Led_Init(LED2);
      dc:	80 e4       	ldi	r24, 0x40	; 64
      de:	0e 94 a2 03 	call	0x744	; 0x744 <Led_Init>
	
	/* initializing the pushButtons */
	pushButton_Init(PUSH_BUTTON0);
      e2:	80 e1       	ldi	r24, 0x10	; 16
      e4:	90 e0       	ldi	r25, 0x00	; 0
      e6:	0e 94 58 04 	call	0x8b0	; 0x8b0 <pushButton_Init>
	pushButton_Init(PUSH_BUTTON1);
      ea:	84 e0       	ldi	r24, 0x04	; 4
      ec:	90 e0       	ldi	r25, 0x00	; 0
      ee:	0e 94 58 04 	call	0x8b0	; 0x8b0 <pushButton_Init>
	
	/* initializing the Seven Segment */
	SSD_Init_BCD(ssd1);
      f2:	80 e0       	ldi	r24, 0x00	; 0
      f4:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <SSD_Init_BCD>
	
	/* initializing the LCD */
	LCD_Init();
      f8:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_Init>

	/* Resume all other tasks before initializing */
	vTaskResume(Display_Handle);
      fc:	80 91 ca 00 	lds	r24, 0x00CA	; 0x8000ca <Display_Handle>
     100:	90 91 cb 00 	lds	r25, 0x00CB	; 0x8000cb <Display_Handle+0x1>
     104:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <vTaskResume>
	vTaskResume(PB0_Handle);
     108:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <PB0_Handle>
     10c:	90 91 cd 00 	lds	r25, 0x00CD	; 0x8000cd <PB0_Handle+0x1>
     110:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <vTaskResume>
	vTaskResume(PB1_Handle);
     114:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <PB1_Handle>
     118:	90 91 cf 00 	lds	r25, 0x00CF	; 0x8000cf <PB1_Handle+0x1>
     11c:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <vTaskResume>

	/* Suspend the Init Task */
	vTaskSuspend(Init_Task_Handle);
     120:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__data_end>
     124:	90 91 c9 00 	lds	r25, 0x00C9	; 0x8000c9 <__data_end+0x1>
     128:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <vTaskSuspend>
	}
     12c:	bf cf       	rjmp	.-130    	; 0xac <Init_Task+0x1a>

0000012e <Display_Task>:
 * Description: This Task is used to Display String of Characters on the LCD
 * @param port : input parameter to the Task
 * Return : void
 */
void Display_Task(void* pvParameters)
{
     12e:	0f 93       	push	r16
     130:	1f 93       	push	r17
     132:	cf 93       	push	r28
     134:	df 93       	push	r29
     136:	cd b7       	in	r28, 0x3d	; 61
     138:	de b7       	in	r29, 0x3e	; 62
     13a:	65 97       	sbiw	r28, 0x15	; 21
     13c:	0f b6       	in	r0, 0x3f	; 63
     13e:	f8 94       	cli
     140:	de bf       	out	0x3e, r29	; 62
     142:	0f be       	out	0x3f, r0	; 63
     144:	cd bf       	out	0x3d, r28	; 61
     146:	9d 8b       	std	Y+21, r25	; 0x15
     148:	8c 8b       	std	Y+20, r24	; 0x14
	uint8 row = FIRST_ROW,col = FIRST_COLUMN;
     14a:	1f 82       	std	Y+7, r1	; 0x07
     14c:	19 82       	std	Y+1, r1	; 0x01
	uint8 Number_Passward[ARRAY_SIZE]		= {1,2,3,3,2};
     14e:	85 e0       	ldi	r24, 0x05	; 5
     150:	ea e8       	ldi	r30, 0x8A	; 138
     152:	f0 e0       	ldi	r31, 0x00	; 0
     154:	de 01       	movw	r26, r28
     156:	1a 96       	adiw	r26, 0x0a	; 10
     158:	01 90       	ld	r0, Z+
     15a:	0d 92       	st	X+, r0
     15c:	8a 95       	dec	r24
     15e:	e1 f7       	brne	.-8      	; 0x158 <Display_Task+0x2a>
	uint8 Number_LCD[ARRAY_SIZE]			= {INITIAL_ZERO};
     160:	25 e0       	ldi	r18, 0x05	; 5
     162:	ce 01       	movw	r24, r28
     164:	0f 96       	adiw	r24, 0x0f	; 15
     166:	fc 01       	movw	r30, r24
     168:	32 2f       	mov	r19, r18
     16a:	11 92       	st	Z+, r1
     16c:	3a 95       	dec	r19
     16e:	e9 f7       	brne	.-6      	; 0x16a <Display_Task+0x3c>
	uint8 Number_Index						= INITIAL_ZERO;
     170:	1a 82       	std	Y+2, r1	; 0x02
	uint8 Number_SSD						= INITIAL_ZERO;
     172:	1b 82       	std	Y+3, r1	; 0x03
	uint8 Success_Password					= FALSE;	
     174:	1c 82       	std	Y+4, r1	; 0x04
	EventBits_t uxBits						= FALSE;
     176:	1e 82       	std	Y+6, r1	; 0x06
     178:	1d 82       	std	Y+5, r1	; 0x05
	const TickType_t xTicksToWait			= TICK_TO_WAIT / portTICK_PERIOD_MS;
     17a:	84 e6       	ldi	r24, 0x64	; 100
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	99 87       	std	Y+9, r25	; 0x09
     180:	88 87       	std	Y+8, r24	; 0x08

	while(TRUE)
	{
		/* Wait a maximum of 100ms for either bit 0 or bit 4 to be set within
		the event group.  Clear the bits before exiting. */
		uxBits = xEventGroupWaitBits(
     182:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <xCreatedEventGroup>
     186:	90 91 d1 00 	lds	r25, 0x00D1	; 0x8000d1 <xCreatedEventGroup+0x1>
     18a:	28 85       	ldd	r18, Y+8	; 0x08
     18c:	39 85       	ldd	r19, Y+9	; 0x09
     18e:	89 01       	movw	r16, r18
     190:	20 e0       	ldi	r18, 0x00	; 0
     192:	41 e0       	ldi	r20, 0x01	; 1
     194:	67 e0       	ldi	r22, 0x07	; 7
     196:	70 e0       	ldi	r23, 0x00	; 0
     198:	0e 94 ed 04 	call	0x9da	; 0x9da <xEventGroupWaitBits>
     19c:	9e 83       	std	Y+6, r25	; 0x06
     19e:	8d 83       	std	Y+5, r24	; 0x05
				( BIT0 | BIT1 | BIT2 ),	/* The bits within the event group to wait for. */
				pdTRUE,					/* BITs should be cleared before returning. */
				pdFALSE,			    /* Don't wait for both bits, either bit will do. */
				xTicksToWait );		    /* Wait a maximum of 100ms for either bit to be set. */
		
		if( ( uxBits & ( BIT0 | BIT1 ) ) == ( BIT0 | BIT1 ) )
     1a0:	8d 81       	ldd	r24, Y+5	; 0x05
     1a2:	9e 81       	ldd	r25, Y+6	; 0x06
     1a4:	83 70       	andi	r24, 0x03	; 3
     1a6:	99 27       	eor	r25, r25
     1a8:	03 97       	sbiw	r24, 0x03	; 3
     1aa:	41 f5       	brne	.+80     	; 0x1fc <Display_Task+0xce>
		{
			/* Display the Number to the LCD */
			LCD_GotoRowColumn(row,col++);
     1ac:	89 81       	ldd	r24, Y+1	; 0x01
     1ae:	91 e0       	ldi	r25, 0x01	; 1
     1b0:	98 0f       	add	r25, r24
     1b2:	99 83       	std	Y+1, r25	; 0x01
     1b4:	68 2f       	mov	r22, r24
     1b6:	8f 81       	ldd	r24, Y+7	; 0x07
     1b8:	0e 94 8b 03 	call	0x716	; 0x716 <LCD_GotoRowColumn>
			LCD_DisplayChar(Number_SSD+NUMBER_TO_CHAR);
     1bc:	8b 81       	ldd	r24, Y+3	; 0x03
     1be:	80 5d       	subi	r24, 0xD0	; 208
     1c0:	0e 94 db 02 	call	0x5b6	; 0x5b6 <LCD_DisplayChar>
			
			/* Set the Number to the Array to check later */
			Number_LCD[Number_Index] = Number_SSD;
     1c4:	8a 81       	ldd	r24, Y+2	; 0x02
     1c6:	88 2f       	mov	r24, r24
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	9e 01       	movw	r18, r28
     1cc:	21 5f       	subi	r18, 0xF1	; 241
     1ce:	3f 4f       	sbci	r19, 0xFF	; 255
     1d0:	82 0f       	add	r24, r18
     1d2:	93 1f       	adc	r25, r19
     1d4:	2b 81       	ldd	r18, Y+3	; 0x03
     1d6:	fc 01       	movw	r30, r24
     1d8:	20 83       	st	Z, r18
			Number_Index++;
     1da:	8a 81       	ldd	r24, Y+2	; 0x02
     1dc:	8f 5f       	subi	r24, 0xFF	; 255
     1de:	8a 83       	std	Y+2, r24	; 0x02
			
			/* Display the Number Zero to the SSD */
			Number_SSD = INITIAL_ZERO;
     1e0:	1b 82       	std	Y+3, r1	; 0x03
			SSD_Display_BCD(Number_SSD);
     1e2:	8b 81       	ldd	r24, Y+3	; 0x03
     1e4:	0e 94 ba 04 	call	0x974	; 0x974 <SSD_Display_BCD>
			
			/* Clear the Bits 0 and 1 */
			uxBits = xEventGroupClearBits(
     1e8:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <xCreatedEventGroup>
     1ec:	90 91 d1 00 	lds	r25, 0x00D1	; 0x8000d1 <xCreatedEventGroup+0x1>
     1f0:	63 e0       	ldi	r22, 0x03	; 3
     1f2:	70 e0       	ldi	r23, 0x00	; 0
     1f4:	0e 94 b6 05 	call	0xb6c	; 0xb6c <xEventGroupClearBits>
     1f8:	9e 83       	std	Y+6, r25	; 0x06
     1fa:	8d 83       	std	Y+5, r24	; 0x05
			xCreatedEventGroup,			/* The event group being updated. */
			( BIT0 | BIT1 ));			/* The bits being cleared. */
		}
		
		if( ( uxBits & BIT0 ) == BIT0)
     1fc:	8d 81       	ldd	r24, Y+5	; 0x05
     1fe:	9e 81       	ldd	r25, Y+6	; 0x06
     200:	81 70       	andi	r24, 0x01	; 1
     202:	99 27       	eor	r25, r25
     204:	89 2b       	or	r24, r25
     206:	c1 f0       	breq	.+48     	; 0x238 <Display_Task+0x10a>
		{
			/* xEventGroupWaitBits() returned because just BIT_0 was set. */
			Number_SSD++;
     208:	8b 81       	ldd	r24, Y+3	; 0x03
     20a:	8f 5f       	subi	r24, 0xFF	; 255
     20c:	8b 83       	std	Y+3, r24	; 0x03
			if (Number_SSD < MAX_SSD_NUMBER)
     20e:	8b 81       	ldd	r24, Y+3	; 0x03
     210:	8a 30       	cpi	r24, 0x0A	; 10
     212:	20 f4       	brcc	.+8      	; 0x21c <Display_Task+0xee>
			{
				SSD_Display_BCD(Number_SSD);
     214:	8b 81       	ldd	r24, Y+3	; 0x03
     216:	0e 94 ba 04 	call	0x974	; 0x974 <SSD_Display_BCD>
     21a:	04 c0       	rjmp	.+8      	; 0x224 <Display_Task+0xf6>
			}
			else
			{
				Number_SSD = INITIAL_ZERO;
     21c:	1b 82       	std	Y+3, r1	; 0x03
				SSD_Display_BCD(Number_SSD);
     21e:	8b 81       	ldd	r24, Y+3	; 0x03
     220:	0e 94 ba 04 	call	0x974	; 0x974 <SSD_Display_BCD>
			}
			/* Clear bit 0 and bit 4 in xEventGroup. */
			uxBits = xEventGroupClearBits(
     224:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <xCreatedEventGroup>
     228:	90 91 d1 00 	lds	r25, 0x00D1	; 0x8000d1 <xCreatedEventGroup+0x1>
     22c:	61 e0       	ldi	r22, 0x01	; 1
     22e:	70 e0       	ldi	r23, 0x00	; 0
     230:	0e 94 b6 05 	call	0xb6c	; 0xb6c <xEventGroupClearBits>
     234:	9e 83       	std	Y+6, r25	; 0x06
     236:	8d 83       	std	Y+5, r24	; 0x05
			xCreatedEventGroup,  /* The event group being updated. */
			BIT0);/* The bits being cleared. */
		}
				
		if( ( uxBits & BIT2 ) == BIT2)
     238:	8d 81       	ldd	r24, Y+5	; 0x05
     23a:	9e 81       	ldd	r25, Y+6	; 0x06
     23c:	84 70       	andi	r24, 0x04	; 4
     23e:	99 27       	eor	r25, r25
     240:	89 2b       	or	r24, r25
     242:	09 f4       	brne	.+2      	; 0x246 <Display_Task+0x118>
     244:	5b c0       	rjmp	.+182    	; 0x2fc <Display_Task+0x1ce>
		{
			for(Number_Index = INITIAL_ZERO ; Number_Index < ARRAY_SIZE ; Number_Index++)
     246:	1a 82       	std	Y+2, r1	; 0x02
     248:	1e c0       	rjmp	.+60     	; 0x286 <Display_Task+0x158>
			{
				if (Number_LCD[Number_Index] == Number_Passward[Number_Index])
     24a:	8a 81       	ldd	r24, Y+2	; 0x02
     24c:	88 2f       	mov	r24, r24
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	9e 01       	movw	r18, r28
     252:	21 5f       	subi	r18, 0xF1	; 241
     254:	3f 4f       	sbci	r19, 0xFF	; 255
     256:	82 0f       	add	r24, r18
     258:	93 1f       	adc	r25, r19
     25a:	fc 01       	movw	r30, r24
     25c:	40 81       	ld	r20, Z
     25e:	8a 81       	ldd	r24, Y+2	; 0x02
     260:	88 2f       	mov	r24, r24
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	9e 01       	movw	r18, r28
     266:	26 5f       	subi	r18, 0xF6	; 246
     268:	3f 4f       	sbci	r19, 0xFF	; 255
     26a:	82 0f       	add	r24, r18
     26c:	93 1f       	adc	r25, r19
     26e:	fc 01       	movw	r30, r24
     270:	80 81       	ld	r24, Z
     272:	48 17       	cp	r20, r24
     274:	19 f4       	brne	.+6      	; 0x27c <Display_Task+0x14e>
				{
					Success_Password = TRUE;
     276:	81 e0       	ldi	r24, 0x01	; 1
     278:	8c 83       	std	Y+4, r24	; 0x04
     27a:	02 c0       	rjmp	.+4      	; 0x280 <Display_Task+0x152>
				}
				else
				{
					Success_Password = FALSE;
     27c:	1c 82       	std	Y+4, r1	; 0x04
					break;
     27e:	06 c0       	rjmp	.+12     	; 0x28c <Display_Task+0x15e>
			BIT0);/* The bits being cleared. */
		}
				
		if( ( uxBits & BIT2 ) == BIT2)
		{
			for(Number_Index = INITIAL_ZERO ; Number_Index < ARRAY_SIZE ; Number_Index++)
     280:	8a 81       	ldd	r24, Y+2	; 0x02
     282:	8f 5f       	subi	r24, 0xFF	; 255
     284:	8a 83       	std	Y+2, r24	; 0x02
     286:	8a 81       	ldd	r24, Y+2	; 0x02
     288:	85 30       	cpi	r24, 0x05	; 5
     28a:	f8 f2       	brcs	.-66     	; 0x24a <Display_Task+0x11c>
				{
					Success_Password = FALSE;
					break;
				}
			}
			if (Success_Password)
     28c:	8c 81       	ldd	r24, Y+4	; 0x04
     28e:	88 23       	and	r24, r24
     290:	a9 f0       	breq	.+42     	; 0x2bc <Display_Task+0x18e>
			{
				LCD_GotoRowColumn(FIRST_ROW,FIRST_COLUMN);
     292:	60 e0       	ldi	r22, 0x00	; 0
     294:	80 e0       	ldi	r24, 0x00	; 0
     296:	0e 94 8b 03 	call	0x716	; 0x716 <LCD_GotoRowColumn>
				LCD_DisplayString("Correct Password!!!");
     29a:	80 e6       	ldi	r24, 0x60	; 96
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	0e 94 52 03 	call	0x6a4	; 0x6a4 <LCD_DisplayString>
				Led_On(LED0);
     2a2:	80 e1       	ldi	r24, 0x10	; 16
     2a4:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <Led_On>
				vTaskDelay(TASK_DELAY_CORRECT_ENTER_VALUE);
     2a8:	80 ed       	ldi	r24, 0xD0	; 208
     2aa:	97 e0       	ldi	r25, 0x07	; 7
     2ac:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <vTaskDelay>
				Led_Off(LED0);
     2b0:	80 e1       	ldi	r24, 0x10	; 16
     2b2:	0e 94 22 04 	call	0x844	; 0x844 <Led_Off>
				LCD_Clear();
     2b6:	0e 94 80 03 	call	0x700	; 0x700 <LCD_Clear>
     2ba:	14 c0       	rjmp	.+40     	; 0x2e4 <Display_Task+0x1b6>
			}
			else
			{
				LCD_GotoRowColumn(FIRST_ROW,FIRST_COLUMN);
     2bc:	60 e0       	ldi	r22, 0x00	; 0
     2be:	80 e0       	ldi	r24, 0x00	; 0
     2c0:	0e 94 8b 03 	call	0x716	; 0x716 <LCD_GotoRowColumn>
				LCD_DisplayString("Incorrect Password!!!");
     2c4:	84 e7       	ldi	r24, 0x74	; 116
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	0e 94 52 03 	call	0x6a4	; 0x6a4 <LCD_DisplayString>
				Led_On(LED1);
     2cc:	80 e2       	ldi	r24, 0x20	; 32
     2ce:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <Led_On>

				vTaskDelay(TASK_DELAY_INCORRECT_ENTER_VALUE);
     2d2:	88 eb       	ldi	r24, 0xB8	; 184
     2d4:	9b e0       	ldi	r25, 0x0B	; 11
     2d6:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <vTaskDelay>
				Led_Off(LED1);	
     2da:	80 e2       	ldi	r24, 0x20	; 32
     2dc:	0e 94 22 04 	call	0x844	; 0x844 <Led_Off>
				LCD_Clear();
     2e0:	0e 94 80 03 	call	0x700	; 0x700 <LCD_Clear>
			}
			
			uxBits = xEventGroupClearBits(
     2e4:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <xCreatedEventGroup>
     2e8:	90 91 d1 00 	lds	r25, 0x00D1	; 0x8000d1 <xCreatedEventGroup+0x1>
     2ec:	64 e0       	ldi	r22, 0x04	; 4
     2ee:	70 e0       	ldi	r23, 0x00	; 0
     2f0:	0e 94 b6 05 	call	0xb6c	; 0xb6c <xEventGroupClearBits>
     2f4:	9e 83       	std	Y+6, r25	; 0x06
     2f6:	8d 83       	std	Y+5, r24	; 0x05
			xCreatedEventGroup,		 /* The event group being updated. */
			BIT2);
			uxBits = FALSE;					/* The bits being cleared. */
     2f8:	1e 82       	std	Y+6, r1	; 0x06
     2fa:	1d 82       	std	Y+5, r1	; 0x05
		}
		else
		{
			//Do Nothing
		}
		uxBits = FALSE;
     2fc:	1e 82       	std	Y+6, r1	; 0x06
     2fe:	1d 82       	std	Y+5, r1	; 0x05
		vTaskDelay(TASK_DELAY_DISPLAY_VALUE);
     300:	88 ee       	ldi	r24, 0xE8	; 232
     302:	93 e0       	ldi	r25, 0x03	; 3
     304:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <vTaskDelay>
	}
     308:	3c cf       	rjmp	.-392    	; 0x182 <Display_Task+0x54>

0000030a <PB0_Task>:
 * Description: This Task is used to Check for the Switch 0 
 * @param port : input parameter to the Task 
 * Return : void
 */
void PB0_Task(void* pvParameters)
{	
     30a:	cf 93       	push	r28
     30c:	df 93       	push	r29
     30e:	00 d0       	rcall	.+0      	; 0x310 <PB0_Task+0x6>
     310:	00 d0       	rcall	.+0      	; 0x312 <PB0_Task+0x8>
     312:	1f 92       	push	r1
     314:	cd b7       	in	r28, 0x3d	; 61
     316:	de b7       	in	r29, 0x3e	; 62
     318:	9d 83       	std	Y+5, r25	; 0x05
     31a:	8c 83       	std	Y+4, r24	; 0x04
	EventBits_t uxBits = FALSE;
     31c:	1b 82       	std	Y+3, r1	; 0x03
     31e:	1a 82       	std	Y+2, r1	; 0x02
	uint8 MaskCarrier   = FALSE;
     320:	19 82       	std	Y+1, r1	; 0x01
	
	while(TRUE)
	{
		if(Gpio_PinRead(PUSH_BUTTON0_PORT,PUSH_BUTTON0_PIN))
     322:	64 e0       	ldi	r22, 0x04	; 4
     324:	82 e0       	ldi	r24, 0x02	; 2
     326:	0e 94 53 14 	call	0x28a6	; 0x28a6 <Gpio_PinRead>
     32a:	88 23       	and	r24, r24
     32c:	31 f1       	breq	.+76     	; 0x37a <PB0_Task+0x70>
		{
			Led_On(LED0);
     32e:	80 e1       	ldi	r24, 0x10	; 16
     330:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <Led_On>
			MaskCarrier |= BIT0;
     334:	89 81       	ldd	r24, Y+1	; 0x01
     336:	81 60       	ori	r24, 0x01	; 1
     338:	89 83       	std	Y+1, r24	; 0x01
			vTaskDelay(TASK_DELAY_LONG_PRESSING_VALUE);
     33a:	8c ed       	ldi	r24, 0xDC	; 220
     33c:	95 e0       	ldi	r25, 0x05	; 5
     33e:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <vTaskDelay>
			if(Gpio_PinRead(PUSH_BUTTON0_PORT,PUSH_BUTTON0_PIN))
     342:	64 e0       	ldi	r22, 0x04	; 4
     344:	82 e0       	ldi	r24, 0x02	; 2
     346:	0e 94 53 14 	call	0x28a6	; 0x28a6 <Gpio_PinRead>
     34a:	88 23       	and	r24, r24
     34c:	31 f0       	breq	.+12     	; 0x35a <PB0_Task+0x50>
			{
				Led_Off(LED0);
     34e:	80 e1       	ldi	r24, 0x10	; 16
     350:	0e 94 22 04 	call	0x844	; 0x844 <Led_Off>
				MaskCarrier |= BIT1;	
     354:	89 81       	ldd	r24, Y+1	; 0x01
     356:	82 60       	ori	r24, 0x02	; 2
     358:	89 83       	std	Y+1, r24	; 0x01
			}
			else
			{
				//Do Nothing
			}
			uxBits = xEventGroupSetBits(
     35a:	89 81       	ldd	r24, Y+1	; 0x01
     35c:	28 2f       	mov	r18, r24
     35e:	30 e0       	ldi	r19, 0x00	; 0
     360:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <xCreatedEventGroup>
     364:	90 91 d1 00 	lds	r25, 0x00D1	; 0x8000d1 <xCreatedEventGroup+0x1>
     368:	b9 01       	movw	r22, r18
     36a:	0e 94 ef 05 	call	0xbde	; 0xbde <xEventGroupSetBits>
     36e:	9b 83       	std	Y+3, r25	; 0x03
     370:	8a 83       	std	Y+2, r24	; 0x02
			xCreatedEventGroup,    /* The event group being updated. */
			MaskCarrier);/* The bits being set. */
			vTaskDelay(TASK_DELAY_PB0_VALUE);
     372:	8a ef       	ldi	r24, 0xFA	; 250
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <vTaskDelay>
		}
		MaskCarrier = FALSE;
     37a:	19 82       	std	Y+1, r1	; 0x01
		vTaskDelay(TASK_DELAY_PB0_VALUE);
     37c:	8a ef       	ldi	r24, 0xFA	; 250
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <vTaskDelay>
	}
     384:	ce cf       	rjmp	.-100    	; 0x322 <PB0_Task+0x18>

00000386 <PB1_Task>:
 * Description: This Task is used to Check for the Switch 1 
 * @param port : input parameter to the Task
 * Return : void
 */
void PB1_Task(void* pvParameters)
{	
     386:	cf 93       	push	r28
     388:	df 93       	push	r29
     38a:	00 d0       	rcall	.+0      	; 0x38c <PB1_Task+0x6>
     38c:	00 d0       	rcall	.+0      	; 0x38e <PB1_Task+0x8>
     38e:	1f 92       	push	r1
     390:	cd b7       	in	r28, 0x3d	; 61
     392:	de b7       	in	r29, 0x3e	; 62
     394:	9d 83       	std	Y+5, r25	; 0x05
     396:	8c 83       	std	Y+4, r24	; 0x04
	EventBits_t uxBits	= FALSE;
     398:	1b 82       	std	Y+3, r1	; 0x03
     39a:	1a 82       	std	Y+2, r1	; 0x02
	uint8 MaskCarrier   = FALSE;
     39c:	19 82       	std	Y+1, r1	; 0x01
	
	while(TRUE)
	{
		if (Gpio_PinRead(PUSH_BUTTON1_PORT,PUSH_BUTTON1_PIN))
     39e:	62 e0       	ldi	r22, 0x02	; 2
     3a0:	81 e0       	ldi	r24, 0x01	; 1
     3a2:	0e 94 53 14 	call	0x28a6	; 0x28a6 <Gpio_PinRead>
     3a6:	88 23       	and	r24, r24
     3a8:	69 f0       	breq	.+26     	; 0x3c4 <PB1_Task+0x3e>
		{
			MaskCarrier |= BIT2;
     3aa:	89 81       	ldd	r24, Y+1	; 0x01
     3ac:	84 60       	ori	r24, 0x04	; 4
     3ae:	89 83       	std	Y+1, r24	; 0x01
			uxBits = xEventGroupSetBits(
     3b0:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <xCreatedEventGroup>
     3b4:	90 91 d1 00 	lds	r25, 0x00D1	; 0x8000d1 <xCreatedEventGroup+0x1>
     3b8:	64 e0       	ldi	r22, 0x04	; 4
     3ba:	70 e0       	ldi	r23, 0x00	; 0
     3bc:	0e 94 ef 05 	call	0xbde	; 0xbde <xEventGroupSetBits>
     3c0:	9b 83       	std	Y+3, r25	; 0x03
     3c2:	8a 83       	std	Y+2, r24	; 0x02
		}
		else
		{
			// Do Nothing
		}
		MaskCarrier = FALSE;
     3c4:	19 82       	std	Y+1, r1	; 0x01
		vTaskDelay(TASK_DELAY_PB1_VALUE);
     3c6:	8a ef       	ldi	r24, 0xFA	; 250
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <vTaskDelay>
	}
     3ce:	e7 cf       	rjmp	.-50     	; 0x39e <PB1_Task+0x18>

000003d0 <main>:

/************************************************************************/
/*				      Main Function Implementation			            */
/************************************************************************/
int main(void)
{
     3d0:	ef 92       	push	r14
     3d2:	ff 92       	push	r15
     3d4:	0f 93       	push	r16
     3d6:	cf 93       	push	r28
     3d8:	df 93       	push	r29
     3da:	1f 92       	push	r1
     3dc:	cd b7       	in	r28, 0x3d	; 61
     3de:	de b7       	in	r29, 0x3e	; 62
	BaseType_t xReturned = FALSE;
     3e0:	19 82       	std	Y+1, r1	; 0x01

/******** Init Task ******************/
	xReturned = xTaskCreate(Init_Task, 
     3e2:	0f 2e       	mov	r0, r31
     3e4:	f8 ec       	ldi	r31, 0xC8	; 200
     3e6:	ef 2e       	mov	r14, r31
     3e8:	f0 e0       	ldi	r31, 0x00	; 0
     3ea:	ff 2e       	mov	r15, r31
     3ec:	f0 2d       	mov	r31, r0
     3ee:	04 e0       	ldi	r16, 0x04	; 4
     3f0:	20 e0       	ldi	r18, 0x00	; 0
     3f2:	30 e0       	ldi	r19, 0x00	; 0
     3f4:	44 e6       	ldi	r20, 0x64	; 100
     3f6:	50 e0       	ldi	r21, 0x00	; 0
     3f8:	6f e8       	ldi	r22, 0x8F	; 143
     3fa:	70 e0       	ldi	r23, 0x00	; 0
     3fc:	89 e4       	ldi	r24, 0x49	; 73
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	0e 94 a2 0b 	call	0x1744	; 0x1744 <xTaskCreate>
     404:	89 83       	std	Y+1, r24	; 0x01
	{
		 // Error Handling Code
	}

/******** LCD_DisplayTask ******************/
	xReturned = xTaskCreate(Display_Task,
     406:	0f 2e       	mov	r0, r31
     408:	fa ec       	ldi	r31, 0xCA	; 202
     40a:	ef 2e       	mov	r14, r31
     40c:	f0 e0       	ldi	r31, 0x00	; 0
     40e:	ff 2e       	mov	r15, r31
     410:	f0 2d       	mov	r31, r0
     412:	01 e0       	ldi	r16, 0x01	; 1
     414:	20 e0       	ldi	r18, 0x00	; 0
     416:	30 e0       	ldi	r19, 0x00	; 0
     418:	40 e9       	ldi	r20, 0x90	; 144
     41a:	51 e0       	ldi	r21, 0x01	; 1
     41c:	63 ea       	ldi	r22, 0xA3	; 163
     41e:	70 e0       	ldi	r23, 0x00	; 0
     420:	87 e9       	ldi	r24, 0x97	; 151
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	0e 94 a2 0b 	call	0x1744	; 0x1744 <xTaskCreate>
     428:	89 83       	std	Y+1, r24	; 0x01
	{
		// Error Handling Code
	}
	
/******** TaskB ******************/
	xReturned = xTaskCreate(PB0_Task,
     42a:	0f 2e       	mov	r0, r31
     42c:	fc ec       	ldi	r31, 0xCC	; 204
     42e:	ef 2e       	mov	r14, r31
     430:	f0 e0       	ldi	r31, 0x00	; 0
     432:	ff 2e       	mov	r15, r31
     434:	f0 2d       	mov	r31, r0
     436:	03 e0       	ldi	r16, 0x03	; 3
     438:	20 e0       	ldi	r18, 0x00	; 0
     43a:	30 e0       	ldi	r19, 0x00	; 0
     43c:	48 ec       	ldi	r20, 0xC8	; 200
     43e:	50 e0       	ldi	r21, 0x00	; 0
     440:	60 eb       	ldi	r22, 0xB0	; 176
     442:	70 e0       	ldi	r23, 0x00	; 0
     444:	85 e8       	ldi	r24, 0x85	; 133
     446:	91 e0       	ldi	r25, 0x01	; 1
     448:	0e 94 a2 0b 	call	0x1744	; 0x1744 <xTaskCreate>
     44c:	89 83       	std	Y+1, r24	; 0x01
	{
		// Error Handling Code
	}
	
/******** TaskB ******************/
	xReturned = xTaskCreate(PB1_Task,
     44e:	0f 2e       	mov	r0, r31
     450:	fe ec       	ldi	r31, 0xCE	; 206
     452:	ef 2e       	mov	r14, r31
     454:	f0 e0       	ldi	r31, 0x00	; 0
     456:	ff 2e       	mov	r15, r31
     458:	f0 2d       	mov	r31, r0
     45a:	03 e0       	ldi	r16, 0x03	; 3
     45c:	20 e0       	ldi	r18, 0x00	; 0
     45e:	30 e0       	ldi	r19, 0x00	; 0
     460:	48 ec       	ldi	r20, 0xC8	; 200
     462:	50 e0       	ldi	r21, 0x00	; 0
     464:	69 eb       	ldi	r22, 0xB9	; 185
     466:	70 e0       	ldi	r23, 0x00	; 0
     468:	83 ec       	ldi	r24, 0xC3	; 195
     46a:	91 e0       	ldi	r25, 0x01	; 1
     46c:	0e 94 a2 0b 	call	0x1744	; 0x1744 <xTaskCreate>
     470:	89 83       	std	Y+1, r24	; 0x01
	{
		// Error Handling Code
	}
		
/******* Start Scheduler *********/
	vTaskStartScheduler();
     472:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <vTaskStartScheduler>
     476:	80 e0       	ldi	r24, 0x00	; 0
     478:	90 e0       	ldi	r25, 0x00	; 0
}
     47a:	0f 90       	pop	r0
     47c:	df 91       	pop	r29
     47e:	cf 91       	pop	r28
     480:	0f 91       	pop	r16
     482:	ff 90       	pop	r15
     484:	ef 90       	pop	r14
     486:	08 95       	ret

00000488 <LCD_SendCommand>:
		}
		else
		{
			LCD_DisplayChar(Number+NUMBER_TO_CHAR_FACTOR);
		}
}
     488:	cf 93       	push	r28
     48a:	df 93       	push	r29
     48c:	1f 92       	push	r1
     48e:	cd b7       	in	r28, 0x3d	; 61
     490:	de b7       	in	r29, 0x3e	; 62
     492:	89 83       	std	Y+1, r24	; 0x01
     494:	40 e0       	ldi	r20, 0x00	; 0
     496:	62 e0       	ldi	r22, 0x02	; 2
     498:	80 e0       	ldi	r24, 0x00	; 0
     49a:	0e 94 b4 13 	call	0x2768	; 0x2768 <Gpio_PinWrite>
     49e:	40 e0       	ldi	r20, 0x00	; 0
     4a0:	64 e0       	ldi	r22, 0x04	; 4
     4a2:	80 e0       	ldi	r24, 0x00	; 0
     4a4:	0e 94 b4 13 	call	0x2768	; 0x2768 <Gpio_PinWrite>
     4a8:	89 81       	ldd	r24, Y+1	; 0x01
     4aa:	88 1f       	adc	r24, r24
     4ac:	88 27       	eor	r24, r24
     4ae:	88 1f       	adc	r24, r24
     4b0:	48 2f       	mov	r20, r24
     4b2:	60 e8       	ldi	r22, 0x80	; 128
     4b4:	80 e0       	ldi	r24, 0x00	; 0
     4b6:	0e 94 b4 13 	call	0x2768	; 0x2768 <Gpio_PinWrite>
     4ba:	89 81       	ldd	r24, Y+1	; 0x01
     4bc:	82 95       	swap	r24
     4be:	86 95       	lsr	r24
     4c0:	86 95       	lsr	r24
     4c2:	83 70       	andi	r24, 0x03	; 3
     4c4:	81 70       	andi	r24, 0x01	; 1
     4c6:	48 2f       	mov	r20, r24
     4c8:	60 e4       	ldi	r22, 0x40	; 64
     4ca:	80 e0       	ldi	r24, 0x00	; 0
     4cc:	0e 94 b4 13 	call	0x2768	; 0x2768 <Gpio_PinWrite>
     4d0:	89 81       	ldd	r24, Y+1	; 0x01
     4d2:	82 95       	swap	r24
     4d4:	86 95       	lsr	r24
     4d6:	87 70       	andi	r24, 0x07	; 7
     4d8:	81 70       	andi	r24, 0x01	; 1
     4da:	48 2f       	mov	r20, r24
     4dc:	60 e2       	ldi	r22, 0x20	; 32
     4de:	80 e0       	ldi	r24, 0x00	; 0
     4e0:	0e 94 b4 13 	call	0x2768	; 0x2768 <Gpio_PinWrite>
     4e4:	89 81       	ldd	r24, Y+1	; 0x01
     4e6:	82 95       	swap	r24
     4e8:	8f 70       	andi	r24, 0x0F	; 15
     4ea:	81 70       	andi	r24, 0x01	; 1
     4ec:	48 2f       	mov	r20, r24
     4ee:	60 e1       	ldi	r22, 0x10	; 16
     4f0:	80 e0       	ldi	r24, 0x00	; 0
     4f2:	0e 94 b4 13 	call	0x2768	; 0x2768 <Gpio_PinWrite>
     4f6:	41 e0       	ldi	r20, 0x01	; 1
     4f8:	68 e0       	ldi	r22, 0x08	; 8
     4fa:	80 e0       	ldi	r24, 0x00	; 0
     4fc:	0e 94 b4 13 	call	0x2768	; 0x2768 <Gpio_PinWrite>
     500:	40 e0       	ldi	r20, 0x00	; 0
     502:	68 e0       	ldi	r22, 0x08	; 8
     504:	80 e0       	ldi	r24, 0x00	; 0
     506:	0e 94 b4 13 	call	0x2768	; 0x2768 <Gpio_PinWrite>
     50a:	89 81       	ldd	r24, Y+1	; 0x01
     50c:	86 95       	lsr	r24
     50e:	86 95       	lsr	r24
     510:	86 95       	lsr	r24
     512:	81 70       	andi	r24, 0x01	; 1
     514:	48 2f       	mov	r20, r24
     516:	60 e8       	ldi	r22, 0x80	; 128
     518:	80 e0       	ldi	r24, 0x00	; 0
     51a:	0e 94 b4 13 	call	0x2768	; 0x2768 <Gpio_PinWrite>
     51e:	89 81       	ldd	r24, Y+1	; 0x01
     520:	86 95       	lsr	r24
     522:	86 95       	lsr	r24
     524:	81 70       	andi	r24, 0x01	; 1
     526:	48 2f       	mov	r20, r24
     528:	60 e4       	ldi	r22, 0x40	; 64
     52a:	80 e0       	ldi	r24, 0x00	; 0
     52c:	0e 94 b4 13 	call	0x2768	; 0x2768 <Gpio_PinWrite>
     530:	89 81       	ldd	r24, Y+1	; 0x01
     532:	86 95       	lsr	r24
     534:	81 70       	andi	r24, 0x01	; 1
     536:	48 2f       	mov	r20, r24
     538:	60 e2       	ldi	r22, 0x20	; 32
     53a:	80 e0       	ldi	r24, 0x00	; 0
     53c:	0e 94 b4 13 	call	0x2768	; 0x2768 <Gpio_PinWrite>
     540:	89 81       	ldd	r24, Y+1	; 0x01
     542:	81 70       	andi	r24, 0x01	; 1
     544:	48 2f       	mov	r20, r24
     546:	60 e1       	ldi	r22, 0x10	; 16
     548:	80 e0       	ldi	r24, 0x00	; 0
     54a:	0e 94 b4 13 	call	0x2768	; 0x2768 <Gpio_PinWrite>
     54e:	41 e0       	ldi	r20, 0x01	; 1
     550:	68 e0       	ldi	r22, 0x08	; 8
     552:	80 e0       	ldi	r24, 0x00	; 0
     554:	0e 94 b4 13 	call	0x2768	; 0x2768 <Gpio_PinWrite>
     558:	40 e0       	ldi	r20, 0x00	; 0
     55a:	68 e0       	ldi	r22, 0x08	; 8
     55c:	80 e0       	ldi	r24, 0x00	; 0
     55e:	0e 94 b4 13 	call	0x2768	; 0x2768 <Gpio_PinWrite>
     562:	00 00       	nop
     564:	0f 90       	pop	r0
     566:	df 91       	pop	r29
     568:	cf 91       	pop	r28
     56a:	08 95       	ret

0000056c <LCD_Init>:
     56c:	cf 93       	push	r28
     56e:	df 93       	push	r29
     570:	1f 92       	push	r1
     572:	cd b7       	in	r28, 0x3d	; 61
     574:	de b7       	in	r29, 0x3e	; 62
     576:	19 82       	std	Y+1, r1	; 0x01
     578:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <InitState>
     57c:	88 23       	and	r24, r24
     57e:	a1 f4       	brne	.+40     	; 0x5a8 <LCD_Init+0x3c>
     580:	6f ef       	ldi	r22, 0xFF	; 255
     582:	80 e0       	ldi	r24, 0x00	; 0
     584:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <Gpio_PortDirection>
     588:	82 e0       	ldi	r24, 0x02	; 2
     58a:	0e 94 44 02 	call	0x488	; 0x488 <LCD_SendCommand>
     58e:	88 e2       	ldi	r24, 0x28	; 40
     590:	0e 94 44 02 	call	0x488	; 0x488 <LCD_SendCommand>
     594:	8e e0       	ldi	r24, 0x0E	; 14
     596:	0e 94 44 02 	call	0x488	; 0x488 <LCD_SendCommand>
     59a:	86 e0       	ldi	r24, 0x06	; 6
     59c:	0e 94 44 02 	call	0x488	; 0x488 <LCD_SendCommand>
     5a0:	81 e0       	ldi	r24, 0x01	; 1
     5a2:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <InitState>
     5a6:	02 c0       	rjmp	.+4      	; 0x5ac <LCD_Init+0x40>
     5a8:	83 e0       	ldi	r24, 0x03	; 3
     5aa:	89 83       	std	Y+1, r24	; 0x01
     5ac:	89 81       	ldd	r24, Y+1	; 0x01
     5ae:	0f 90       	pop	r0
     5b0:	df 91       	pop	r29
     5b2:	cf 91       	pop	r28
     5b4:	08 95       	ret

000005b6 <LCD_DisplayChar>:
     5b6:	cf 93       	push	r28
     5b8:	df 93       	push	r29
     5ba:	1f 92       	push	r1
     5bc:	cd b7       	in	r28, 0x3d	; 61
     5be:	de b7       	in	r29, 0x3e	; 62
     5c0:	89 83       	std	Y+1, r24	; 0x01
     5c2:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <InitState>
     5c6:	81 30       	cpi	r24, 0x01	; 1
     5c8:	09 f0       	breq	.+2      	; 0x5cc <LCD_DisplayChar+0x16>
     5ca:	67 c0       	rjmp	.+206    	; 0x69a <LCD_DisplayChar+0xe4>
     5cc:	41 e0       	ldi	r20, 0x01	; 1
     5ce:	62 e0       	ldi	r22, 0x02	; 2
     5d0:	80 e0       	ldi	r24, 0x00	; 0
     5d2:	0e 94 b4 13 	call	0x2768	; 0x2768 <Gpio_PinWrite>
     5d6:	40 e0       	ldi	r20, 0x00	; 0
     5d8:	64 e0       	ldi	r22, 0x04	; 4
     5da:	80 e0       	ldi	r24, 0x00	; 0
     5dc:	0e 94 b4 13 	call	0x2768	; 0x2768 <Gpio_PinWrite>
     5e0:	89 81       	ldd	r24, Y+1	; 0x01
     5e2:	88 1f       	adc	r24, r24
     5e4:	88 27       	eor	r24, r24
     5e6:	88 1f       	adc	r24, r24
     5e8:	48 2f       	mov	r20, r24
     5ea:	60 e8       	ldi	r22, 0x80	; 128
     5ec:	80 e0       	ldi	r24, 0x00	; 0
     5ee:	0e 94 b4 13 	call	0x2768	; 0x2768 <Gpio_PinWrite>
     5f2:	89 81       	ldd	r24, Y+1	; 0x01
     5f4:	82 95       	swap	r24
     5f6:	86 95       	lsr	r24
     5f8:	86 95       	lsr	r24
     5fa:	83 70       	andi	r24, 0x03	; 3
     5fc:	81 70       	andi	r24, 0x01	; 1
     5fe:	48 2f       	mov	r20, r24
     600:	60 e4       	ldi	r22, 0x40	; 64
     602:	80 e0       	ldi	r24, 0x00	; 0
     604:	0e 94 b4 13 	call	0x2768	; 0x2768 <Gpio_PinWrite>
     608:	89 81       	ldd	r24, Y+1	; 0x01
     60a:	82 95       	swap	r24
     60c:	86 95       	lsr	r24
     60e:	87 70       	andi	r24, 0x07	; 7
     610:	81 70       	andi	r24, 0x01	; 1
     612:	48 2f       	mov	r20, r24
     614:	60 e2       	ldi	r22, 0x20	; 32
     616:	80 e0       	ldi	r24, 0x00	; 0
     618:	0e 94 b4 13 	call	0x2768	; 0x2768 <Gpio_PinWrite>
     61c:	89 81       	ldd	r24, Y+1	; 0x01
     61e:	82 95       	swap	r24
     620:	8f 70       	andi	r24, 0x0F	; 15
     622:	81 70       	andi	r24, 0x01	; 1
     624:	48 2f       	mov	r20, r24
     626:	60 e1       	ldi	r22, 0x10	; 16
     628:	80 e0       	ldi	r24, 0x00	; 0
     62a:	0e 94 b4 13 	call	0x2768	; 0x2768 <Gpio_PinWrite>
     62e:	41 e0       	ldi	r20, 0x01	; 1
     630:	68 e0       	ldi	r22, 0x08	; 8
     632:	80 e0       	ldi	r24, 0x00	; 0
     634:	0e 94 b4 13 	call	0x2768	; 0x2768 <Gpio_PinWrite>
     638:	40 e0       	ldi	r20, 0x00	; 0
     63a:	68 e0       	ldi	r22, 0x08	; 8
     63c:	80 e0       	ldi	r24, 0x00	; 0
     63e:	0e 94 b4 13 	call	0x2768	; 0x2768 <Gpio_PinWrite>
     642:	89 81       	ldd	r24, Y+1	; 0x01
     644:	86 95       	lsr	r24
     646:	86 95       	lsr	r24
     648:	86 95       	lsr	r24
     64a:	81 70       	andi	r24, 0x01	; 1
     64c:	48 2f       	mov	r20, r24
     64e:	60 e8       	ldi	r22, 0x80	; 128
     650:	80 e0       	ldi	r24, 0x00	; 0
     652:	0e 94 b4 13 	call	0x2768	; 0x2768 <Gpio_PinWrite>
     656:	89 81       	ldd	r24, Y+1	; 0x01
     658:	86 95       	lsr	r24
     65a:	86 95       	lsr	r24
     65c:	81 70       	andi	r24, 0x01	; 1
     65e:	48 2f       	mov	r20, r24
     660:	60 e4       	ldi	r22, 0x40	; 64
     662:	80 e0       	ldi	r24, 0x00	; 0
     664:	0e 94 b4 13 	call	0x2768	; 0x2768 <Gpio_PinWrite>
     668:	89 81       	ldd	r24, Y+1	; 0x01
     66a:	86 95       	lsr	r24
     66c:	81 70       	andi	r24, 0x01	; 1
     66e:	48 2f       	mov	r20, r24
     670:	60 e2       	ldi	r22, 0x20	; 32
     672:	80 e0       	ldi	r24, 0x00	; 0
     674:	0e 94 b4 13 	call	0x2768	; 0x2768 <Gpio_PinWrite>
     678:	89 81       	ldd	r24, Y+1	; 0x01
     67a:	81 70       	andi	r24, 0x01	; 1
     67c:	48 2f       	mov	r20, r24
     67e:	60 e1       	ldi	r22, 0x10	; 16
     680:	80 e0       	ldi	r24, 0x00	; 0
     682:	0e 94 b4 13 	call	0x2768	; 0x2768 <Gpio_PinWrite>
     686:	41 e0       	ldi	r20, 0x01	; 1
     688:	68 e0       	ldi	r22, 0x08	; 8
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	0e 94 b4 13 	call	0x2768	; 0x2768 <Gpio_PinWrite>
     690:	40 e0       	ldi	r20, 0x00	; 0
     692:	68 e0       	ldi	r22, 0x08	; 8
     694:	80 e0       	ldi	r24, 0x00	; 0
     696:	0e 94 b4 13 	call	0x2768	; 0x2768 <Gpio_PinWrite>
     69a:	00 00       	nop
     69c:	0f 90       	pop	r0
     69e:	df 91       	pop	r29
     6a0:	cf 91       	pop	r28
     6a2:	08 95       	ret

000006a4 <LCD_DisplayString>:
     6a4:	cf 93       	push	r28
     6a6:	df 93       	push	r29
     6a8:	00 d0       	rcall	.+0      	; 0x6aa <LCD_DisplayString+0x6>
     6aa:	1f 92       	push	r1
     6ac:	cd b7       	in	r28, 0x3d	; 61
     6ae:	de b7       	in	r29, 0x3e	; 62
     6b0:	9b 83       	std	Y+3, r25	; 0x03
     6b2:	8a 83       	std	Y+2, r24	; 0x02
     6b4:	19 82       	std	Y+1, r1	; 0x01
     6b6:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <InitState>
     6ba:	81 30       	cpi	r24, 0x01	; 1
     6bc:	d1 f4       	brne	.+52     	; 0x6f2 <LCD_DisplayString+0x4e>
     6be:	0e c0       	rjmp	.+28     	; 0x6dc <LCD_DisplayString+0x38>
     6c0:	89 81       	ldd	r24, Y+1	; 0x01
     6c2:	88 2f       	mov	r24, r24
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	2a 81       	ldd	r18, Y+2	; 0x02
     6c8:	3b 81       	ldd	r19, Y+3	; 0x03
     6ca:	82 0f       	add	r24, r18
     6cc:	93 1f       	adc	r25, r19
     6ce:	fc 01       	movw	r30, r24
     6d0:	80 81       	ld	r24, Z
     6d2:	0e 94 db 02 	call	0x5b6	; 0x5b6 <LCD_DisplayChar>
     6d6:	89 81       	ldd	r24, Y+1	; 0x01
     6d8:	8f 5f       	subi	r24, 0xFF	; 255
     6da:	89 83       	std	Y+1, r24	; 0x01
     6dc:	89 81       	ldd	r24, Y+1	; 0x01
     6de:	88 2f       	mov	r24, r24
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	2a 81       	ldd	r18, Y+2	; 0x02
     6e4:	3b 81       	ldd	r19, Y+3	; 0x03
     6e6:	82 0f       	add	r24, r18
     6e8:	93 1f       	adc	r25, r19
     6ea:	fc 01       	movw	r30, r24
     6ec:	80 81       	ld	r24, Z
     6ee:	88 23       	and	r24, r24
     6f0:	39 f7       	brne	.-50     	; 0x6c0 <LCD_DisplayString+0x1c>
     6f2:	00 00       	nop
     6f4:	0f 90       	pop	r0
     6f6:	0f 90       	pop	r0
     6f8:	0f 90       	pop	r0
     6fa:	df 91       	pop	r29
     6fc:	cf 91       	pop	r28
     6fe:	08 95       	ret

00000700 <LCD_Clear>:
 * Function : LCD_GotoRowColumn
 * Description: this function is to Clear the LCD
 * @return void                        
 */
void LCD_Clear(void)
{
     700:	cf 93       	push	r28
     702:	df 93       	push	r29
     704:	cd b7       	in	r28, 0x3d	; 61
     706:	de b7       	in	r29, 0x3e	; 62
	LCD_SendCommand(LCD_ClearScreen);
     708:	81 e0       	ldi	r24, 0x01	; 1
     70a:	0e 94 44 02 	call	0x488	; 0x488 <LCD_SendCommand>
}
     70e:	00 00       	nop
     710:	df 91       	pop	r29
     712:	cf 91       	pop	r28
     714:	08 95       	ret

00000716 <LCD_GotoRowColumn>:
 * param row: the row of the cursor should range is [0 to 1]
 * param col: the column of the cursor should range is [0 to 15]
 * @return void                                                          
 */
void LCD_GotoRowColumn(uint8 row , uint8 col)
{
     716:	cf 93       	push	r28
     718:	df 93       	push	r29
     71a:	00 d0       	rcall	.+0      	; 0x71c <LCD_GotoRowColumn+0x6>
     71c:	cd b7       	in	r28, 0x3d	; 61
     71e:	de b7       	in	r29, 0x3e	; 62
     720:	89 83       	std	Y+1, r24	; 0x01
     722:	6a 83       	std	Y+2, r22	; 0x02
	LCD_SendCommand( (GOTO_ROW_COL_MASK1) | ( col + (GOTO_ROW_COL_MASK2 * row ) ) );
     724:	99 81       	ldd	r25, Y+1	; 0x01
     726:	89 2f       	mov	r24, r25
     728:	88 0f       	add	r24, r24
     72a:	88 0f       	add	r24, r24
     72c:	98 0f       	add	r25, r24
     72e:	8a 81       	ldd	r24, Y+2	; 0x02
     730:	89 0f       	add	r24, r25
     732:	80 68       	ori	r24, 0x80	; 128
     734:	0e 94 44 02 	call	0x488	; 0x488 <LCD_SendCommand>
     738:	00 00       	nop
     73a:	0f 90       	pop	r0
     73c:	0f 90       	pop	r0
     73e:	df 91       	pop	r29
     740:	cf 91       	pop	r28
     742:	08 95       	ret

00000744 <Led_Init>:
/**
 * Description: Initializing Function to the Led
 * @param led_Num the number of the Led [LED0,LED1,LED2,LED3]
 */
void Led_Init(led led_Num)
{
     744:	cf 93       	push	r28
     746:	df 93       	push	r29
     748:	1f 92       	push	r1
     74a:	cd b7       	in	r28, 0x3d	; 61
     74c:	de b7       	in	r29, 0x3e	; 62
     74e:	89 83       	std	Y+1, r24	; 0x01
	switch(led_Num)
     750:	89 81       	ldd	r24, Y+1	; 0x01
     752:	88 2f       	mov	r24, r24
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	80 32       	cpi	r24, 0x20	; 32
     758:	91 05       	cpc	r25, r1
     75a:	c1 f0       	breq	.+48     	; 0x78c <Led_Init+0x48>
     75c:	81 32       	cpi	r24, 0x21	; 33
     75e:	91 05       	cpc	r25, r1
     760:	1c f4       	brge	.+6      	; 0x768 <Led_Init+0x24>
     762:	40 97       	sbiw	r24, 0x10	; 16
     764:	41 f0       	breq	.+16     	; 0x776 <Led_Init+0x32>
		case LED3 :
		Gpio_PinDirection(LED_PORT,LED3,SET_OUT);
		Gpio_PinWrite(LED_PORT,LED3,FALSE);
		break;
		default:
		break;
     766:	33 c0       	rjmp	.+102    	; 0x7ce <Led_Init+0x8a>
 * Description: Initializing Function to the Led
 * @param led_Num the number of the Led [LED0,LED1,LED2,LED3]
 */
void Led_Init(led led_Num)
{
	switch(led_Num)
     768:	80 34       	cpi	r24, 0x40	; 64
     76a:	91 05       	cpc	r25, r1
     76c:	d1 f0       	breq	.+52     	; 0x7a2 <Led_Init+0x5e>
     76e:	80 38       	cpi	r24, 0x80	; 128
     770:	91 05       	cpc	r25, r1
     772:	11 f1       	breq	.+68     	; 0x7b8 <Led_Init+0x74>
		case LED3 :
		Gpio_PinDirection(LED_PORT,LED3,SET_OUT);
		Gpio_PinWrite(LED_PORT,LED3,FALSE);
		break;
		default:
		break;
     774:	2c c0       	rjmp	.+88     	; 0x7ce <Led_Init+0x8a>
void Led_Init(led led_Num)
{
	switch(led_Num)
	{
		case LED0 :
		Gpio_PinDirection(LED_PORT,LED0,SET_OUT);
     776:	4f ef       	ldi	r20, 0xFF	; 255
     778:	60 e1       	ldi	r22, 0x10	; 16
     77a:	81 e0       	ldi	r24, 0x01	; 1
     77c:	0e 94 08 13 	call	0x2610	; 0x2610 <Gpio_PinDirection>
		Gpio_PinWrite(LED_PORT,LED0,FALSE);
     780:	40 e0       	ldi	r20, 0x00	; 0
     782:	60 e1       	ldi	r22, 0x10	; 16
     784:	81 e0       	ldi	r24, 0x01	; 1
     786:	0e 94 b4 13 	call	0x2768	; 0x2768 <Gpio_PinWrite>
		break;
     78a:	21 c0       	rjmp	.+66     	; 0x7ce <Led_Init+0x8a>
		case LED1 :
		Gpio_PinDirection(LED_PORT,LED1,SET_OUT);
     78c:	4f ef       	ldi	r20, 0xFF	; 255
     78e:	60 e2       	ldi	r22, 0x20	; 32
     790:	81 e0       	ldi	r24, 0x01	; 1
     792:	0e 94 08 13 	call	0x2610	; 0x2610 <Gpio_PinDirection>
		Gpio_PinWrite(LED_PORT,LED1,FALSE);
     796:	40 e0       	ldi	r20, 0x00	; 0
     798:	60 e2       	ldi	r22, 0x20	; 32
     79a:	81 e0       	ldi	r24, 0x01	; 1
     79c:	0e 94 b4 13 	call	0x2768	; 0x2768 <Gpio_PinWrite>
		break;
     7a0:	16 c0       	rjmp	.+44     	; 0x7ce <Led_Init+0x8a>
		case LED2 :
		Gpio_PinDirection(LED_PORT,LED2,SET_OUT);
     7a2:	4f ef       	ldi	r20, 0xFF	; 255
     7a4:	60 e4       	ldi	r22, 0x40	; 64
     7a6:	81 e0       	ldi	r24, 0x01	; 1
     7a8:	0e 94 08 13 	call	0x2610	; 0x2610 <Gpio_PinDirection>
		Gpio_PinWrite(LED_PORT,LED2,FALSE);
     7ac:	40 e0       	ldi	r20, 0x00	; 0
     7ae:	60 e4       	ldi	r22, 0x40	; 64
     7b0:	81 e0       	ldi	r24, 0x01	; 1
     7b2:	0e 94 b4 13 	call	0x2768	; 0x2768 <Gpio_PinWrite>
		break;
     7b6:	0b c0       	rjmp	.+22     	; 0x7ce <Led_Init+0x8a>
		case LED3 :
		Gpio_PinDirection(LED_PORT,LED3,SET_OUT);
     7b8:	4f ef       	ldi	r20, 0xFF	; 255
     7ba:	60 e8       	ldi	r22, 0x80	; 128
     7bc:	81 e0       	ldi	r24, 0x01	; 1
     7be:	0e 94 08 13 	call	0x2610	; 0x2610 <Gpio_PinDirection>
		Gpio_PinWrite(LED_PORT,LED3,FALSE);
     7c2:	40 e0       	ldi	r20, 0x00	; 0
     7c4:	60 e8       	ldi	r22, 0x80	; 128
     7c6:	81 e0       	ldi	r24, 0x01	; 1
     7c8:	0e 94 b4 13 	call	0x2768	; 0x2768 <Gpio_PinWrite>
		break;
     7cc:	00 00       	nop
		default:
		break;
	}
}
     7ce:	00 00       	nop
     7d0:	0f 90       	pop	r0
     7d2:	df 91       	pop	r29
     7d4:	cf 91       	pop	r28
     7d6:	08 95       	ret

000007d8 <Led_On>:
/**
 * Description: Function to set the Led to On
 * @param led_Num the number of the Led [LED0,LED1,LED2,LED3]
 */
void Led_On(led led_Num)
{
     7d8:	cf 93       	push	r28
     7da:	df 93       	push	r29
     7dc:	1f 92       	push	r1
     7de:	cd b7       	in	r28, 0x3d	; 61
     7e0:	de b7       	in	r29, 0x3e	; 62
     7e2:	89 83       	std	Y+1, r24	; 0x01
	switch(led_Num)
     7e4:	89 81       	ldd	r24, Y+1	; 0x01
     7e6:	88 2f       	mov	r24, r24
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	80 32       	cpi	r24, 0x20	; 32
     7ec:	91 05       	cpc	r25, r1
     7ee:	99 f0       	breq	.+38     	; 0x816 <Led_On+0x3e>
     7f0:	81 32       	cpi	r24, 0x21	; 33
     7f2:	91 05       	cpc	r25, r1
     7f4:	1c f4       	brge	.+6      	; 0x7fc <Led_On+0x24>
     7f6:	40 97       	sbiw	r24, 0x10	; 16
     7f8:	41 f0       	breq	.+16     	; 0x80a <Led_On+0x32>
		break;
		case LED3 :
		Gpio_PinWrite(LED_PORT,LED3,HIGH);
		break;
		default:
		break;
     7fa:	1f c0       	rjmp	.+62     	; 0x83a <Led_On+0x62>
 * Description: Function to set the Led to On
 * @param led_Num the number of the Led [LED0,LED1,LED2,LED3]
 */
void Led_On(led led_Num)
{
	switch(led_Num)
     7fc:	80 34       	cpi	r24, 0x40	; 64
     7fe:	91 05       	cpc	r25, r1
     800:	81 f0       	breq	.+32     	; 0x822 <Led_On+0x4a>
     802:	80 38       	cpi	r24, 0x80	; 128
     804:	91 05       	cpc	r25, r1
     806:	99 f0       	breq	.+38     	; 0x82e <Led_On+0x56>
		break;
		case LED3 :
		Gpio_PinWrite(LED_PORT,LED3,HIGH);
		break;
		default:
		break;
     808:	18 c0       	rjmp	.+48     	; 0x83a <Led_On+0x62>
void Led_On(led led_Num)
{
	switch(led_Num)
	{
		case LED0 :
		Gpio_PinWrite(LED_PORT,LED0,HIGH);
     80a:	41 e0       	ldi	r20, 0x01	; 1
     80c:	60 e1       	ldi	r22, 0x10	; 16
     80e:	81 e0       	ldi	r24, 0x01	; 1
     810:	0e 94 b4 13 	call	0x2768	; 0x2768 <Gpio_PinWrite>
		break;
     814:	12 c0       	rjmp	.+36     	; 0x83a <Led_On+0x62>
		case LED1 :
		Gpio_PinWrite(LED_PORT,LED1,HIGH);
     816:	41 e0       	ldi	r20, 0x01	; 1
     818:	60 e2       	ldi	r22, 0x20	; 32
     81a:	81 e0       	ldi	r24, 0x01	; 1
     81c:	0e 94 b4 13 	call	0x2768	; 0x2768 <Gpio_PinWrite>
		break;
     820:	0c c0       	rjmp	.+24     	; 0x83a <Led_On+0x62>
		case LED2 :
		Gpio_PinWrite(LED_PORT,LED2,HIGH);
     822:	41 e0       	ldi	r20, 0x01	; 1
     824:	60 e4       	ldi	r22, 0x40	; 64
     826:	81 e0       	ldi	r24, 0x01	; 1
     828:	0e 94 b4 13 	call	0x2768	; 0x2768 <Gpio_PinWrite>
		break;
     82c:	06 c0       	rjmp	.+12     	; 0x83a <Led_On+0x62>
		case LED3 :
		Gpio_PinWrite(LED_PORT,LED3,HIGH);
     82e:	41 e0       	ldi	r20, 0x01	; 1
     830:	60 e8       	ldi	r22, 0x80	; 128
     832:	81 e0       	ldi	r24, 0x01	; 1
     834:	0e 94 b4 13 	call	0x2768	; 0x2768 <Gpio_PinWrite>
		break;
     838:	00 00       	nop
		default:
		break;
	}
}
     83a:	00 00       	nop
     83c:	0f 90       	pop	r0
     83e:	df 91       	pop	r29
     840:	cf 91       	pop	r28
     842:	08 95       	ret

00000844 <Led_Off>:
/**
 * Description: Function to set the Led to Off.
 * @param led_Num the number of the Led [LED0,LED1,LED2,LED3].
 */
void Led_Off(led led_Num)
{
     844:	cf 93       	push	r28
     846:	df 93       	push	r29
     848:	1f 92       	push	r1
     84a:	cd b7       	in	r28, 0x3d	; 61
     84c:	de b7       	in	r29, 0x3e	; 62
     84e:	89 83       	std	Y+1, r24	; 0x01
	switch(led_Num)
     850:	89 81       	ldd	r24, Y+1	; 0x01
     852:	88 2f       	mov	r24, r24
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	80 32       	cpi	r24, 0x20	; 32
     858:	91 05       	cpc	r25, r1
     85a:	99 f0       	breq	.+38     	; 0x882 <__stack+0x23>
     85c:	81 32       	cpi	r24, 0x21	; 33
     85e:	91 05       	cpc	r25, r1
     860:	1c f4       	brge	.+6      	; 0x868 <__stack+0x9>
     862:	40 97       	sbiw	r24, 0x10	; 16
     864:	41 f0       	breq	.+16     	; 0x876 <__stack+0x17>
		break;
		case LED3 :
		Gpio_PinWrite(LED_PORT,LED3,FALSE);
		break;
		default:
		break;
     866:	1f c0       	rjmp	.+62     	; 0x8a6 <__stack+0x47>
 * Description: Function to set the Led to Off.
 * @param led_Num the number of the Led [LED0,LED1,LED2,LED3].
 */
void Led_Off(led led_Num)
{
	switch(led_Num)
     868:	80 34       	cpi	r24, 0x40	; 64
     86a:	91 05       	cpc	r25, r1
     86c:	81 f0       	breq	.+32     	; 0x88e <__stack+0x2f>
     86e:	80 38       	cpi	r24, 0x80	; 128
     870:	91 05       	cpc	r25, r1
     872:	99 f0       	breq	.+38     	; 0x89a <__stack+0x3b>
		break;
		case LED3 :
		Gpio_PinWrite(LED_PORT,LED3,FALSE);
		break;
		default:
		break;
     874:	18 c0       	rjmp	.+48     	; 0x8a6 <__stack+0x47>
void Led_Off(led led_Num)
{
	switch(led_Num)
	{
		case LED0 :
		Gpio_PinWrite(LED_PORT,LED0,FALSE);
     876:	40 e0       	ldi	r20, 0x00	; 0
     878:	60 e1       	ldi	r22, 0x10	; 16
     87a:	81 e0       	ldi	r24, 0x01	; 1
     87c:	0e 94 b4 13 	call	0x2768	; 0x2768 <Gpio_PinWrite>
		break;
     880:	12 c0       	rjmp	.+36     	; 0x8a6 <__stack+0x47>
		case LED1 :
		Gpio_PinWrite(LED_PORT,LED1,FALSE);
     882:	40 e0       	ldi	r20, 0x00	; 0
     884:	60 e2       	ldi	r22, 0x20	; 32
     886:	81 e0       	ldi	r24, 0x01	; 1
     888:	0e 94 b4 13 	call	0x2768	; 0x2768 <Gpio_PinWrite>
		break;
     88c:	0c c0       	rjmp	.+24     	; 0x8a6 <__stack+0x47>
		case LED2 :
		Gpio_PinWrite(LED_PORT,LED2,FALSE);
     88e:	40 e0       	ldi	r20, 0x00	; 0
     890:	60 e4       	ldi	r22, 0x40	; 64
     892:	81 e0       	ldi	r24, 0x01	; 1
     894:	0e 94 b4 13 	call	0x2768	; 0x2768 <Gpio_PinWrite>
		break;
     898:	06 c0       	rjmp	.+12     	; 0x8a6 <__stack+0x47>
		case LED3 :
		Gpio_PinWrite(LED_PORT,LED3,FALSE);
     89a:	40 e0       	ldi	r20, 0x00	; 0
     89c:	60 e8       	ldi	r22, 0x80	; 128
     89e:	81 e0       	ldi	r24, 0x01	; 1
     8a0:	0e 94 b4 13 	call	0x2768	; 0x2768 <Gpio_PinWrite>
		break;
     8a4:	00 00       	nop
		default:
		break;
	}
}
     8a6:	00 00       	nop
     8a8:	0f 90       	pop	r0
     8aa:	df 91       	pop	r29
     8ac:	cf 91       	pop	r28
     8ae:	08 95       	ret

000008b0 <pushButton_Init>:
/**
 * Description: Function to Initiate the Push Button.
 * @param push_Button the number of the pushButton [PUSH_BUTTON0,PUSH_BUTTON1]
 */
void pushButton_Init()
{
     8b0:	cf 93       	push	r28
     8b2:	df 93       	push	r29
     8b4:	cd b7       	in	r28, 0x3d	; 61
     8b6:	de b7       	in	r29, 0x3e	; 62
	Gpio_PinDirection(PUSH_BUTTON0_PORT,PUSH_BUTTON0_PIN,SET_IN);
     8b8:	40 e0       	ldi	r20, 0x00	; 0
     8ba:	64 e0       	ldi	r22, 0x04	; 4
     8bc:	82 e0       	ldi	r24, 0x02	; 2
     8be:	0e 94 08 13 	call	0x2610	; 0x2610 <Gpio_PinDirection>
	Gpio_PinDirection(PUSH_BUTTON1_PORT,PUSH_BUTTON1_PIN,SET_IN);
     8c2:	40 e0       	ldi	r20, 0x00	; 0
     8c4:	62 e0       	ldi	r22, 0x02	; 2
     8c6:	81 e0       	ldi	r24, 0x01	; 1
     8c8:	0e 94 08 13 	call	0x2610	; 0x2610 <Gpio_PinDirection>
}
     8cc:	00 00       	nop
     8ce:	df 91       	pop	r29
     8d0:	cf 91       	pop	r28
     8d2:	08 95       	ret

000008d4 <SSD_Init_BCD>:
		SSD_Display_BCD(number/10);
		Gpio_PinWrite(ssd_Enable_PORT,ssd2_Enable_Pin,FALSE);
		Gpio_PinWrite(ssd_Enable_PORT,ssd1_Enable_Pin,TRUE);
		SSD_Display_BCD(number%10);
	}
}
     8d4:	cf 93       	push	r28
     8d6:	df 93       	push	r29
     8d8:	1f 92       	push	r1
     8da:	cd b7       	in	r28, 0x3d	; 61
     8dc:	de b7       	in	r29, 0x3e	; 62
     8de:	89 83       	std	Y+1, r24	; 0x01
     8e0:	6f ef       	ldi	r22, 0xFF	; 255
     8e2:	81 e0       	ldi	r24, 0x01	; 1
     8e4:	0e 94 b9 14 	call	0x2972	; 0x2972 <Gpio_LowerNibbleDirection>
     8e8:	89 81       	ldd	r24, Y+1	; 0x01
     8ea:	88 2f       	mov	r24, r24
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	81 30       	cpi	r24, 0x01	; 1
     8f0:	91 05       	cpc	r25, r1
     8f2:	b9 f0       	breq	.+46     	; 0x922 <SSD_Init_BCD+0x4e>
     8f4:	82 30       	cpi	r24, 0x02	; 2
     8f6:	91 05       	cpc	r25, r1
     8f8:	1c f4       	brge	.+6      	; 0x900 <SSD_Init_BCD+0x2c>
     8fa:	89 2b       	or	r24, r25
     8fc:	39 f0       	breq	.+14     	; 0x90c <SSD_Init_BCD+0x38>
     8fe:	32 c0       	rjmp	.+100    	; 0x964 <SSD_Init_BCD+0x90>
     900:	82 30       	cpi	r24, 0x02	; 2
     902:	91 05       	cpc	r25, r1
     904:	c9 f0       	breq	.+50     	; 0x938 <SSD_Init_BCD+0x64>
     906:	03 97       	sbiw	r24, 0x03	; 3
     908:	11 f1       	breq	.+68     	; 0x94e <SSD_Init_BCD+0x7a>
     90a:	2c c0       	rjmp	.+88     	; 0x964 <SSD_Init_BCD+0x90>
     90c:	4f ef       	ldi	r20, 0xFF	; 255
     90e:	64 e0       	ldi	r22, 0x04	; 4
     910:	83 e0       	ldi	r24, 0x03	; 3
     912:	0e 94 08 13 	call	0x2610	; 0x2610 <Gpio_PinDirection>
     916:	41 e0       	ldi	r20, 0x01	; 1
     918:	64 e0       	ldi	r22, 0x04	; 4
     91a:	83 e0       	ldi	r24, 0x03	; 3
     91c:	0e 94 b4 13 	call	0x2768	; 0x2768 <Gpio_PinWrite>
     920:	21 c0       	rjmp	.+66     	; 0x964 <SSD_Init_BCD+0x90>
     922:	4f ef       	ldi	r20, 0xFF	; 255
     924:	68 e0       	ldi	r22, 0x08	; 8
     926:	83 e0       	ldi	r24, 0x03	; 3
     928:	0e 94 08 13 	call	0x2610	; 0x2610 <Gpio_PinDirection>
     92c:	41 e0       	ldi	r20, 0x01	; 1
     92e:	68 e0       	ldi	r22, 0x08	; 8
     930:	83 e0       	ldi	r24, 0x03	; 3
     932:	0e 94 b4 13 	call	0x2768	; 0x2768 <Gpio_PinWrite>
     936:	16 c0       	rjmp	.+44     	; 0x964 <SSD_Init_BCD+0x90>
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	60 e4       	ldi	r22, 0x40	; 64
     93c:	83 e0       	ldi	r24, 0x03	; 3
     93e:	0e 94 08 13 	call	0x2610	; 0x2610 <Gpio_PinDirection>
     942:	41 e0       	ldi	r20, 0x01	; 1
     944:	60 e4       	ldi	r22, 0x40	; 64
     946:	83 e0       	ldi	r24, 0x03	; 3
     948:	0e 94 b4 13 	call	0x2768	; 0x2768 <Gpio_PinWrite>
     94c:	0b c0       	rjmp	.+22     	; 0x964 <SSD_Init_BCD+0x90>
     94e:	4f ef       	ldi	r20, 0xFF	; 255
     950:	60 e8       	ldi	r22, 0x80	; 128
     952:	83 e0       	ldi	r24, 0x03	; 3
     954:	0e 94 08 13 	call	0x2610	; 0x2610 <Gpio_PinDirection>
     958:	41 e0       	ldi	r20, 0x01	; 1
     95a:	60 e8       	ldi	r22, 0x80	; 128
     95c:	83 e0       	ldi	r24, 0x03	; 3
     95e:	0e 94 b4 13 	call	0x2768	; 0x2768 <Gpio_PinWrite>
     962:	00 00       	nop
     964:	80 e0       	ldi	r24, 0x00	; 0
     966:	0e 94 ba 04 	call	0x974	; 0x974 <SSD_Display_BCD>
     96a:	00 00       	nop
     96c:	0f 90       	pop	r0
     96e:	df 91       	pop	r29
     970:	cf 91       	pop	r28
     972:	08 95       	ret

00000974 <SSD_Display_BCD>:
/**
 * Description: Function to set the Lower Nibble to the value of the number 
 * @param number the number to display [0 to F only]
 */
void SSD_Display_BCD(uint8 number)
{
     974:	cf 93       	push	r28
     976:	df 93       	push	r29
     978:	1f 92       	push	r1
     97a:	cd b7       	in	r28, 0x3d	; 61
     97c:	de b7       	in	r29, 0x3e	; 62
     97e:	89 83       	std	Y+1, r24	; 0x01
	Gpio_LowerNibbleDirection(SSD_PORT,SET_OUT);
     980:	6f ef       	ldi	r22, 0xFF	; 255
     982:	81 e0       	ldi	r24, 0x01	; 1
     984:	0e 94 b9 14 	call	0x2972	; 0x2972 <Gpio_LowerNibbleDirection>
	Gpio_LowerNibbleWrite(SSD_PORT,number);
     988:	69 81       	ldd	r22, Y+1	; 0x01
     98a:	81 e0       	ldi	r24, 0x01	; 1
     98c:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <Gpio_LowerNibbleWrite>
}
     990:	00 00       	nop
     992:	0f 90       	pop	r0
     994:	df 91       	pop	r29
     996:	cf 91       	pop	r28
     998:	08 95       	ret

0000099a <xEventGroupCreate>:
/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
     99a:	cf 93       	push	r28
     99c:	df 93       	push	r29
     99e:	00 d0       	rcall	.+0      	; 0x9a0 <xEventGroupCreate+0x6>
     9a0:	cd b7       	in	r28, 0x3d	; 61
     9a2:	de b7       	in	r29, 0x3e	; 62
     9a4:	8b e0       	ldi	r24, 0x0B	; 11
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	0e 94 de 06 	call	0xdbc	; 0xdbc <pvPortMalloc>
     9ac:	9a 83       	std	Y+2, r25	; 0x02
     9ae:	89 83       	std	Y+1, r24	; 0x01
     9b0:	89 81       	ldd	r24, Y+1	; 0x01
     9b2:	9a 81       	ldd	r25, Y+2	; 0x02
     9b4:	89 2b       	or	r24, r25
     9b6:	51 f0       	breq	.+20     	; 0x9cc <xEventGroupCreate+0x32>
     9b8:	89 81       	ldd	r24, Y+1	; 0x01
     9ba:	9a 81       	ldd	r25, Y+2	; 0x02
     9bc:	fc 01       	movw	r30, r24
     9be:	11 82       	std	Z+1, r1	; 0x01
     9c0:	10 82       	st	Z, r1
     9c2:	89 81       	ldd	r24, Y+1	; 0x01
     9c4:	9a 81       	ldd	r25, Y+2	; 0x02
     9c6:	02 96       	adiw	r24, 0x02	; 2
     9c8:	0e 94 40 07 	call	0xe80	; 0xe80 <vListInitialise>
     9cc:	89 81       	ldd	r24, Y+1	; 0x01
     9ce:	9a 81       	ldd	r25, Y+2	; 0x02
     9d0:	0f 90       	pop	r0
     9d2:	0f 90       	pop	r0
     9d4:	df 91       	pop	r29
     9d6:	cf 91       	pop	r28
     9d8:	08 95       	ret

000009da <xEventGroupWaitBits>:
     9da:	0f 93       	push	r16
     9dc:	1f 93       	push	r17
     9de:	cf 93       	push	r28
     9e0:	df 93       	push	r29
     9e2:	cd b7       	in	r28, 0x3d	; 61
     9e4:	de b7       	in	r29, 0x3e	; 62
     9e6:	63 97       	sbiw	r28, 0x13	; 19
     9e8:	0f b6       	in	r0, 0x3f	; 63
     9ea:	f8 94       	cli
     9ec:	de bf       	out	0x3e, r29	; 62
     9ee:	0f be       	out	0x3f, r0	; 63
     9f0:	cd bf       	out	0x3d, r28	; 61
     9f2:	9d 87       	std	Y+13, r25	; 0x0d
     9f4:	8c 87       	std	Y+12, r24	; 0x0c
     9f6:	7f 87       	std	Y+15, r23	; 0x0f
     9f8:	6e 87       	std	Y+14, r22	; 0x0e
     9fa:	48 8b       	std	Y+16, r20	; 0x10
     9fc:	29 8b       	std	Y+17, r18	; 0x11
     9fe:	1b 8b       	std	Y+19, r17	; 0x13
     a00:	0a 8b       	std	Y+18, r16	; 0x12
     a02:	8c 85       	ldd	r24, Y+12	; 0x0c
     a04:	9d 85       	ldd	r25, Y+13	; 0x0d
     a06:	9e 83       	std	Y+6, r25	; 0x06
     a08:	8d 83       	std	Y+5, r24	; 0x05
     a0a:	1c 82       	std	Y+4, r1	; 0x04
     a0c:	1b 82       	std	Y+3, r1	; 0x03
     a0e:	1f 82       	std	Y+7, r1	; 0x07
     a10:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <vTaskSuspendAll>
     a14:	8d 81       	ldd	r24, Y+5	; 0x05
     a16:	9e 81       	ldd	r25, Y+6	; 0x06
     a18:	fc 01       	movw	r30, r24
     a1a:	80 81       	ld	r24, Z
     a1c:	91 81       	ldd	r25, Z+1	; 0x01
     a1e:	99 87       	std	Y+9, r25	; 0x09
     a20:	88 87       	std	Y+8, r24	; 0x08
     a22:	2e 85       	ldd	r18, Y+14	; 0x0e
     a24:	3f 85       	ldd	r19, Y+15	; 0x0f
     a26:	88 85       	ldd	r24, Y+8	; 0x08
     a28:	99 85       	ldd	r25, Y+9	; 0x09
     a2a:	49 89       	ldd	r20, Y+17	; 0x11
     a2c:	b9 01       	movw	r22, r18
     a2e:	0e 94 ac 06 	call	0xd58	; 0xd58 <prvTestWaitCondition>
     a32:	8a 87       	std	Y+10, r24	; 0x0a
     a34:	8a 85       	ldd	r24, Y+10	; 0x0a
     a36:	88 23       	and	r24, r24
     a38:	d1 f0       	breq	.+52     	; 0xa6e <xEventGroupWaitBits+0x94>
     a3a:	88 85       	ldd	r24, Y+8	; 0x08
     a3c:	99 85       	ldd	r25, Y+9	; 0x09
     a3e:	9a 83       	std	Y+2, r25	; 0x02
     a40:	89 83       	std	Y+1, r24	; 0x01
     a42:	1b 8a       	std	Y+19, r1	; 0x13
     a44:	1a 8a       	std	Y+18, r1	; 0x12
     a46:	88 89       	ldd	r24, Y+16	; 0x10
     a48:	88 23       	and	r24, r24
     a4a:	e1 f1       	breq	.+120    	; 0xac4 <xEventGroupWaitBits+0xea>
     a4c:	8d 81       	ldd	r24, Y+5	; 0x05
     a4e:	9e 81       	ldd	r25, Y+6	; 0x06
     a50:	fc 01       	movw	r30, r24
     a52:	20 81       	ld	r18, Z
     a54:	31 81       	ldd	r19, Z+1	; 0x01
     a56:	8e 85       	ldd	r24, Y+14	; 0x0e
     a58:	9f 85       	ldd	r25, Y+15	; 0x0f
     a5a:	80 95       	com	r24
     a5c:	90 95       	com	r25
     a5e:	28 23       	and	r18, r24
     a60:	39 23       	and	r19, r25
     a62:	8d 81       	ldd	r24, Y+5	; 0x05
     a64:	9e 81       	ldd	r25, Y+6	; 0x06
     a66:	fc 01       	movw	r30, r24
     a68:	31 83       	std	Z+1, r19	; 0x01
     a6a:	20 83       	st	Z, r18
     a6c:	2b c0       	rjmp	.+86     	; 0xac4 <xEventGroupWaitBits+0xea>
     a6e:	8a 89       	ldd	r24, Y+18	; 0x12
     a70:	9b 89       	ldd	r25, Y+19	; 0x13
     a72:	89 2b       	or	r24, r25
     a74:	39 f4       	brne	.+14     	; 0xa84 <xEventGroupWaitBits+0xaa>
     a76:	88 85       	ldd	r24, Y+8	; 0x08
     a78:	99 85       	ldd	r25, Y+9	; 0x09
     a7a:	9a 83       	std	Y+2, r25	; 0x02
     a7c:	89 83       	std	Y+1, r24	; 0x01
     a7e:	81 e0       	ldi	r24, 0x01	; 1
     a80:	8f 83       	std	Y+7, r24	; 0x07
     a82:	20 c0       	rjmp	.+64     	; 0xac4 <xEventGroupWaitBits+0xea>
     a84:	88 89       	ldd	r24, Y+16	; 0x10
     a86:	88 23       	and	r24, r24
     a88:	29 f0       	breq	.+10     	; 0xa94 <xEventGroupWaitBits+0xba>
     a8a:	8b 81       	ldd	r24, Y+3	; 0x03
     a8c:	9c 81       	ldd	r25, Y+4	; 0x04
     a8e:	91 60       	ori	r25, 0x01	; 1
     a90:	9c 83       	std	Y+4, r25	; 0x04
     a92:	8b 83       	std	Y+3, r24	; 0x03
     a94:	89 89       	ldd	r24, Y+17	; 0x11
     a96:	88 23       	and	r24, r24
     a98:	29 f0       	breq	.+10     	; 0xaa4 <xEventGroupWaitBits+0xca>
     a9a:	8b 81       	ldd	r24, Y+3	; 0x03
     a9c:	9c 81       	ldd	r25, Y+4	; 0x04
     a9e:	94 60       	ori	r25, 0x04	; 4
     aa0:	9c 83       	std	Y+4, r25	; 0x04
     aa2:	8b 83       	std	Y+3, r24	; 0x03
     aa4:	2e 85       	ldd	r18, Y+14	; 0x0e
     aa6:	3f 85       	ldd	r19, Y+15	; 0x0f
     aa8:	8b 81       	ldd	r24, Y+3	; 0x03
     aaa:	9c 81       	ldd	r25, Y+4	; 0x04
     aac:	28 2b       	or	r18, r24
     aae:	39 2b       	or	r19, r25
     ab0:	8d 81       	ldd	r24, Y+5	; 0x05
     ab2:	9e 81       	ldd	r25, Y+6	; 0x06
     ab4:	02 96       	adiw	r24, 0x02	; 2
     ab6:	4a 89       	ldd	r20, Y+18	; 0x12
     ab8:	5b 89       	ldd	r21, Y+19	; 0x13
     aba:	b9 01       	movw	r22, r18
     abc:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <vTaskPlaceOnUnorderedEventList>
     ac0:	1a 82       	std	Y+2, r1	; 0x02
     ac2:	19 82       	std	Y+1, r1	; 0x01
     ac4:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <xTaskResumeAll>
     ac8:	8b 87       	std	Y+11, r24	; 0x0b
     aca:	8a 89       	ldd	r24, Y+18	; 0x12
     acc:	9b 89       	ldd	r25, Y+19	; 0x13
     ace:	89 2b       	or	r24, r25
     ad0:	09 f4       	brne	.+2      	; 0xad4 <xEventGroupWaitBits+0xfa>
     ad2:	3f c0       	rjmp	.+126    	; 0xb52 <xEventGroupWaitBits+0x178>
     ad4:	8b 85       	ldd	r24, Y+11	; 0x0b
     ad6:	88 23       	and	r24, r24
     ad8:	11 f4       	brne	.+4      	; 0xade <xEventGroupWaitBits+0x104>
     ada:	0e 94 84 0a 	call	0x1508	; 0x1508 <vPortYield>
     ade:	0e 94 2d 12 	call	0x245a	; 0x245a <uxTaskResetEventItemValue>
     ae2:	9a 83       	std	Y+2, r25	; 0x02
     ae4:	89 83       	std	Y+1, r24	; 0x01
     ae6:	89 81       	ldd	r24, Y+1	; 0x01
     ae8:	9a 81       	ldd	r25, Y+2	; 0x02
     aea:	88 27       	eor	r24, r24
     aec:	92 70       	andi	r25, 0x02	; 2
     aee:	89 2b       	or	r24, r25
     af0:	59 f5       	brne	.+86     	; 0xb48 <xEventGroupWaitBits+0x16e>
     af2:	0f b6       	in	r0, 0x3f	; 63
     af4:	f8 94       	cli
     af6:	0f 92       	push	r0
     af8:	8d 81       	ldd	r24, Y+5	; 0x05
     afa:	9e 81       	ldd	r25, Y+6	; 0x06
     afc:	fc 01       	movw	r30, r24
     afe:	80 81       	ld	r24, Z
     b00:	91 81       	ldd	r25, Z+1	; 0x01
     b02:	9a 83       	std	Y+2, r25	; 0x02
     b04:	89 83       	std	Y+1, r24	; 0x01
     b06:	2e 85       	ldd	r18, Y+14	; 0x0e
     b08:	3f 85       	ldd	r19, Y+15	; 0x0f
     b0a:	89 81       	ldd	r24, Y+1	; 0x01
     b0c:	9a 81       	ldd	r25, Y+2	; 0x02
     b0e:	49 89       	ldd	r20, Y+17	; 0x11
     b10:	b9 01       	movw	r22, r18
     b12:	0e 94 ac 06 	call	0xd58	; 0xd58 <prvTestWaitCondition>
     b16:	88 23       	and	r24, r24
     b18:	99 f0       	breq	.+38     	; 0xb40 <xEventGroupWaitBits+0x166>
     b1a:	88 89       	ldd	r24, Y+16	; 0x10
     b1c:	88 23       	and	r24, r24
     b1e:	81 f0       	breq	.+32     	; 0xb40 <xEventGroupWaitBits+0x166>
     b20:	8d 81       	ldd	r24, Y+5	; 0x05
     b22:	9e 81       	ldd	r25, Y+6	; 0x06
     b24:	fc 01       	movw	r30, r24
     b26:	20 81       	ld	r18, Z
     b28:	31 81       	ldd	r19, Z+1	; 0x01
     b2a:	8e 85       	ldd	r24, Y+14	; 0x0e
     b2c:	9f 85       	ldd	r25, Y+15	; 0x0f
     b2e:	80 95       	com	r24
     b30:	90 95       	com	r25
     b32:	28 23       	and	r18, r24
     b34:	39 23       	and	r19, r25
     b36:	8d 81       	ldd	r24, Y+5	; 0x05
     b38:	9e 81       	ldd	r25, Y+6	; 0x06
     b3a:	fc 01       	movw	r30, r24
     b3c:	31 83       	std	Z+1, r19	; 0x01
     b3e:	20 83       	st	Z, r18
     b40:	81 e0       	ldi	r24, 0x01	; 1
     b42:	8f 83       	std	Y+7, r24	; 0x07
     b44:	0f 90       	pop	r0
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	89 81       	ldd	r24, Y+1	; 0x01
     b4a:	9a 81       	ldd	r25, Y+2	; 0x02
     b4c:	99 27       	eor	r25, r25
     b4e:	9a 83       	std	Y+2, r25	; 0x02
     b50:	89 83       	std	Y+1, r24	; 0x01
     b52:	89 81       	ldd	r24, Y+1	; 0x01
     b54:	9a 81       	ldd	r25, Y+2	; 0x02
     b56:	63 96       	adiw	r28, 0x13	; 19
     b58:	0f b6       	in	r0, 0x3f	; 63
     b5a:	f8 94       	cli
     b5c:	de bf       	out	0x3e, r29	; 62
     b5e:	0f be       	out	0x3f, r0	; 63
     b60:	cd bf       	out	0x3d, r28	; 61
     b62:	df 91       	pop	r29
     b64:	cf 91       	pop	r28
     b66:	1f 91       	pop	r17
     b68:	0f 91       	pop	r16
     b6a:	08 95       	ret

00000b6c <xEventGroupClearBits>:
     b6c:	cf 93       	push	r28
     b6e:	df 93       	push	r29
     b70:	cd b7       	in	r28, 0x3d	; 61
     b72:	de b7       	in	r29, 0x3e	; 62
     b74:	28 97       	sbiw	r28, 0x08	; 8
     b76:	0f b6       	in	r0, 0x3f	; 63
     b78:	f8 94       	cli
     b7a:	de bf       	out	0x3e, r29	; 62
     b7c:	0f be       	out	0x3f, r0	; 63
     b7e:	cd bf       	out	0x3d, r28	; 61
     b80:	9e 83       	std	Y+6, r25	; 0x06
     b82:	8d 83       	std	Y+5, r24	; 0x05
     b84:	78 87       	std	Y+8, r23	; 0x08
     b86:	6f 83       	std	Y+7, r22	; 0x07
     b88:	8d 81       	ldd	r24, Y+5	; 0x05
     b8a:	9e 81       	ldd	r25, Y+6	; 0x06
     b8c:	9a 83       	std	Y+2, r25	; 0x02
     b8e:	89 83       	std	Y+1, r24	; 0x01
     b90:	0f b6       	in	r0, 0x3f	; 63
     b92:	f8 94       	cli
     b94:	0f 92       	push	r0
     b96:	89 81       	ldd	r24, Y+1	; 0x01
     b98:	9a 81       	ldd	r25, Y+2	; 0x02
     b9a:	fc 01       	movw	r30, r24
     b9c:	80 81       	ld	r24, Z
     b9e:	91 81       	ldd	r25, Z+1	; 0x01
     ba0:	9c 83       	std	Y+4, r25	; 0x04
     ba2:	8b 83       	std	Y+3, r24	; 0x03
     ba4:	89 81       	ldd	r24, Y+1	; 0x01
     ba6:	9a 81       	ldd	r25, Y+2	; 0x02
     ba8:	fc 01       	movw	r30, r24
     baa:	20 81       	ld	r18, Z
     bac:	31 81       	ldd	r19, Z+1	; 0x01
     bae:	8f 81       	ldd	r24, Y+7	; 0x07
     bb0:	98 85       	ldd	r25, Y+8	; 0x08
     bb2:	80 95       	com	r24
     bb4:	90 95       	com	r25
     bb6:	28 23       	and	r18, r24
     bb8:	39 23       	and	r19, r25
     bba:	89 81       	ldd	r24, Y+1	; 0x01
     bbc:	9a 81       	ldd	r25, Y+2	; 0x02
     bbe:	fc 01       	movw	r30, r24
     bc0:	31 83       	std	Z+1, r19	; 0x01
     bc2:	20 83       	st	Z, r18
     bc4:	0f 90       	pop	r0
     bc6:	0f be       	out	0x3f, r0	; 63
     bc8:	8b 81       	ldd	r24, Y+3	; 0x03
     bca:	9c 81       	ldd	r25, Y+4	; 0x04
     bcc:	28 96       	adiw	r28, 0x08	; 8
     bce:	0f b6       	in	r0, 0x3f	; 63
     bd0:	f8 94       	cli
     bd2:	de bf       	out	0x3e, r29	; 62
     bd4:	0f be       	out	0x3f, r0	; 63
     bd6:	cd bf       	out	0x3d, r28	; 61
     bd8:	df 91       	pop	r29
     bda:	cf 91       	pop	r28
     bdc:	08 95       	ret

00000bde <xEventGroupSetBits>:
     bde:	cf 93       	push	r28
     be0:	df 93       	push	r29
     be2:	cd b7       	in	r28, 0x3d	; 61
     be4:	de b7       	in	r29, 0x3e	; 62
     be6:	65 97       	sbiw	r28, 0x15	; 21
     be8:	0f b6       	in	r0, 0x3f	; 63
     bea:	f8 94       	cli
     bec:	de bf       	out	0x3e, r29	; 62
     bee:	0f be       	out	0x3f, r0	; 63
     bf0:	cd bf       	out	0x3d, r28	; 61
     bf2:	9b 8b       	std	Y+19, r25	; 0x13
     bf4:	8a 8b       	std	Y+18, r24	; 0x12
     bf6:	7d 8b       	std	Y+21, r23	; 0x15
     bf8:	6c 8b       	std	Y+20, r22	; 0x14
     bfa:	1c 82       	std	Y+4, r1	; 0x04
     bfc:	1b 82       	std	Y+3, r1	; 0x03
     bfe:	8a 89       	ldd	r24, Y+18	; 0x12
     c00:	9b 89       	ldd	r25, Y+19	; 0x13
     c02:	9f 83       	std	Y+7, r25	; 0x07
     c04:	8e 83       	std	Y+6, r24	; 0x06
     c06:	1d 82       	std	Y+5, r1	; 0x05
     c08:	8e 81       	ldd	r24, Y+6	; 0x06
     c0a:	9f 81       	ldd	r25, Y+7	; 0x07
     c0c:	02 96       	adiw	r24, 0x02	; 2
     c0e:	99 87       	std	Y+9, r25	; 0x09
     c10:	88 87       	std	Y+8, r24	; 0x08
     c12:	88 85       	ldd	r24, Y+8	; 0x08
     c14:	99 85       	ldd	r25, Y+9	; 0x09
     c16:	03 96       	adiw	r24, 0x03	; 3
     c18:	9b 87       	std	Y+11, r25	; 0x0b
     c1a:	8a 87       	std	Y+10, r24	; 0x0a
     c1c:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <vTaskSuspendAll>
     c20:	88 85       	ldd	r24, Y+8	; 0x08
     c22:	99 85       	ldd	r25, Y+9	; 0x09
     c24:	fc 01       	movw	r30, r24
     c26:	85 81       	ldd	r24, Z+5	; 0x05
     c28:	96 81       	ldd	r25, Z+6	; 0x06
     c2a:	9a 83       	std	Y+2, r25	; 0x02
     c2c:	89 83       	std	Y+1, r24	; 0x01
     c2e:	8e 81       	ldd	r24, Y+6	; 0x06
     c30:	9f 81       	ldd	r25, Y+7	; 0x07
     c32:	fc 01       	movw	r30, r24
     c34:	20 81       	ld	r18, Z
     c36:	31 81       	ldd	r19, Z+1	; 0x01
     c38:	8c 89       	ldd	r24, Y+20	; 0x14
     c3a:	9d 89       	ldd	r25, Y+21	; 0x15
     c3c:	28 2b       	or	r18, r24
     c3e:	39 2b       	or	r19, r25
     c40:	8e 81       	ldd	r24, Y+6	; 0x06
     c42:	9f 81       	ldd	r25, Y+7	; 0x07
     c44:	fc 01       	movw	r30, r24
     c46:	31 83       	std	Z+1, r19	; 0x01
     c48:	20 83       	st	Z, r18
     c4a:	5e c0       	rjmp	.+188    	; 0xd08 <xEventGroupSetBits+0x12a>
     c4c:	89 81       	ldd	r24, Y+1	; 0x01
     c4e:	9a 81       	ldd	r25, Y+2	; 0x02
     c50:	fc 01       	movw	r30, r24
     c52:	82 81       	ldd	r24, Z+2	; 0x02
     c54:	93 81       	ldd	r25, Z+3	; 0x03
     c56:	9d 87       	std	Y+13, r25	; 0x0d
     c58:	8c 87       	std	Y+12, r24	; 0x0c
     c5a:	89 81       	ldd	r24, Y+1	; 0x01
     c5c:	9a 81       	ldd	r25, Y+2	; 0x02
     c5e:	fc 01       	movw	r30, r24
     c60:	80 81       	ld	r24, Z
     c62:	91 81       	ldd	r25, Z+1	; 0x01
     c64:	9f 87       	std	Y+15, r25	; 0x0f
     c66:	8e 87       	std	Y+14, r24	; 0x0e
     c68:	1d 82       	std	Y+5, r1	; 0x05
     c6a:	8e 85       	ldd	r24, Y+14	; 0x0e
     c6c:	9f 85       	ldd	r25, Y+15	; 0x0f
     c6e:	88 27       	eor	r24, r24
     c70:	99 8b       	std	Y+17, r25	; 0x11
     c72:	88 8b       	std	Y+16, r24	; 0x10
     c74:	8e 85       	ldd	r24, Y+14	; 0x0e
     c76:	9f 85       	ldd	r25, Y+15	; 0x0f
     c78:	99 27       	eor	r25, r25
     c7a:	9f 87       	std	Y+15, r25	; 0x0f
     c7c:	8e 87       	std	Y+14, r24	; 0x0e
     c7e:	88 89       	ldd	r24, Y+16	; 0x10
     c80:	99 89       	ldd	r25, Y+17	; 0x11
     c82:	88 27       	eor	r24, r24
     c84:	94 70       	andi	r25, 0x04	; 4
     c86:	89 2b       	or	r24, r25
     c88:	71 f4       	brne	.+28     	; 0xca6 <xEventGroupSetBits+0xc8>
     c8a:	8e 81       	ldd	r24, Y+6	; 0x06
     c8c:	9f 81       	ldd	r25, Y+7	; 0x07
     c8e:	fc 01       	movw	r30, r24
     c90:	20 81       	ld	r18, Z
     c92:	31 81       	ldd	r19, Z+1	; 0x01
     c94:	8e 85       	ldd	r24, Y+14	; 0x0e
     c96:	9f 85       	ldd	r25, Y+15	; 0x0f
     c98:	82 23       	and	r24, r18
     c9a:	93 23       	and	r25, r19
     c9c:	89 2b       	or	r24, r25
     c9e:	99 f0       	breq	.+38     	; 0xcc6 <xEventGroupSetBits+0xe8>
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	8d 83       	std	Y+5, r24	; 0x05
     ca4:	10 c0       	rjmp	.+32     	; 0xcc6 <xEventGroupSetBits+0xe8>
     ca6:	8e 81       	ldd	r24, Y+6	; 0x06
     ca8:	9f 81       	ldd	r25, Y+7	; 0x07
     caa:	fc 01       	movw	r30, r24
     cac:	20 81       	ld	r18, Z
     cae:	31 81       	ldd	r19, Z+1	; 0x01
     cb0:	8e 85       	ldd	r24, Y+14	; 0x0e
     cb2:	9f 85       	ldd	r25, Y+15	; 0x0f
     cb4:	28 23       	and	r18, r24
     cb6:	39 23       	and	r19, r25
     cb8:	8e 85       	ldd	r24, Y+14	; 0x0e
     cba:	9f 85       	ldd	r25, Y+15	; 0x0f
     cbc:	28 17       	cp	r18, r24
     cbe:	39 07       	cpc	r19, r25
     cc0:	11 f4       	brne	.+4      	; 0xcc6 <xEventGroupSetBits+0xe8>
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	8d 83       	std	Y+5, r24	; 0x05
     cc6:	8d 81       	ldd	r24, Y+5	; 0x05
     cc8:	88 23       	and	r24, r24
     cca:	d1 f0       	breq	.+52     	; 0xd00 <xEventGroupSetBits+0x122>
     ccc:	88 89       	ldd	r24, Y+16	; 0x10
     cce:	99 89       	ldd	r25, Y+17	; 0x11
     cd0:	88 27       	eor	r24, r24
     cd2:	91 70       	andi	r25, 0x01	; 1
     cd4:	89 2b       	or	r24, r25
     cd6:	41 f0       	breq	.+16     	; 0xce8 <xEventGroupSetBits+0x10a>
     cd8:	2b 81       	ldd	r18, Y+3	; 0x03
     cda:	3c 81       	ldd	r19, Y+4	; 0x04
     cdc:	8e 85       	ldd	r24, Y+14	; 0x0e
     cde:	9f 85       	ldd	r25, Y+15	; 0x0f
     ce0:	82 2b       	or	r24, r18
     ce2:	93 2b       	or	r25, r19
     ce4:	9c 83       	std	Y+4, r25	; 0x04
     ce6:	8b 83       	std	Y+3, r24	; 0x03
     ce8:	8e 81       	ldd	r24, Y+6	; 0x06
     cea:	9f 81       	ldd	r25, Y+7	; 0x07
     cec:	fc 01       	movw	r30, r24
     cee:	80 81       	ld	r24, Z
     cf0:	91 81       	ldd	r25, Z+1	; 0x01
     cf2:	9c 01       	movw	r18, r24
     cf4:	32 60       	ori	r19, 0x02	; 2
     cf6:	89 81       	ldd	r24, Y+1	; 0x01
     cf8:	9a 81       	ldd	r25, Y+2	; 0x02
     cfa:	b9 01       	movw	r22, r18
     cfc:	0e 94 05 11 	call	0x220a	; 0x220a <vTaskRemoveFromUnorderedEventList>
     d00:	8c 85       	ldd	r24, Y+12	; 0x0c
     d02:	9d 85       	ldd	r25, Y+13	; 0x0d
     d04:	9a 83       	std	Y+2, r25	; 0x02
     d06:	89 83       	std	Y+1, r24	; 0x01
     d08:	29 81       	ldd	r18, Y+1	; 0x01
     d0a:	3a 81       	ldd	r19, Y+2	; 0x02
     d0c:	8a 85       	ldd	r24, Y+10	; 0x0a
     d0e:	9b 85       	ldd	r25, Y+11	; 0x0b
     d10:	28 17       	cp	r18, r24
     d12:	39 07       	cpc	r19, r25
     d14:	09 f0       	breq	.+2      	; 0xd18 <xEventGroupSetBits+0x13a>
     d16:	9a cf       	rjmp	.-204    	; 0xc4c <xEventGroupSetBits+0x6e>
     d18:	8e 81       	ldd	r24, Y+6	; 0x06
     d1a:	9f 81       	ldd	r25, Y+7	; 0x07
     d1c:	fc 01       	movw	r30, r24
     d1e:	20 81       	ld	r18, Z
     d20:	31 81       	ldd	r19, Z+1	; 0x01
     d22:	8b 81       	ldd	r24, Y+3	; 0x03
     d24:	9c 81       	ldd	r25, Y+4	; 0x04
     d26:	80 95       	com	r24
     d28:	90 95       	com	r25
     d2a:	28 23       	and	r18, r24
     d2c:	39 23       	and	r19, r25
     d2e:	8e 81       	ldd	r24, Y+6	; 0x06
     d30:	9f 81       	ldd	r25, Y+7	; 0x07
     d32:	fc 01       	movw	r30, r24
     d34:	31 83       	std	Z+1, r19	; 0x01
     d36:	20 83       	st	Z, r18
     d38:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <xTaskResumeAll>
     d3c:	8e 81       	ldd	r24, Y+6	; 0x06
     d3e:	9f 81       	ldd	r25, Y+7	; 0x07
     d40:	fc 01       	movw	r30, r24
     d42:	80 81       	ld	r24, Z
     d44:	91 81       	ldd	r25, Z+1	; 0x01
     d46:	65 96       	adiw	r28, 0x15	; 21
     d48:	0f b6       	in	r0, 0x3f	; 63
     d4a:	f8 94       	cli
     d4c:	de bf       	out	0x3e, r29	; 62
     d4e:	0f be       	out	0x3f, r0	; 63
     d50:	cd bf       	out	0x3d, r28	; 61
     d52:	df 91       	pop	r29
     d54:	cf 91       	pop	r28
     d56:	08 95       	ret

00000d58 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
     d58:	cf 93       	push	r28
     d5a:	df 93       	push	r29
     d5c:	00 d0       	rcall	.+0      	; 0xd5e <prvTestWaitCondition+0x6>
     d5e:	00 d0       	rcall	.+0      	; 0xd60 <prvTestWaitCondition+0x8>
     d60:	00 d0       	rcall	.+0      	; 0xd62 <prvTestWaitCondition+0xa>
     d62:	cd b7       	in	r28, 0x3d	; 61
     d64:	de b7       	in	r29, 0x3e	; 62
     d66:	9b 83       	std	Y+3, r25	; 0x03
     d68:	8a 83       	std	Y+2, r24	; 0x02
     d6a:	7d 83       	std	Y+5, r23	; 0x05
     d6c:	6c 83       	std	Y+4, r22	; 0x04
     d6e:	4e 83       	std	Y+6, r20	; 0x06
BaseType_t xWaitConditionMet = pdFALSE;
     d70:	19 82       	std	Y+1, r1	; 0x01

	if( xWaitForAllBits == pdFALSE )
     d72:	8e 81       	ldd	r24, Y+6	; 0x06
     d74:	88 23       	and	r24, r24
     d76:	59 f4       	brne	.+22     	; 0xd8e <prvTestWaitCondition+0x36>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
     d78:	2a 81       	ldd	r18, Y+2	; 0x02
     d7a:	3b 81       	ldd	r19, Y+3	; 0x03
     d7c:	8c 81       	ldd	r24, Y+4	; 0x04
     d7e:	9d 81       	ldd	r25, Y+5	; 0x05
     d80:	82 23       	and	r24, r18
     d82:	93 23       	and	r25, r19
     d84:	89 2b       	or	r24, r25
     d86:	81 f0       	breq	.+32     	; 0xda8 <prvTestWaitCondition+0x50>
		{
			xWaitConditionMet = pdTRUE;
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	89 83       	std	Y+1, r24	; 0x01
     d8c:	0d c0       	rjmp	.+26     	; 0xda8 <prvTestWaitCondition+0x50>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
     d8e:	2a 81       	ldd	r18, Y+2	; 0x02
     d90:	3b 81       	ldd	r19, Y+3	; 0x03
     d92:	8c 81       	ldd	r24, Y+4	; 0x04
     d94:	9d 81       	ldd	r25, Y+5	; 0x05
     d96:	28 23       	and	r18, r24
     d98:	39 23       	and	r19, r25
     d9a:	8c 81       	ldd	r24, Y+4	; 0x04
     d9c:	9d 81       	ldd	r25, Y+5	; 0x05
     d9e:	28 17       	cp	r18, r24
     da0:	39 07       	cpc	r19, r25
     da2:	11 f4       	brne	.+4      	; 0xda8 <prvTestWaitCondition+0x50>
		{
			xWaitConditionMet = pdTRUE;
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	89 83       	std	Y+1, r24	; 0x01
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
     da8:	89 81       	ldd	r24, Y+1	; 0x01
}
     daa:	26 96       	adiw	r28, 0x06	; 6
     dac:	0f b6       	in	r0, 0x3f	; 63
     dae:	f8 94       	cli
     db0:	de bf       	out	0x3e, r29	; 62
     db2:	0f be       	out	0x3f, r0	; 63
     db4:	cd bf       	out	0x3d, r28	; 61
     db6:	df 91       	pop	r29
     db8:	cf 91       	pop	r28
     dba:	08 95       	ret

00000dbc <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     dbc:	cf 93       	push	r28
     dbe:	df 93       	push	r29
     dc0:	00 d0       	rcall	.+0      	; 0xdc2 <pvPortMalloc+0x6>
     dc2:	00 d0       	rcall	.+0      	; 0xdc4 <pvPortMalloc+0x8>
     dc4:	cd b7       	in	r28, 0x3d	; 61
     dc6:	de b7       	in	r29, 0x3e	; 62
     dc8:	9c 83       	std	Y+4, r25	; 0x04
     dca:	8b 83       	std	Y+3, r24	; 0x03
void *pvReturn = NULL;
     dcc:	1a 82       	std	Y+2, r1	; 0x02
     dce:	19 82       	std	Y+1, r1	; 0x01
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	}
	#endif

	vTaskSuspendAll();
     dd0:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
     dd4:	80 91 b1 06 	lds	r24, 0x06B1	; 0x8006b1 <pucAlignedHeap.2085>
     dd8:	90 91 b2 06 	lds	r25, 0x06B2	; 0x8006b2 <pucAlignedHeap.2085+0x1>
     ddc:	89 2b       	or	r24, r25
     dde:	31 f4       	brne	.+12     	; 0xdec <pvPortMalloc+0x30>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
     de0:	84 ed       	ldi	r24, 0xD4	; 212
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	90 93 b2 06 	sts	0x06B2, r25	; 0x8006b2 <pucAlignedHeap.2085+0x1>
     de8:	80 93 b1 06 	sts	0x06B1, r24	; 0x8006b1 <pucAlignedHeap.2085>
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     dec:	20 91 af 06 	lds	r18, 0x06AF	; 0x8006af <xNextFreeByte>
     df0:	30 91 b0 06 	lds	r19, 0x06B0	; 0x8006b0 <xNextFreeByte+0x1>
     df4:	8b 81       	ldd	r24, Y+3	; 0x03
     df6:	9c 81       	ldd	r25, Y+4	; 0x04
     df8:	82 0f       	add	r24, r18
     dfa:	93 1f       	adc	r25, r19
     dfc:	8b 3d       	cpi	r24, 0xDB	; 219
     dfe:	95 40       	sbci	r25, 0x05	; 5
     e00:	38 f5       	brcc	.+78     	; 0xe50 <pvPortMalloc+0x94>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
     e02:	20 91 af 06 	lds	r18, 0x06AF	; 0x8006af <xNextFreeByte>
     e06:	30 91 b0 06 	lds	r19, 0x06B0	; 0x8006b0 <xNextFreeByte+0x1>
     e0a:	8b 81       	ldd	r24, Y+3	; 0x03
     e0c:	9c 81       	ldd	r25, Y+4	; 0x04
     e0e:	28 0f       	add	r18, r24
     e10:	39 1f       	adc	r19, r25
     e12:	80 91 af 06 	lds	r24, 0x06AF	; 0x8006af <xNextFreeByte>
     e16:	90 91 b0 06 	lds	r25, 0x06B0	; 0x8006b0 <xNextFreeByte+0x1>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     e1a:	82 17       	cp	r24, r18
     e1c:	93 07       	cpc	r25, r19
     e1e:	c0 f4       	brcc	.+48     	; 0xe50 <pvPortMalloc+0x94>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
     e20:	20 91 b1 06 	lds	r18, 0x06B1	; 0x8006b1 <pucAlignedHeap.2085>
     e24:	30 91 b2 06 	lds	r19, 0x06B2	; 0x8006b2 <pucAlignedHeap.2085+0x1>
     e28:	80 91 af 06 	lds	r24, 0x06AF	; 0x8006af <xNextFreeByte>
     e2c:	90 91 b0 06 	lds	r25, 0x06B0	; 0x8006b0 <xNextFreeByte+0x1>
     e30:	82 0f       	add	r24, r18
     e32:	93 1f       	adc	r25, r19
     e34:	9a 83       	std	Y+2, r25	; 0x02
     e36:	89 83       	std	Y+1, r24	; 0x01
			xNextFreeByte += xWantedSize;
     e38:	20 91 af 06 	lds	r18, 0x06AF	; 0x8006af <xNextFreeByte>
     e3c:	30 91 b0 06 	lds	r19, 0x06B0	; 0x8006b0 <xNextFreeByte+0x1>
     e40:	8b 81       	ldd	r24, Y+3	; 0x03
     e42:	9c 81       	ldd	r25, Y+4	; 0x04
     e44:	82 0f       	add	r24, r18
     e46:	93 1f       	adc	r25, r19
     e48:	90 93 b0 06 	sts	0x06B0, r25	; 0x8006b0 <xNextFreeByte+0x1>
     e4c:	80 93 af 06 	sts	0x06AF, r24	; 0x8006af <xNextFreeByte>
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     e50:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
     e54:	89 81       	ldd	r24, Y+1	; 0x01
     e56:	9a 81       	ldd	r25, Y+2	; 0x02
}
     e58:	0f 90       	pop	r0
     e5a:	0f 90       	pop	r0
     e5c:	0f 90       	pop	r0
     e5e:	0f 90       	pop	r0
     e60:	df 91       	pop	r29
     e62:	cf 91       	pop	r28
     e64:	08 95       	ret

00000e66 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     e66:	cf 93       	push	r28
     e68:	df 93       	push	r29
     e6a:	00 d0       	rcall	.+0      	; 0xe6c <vPortFree+0x6>
     e6c:	cd b7       	in	r28, 0x3d	; 61
     e6e:	de b7       	in	r29, 0x3e	; 62
     e70:	9a 83       	std	Y+2, r25	; 0x02
     e72:	89 83       	std	Y+1, r24	; 0x01
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
}
     e74:	00 00       	nop
     e76:	0f 90       	pop	r0
     e78:	0f 90       	pop	r0
     e7a:	df 91       	pop	r29
     e7c:	cf 91       	pop	r28
     e7e:	08 95       	ret

00000e80 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     e80:	cf 93       	push	r28
     e82:	df 93       	push	r29
     e84:	00 d0       	rcall	.+0      	; 0xe86 <vListInitialise+0x6>
     e86:	cd b7       	in	r28, 0x3d	; 61
     e88:	de b7       	in	r29, 0x3e	; 62
     e8a:	9a 83       	std	Y+2, r25	; 0x02
     e8c:	89 83       	std	Y+1, r24	; 0x01
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     e8e:	89 81       	ldd	r24, Y+1	; 0x01
     e90:	9a 81       	ldd	r25, Y+2	; 0x02
     e92:	9c 01       	movw	r18, r24
     e94:	2d 5f       	subi	r18, 0xFD	; 253
     e96:	3f 4f       	sbci	r19, 0xFF	; 255
     e98:	89 81       	ldd	r24, Y+1	; 0x01
     e9a:	9a 81       	ldd	r25, Y+2	; 0x02
     e9c:	fc 01       	movw	r30, r24
     e9e:	32 83       	std	Z+2, r19	; 0x02
     ea0:	21 83       	std	Z+1, r18	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     ea2:	89 81       	ldd	r24, Y+1	; 0x01
     ea4:	9a 81       	ldd	r25, Y+2	; 0x02
     ea6:	2f ef       	ldi	r18, 0xFF	; 255
     ea8:	3f ef       	ldi	r19, 0xFF	; 255
     eaa:	fc 01       	movw	r30, r24
     eac:	34 83       	std	Z+4, r19	; 0x04
     eae:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     eb0:	89 81       	ldd	r24, Y+1	; 0x01
     eb2:	9a 81       	ldd	r25, Y+2	; 0x02
     eb4:	9c 01       	movw	r18, r24
     eb6:	2d 5f       	subi	r18, 0xFD	; 253
     eb8:	3f 4f       	sbci	r19, 0xFF	; 255
     eba:	89 81       	ldd	r24, Y+1	; 0x01
     ebc:	9a 81       	ldd	r25, Y+2	; 0x02
     ebe:	fc 01       	movw	r30, r24
     ec0:	36 83       	std	Z+6, r19	; 0x06
     ec2:	25 83       	std	Z+5, r18	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     ec4:	89 81       	ldd	r24, Y+1	; 0x01
     ec6:	9a 81       	ldd	r25, Y+2	; 0x02
     ec8:	9c 01       	movw	r18, r24
     eca:	2d 5f       	subi	r18, 0xFD	; 253
     ecc:	3f 4f       	sbci	r19, 0xFF	; 255
     ece:	89 81       	ldd	r24, Y+1	; 0x01
     ed0:	9a 81       	ldd	r25, Y+2	; 0x02
     ed2:	fc 01       	movw	r30, r24
     ed4:	30 87       	std	Z+8, r19	; 0x08
     ed6:	27 83       	std	Z+7, r18	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     ed8:	89 81       	ldd	r24, Y+1	; 0x01
     eda:	9a 81       	ldd	r25, Y+2	; 0x02
     edc:	fc 01       	movw	r30, r24
     ede:	10 82       	st	Z, r1

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
     ee0:	00 00       	nop
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	df 91       	pop	r29
     ee8:	cf 91       	pop	r28
     eea:	08 95       	ret

00000eec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
     eec:	cf 93       	push	r28
     eee:	df 93       	push	r29
     ef0:	00 d0       	rcall	.+0      	; 0xef2 <vListInitialiseItem+0x6>
     ef2:	cd b7       	in	r28, 0x3d	; 61
     ef4:	de b7       	in	r29, 0x3e	; 62
     ef6:	9a 83       	std	Y+2, r25	; 0x02
     ef8:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
     efa:	89 81       	ldd	r24, Y+1	; 0x01
     efc:	9a 81       	ldd	r25, Y+2	; 0x02
     efe:	fc 01       	movw	r30, r24
     f00:	11 86       	std	Z+9, r1	; 0x09
     f02:	10 86       	std	Z+8, r1	; 0x08

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
     f04:	00 00       	nop
     f06:	0f 90       	pop	r0
     f08:	0f 90       	pop	r0
     f0a:	df 91       	pop	r29
     f0c:	cf 91       	pop	r28
     f0e:	08 95       	ret

00000f10 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     f10:	cf 93       	push	r28
     f12:	df 93       	push	r29
     f14:	00 d0       	rcall	.+0      	; 0xf16 <vListInsertEnd+0x6>
     f16:	00 d0       	rcall	.+0      	; 0xf18 <vListInsertEnd+0x8>
     f18:	00 d0       	rcall	.+0      	; 0xf1a <vListInsertEnd+0xa>
     f1a:	cd b7       	in	r28, 0x3d	; 61
     f1c:	de b7       	in	r29, 0x3e	; 62
     f1e:	9c 83       	std	Y+4, r25	; 0x04
     f20:	8b 83       	std	Y+3, r24	; 0x03
     f22:	7e 83       	std	Y+6, r23	; 0x06
     f24:	6d 83       	std	Y+5, r22	; 0x05
ListItem_t * const pxIndex = pxList->pxIndex;
     f26:	8b 81       	ldd	r24, Y+3	; 0x03
     f28:	9c 81       	ldd	r25, Y+4	; 0x04
     f2a:	fc 01       	movw	r30, r24
     f2c:	81 81       	ldd	r24, Z+1	; 0x01
     f2e:	92 81       	ldd	r25, Z+2	; 0x02
     f30:	9a 83       	std	Y+2, r25	; 0x02
     f32:	89 83       	std	Y+1, r24	; 0x01
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     f34:	8d 81       	ldd	r24, Y+5	; 0x05
     f36:	9e 81       	ldd	r25, Y+6	; 0x06
     f38:	29 81       	ldd	r18, Y+1	; 0x01
     f3a:	3a 81       	ldd	r19, Y+2	; 0x02
     f3c:	fc 01       	movw	r30, r24
     f3e:	33 83       	std	Z+3, r19	; 0x03
     f40:	22 83       	std	Z+2, r18	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     f42:	89 81       	ldd	r24, Y+1	; 0x01
     f44:	9a 81       	ldd	r25, Y+2	; 0x02
     f46:	fc 01       	movw	r30, r24
     f48:	24 81       	ldd	r18, Z+4	; 0x04
     f4a:	35 81       	ldd	r19, Z+5	; 0x05
     f4c:	8d 81       	ldd	r24, Y+5	; 0x05
     f4e:	9e 81       	ldd	r25, Y+6	; 0x06
     f50:	fc 01       	movw	r30, r24
     f52:	35 83       	std	Z+5, r19	; 0x05
     f54:	24 83       	std	Z+4, r18	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     f56:	89 81       	ldd	r24, Y+1	; 0x01
     f58:	9a 81       	ldd	r25, Y+2	; 0x02
     f5a:	fc 01       	movw	r30, r24
     f5c:	84 81       	ldd	r24, Z+4	; 0x04
     f5e:	95 81       	ldd	r25, Z+5	; 0x05
     f60:	2d 81       	ldd	r18, Y+5	; 0x05
     f62:	3e 81       	ldd	r19, Y+6	; 0x06
     f64:	fc 01       	movw	r30, r24
     f66:	33 83       	std	Z+3, r19	; 0x03
     f68:	22 83       	std	Z+2, r18	; 0x02
	pxIndex->pxPrevious = pxNewListItem;
     f6a:	89 81       	ldd	r24, Y+1	; 0x01
     f6c:	9a 81       	ldd	r25, Y+2	; 0x02
     f6e:	2d 81       	ldd	r18, Y+5	; 0x05
     f70:	3e 81       	ldd	r19, Y+6	; 0x06
     f72:	fc 01       	movw	r30, r24
     f74:	35 83       	std	Z+5, r19	; 0x05
     f76:	24 83       	std	Z+4, r18	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
     f78:	8d 81       	ldd	r24, Y+5	; 0x05
     f7a:	9e 81       	ldd	r25, Y+6	; 0x06
     f7c:	2b 81       	ldd	r18, Y+3	; 0x03
     f7e:	3c 81       	ldd	r19, Y+4	; 0x04
     f80:	fc 01       	movw	r30, r24
     f82:	31 87       	std	Z+9, r19	; 0x09
     f84:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
     f86:	8b 81       	ldd	r24, Y+3	; 0x03
     f88:	9c 81       	ldd	r25, Y+4	; 0x04
     f8a:	fc 01       	movw	r30, r24
     f8c:	80 81       	ld	r24, Z
     f8e:	21 e0       	ldi	r18, 0x01	; 1
     f90:	28 0f       	add	r18, r24
     f92:	8b 81       	ldd	r24, Y+3	; 0x03
     f94:	9c 81       	ldd	r25, Y+4	; 0x04
     f96:	fc 01       	movw	r30, r24
     f98:	20 83       	st	Z, r18
}
     f9a:	00 00       	nop
     f9c:	26 96       	adiw	r28, 0x06	; 6
     f9e:	0f b6       	in	r0, 0x3f	; 63
     fa0:	f8 94       	cli
     fa2:	de bf       	out	0x3e, r29	; 62
     fa4:	0f be       	out	0x3f, r0	; 63
     fa6:	cd bf       	out	0x3d, r28	; 61
     fa8:	df 91       	pop	r29
     faa:	cf 91       	pop	r28
     fac:	08 95       	ret

00000fae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     fae:	cf 93       	push	r28
     fb0:	df 93       	push	r29
     fb2:	cd b7       	in	r28, 0x3d	; 61
     fb4:	de b7       	in	r29, 0x3e	; 62
     fb6:	28 97       	sbiw	r28, 0x08	; 8
     fb8:	0f b6       	in	r0, 0x3f	; 63
     fba:	f8 94       	cli
     fbc:	de bf       	out	0x3e, r29	; 62
     fbe:	0f be       	out	0x3f, r0	; 63
     fc0:	cd bf       	out	0x3d, r28	; 61
     fc2:	9e 83       	std	Y+6, r25	; 0x06
     fc4:	8d 83       	std	Y+5, r24	; 0x05
     fc6:	78 87       	std	Y+8, r23	; 0x08
     fc8:	6f 83       	std	Y+7, r22	; 0x07
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     fca:	8f 81       	ldd	r24, Y+7	; 0x07
     fcc:	98 85       	ldd	r25, Y+8	; 0x08
     fce:	fc 01       	movw	r30, r24
     fd0:	80 81       	ld	r24, Z
     fd2:	91 81       	ldd	r25, Z+1	; 0x01
     fd4:	9c 83       	std	Y+4, r25	; 0x04
     fd6:	8b 83       	std	Y+3, r24	; 0x03
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     fd8:	8b 81       	ldd	r24, Y+3	; 0x03
     fda:	9c 81       	ldd	r25, Y+4	; 0x04
     fdc:	01 96       	adiw	r24, 0x01	; 1
     fde:	41 f4       	brne	.+16     	; 0xff0 <vListInsert+0x42>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     fe0:	8d 81       	ldd	r24, Y+5	; 0x05
     fe2:	9e 81       	ldd	r25, Y+6	; 0x06
     fe4:	fc 01       	movw	r30, r24
     fe6:	87 81       	ldd	r24, Z+7	; 0x07
     fe8:	90 85       	ldd	r25, Z+8	; 0x08
     fea:	9a 83       	std	Y+2, r25	; 0x02
     fec:	89 83       	std	Y+1, r24	; 0x01
     fee:	1a c0       	rjmp	.+52     	; 0x1024 <vListInsert+0x76>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     ff0:	8d 81       	ldd	r24, Y+5	; 0x05
     ff2:	9e 81       	ldd	r25, Y+6	; 0x06
     ff4:	03 96       	adiw	r24, 0x03	; 3
     ff6:	9a 83       	std	Y+2, r25	; 0x02
     ff8:	89 83       	std	Y+1, r24	; 0x01
     ffa:	07 c0       	rjmp	.+14     	; 0x100a <vListInsert+0x5c>
     ffc:	89 81       	ldd	r24, Y+1	; 0x01
     ffe:	9a 81       	ldd	r25, Y+2	; 0x02
    1000:	fc 01       	movw	r30, r24
    1002:	82 81       	ldd	r24, Z+2	; 0x02
    1004:	93 81       	ldd	r25, Z+3	; 0x03
    1006:	9a 83       	std	Y+2, r25	; 0x02
    1008:	89 83       	std	Y+1, r24	; 0x01
    100a:	89 81       	ldd	r24, Y+1	; 0x01
    100c:	9a 81       	ldd	r25, Y+2	; 0x02
    100e:	fc 01       	movw	r30, r24
    1010:	82 81       	ldd	r24, Z+2	; 0x02
    1012:	93 81       	ldd	r25, Z+3	; 0x03
    1014:	fc 01       	movw	r30, r24
    1016:	20 81       	ld	r18, Z
    1018:	31 81       	ldd	r19, Z+1	; 0x01
    101a:	8b 81       	ldd	r24, Y+3	; 0x03
    101c:	9c 81       	ldd	r25, Y+4	; 0x04
    101e:	82 17       	cp	r24, r18
    1020:	93 07       	cpc	r25, r19
    1022:	60 f7       	brcc	.-40     	; 0xffc <vListInsert+0x4e>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    1024:	89 81       	ldd	r24, Y+1	; 0x01
    1026:	9a 81       	ldd	r25, Y+2	; 0x02
    1028:	fc 01       	movw	r30, r24
    102a:	22 81       	ldd	r18, Z+2	; 0x02
    102c:	33 81       	ldd	r19, Z+3	; 0x03
    102e:	8f 81       	ldd	r24, Y+7	; 0x07
    1030:	98 85       	ldd	r25, Y+8	; 0x08
    1032:	fc 01       	movw	r30, r24
    1034:	33 83       	std	Z+3, r19	; 0x03
    1036:	22 83       	std	Z+2, r18	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    1038:	8f 81       	ldd	r24, Y+7	; 0x07
    103a:	98 85       	ldd	r25, Y+8	; 0x08
    103c:	fc 01       	movw	r30, r24
    103e:	82 81       	ldd	r24, Z+2	; 0x02
    1040:	93 81       	ldd	r25, Z+3	; 0x03
    1042:	2f 81       	ldd	r18, Y+7	; 0x07
    1044:	38 85       	ldd	r19, Y+8	; 0x08
    1046:	fc 01       	movw	r30, r24
    1048:	35 83       	std	Z+5, r19	; 0x05
    104a:	24 83       	std	Z+4, r18	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    104c:	8f 81       	ldd	r24, Y+7	; 0x07
    104e:	98 85       	ldd	r25, Y+8	; 0x08
    1050:	29 81       	ldd	r18, Y+1	; 0x01
    1052:	3a 81       	ldd	r19, Y+2	; 0x02
    1054:	fc 01       	movw	r30, r24
    1056:	35 83       	std	Z+5, r19	; 0x05
    1058:	24 83       	std	Z+4, r18	; 0x04
	pxIterator->pxNext = pxNewListItem;
    105a:	89 81       	ldd	r24, Y+1	; 0x01
    105c:	9a 81       	ldd	r25, Y+2	; 0x02
    105e:	2f 81       	ldd	r18, Y+7	; 0x07
    1060:	38 85       	ldd	r19, Y+8	; 0x08
    1062:	fc 01       	movw	r30, r24
    1064:	33 83       	std	Z+3, r19	; 0x03
    1066:	22 83       	std	Z+2, r18	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
    1068:	8f 81       	ldd	r24, Y+7	; 0x07
    106a:	98 85       	ldd	r25, Y+8	; 0x08
    106c:	2d 81       	ldd	r18, Y+5	; 0x05
    106e:	3e 81       	ldd	r19, Y+6	; 0x06
    1070:	fc 01       	movw	r30, r24
    1072:	31 87       	std	Z+9, r19	; 0x09
    1074:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
    1076:	8d 81       	ldd	r24, Y+5	; 0x05
    1078:	9e 81       	ldd	r25, Y+6	; 0x06
    107a:	fc 01       	movw	r30, r24
    107c:	80 81       	ld	r24, Z
    107e:	21 e0       	ldi	r18, 0x01	; 1
    1080:	28 0f       	add	r18, r24
    1082:	8d 81       	ldd	r24, Y+5	; 0x05
    1084:	9e 81       	ldd	r25, Y+6	; 0x06
    1086:	fc 01       	movw	r30, r24
    1088:	20 83       	st	Z, r18
}
    108a:	00 00       	nop
    108c:	28 96       	adiw	r28, 0x08	; 8
    108e:	0f b6       	in	r0, 0x3f	; 63
    1090:	f8 94       	cli
    1092:	de bf       	out	0x3e, r29	; 62
    1094:	0f be       	out	0x3f, r0	; 63
    1096:	cd bf       	out	0x3d, r28	; 61
    1098:	df 91       	pop	r29
    109a:	cf 91       	pop	r28
    109c:	08 95       	ret

0000109e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    109e:	cf 93       	push	r28
    10a0:	df 93       	push	r29
    10a2:	00 d0       	rcall	.+0      	; 0x10a4 <uxListRemove+0x6>
    10a4:	00 d0       	rcall	.+0      	; 0x10a6 <uxListRemove+0x8>
    10a6:	cd b7       	in	r28, 0x3d	; 61
    10a8:	de b7       	in	r29, 0x3e	; 62
    10aa:	9c 83       	std	Y+4, r25	; 0x04
    10ac:	8b 83       	std	Y+3, r24	; 0x03
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    10ae:	8b 81       	ldd	r24, Y+3	; 0x03
    10b0:	9c 81       	ldd	r25, Y+4	; 0x04
    10b2:	fc 01       	movw	r30, r24
    10b4:	80 85       	ldd	r24, Z+8	; 0x08
    10b6:	91 85       	ldd	r25, Z+9	; 0x09
    10b8:	9a 83       	std	Y+2, r25	; 0x02
    10ba:	89 83       	std	Y+1, r24	; 0x01

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    10bc:	8b 81       	ldd	r24, Y+3	; 0x03
    10be:	9c 81       	ldd	r25, Y+4	; 0x04
    10c0:	fc 01       	movw	r30, r24
    10c2:	82 81       	ldd	r24, Z+2	; 0x02
    10c4:	93 81       	ldd	r25, Z+3	; 0x03
    10c6:	2b 81       	ldd	r18, Y+3	; 0x03
    10c8:	3c 81       	ldd	r19, Y+4	; 0x04
    10ca:	f9 01       	movw	r30, r18
    10cc:	24 81       	ldd	r18, Z+4	; 0x04
    10ce:	35 81       	ldd	r19, Z+5	; 0x05
    10d0:	fc 01       	movw	r30, r24
    10d2:	35 83       	std	Z+5, r19	; 0x05
    10d4:	24 83       	std	Z+4, r18	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    10d6:	8b 81       	ldd	r24, Y+3	; 0x03
    10d8:	9c 81       	ldd	r25, Y+4	; 0x04
    10da:	fc 01       	movw	r30, r24
    10dc:	84 81       	ldd	r24, Z+4	; 0x04
    10de:	95 81       	ldd	r25, Z+5	; 0x05
    10e0:	2b 81       	ldd	r18, Y+3	; 0x03
    10e2:	3c 81       	ldd	r19, Y+4	; 0x04
    10e4:	f9 01       	movw	r30, r18
    10e6:	22 81       	ldd	r18, Z+2	; 0x02
    10e8:	33 81       	ldd	r19, Z+3	; 0x03
    10ea:	fc 01       	movw	r30, r24
    10ec:	33 83       	std	Z+3, r19	; 0x03
    10ee:	22 83       	std	Z+2, r18	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    10f0:	89 81       	ldd	r24, Y+1	; 0x01
    10f2:	9a 81       	ldd	r25, Y+2	; 0x02
    10f4:	fc 01       	movw	r30, r24
    10f6:	21 81       	ldd	r18, Z+1	; 0x01
    10f8:	32 81       	ldd	r19, Z+2	; 0x02
    10fa:	8b 81       	ldd	r24, Y+3	; 0x03
    10fc:	9c 81       	ldd	r25, Y+4	; 0x04
    10fe:	28 17       	cp	r18, r24
    1100:	39 07       	cpc	r19, r25
    1102:	51 f4       	brne	.+20     	; 0x1118 <uxListRemove+0x7a>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    1104:	8b 81       	ldd	r24, Y+3	; 0x03
    1106:	9c 81       	ldd	r25, Y+4	; 0x04
    1108:	fc 01       	movw	r30, r24
    110a:	24 81       	ldd	r18, Z+4	; 0x04
    110c:	35 81       	ldd	r19, Z+5	; 0x05
    110e:	89 81       	ldd	r24, Y+1	; 0x01
    1110:	9a 81       	ldd	r25, Y+2	; 0x02
    1112:	fc 01       	movw	r30, r24
    1114:	32 83       	std	Z+2, r19	; 0x02
    1116:	21 83       	std	Z+1, r18	; 0x01
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
    1118:	8b 81       	ldd	r24, Y+3	; 0x03
    111a:	9c 81       	ldd	r25, Y+4	; 0x04
    111c:	fc 01       	movw	r30, r24
    111e:	11 86       	std	Z+9, r1	; 0x09
    1120:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
    1122:	89 81       	ldd	r24, Y+1	; 0x01
    1124:	9a 81       	ldd	r25, Y+2	; 0x02
    1126:	fc 01       	movw	r30, r24
    1128:	80 81       	ld	r24, Z
    112a:	2f ef       	ldi	r18, 0xFF	; 255
    112c:	28 0f       	add	r18, r24
    112e:	89 81       	ldd	r24, Y+1	; 0x01
    1130:	9a 81       	ldd	r25, Y+2	; 0x02
    1132:	fc 01       	movw	r30, r24
    1134:	20 83       	st	Z, r18

	return pxList->uxNumberOfItems;
    1136:	89 81       	ldd	r24, Y+1	; 0x01
    1138:	9a 81       	ldd	r25, Y+2	; 0x02
    113a:	fc 01       	movw	r30, r24
    113c:	80 81       	ld	r24, Z
}
    113e:	0f 90       	pop	r0
    1140:	0f 90       	pop	r0
    1142:	0f 90       	pop	r0
    1144:	0f 90       	pop	r0
    1146:	df 91       	pop	r29
    1148:	cf 91       	pop	r28
    114a:	08 95       	ret

0000114c <pxPortInitialiseStack>:

void vPortEndScheduler( void )
{
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    114c:	cf 93       	push	r28
    114e:	df 93       	push	r29
    1150:	cd b7       	in	r28, 0x3d	; 61
    1152:	de b7       	in	r29, 0x3e	; 62
    1154:	28 97       	sbiw	r28, 0x08	; 8
    1156:	0f b6       	in	r0, 0x3f	; 63
    1158:	f8 94       	cli
    115a:	de bf       	out	0x3e, r29	; 62
    115c:	0f be       	out	0x3f, r0	; 63
    115e:	cd bf       	out	0x3d, r28	; 61
    1160:	9c 83       	std	Y+4, r25	; 0x04
    1162:	8b 83       	std	Y+3, r24	; 0x03
    1164:	7e 83       	std	Y+6, r23	; 0x06
    1166:	6d 83       	std	Y+5, r22	; 0x05
    1168:	58 87       	std	Y+8, r21	; 0x08
    116a:	4f 83       	std	Y+7, r20	; 0x07
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	9c 81       	ldd	r25, Y+4	; 0x04
    1170:	21 e1       	ldi	r18, 0x11	; 17
    1172:	fc 01       	movw	r30, r24
    1174:	20 83       	st	Z, r18
    1176:	8b 81       	ldd	r24, Y+3	; 0x03
    1178:	9c 81       	ldd	r25, Y+4	; 0x04
    117a:	01 97       	sbiw	r24, 0x01	; 1
    117c:	9c 83       	std	Y+4, r25	; 0x04
    117e:	8b 83       	std	Y+3, r24	; 0x03
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	9c 81       	ldd	r25, Y+4	; 0x04
    1184:	22 e2       	ldi	r18, 0x22	; 34
    1186:	fc 01       	movw	r30, r24
    1188:	20 83       	st	Z, r18
    118a:	8b 81       	ldd	r24, Y+3	; 0x03
    118c:	9c 81       	ldd	r25, Y+4	; 0x04
    118e:	01 97       	sbiw	r24, 0x01	; 1
    1190:	9c 83       	std	Y+4, r25	; 0x04
    1192:	8b 83       	std	Y+3, r24	; 0x03
    1194:	8b 81       	ldd	r24, Y+3	; 0x03
    1196:	9c 81       	ldd	r25, Y+4	; 0x04
    1198:	23 e3       	ldi	r18, 0x33	; 51
    119a:	fc 01       	movw	r30, r24
    119c:	20 83       	st	Z, r18
    119e:	8b 81       	ldd	r24, Y+3	; 0x03
    11a0:	9c 81       	ldd	r25, Y+4	; 0x04
    11a2:	01 97       	sbiw	r24, 0x01	; 1
    11a4:	9c 83       	std	Y+4, r25	; 0x04
    11a6:	8b 83       	std	Y+3, r24	; 0x03
    11a8:	8d 81       	ldd	r24, Y+5	; 0x05
    11aa:	9e 81       	ldd	r25, Y+6	; 0x06
    11ac:	9a 83       	std	Y+2, r25	; 0x02
    11ae:	89 83       	std	Y+1, r24	; 0x01
    11b0:	29 81       	ldd	r18, Y+1	; 0x01
    11b2:	8b 81       	ldd	r24, Y+3	; 0x03
    11b4:	9c 81       	ldd	r25, Y+4	; 0x04
    11b6:	fc 01       	movw	r30, r24
    11b8:	20 83       	st	Z, r18
    11ba:	8b 81       	ldd	r24, Y+3	; 0x03
    11bc:	9c 81       	ldd	r25, Y+4	; 0x04
    11be:	01 97       	sbiw	r24, 0x01	; 1
    11c0:	9c 83       	std	Y+4, r25	; 0x04
    11c2:	8b 83       	std	Y+3, r24	; 0x03
    11c4:	89 81       	ldd	r24, Y+1	; 0x01
    11c6:	9a 81       	ldd	r25, Y+2	; 0x02
    11c8:	89 2f       	mov	r24, r25
    11ca:	99 27       	eor	r25, r25
    11cc:	9a 83       	std	Y+2, r25	; 0x02
    11ce:	89 83       	std	Y+1, r24	; 0x01
    11d0:	29 81       	ldd	r18, Y+1	; 0x01
    11d2:	8b 81       	ldd	r24, Y+3	; 0x03
    11d4:	9c 81       	ldd	r25, Y+4	; 0x04
    11d6:	fc 01       	movw	r30, r24
    11d8:	20 83       	st	Z, r18
    11da:	8b 81       	ldd	r24, Y+3	; 0x03
    11dc:	9c 81       	ldd	r25, Y+4	; 0x04
    11de:	01 97       	sbiw	r24, 0x01	; 1
    11e0:	9c 83       	std	Y+4, r25	; 0x04
    11e2:	8b 83       	std	Y+3, r24	; 0x03
    11e4:	8b 81       	ldd	r24, Y+3	; 0x03
    11e6:	9c 81       	ldd	r25, Y+4	; 0x04
    11e8:	fc 01       	movw	r30, r24
    11ea:	10 82       	st	Z, r1
    11ec:	8b 81       	ldd	r24, Y+3	; 0x03
    11ee:	9c 81       	ldd	r25, Y+4	; 0x04
    11f0:	01 97       	sbiw	r24, 0x01	; 1
    11f2:	9c 83       	std	Y+4, r25	; 0x04
    11f4:	8b 83       	std	Y+3, r24	; 0x03
    11f6:	8b 81       	ldd	r24, Y+3	; 0x03
    11f8:	9c 81       	ldd	r25, Y+4	; 0x04
    11fa:	20 e8       	ldi	r18, 0x80	; 128
    11fc:	fc 01       	movw	r30, r24
    11fe:	20 83       	st	Z, r18
    1200:	8b 81       	ldd	r24, Y+3	; 0x03
    1202:	9c 81       	ldd	r25, Y+4	; 0x04
    1204:	01 97       	sbiw	r24, 0x01	; 1
    1206:	9c 83       	std	Y+4, r25	; 0x04
    1208:	8b 83       	std	Y+3, r24	; 0x03
    120a:	8b 81       	ldd	r24, Y+3	; 0x03
    120c:	9c 81       	ldd	r25, Y+4	; 0x04
    120e:	fc 01       	movw	r30, r24
    1210:	10 82       	st	Z, r1
    1212:	8b 81       	ldd	r24, Y+3	; 0x03
    1214:	9c 81       	ldd	r25, Y+4	; 0x04
    1216:	01 97       	sbiw	r24, 0x01	; 1
    1218:	9c 83       	std	Y+4, r25	; 0x04
    121a:	8b 83       	std	Y+3, r24	; 0x03
    121c:	8b 81       	ldd	r24, Y+3	; 0x03
    121e:	9c 81       	ldd	r25, Y+4	; 0x04
    1220:	22 e0       	ldi	r18, 0x02	; 2
    1222:	fc 01       	movw	r30, r24
    1224:	20 83       	st	Z, r18
    1226:	8b 81       	ldd	r24, Y+3	; 0x03
    1228:	9c 81       	ldd	r25, Y+4	; 0x04
    122a:	01 97       	sbiw	r24, 0x01	; 1
    122c:	9c 83       	std	Y+4, r25	; 0x04
    122e:	8b 83       	std	Y+3, r24	; 0x03
    1230:	8b 81       	ldd	r24, Y+3	; 0x03
    1232:	9c 81       	ldd	r25, Y+4	; 0x04
    1234:	23 e0       	ldi	r18, 0x03	; 3
    1236:	fc 01       	movw	r30, r24
    1238:	20 83       	st	Z, r18
    123a:	8b 81       	ldd	r24, Y+3	; 0x03
    123c:	9c 81       	ldd	r25, Y+4	; 0x04
    123e:	01 97       	sbiw	r24, 0x01	; 1
    1240:	9c 83       	std	Y+4, r25	; 0x04
    1242:	8b 83       	std	Y+3, r24	; 0x03
    1244:	8b 81       	ldd	r24, Y+3	; 0x03
    1246:	9c 81       	ldd	r25, Y+4	; 0x04
    1248:	24 e0       	ldi	r18, 0x04	; 4
    124a:	fc 01       	movw	r30, r24
    124c:	20 83       	st	Z, r18
    124e:	8b 81       	ldd	r24, Y+3	; 0x03
    1250:	9c 81       	ldd	r25, Y+4	; 0x04
    1252:	01 97       	sbiw	r24, 0x01	; 1
    1254:	9c 83       	std	Y+4, r25	; 0x04
    1256:	8b 83       	std	Y+3, r24	; 0x03
    1258:	8b 81       	ldd	r24, Y+3	; 0x03
    125a:	9c 81       	ldd	r25, Y+4	; 0x04
    125c:	25 e0       	ldi	r18, 0x05	; 5
    125e:	fc 01       	movw	r30, r24
    1260:	20 83       	st	Z, r18
    1262:	8b 81       	ldd	r24, Y+3	; 0x03
    1264:	9c 81       	ldd	r25, Y+4	; 0x04
    1266:	01 97       	sbiw	r24, 0x01	; 1
    1268:	9c 83       	std	Y+4, r25	; 0x04
    126a:	8b 83       	std	Y+3, r24	; 0x03
    126c:	8b 81       	ldd	r24, Y+3	; 0x03
    126e:	9c 81       	ldd	r25, Y+4	; 0x04
    1270:	26 e0       	ldi	r18, 0x06	; 6
    1272:	fc 01       	movw	r30, r24
    1274:	20 83       	st	Z, r18
    1276:	8b 81       	ldd	r24, Y+3	; 0x03
    1278:	9c 81       	ldd	r25, Y+4	; 0x04
    127a:	01 97       	sbiw	r24, 0x01	; 1
    127c:	9c 83       	std	Y+4, r25	; 0x04
    127e:	8b 83       	std	Y+3, r24	; 0x03
    1280:	8b 81       	ldd	r24, Y+3	; 0x03
    1282:	9c 81       	ldd	r25, Y+4	; 0x04
    1284:	27 e0       	ldi	r18, 0x07	; 7
    1286:	fc 01       	movw	r30, r24
    1288:	20 83       	st	Z, r18
    128a:	8b 81       	ldd	r24, Y+3	; 0x03
    128c:	9c 81       	ldd	r25, Y+4	; 0x04
    128e:	01 97       	sbiw	r24, 0x01	; 1
    1290:	9c 83       	std	Y+4, r25	; 0x04
    1292:	8b 83       	std	Y+3, r24	; 0x03
    1294:	8b 81       	ldd	r24, Y+3	; 0x03
    1296:	9c 81       	ldd	r25, Y+4	; 0x04
    1298:	28 e0       	ldi	r18, 0x08	; 8
    129a:	fc 01       	movw	r30, r24
    129c:	20 83       	st	Z, r18
    129e:	8b 81       	ldd	r24, Y+3	; 0x03
    12a0:	9c 81       	ldd	r25, Y+4	; 0x04
    12a2:	01 97       	sbiw	r24, 0x01	; 1
    12a4:	9c 83       	std	Y+4, r25	; 0x04
    12a6:	8b 83       	std	Y+3, r24	; 0x03
    12a8:	8b 81       	ldd	r24, Y+3	; 0x03
    12aa:	9c 81       	ldd	r25, Y+4	; 0x04
    12ac:	29 e0       	ldi	r18, 0x09	; 9
    12ae:	fc 01       	movw	r30, r24
    12b0:	20 83       	st	Z, r18
    12b2:	8b 81       	ldd	r24, Y+3	; 0x03
    12b4:	9c 81       	ldd	r25, Y+4	; 0x04
    12b6:	01 97       	sbiw	r24, 0x01	; 1
    12b8:	9c 83       	std	Y+4, r25	; 0x04
    12ba:	8b 83       	std	Y+3, r24	; 0x03
    12bc:	8b 81       	ldd	r24, Y+3	; 0x03
    12be:	9c 81       	ldd	r25, Y+4	; 0x04
    12c0:	20 e1       	ldi	r18, 0x10	; 16
    12c2:	fc 01       	movw	r30, r24
    12c4:	20 83       	st	Z, r18
    12c6:	8b 81       	ldd	r24, Y+3	; 0x03
    12c8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ca:	01 97       	sbiw	r24, 0x01	; 1
    12cc:	9c 83       	std	Y+4, r25	; 0x04
    12ce:	8b 83       	std	Y+3, r24	; 0x03
    12d0:	8b 81       	ldd	r24, Y+3	; 0x03
    12d2:	9c 81       	ldd	r25, Y+4	; 0x04
    12d4:	21 e1       	ldi	r18, 0x11	; 17
    12d6:	fc 01       	movw	r30, r24
    12d8:	20 83       	st	Z, r18
    12da:	8b 81       	ldd	r24, Y+3	; 0x03
    12dc:	9c 81       	ldd	r25, Y+4	; 0x04
    12de:	01 97       	sbiw	r24, 0x01	; 1
    12e0:	9c 83       	std	Y+4, r25	; 0x04
    12e2:	8b 83       	std	Y+3, r24	; 0x03
    12e4:	8b 81       	ldd	r24, Y+3	; 0x03
    12e6:	9c 81       	ldd	r25, Y+4	; 0x04
    12e8:	22 e1       	ldi	r18, 0x12	; 18
    12ea:	fc 01       	movw	r30, r24
    12ec:	20 83       	st	Z, r18
    12ee:	8b 81       	ldd	r24, Y+3	; 0x03
    12f0:	9c 81       	ldd	r25, Y+4	; 0x04
    12f2:	01 97       	sbiw	r24, 0x01	; 1
    12f4:	9c 83       	std	Y+4, r25	; 0x04
    12f6:	8b 83       	std	Y+3, r24	; 0x03
    12f8:	8b 81       	ldd	r24, Y+3	; 0x03
    12fa:	9c 81       	ldd	r25, Y+4	; 0x04
    12fc:	23 e1       	ldi	r18, 0x13	; 19
    12fe:	fc 01       	movw	r30, r24
    1300:	20 83       	st	Z, r18
    1302:	8b 81       	ldd	r24, Y+3	; 0x03
    1304:	9c 81       	ldd	r25, Y+4	; 0x04
    1306:	01 97       	sbiw	r24, 0x01	; 1
    1308:	9c 83       	std	Y+4, r25	; 0x04
    130a:	8b 83       	std	Y+3, r24	; 0x03
    130c:	8b 81       	ldd	r24, Y+3	; 0x03
    130e:	9c 81       	ldd	r25, Y+4	; 0x04
    1310:	24 e1       	ldi	r18, 0x14	; 20
    1312:	fc 01       	movw	r30, r24
    1314:	20 83       	st	Z, r18
    1316:	8b 81       	ldd	r24, Y+3	; 0x03
    1318:	9c 81       	ldd	r25, Y+4	; 0x04
    131a:	01 97       	sbiw	r24, 0x01	; 1
    131c:	9c 83       	std	Y+4, r25	; 0x04
    131e:	8b 83       	std	Y+3, r24	; 0x03
    1320:	8b 81       	ldd	r24, Y+3	; 0x03
    1322:	9c 81       	ldd	r25, Y+4	; 0x04
    1324:	25 e1       	ldi	r18, 0x15	; 21
    1326:	fc 01       	movw	r30, r24
    1328:	20 83       	st	Z, r18
    132a:	8b 81       	ldd	r24, Y+3	; 0x03
    132c:	9c 81       	ldd	r25, Y+4	; 0x04
    132e:	01 97       	sbiw	r24, 0x01	; 1
    1330:	9c 83       	std	Y+4, r25	; 0x04
    1332:	8b 83       	std	Y+3, r24	; 0x03
    1334:	8b 81       	ldd	r24, Y+3	; 0x03
    1336:	9c 81       	ldd	r25, Y+4	; 0x04
    1338:	26 e1       	ldi	r18, 0x16	; 22
    133a:	fc 01       	movw	r30, r24
    133c:	20 83       	st	Z, r18
    133e:	8b 81       	ldd	r24, Y+3	; 0x03
    1340:	9c 81       	ldd	r25, Y+4	; 0x04
    1342:	01 97       	sbiw	r24, 0x01	; 1
    1344:	9c 83       	std	Y+4, r25	; 0x04
    1346:	8b 83       	std	Y+3, r24	; 0x03
    1348:	8b 81       	ldd	r24, Y+3	; 0x03
    134a:	9c 81       	ldd	r25, Y+4	; 0x04
    134c:	27 e1       	ldi	r18, 0x17	; 23
    134e:	fc 01       	movw	r30, r24
    1350:	20 83       	st	Z, r18
    1352:	8b 81       	ldd	r24, Y+3	; 0x03
    1354:	9c 81       	ldd	r25, Y+4	; 0x04
    1356:	01 97       	sbiw	r24, 0x01	; 1
    1358:	9c 83       	std	Y+4, r25	; 0x04
    135a:	8b 83       	std	Y+3, r24	; 0x03
    135c:	8b 81       	ldd	r24, Y+3	; 0x03
    135e:	9c 81       	ldd	r25, Y+4	; 0x04
    1360:	28 e1       	ldi	r18, 0x18	; 24
    1362:	fc 01       	movw	r30, r24
    1364:	20 83       	st	Z, r18
    1366:	8b 81       	ldd	r24, Y+3	; 0x03
    1368:	9c 81       	ldd	r25, Y+4	; 0x04
    136a:	01 97       	sbiw	r24, 0x01	; 1
    136c:	9c 83       	std	Y+4, r25	; 0x04
    136e:	8b 83       	std	Y+3, r24	; 0x03
    1370:	8b 81       	ldd	r24, Y+3	; 0x03
    1372:	9c 81       	ldd	r25, Y+4	; 0x04
    1374:	29 e1       	ldi	r18, 0x19	; 25
    1376:	fc 01       	movw	r30, r24
    1378:	20 83       	st	Z, r18
    137a:	8b 81       	ldd	r24, Y+3	; 0x03
    137c:	9c 81       	ldd	r25, Y+4	; 0x04
    137e:	01 97       	sbiw	r24, 0x01	; 1
    1380:	9c 83       	std	Y+4, r25	; 0x04
    1382:	8b 83       	std	Y+3, r24	; 0x03
    1384:	8b 81       	ldd	r24, Y+3	; 0x03
    1386:	9c 81       	ldd	r25, Y+4	; 0x04
    1388:	20 e2       	ldi	r18, 0x20	; 32
    138a:	fc 01       	movw	r30, r24
    138c:	20 83       	st	Z, r18
    138e:	8b 81       	ldd	r24, Y+3	; 0x03
    1390:	9c 81       	ldd	r25, Y+4	; 0x04
    1392:	01 97       	sbiw	r24, 0x01	; 1
    1394:	9c 83       	std	Y+4, r25	; 0x04
    1396:	8b 83       	std	Y+3, r24	; 0x03
    1398:	8b 81       	ldd	r24, Y+3	; 0x03
    139a:	9c 81       	ldd	r25, Y+4	; 0x04
    139c:	21 e2       	ldi	r18, 0x21	; 33
    139e:	fc 01       	movw	r30, r24
    13a0:	20 83       	st	Z, r18
    13a2:	8b 81       	ldd	r24, Y+3	; 0x03
    13a4:	9c 81       	ldd	r25, Y+4	; 0x04
    13a6:	01 97       	sbiw	r24, 0x01	; 1
    13a8:	9c 83       	std	Y+4, r25	; 0x04
    13aa:	8b 83       	std	Y+3, r24	; 0x03
    13ac:	8b 81       	ldd	r24, Y+3	; 0x03
    13ae:	9c 81       	ldd	r25, Y+4	; 0x04
    13b0:	22 e2       	ldi	r18, 0x22	; 34
    13b2:	fc 01       	movw	r30, r24
    13b4:	20 83       	st	Z, r18
    13b6:	8b 81       	ldd	r24, Y+3	; 0x03
    13b8:	9c 81       	ldd	r25, Y+4	; 0x04
    13ba:	01 97       	sbiw	r24, 0x01	; 1
    13bc:	9c 83       	std	Y+4, r25	; 0x04
    13be:	8b 83       	std	Y+3, r24	; 0x03
    13c0:	8b 81       	ldd	r24, Y+3	; 0x03
    13c2:	9c 81       	ldd	r25, Y+4	; 0x04
    13c4:	23 e2       	ldi	r18, 0x23	; 35
    13c6:	fc 01       	movw	r30, r24
    13c8:	20 83       	st	Z, r18
    13ca:	8b 81       	ldd	r24, Y+3	; 0x03
    13cc:	9c 81       	ldd	r25, Y+4	; 0x04
    13ce:	01 97       	sbiw	r24, 0x01	; 1
    13d0:	9c 83       	std	Y+4, r25	; 0x04
    13d2:	8b 83       	std	Y+3, r24	; 0x03
    13d4:	8f 81       	ldd	r24, Y+7	; 0x07
    13d6:	98 85       	ldd	r25, Y+8	; 0x08
    13d8:	9a 83       	std	Y+2, r25	; 0x02
    13da:	89 83       	std	Y+1, r24	; 0x01
    13dc:	29 81       	ldd	r18, Y+1	; 0x01
    13de:	8b 81       	ldd	r24, Y+3	; 0x03
    13e0:	9c 81       	ldd	r25, Y+4	; 0x04
    13e2:	fc 01       	movw	r30, r24
    13e4:	20 83       	st	Z, r18
    13e6:	8b 81       	ldd	r24, Y+3	; 0x03
    13e8:	9c 81       	ldd	r25, Y+4	; 0x04
    13ea:	01 97       	sbiw	r24, 0x01	; 1
    13ec:	9c 83       	std	Y+4, r25	; 0x04
    13ee:	8b 83       	std	Y+3, r24	; 0x03
    13f0:	89 81       	ldd	r24, Y+1	; 0x01
    13f2:	9a 81       	ldd	r25, Y+2	; 0x02
    13f4:	89 2f       	mov	r24, r25
    13f6:	99 27       	eor	r25, r25
    13f8:	9a 83       	std	Y+2, r25	; 0x02
    13fa:	89 83       	std	Y+1, r24	; 0x01
    13fc:	29 81       	ldd	r18, Y+1	; 0x01
    13fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1400:	9c 81       	ldd	r25, Y+4	; 0x04
    1402:	fc 01       	movw	r30, r24
    1404:	20 83       	st	Z, r18
    1406:	8b 81       	ldd	r24, Y+3	; 0x03
    1408:	9c 81       	ldd	r25, Y+4	; 0x04
    140a:	01 97       	sbiw	r24, 0x01	; 1
    140c:	9c 83       	std	Y+4, r25	; 0x04
    140e:	8b 83       	std	Y+3, r24	; 0x03
    1410:	8b 81       	ldd	r24, Y+3	; 0x03
    1412:	9c 81       	ldd	r25, Y+4	; 0x04
    1414:	26 e2       	ldi	r18, 0x26	; 38
    1416:	fc 01       	movw	r30, r24
    1418:	20 83       	st	Z, r18
    141a:	8b 81       	ldd	r24, Y+3	; 0x03
    141c:	9c 81       	ldd	r25, Y+4	; 0x04
    141e:	01 97       	sbiw	r24, 0x01	; 1
    1420:	9c 83       	std	Y+4, r25	; 0x04
    1422:	8b 83       	std	Y+3, r24	; 0x03
    1424:	8b 81       	ldd	r24, Y+3	; 0x03
    1426:	9c 81       	ldd	r25, Y+4	; 0x04
    1428:	27 e2       	ldi	r18, 0x27	; 39
    142a:	fc 01       	movw	r30, r24
    142c:	20 83       	st	Z, r18
    142e:	8b 81       	ldd	r24, Y+3	; 0x03
    1430:	9c 81       	ldd	r25, Y+4	; 0x04
    1432:	01 97       	sbiw	r24, 0x01	; 1
    1434:	9c 83       	std	Y+4, r25	; 0x04
    1436:	8b 83       	std	Y+3, r24	; 0x03
    1438:	8b 81       	ldd	r24, Y+3	; 0x03
    143a:	9c 81       	ldd	r25, Y+4	; 0x04
    143c:	28 e2       	ldi	r18, 0x28	; 40
    143e:	fc 01       	movw	r30, r24
    1440:	20 83       	st	Z, r18
    1442:	8b 81       	ldd	r24, Y+3	; 0x03
    1444:	9c 81       	ldd	r25, Y+4	; 0x04
    1446:	01 97       	sbiw	r24, 0x01	; 1
    1448:	9c 83       	std	Y+4, r25	; 0x04
    144a:	8b 83       	std	Y+3, r24	; 0x03
    144c:	8b 81       	ldd	r24, Y+3	; 0x03
    144e:	9c 81       	ldd	r25, Y+4	; 0x04
    1450:	29 e2       	ldi	r18, 0x29	; 41
    1452:	fc 01       	movw	r30, r24
    1454:	20 83       	st	Z, r18
    1456:	8b 81       	ldd	r24, Y+3	; 0x03
    1458:	9c 81       	ldd	r25, Y+4	; 0x04
    145a:	01 97       	sbiw	r24, 0x01	; 1
    145c:	9c 83       	std	Y+4, r25	; 0x04
    145e:	8b 83       	std	Y+3, r24	; 0x03
    1460:	8b 81       	ldd	r24, Y+3	; 0x03
    1462:	9c 81       	ldd	r25, Y+4	; 0x04
    1464:	20 e3       	ldi	r18, 0x30	; 48
    1466:	fc 01       	movw	r30, r24
    1468:	20 83       	st	Z, r18
    146a:	8b 81       	ldd	r24, Y+3	; 0x03
    146c:	9c 81       	ldd	r25, Y+4	; 0x04
    146e:	01 97       	sbiw	r24, 0x01	; 1
    1470:	9c 83       	std	Y+4, r25	; 0x04
    1472:	8b 83       	std	Y+3, r24	; 0x03
    1474:	8b 81       	ldd	r24, Y+3	; 0x03
    1476:	9c 81       	ldd	r25, Y+4	; 0x04
    1478:	21 e3       	ldi	r18, 0x31	; 49
    147a:	fc 01       	movw	r30, r24
    147c:	20 83       	st	Z, r18
    147e:	8b 81       	ldd	r24, Y+3	; 0x03
    1480:	9c 81       	ldd	r25, Y+4	; 0x04
    1482:	01 97       	sbiw	r24, 0x01	; 1
    1484:	9c 83       	std	Y+4, r25	; 0x04
    1486:	8b 83       	std	Y+3, r24	; 0x03
    1488:	8b 81       	ldd	r24, Y+3	; 0x03
    148a:	9c 81       	ldd	r25, Y+4	; 0x04
    148c:	28 96       	adiw	r28, 0x08	; 8
    148e:	0f b6       	in	r0, 0x3f	; 63
    1490:	f8 94       	cli
    1492:	de bf       	out	0x3e, r29	; 62
    1494:	0f be       	out	0x3f, r0	; 63
    1496:	cd bf       	out	0x3d, r28	; 61
    1498:	df 91       	pop	r29
    149a:	cf 91       	pop	r28
    149c:	08 95       	ret

0000149e <xPortStartScheduler>:
    149e:	cf 93       	push	r28
    14a0:	df 93       	push	r29
    14a2:	cd b7       	in	r28, 0x3d	; 61
    14a4:	de b7       	in	r29, 0x3e	; 62
    14a6:	0e 94 3c 0b 	call	0x1678	; 0x1678 <prvSetupTimerInterrupt>
    14aa:	a0 91 b3 06 	lds	r26, 0x06B3	; 0x8006b3 <pxCurrentTCB>
    14ae:	b0 91 b4 06 	lds	r27, 0x06B4	; 0x8006b4 <pxCurrentTCB+0x1>
    14b2:	cd 91       	ld	r28, X+
    14b4:	cd bf       	out	0x3d, r28	; 61
    14b6:	dd 91       	ld	r29, X+
    14b8:	de bf       	out	0x3e, r29	; 62
    14ba:	ff 91       	pop	r31
    14bc:	ef 91       	pop	r30
    14be:	df 91       	pop	r29
    14c0:	cf 91       	pop	r28
    14c2:	bf 91       	pop	r27
    14c4:	af 91       	pop	r26
    14c6:	9f 91       	pop	r25
    14c8:	8f 91       	pop	r24
    14ca:	7f 91       	pop	r23
    14cc:	6f 91       	pop	r22
    14ce:	5f 91       	pop	r21
    14d0:	4f 91       	pop	r20
    14d2:	3f 91       	pop	r19
    14d4:	2f 91       	pop	r18
    14d6:	1f 91       	pop	r17
    14d8:	0f 91       	pop	r16
    14da:	ff 90       	pop	r15
    14dc:	ef 90       	pop	r14
    14de:	df 90       	pop	r13
    14e0:	cf 90       	pop	r12
    14e2:	bf 90       	pop	r11
    14e4:	af 90       	pop	r10
    14e6:	9f 90       	pop	r9
    14e8:	8f 90       	pop	r8
    14ea:	7f 90       	pop	r7
    14ec:	6f 90       	pop	r6
    14ee:	5f 90       	pop	r5
    14f0:	4f 90       	pop	r4
    14f2:	3f 90       	pop	r3
    14f4:	2f 90       	pop	r2
    14f6:	1f 90       	pop	r1
    14f8:	0f 90       	pop	r0
    14fa:	0f be       	out	0x3f, r0	; 63
    14fc:	0f 90       	pop	r0
    14fe:	08 95       	ret
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	df 91       	pop	r29
    1504:	cf 91       	pop	r28
    1506:	08 95       	ret

00001508 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    1508:	0f 92       	push	r0
    150a:	0f b6       	in	r0, 0x3f	; 63
    150c:	f8 94       	cli
    150e:	0f 92       	push	r0
    1510:	1f 92       	push	r1
    1512:	11 24       	eor	r1, r1
    1514:	2f 92       	push	r2
    1516:	3f 92       	push	r3
    1518:	4f 92       	push	r4
    151a:	5f 92       	push	r5
    151c:	6f 92       	push	r6
    151e:	7f 92       	push	r7
    1520:	8f 92       	push	r8
    1522:	9f 92       	push	r9
    1524:	af 92       	push	r10
    1526:	bf 92       	push	r11
    1528:	cf 92       	push	r12
    152a:	df 92       	push	r13
    152c:	ef 92       	push	r14
    152e:	ff 92       	push	r15
    1530:	0f 93       	push	r16
    1532:	1f 93       	push	r17
    1534:	2f 93       	push	r18
    1536:	3f 93       	push	r19
    1538:	4f 93       	push	r20
    153a:	5f 93       	push	r21
    153c:	6f 93       	push	r22
    153e:	7f 93       	push	r23
    1540:	8f 93       	push	r24
    1542:	9f 93       	push	r25
    1544:	af 93       	push	r26
    1546:	bf 93       	push	r27
    1548:	cf 93       	push	r28
    154a:	df 93       	push	r29
    154c:	ef 93       	push	r30
    154e:	ff 93       	push	r31
    1550:	a0 91 b3 06 	lds	r26, 0x06B3	; 0x8006b3 <pxCurrentTCB>
    1554:	b0 91 b4 06 	lds	r27, 0x06B4	; 0x8006b4 <pxCurrentTCB+0x1>
    1558:	0d b6       	in	r0, 0x3d	; 61
    155a:	0d 92       	st	X+, r0
    155c:	0e b6       	in	r0, 0x3e	; 62
    155e:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    1560:	0e 94 5f 10 	call	0x20be	; 0x20be <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    1564:	a0 91 b3 06 	lds	r26, 0x06B3	; 0x8006b3 <pxCurrentTCB>
    1568:	b0 91 b4 06 	lds	r27, 0x06B4	; 0x8006b4 <pxCurrentTCB+0x1>
    156c:	cd 91       	ld	r28, X+
    156e:	cd bf       	out	0x3d, r28	; 61
    1570:	dd 91       	ld	r29, X+
    1572:	de bf       	out	0x3e, r29	; 62
    1574:	ff 91       	pop	r31
    1576:	ef 91       	pop	r30
    1578:	df 91       	pop	r29
    157a:	cf 91       	pop	r28
    157c:	bf 91       	pop	r27
    157e:	af 91       	pop	r26
    1580:	9f 91       	pop	r25
    1582:	8f 91       	pop	r24
    1584:	7f 91       	pop	r23
    1586:	6f 91       	pop	r22
    1588:	5f 91       	pop	r21
    158a:	4f 91       	pop	r20
    158c:	3f 91       	pop	r19
    158e:	2f 91       	pop	r18
    1590:	1f 91       	pop	r17
    1592:	0f 91       	pop	r16
    1594:	ff 90       	pop	r15
    1596:	ef 90       	pop	r14
    1598:	df 90       	pop	r13
    159a:	cf 90       	pop	r12
    159c:	bf 90       	pop	r11
    159e:	af 90       	pop	r10
    15a0:	9f 90       	pop	r9
    15a2:	8f 90       	pop	r8
    15a4:	7f 90       	pop	r7
    15a6:	6f 90       	pop	r6
    15a8:	5f 90       	pop	r5
    15aa:	4f 90       	pop	r4
    15ac:	3f 90       	pop	r3
    15ae:	2f 90       	pop	r2
    15b0:	1f 90       	pop	r1
    15b2:	0f 90       	pop	r0
    15b4:	0f be       	out	0x3f, r0	; 63
    15b6:	0f 90       	pop	r0

	asm volatile ( "ret" );
    15b8:	08 95       	ret
	...

000015bc <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    15bc:	0f 92       	push	r0
    15be:	0f b6       	in	r0, 0x3f	; 63
    15c0:	f8 94       	cli
    15c2:	0f 92       	push	r0
    15c4:	1f 92       	push	r1
    15c6:	11 24       	eor	r1, r1
    15c8:	2f 92       	push	r2
    15ca:	3f 92       	push	r3
    15cc:	4f 92       	push	r4
    15ce:	5f 92       	push	r5
    15d0:	6f 92       	push	r6
    15d2:	7f 92       	push	r7
    15d4:	8f 92       	push	r8
    15d6:	9f 92       	push	r9
    15d8:	af 92       	push	r10
    15da:	bf 92       	push	r11
    15dc:	cf 92       	push	r12
    15de:	df 92       	push	r13
    15e0:	ef 92       	push	r14
    15e2:	ff 92       	push	r15
    15e4:	0f 93       	push	r16
    15e6:	1f 93       	push	r17
    15e8:	2f 93       	push	r18
    15ea:	3f 93       	push	r19
    15ec:	4f 93       	push	r20
    15ee:	5f 93       	push	r21
    15f0:	6f 93       	push	r22
    15f2:	7f 93       	push	r23
    15f4:	8f 93       	push	r24
    15f6:	9f 93       	push	r25
    15f8:	af 93       	push	r26
    15fa:	bf 93       	push	r27
    15fc:	cf 93       	push	r28
    15fe:	df 93       	push	r29
    1600:	ef 93       	push	r30
    1602:	ff 93       	push	r31
    1604:	a0 91 b3 06 	lds	r26, 0x06B3	; 0x8006b3 <pxCurrentTCB>
    1608:	b0 91 b4 06 	lds	r27, 0x06B4	; 0x8006b4 <pxCurrentTCB+0x1>
    160c:	0d b6       	in	r0, 0x3d	; 61
    160e:	0d 92       	st	X+, r0
    1610:	0e b6       	in	r0, 0x3e	; 62
    1612:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
    1614:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <xTaskIncrementTick>
    1618:	88 23       	and	r24, r24
    161a:	11 f0       	breq	.+4      	; 0x1620 <vPortYieldFromTick+0x64>
	{
		vTaskSwitchContext();
    161c:	0e 94 5f 10 	call	0x20be	; 0x20be <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
    1620:	a0 91 b3 06 	lds	r26, 0x06B3	; 0x8006b3 <pxCurrentTCB>
    1624:	b0 91 b4 06 	lds	r27, 0x06B4	; 0x8006b4 <pxCurrentTCB+0x1>
    1628:	cd 91       	ld	r28, X+
    162a:	cd bf       	out	0x3d, r28	; 61
    162c:	dd 91       	ld	r29, X+
    162e:	de bf       	out	0x3e, r29	; 62
    1630:	ff 91       	pop	r31
    1632:	ef 91       	pop	r30
    1634:	df 91       	pop	r29
    1636:	cf 91       	pop	r28
    1638:	bf 91       	pop	r27
    163a:	af 91       	pop	r26
    163c:	9f 91       	pop	r25
    163e:	8f 91       	pop	r24
    1640:	7f 91       	pop	r23
    1642:	6f 91       	pop	r22
    1644:	5f 91       	pop	r21
    1646:	4f 91       	pop	r20
    1648:	3f 91       	pop	r19
    164a:	2f 91       	pop	r18
    164c:	1f 91       	pop	r17
    164e:	0f 91       	pop	r16
    1650:	ff 90       	pop	r15
    1652:	ef 90       	pop	r14
    1654:	df 90       	pop	r13
    1656:	cf 90       	pop	r12
    1658:	bf 90       	pop	r11
    165a:	af 90       	pop	r10
    165c:	9f 90       	pop	r9
    165e:	8f 90       	pop	r8
    1660:	7f 90       	pop	r7
    1662:	6f 90       	pop	r6
    1664:	5f 90       	pop	r5
    1666:	4f 90       	pop	r4
    1668:	3f 90       	pop	r3
    166a:	2f 90       	pop	r2
    166c:	1f 90       	pop	r1
    166e:	0f 90       	pop	r0
    1670:	0f be       	out	0x3f, r0	; 63
    1672:	0f 90       	pop	r0

	asm volatile ( "ret" );
    1674:	08 95       	ret
	...

00001678 <prvSetupTimerInterrupt>:

/*
 * Setup timer 1 compare match A to generate a tick interrupt.
 */
static void prvSetupTimerInterrupt( void )
{
    1678:	cf 93       	push	r28
    167a:	df 93       	push	r29
    167c:	00 d0       	rcall	.+0      	; 0x167e <prvSetupTimerInterrupt+0x6>
    167e:	00 d0       	rcall	.+0      	; 0x1680 <prvSetupTimerInterrupt+0x8>
    1680:	00 d0       	rcall	.+0      	; 0x1682 <prvSetupTimerInterrupt+0xa>
    1682:	cd b7       	in	r28, 0x3d	; 61
    1684:	de b7       	in	r29, 0x3e	; 62
uint8_t ucHighByte, ucLowByte;

	/* Using 16bit timer 1 to generate the tick.  Correct fuses must be
	selected for the configCPU_CLOCK_HZ clock. */

	ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    1686:	80 e8       	ldi	r24, 0x80	; 128
    1688:	9e e3       	ldi	r25, 0x3E	; 62
    168a:	a0 e0       	ldi	r26, 0x00	; 0
    168c:	b0 e0       	ldi	r27, 0x00	; 0
    168e:	89 83       	std	Y+1, r24	; 0x01
    1690:	9a 83       	std	Y+2, r25	; 0x02
    1692:	ab 83       	std	Y+3, r26	; 0x03
    1694:	bc 83       	std	Y+4, r27	; 0x04

	/* We only have 16 bits so have to scale to get our required tick rate. */
	ulCompareMatch /= portCLOCK_PRESCALER;
    1696:	89 81       	ldd	r24, Y+1	; 0x01
    1698:	9a 81       	ldd	r25, Y+2	; 0x02
    169a:	ab 81       	ldd	r26, Y+3	; 0x03
    169c:	bc 81       	ldd	r27, Y+4	; 0x04
    169e:	68 94       	set
    16a0:	15 f8       	bld	r1, 5
    16a2:	b6 95       	lsr	r27
    16a4:	a7 95       	ror	r26
    16a6:	97 95       	ror	r25
    16a8:	87 95       	ror	r24
    16aa:	16 94       	lsr	r1
    16ac:	d1 f7       	brne	.-12     	; 0x16a2 <prvSetupTimerInterrupt+0x2a>
    16ae:	89 83       	std	Y+1, r24	; 0x01
    16b0:	9a 83       	std	Y+2, r25	; 0x02
    16b2:	ab 83       	std	Y+3, r26	; 0x03
    16b4:	bc 83       	std	Y+4, r27	; 0x04

	/* Adjust for correct value. */
	ulCompareMatch -= ( uint32_t ) 1;
    16b6:	89 81       	ldd	r24, Y+1	; 0x01
    16b8:	9a 81       	ldd	r25, Y+2	; 0x02
    16ba:	ab 81       	ldd	r26, Y+3	; 0x03
    16bc:	bc 81       	ldd	r27, Y+4	; 0x04
    16be:	01 97       	sbiw	r24, 0x01	; 1
    16c0:	a1 09       	sbc	r26, r1
    16c2:	b1 09       	sbc	r27, r1
    16c4:	89 83       	std	Y+1, r24	; 0x01
    16c6:	9a 83       	std	Y+2, r25	; 0x02
    16c8:	ab 83       	std	Y+3, r26	; 0x03
    16ca:	bc 83       	std	Y+4, r27	; 0x04

	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    16cc:	89 81       	ldd	r24, Y+1	; 0x01
    16ce:	8d 83       	std	Y+5, r24	; 0x05
	ulCompareMatch >>= 8;
    16d0:	89 81       	ldd	r24, Y+1	; 0x01
    16d2:	9a 81       	ldd	r25, Y+2	; 0x02
    16d4:	ab 81       	ldd	r26, Y+3	; 0x03
    16d6:	bc 81       	ldd	r27, Y+4	; 0x04
    16d8:	89 2f       	mov	r24, r25
    16da:	9a 2f       	mov	r25, r26
    16dc:	ab 2f       	mov	r26, r27
    16de:	bb 27       	eor	r27, r27
    16e0:	89 83       	std	Y+1, r24	; 0x01
    16e2:	9a 83       	std	Y+2, r25	; 0x02
    16e4:	ab 83       	std	Y+3, r26	; 0x03
    16e6:	bc 83       	std	Y+4, r27	; 0x04
	ucHighByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    16e8:	89 81       	ldd	r24, Y+1	; 0x01
    16ea:	8e 83       	std	Y+6, r24	; 0x06
	OCR1AH = ucHighByte;
    16ec:	8b e4       	ldi	r24, 0x4B	; 75
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	2e 81       	ldd	r18, Y+6	; 0x06
    16f2:	fc 01       	movw	r30, r24
    16f4:	20 83       	st	Z, r18
	OCR1AL = ucLowByte;
    16f6:	8a e4       	ldi	r24, 0x4A	; 74
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	2d 81       	ldd	r18, Y+5	; 0x05
    16fc:	fc 01       	movw	r30, r24
    16fe:	20 83       	st	Z, r18

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
    1700:	8b e0       	ldi	r24, 0x0B	; 11
    1702:	8d 83       	std	Y+5, r24	; 0x05
	TCCR1B = ucLowByte;
    1704:	8e e4       	ldi	r24, 0x4E	; 78
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	2d 81       	ldd	r18, Y+5	; 0x05
    170a:	fc 01       	movw	r30, r24
    170c:	20 83       	st	Z, r18

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK;
    170e:	89 e5       	ldi	r24, 0x59	; 89
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	fc 01       	movw	r30, r24
    1714:	80 81       	ld	r24, Z
    1716:	8d 83       	std	Y+5, r24	; 0x05
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    1718:	8d 81       	ldd	r24, Y+5	; 0x05
    171a:	80 61       	ori	r24, 0x10	; 16
    171c:	8d 83       	std	Y+5, r24	; 0x05
	TIMSK = ucLowByte;
    171e:	89 e5       	ldi	r24, 0x59	; 89
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	2d 81       	ldd	r18, Y+5	; 0x05
    1724:	fc 01       	movw	r30, r24
    1726:	20 83       	st	Z, r18
}
    1728:	00 00       	nop
    172a:	26 96       	adiw	r28, 0x06	; 6
    172c:	0f b6       	in	r0, 0x3f	; 63
    172e:	f8 94       	cli
    1730:	de bf       	out	0x3e, r29	; 62
    1732:	0f be       	out	0x3f, r0	; 63
    1734:	cd bf       	out	0x3d, r28	; 61
    1736:	df 91       	pop	r29
    1738:	cf 91       	pop	r28
    173a:	08 95       	ret

0000173c <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
    173c:	0e 94 de 0a 	call	0x15bc	; 0x15bc <vPortYieldFromTick>
		asm volatile ( "reti" );
    1740:	18 95       	reti
	...

00001744 <xTaskCreate>:
			}
		}
		taskEXIT_CRITICAL();

		return xReturn;
	}
    1744:	8f 92       	push	r8
    1746:	9f 92       	push	r9
    1748:	af 92       	push	r10
    174a:	bf 92       	push	r11
    174c:	cf 92       	push	r12
    174e:	df 92       	push	r13
    1750:	ef 92       	push	r14
    1752:	ff 92       	push	r15
    1754:	0f 93       	push	r16
    1756:	1f 93       	push	r17
    1758:	cf 93       	push	r28
    175a:	df 93       	push	r29
    175c:	cd b7       	in	r28, 0x3d	; 61
    175e:	de b7       	in	r29, 0x3e	; 62
    1760:	60 97       	sbiw	r28, 0x10	; 16
    1762:	0f b6       	in	r0, 0x3f	; 63
    1764:	f8 94       	cli
    1766:	de bf       	out	0x3e, r29	; 62
    1768:	0f be       	out	0x3f, r0	; 63
    176a:	cd bf       	out	0x3d, r28	; 61
    176c:	9f 83       	std	Y+7, r25	; 0x07
    176e:	8e 83       	std	Y+6, r24	; 0x06
    1770:	79 87       	std	Y+9, r23	; 0x09
    1772:	68 87       	std	Y+8, r22	; 0x08
    1774:	5b 87       	std	Y+11, r21	; 0x0b
    1776:	4a 87       	std	Y+10, r20	; 0x0a
    1778:	3d 87       	std	Y+13, r19	; 0x0d
    177a:	2c 87       	std	Y+12, r18	; 0x0c
    177c:	0e 87       	std	Y+14, r16	; 0x0e
    177e:	f8 8a       	std	Y+16, r15	; 0x10
    1780:	ef 86       	std	Y+15, r14	; 0x0f
    1782:	8a 85       	ldd	r24, Y+10	; 0x0a
    1784:	9b 85       	ldd	r25, Y+11	; 0x0b
    1786:	0e 94 de 06 	call	0xdbc	; 0xdbc <pvPortMalloc>
    178a:	9d 83       	std	Y+5, r25	; 0x05
    178c:	8c 83       	std	Y+4, r24	; 0x04
    178e:	8c 81       	ldd	r24, Y+4	; 0x04
    1790:	9d 81       	ldd	r25, Y+5	; 0x05
    1792:	89 2b       	or	r24, r25
    1794:	b9 f0       	breq	.+46     	; 0x17c4 <xTaskCreate+0x80>
    1796:	88 e2       	ldi	r24, 0x28	; 40
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	0e 94 de 06 	call	0xdbc	; 0xdbc <pvPortMalloc>
    179e:	9a 83       	std	Y+2, r25	; 0x02
    17a0:	89 83       	std	Y+1, r24	; 0x01
    17a2:	89 81       	ldd	r24, Y+1	; 0x01
    17a4:	9a 81       	ldd	r25, Y+2	; 0x02
    17a6:	89 2b       	or	r24, r25
    17a8:	41 f0       	breq	.+16     	; 0x17ba <xTaskCreate+0x76>
    17aa:	89 81       	ldd	r24, Y+1	; 0x01
    17ac:	9a 81       	ldd	r25, Y+2	; 0x02
    17ae:	2c 81       	ldd	r18, Y+4	; 0x04
    17b0:	3d 81       	ldd	r19, Y+5	; 0x05
    17b2:	fc 01       	movw	r30, r24
    17b4:	30 8f       	std	Z+24, r19	; 0x18
    17b6:	27 8b       	std	Z+23, r18	; 0x17
    17b8:	07 c0       	rjmp	.+14     	; 0x17c8 <xTaskCreate+0x84>
    17ba:	8c 81       	ldd	r24, Y+4	; 0x04
    17bc:	9d 81       	ldd	r25, Y+5	; 0x05
    17be:	0e 94 33 07 	call	0xe66	; 0xe66 <vPortFree>
    17c2:	02 c0       	rjmp	.+4      	; 0x17c8 <xTaskCreate+0x84>
    17c4:	1a 82       	std	Y+2, r1	; 0x02
    17c6:	19 82       	std	Y+1, r1	; 0x01
    17c8:	89 81       	ldd	r24, Y+1	; 0x01
    17ca:	9a 81       	ldd	r25, Y+2	; 0x02
    17cc:	89 2b       	or	r24, r25
    17ce:	09 f1       	breq	.+66     	; 0x1812 <xTaskCreate+0xce>
    17d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    17d2:	9b 85       	ldd	r25, Y+11	; 0x0b
    17d4:	cc 01       	movw	r24, r24
    17d6:	a0 e0       	ldi	r26, 0x00	; 0
    17d8:	b0 e0       	ldi	r27, 0x00	; 0
    17da:	09 81       	ldd	r16, Y+1	; 0x01
    17dc:	1a 81       	ldd	r17, Y+2	; 0x02
    17de:	4f 85       	ldd	r20, Y+15	; 0x0f
    17e0:	58 89       	ldd	r21, Y+16	; 0x10
    17e2:	2c 85       	ldd	r18, Y+12	; 0x0c
    17e4:	3d 85       	ldd	r19, Y+13	; 0x0d
    17e6:	68 85       	ldd	r22, Y+8	; 0x08
    17e8:	79 85       	ldd	r23, Y+9	; 0x09
    17ea:	ee 81       	ldd	r30, Y+6	; 0x06
    17ec:	ff 81       	ldd	r31, Y+7	; 0x07
    17ee:	81 2c       	mov	r8, r1
    17f0:	91 2c       	mov	r9, r1
    17f2:	58 01       	movw	r10, r16
    17f4:	6a 01       	movw	r12, r20
    17f6:	ee 84       	ldd	r14, Y+14	; 0x0e
    17f8:	89 01       	movw	r16, r18
    17fa:	9c 01       	movw	r18, r24
    17fc:	ad 01       	movw	r20, r26
    17fe:	cf 01       	movw	r24, r30
    1800:	0e 94 1f 0c 	call	0x183e	; 0x183e <prvInitialiseNewTask>
    1804:	89 81       	ldd	r24, Y+1	; 0x01
    1806:	9a 81       	ldd	r25, Y+2	; 0x02
    1808:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <prvAddNewTaskToReadyList>
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	8b 83       	std	Y+3, r24	; 0x03
    1810:	02 c0       	rjmp	.+4      	; 0x1816 <xTaskCreate+0xd2>
    1812:	8f ef       	ldi	r24, 0xFF	; 255
    1814:	8b 83       	std	Y+3, r24	; 0x03
    1816:	8b 81       	ldd	r24, Y+3	; 0x03
    1818:	60 96       	adiw	r28, 0x10	; 16
    181a:	0f b6       	in	r0, 0x3f	; 63
    181c:	f8 94       	cli
    181e:	de bf       	out	0x3e, r29	; 62
    1820:	0f be       	out	0x3f, r0	; 63
    1822:	cd bf       	out	0x3d, r28	; 61
    1824:	df 91       	pop	r29
    1826:	cf 91       	pop	r28
    1828:	1f 91       	pop	r17
    182a:	0f 91       	pop	r16
    182c:	ff 90       	pop	r15
    182e:	ef 90       	pop	r14
    1830:	df 90       	pop	r13
    1832:	cf 90       	pop	r12
    1834:	bf 90       	pop	r11
    1836:	af 90       	pop	r10
    1838:	9f 90       	pop	r9
    183a:	8f 90       	pop	r8
    183c:	08 95       	ret

0000183e <prvInitialiseNewTask>:
    183e:	8f 92       	push	r8
    1840:	9f 92       	push	r9
    1842:	af 92       	push	r10
    1844:	bf 92       	push	r11
    1846:	cf 92       	push	r12
    1848:	df 92       	push	r13
    184a:	ef 92       	push	r14
    184c:	0f 93       	push	r16
    184e:	1f 93       	push	r17
    1850:	cf 93       	push	r28
    1852:	df 93       	push	r29
    1854:	cd b7       	in	r28, 0x3d	; 61
    1856:	de b7       	in	r29, 0x3e	; 62
    1858:	64 97       	sbiw	r28, 0x14	; 20
    185a:	0f b6       	in	r0, 0x3f	; 63
    185c:	f8 94       	cli
    185e:	de bf       	out	0x3e, r29	; 62
    1860:	0f be       	out	0x3f, r0	; 63
    1862:	cd bf       	out	0x3d, r28	; 61
    1864:	9d 83       	std	Y+5, r25	; 0x05
    1866:	8c 83       	std	Y+4, r24	; 0x04
    1868:	7f 83       	std	Y+7, r23	; 0x07
    186a:	6e 83       	std	Y+6, r22	; 0x06
    186c:	28 87       	std	Y+8, r18	; 0x08
    186e:	39 87       	std	Y+9, r19	; 0x09
    1870:	4a 87       	std	Y+10, r20	; 0x0a
    1872:	5b 87       	std	Y+11, r21	; 0x0b
    1874:	1d 87       	std	Y+13, r17	; 0x0d
    1876:	0c 87       	std	Y+12, r16	; 0x0c
    1878:	ee 86       	std	Y+14, r14	; 0x0e
    187a:	d8 8a       	std	Y+16, r13	; 0x10
    187c:	cf 86       	std	Y+15, r12	; 0x0f
    187e:	ba 8a       	std	Y+18, r11	; 0x12
    1880:	a9 8a       	std	Y+17, r10	; 0x11
    1882:	9c 8a       	std	Y+20, r9	; 0x14
    1884:	8b 8a       	std	Y+19, r8	; 0x13
    1886:	89 89       	ldd	r24, Y+17	; 0x11
    1888:	9a 89       	ldd	r25, Y+18	; 0x12
    188a:	fc 01       	movw	r30, r24
    188c:	27 89       	ldd	r18, Z+23	; 0x17
    188e:	30 8d       	ldd	r19, Z+24	; 0x18
    1890:	88 85       	ldd	r24, Y+8	; 0x08
    1892:	99 85       	ldd	r25, Y+9	; 0x09
    1894:	01 97       	sbiw	r24, 0x01	; 1
    1896:	82 0f       	add	r24, r18
    1898:	93 1f       	adc	r25, r19
    189a:	9b 83       	std	Y+3, r25	; 0x03
    189c:	8a 83       	std	Y+2, r24	; 0x02
    189e:	8e 81       	ldd	r24, Y+6	; 0x06
    18a0:	9f 81       	ldd	r25, Y+7	; 0x07
    18a2:	89 2b       	or	r24, r25
    18a4:	69 f1       	breq	.+90     	; 0x1900 <prvInitialiseNewTask+0xc2>
    18a6:	19 82       	std	Y+1, r1	; 0x01
    18a8:	21 c0       	rjmp	.+66     	; 0x18ec <prvInitialiseNewTask+0xae>
    18aa:	89 81       	ldd	r24, Y+1	; 0x01
    18ac:	88 2f       	mov	r24, r24
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	29 81       	ldd	r18, Y+1	; 0x01
    18b2:	22 2f       	mov	r18, r18
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	4e 81       	ldd	r20, Y+6	; 0x06
    18b8:	5f 81       	ldd	r21, Y+7	; 0x07
    18ba:	24 0f       	add	r18, r20
    18bc:	35 1f       	adc	r19, r21
    18be:	f9 01       	movw	r30, r18
    18c0:	40 81       	ld	r20, Z
    18c2:	29 89       	ldd	r18, Y+17	; 0x11
    18c4:	3a 89       	ldd	r19, Y+18	; 0x12
    18c6:	82 0f       	add	r24, r18
    18c8:	93 1f       	adc	r25, r19
    18ca:	49 96       	adiw	r24, 0x19	; 25
    18cc:	fc 01       	movw	r30, r24
    18ce:	40 83       	st	Z, r20
    18d0:	89 81       	ldd	r24, Y+1	; 0x01
    18d2:	88 2f       	mov	r24, r24
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	2e 81       	ldd	r18, Y+6	; 0x06
    18d8:	3f 81       	ldd	r19, Y+7	; 0x07
    18da:	82 0f       	add	r24, r18
    18dc:	93 1f       	adc	r25, r19
    18de:	fc 01       	movw	r30, r24
    18e0:	80 81       	ld	r24, Z
    18e2:	88 23       	and	r24, r24
    18e4:	39 f0       	breq	.+14     	; 0x18f4 <prvInitialiseNewTask+0xb6>
    18e6:	89 81       	ldd	r24, Y+1	; 0x01
    18e8:	8f 5f       	subi	r24, 0xFF	; 255
    18ea:	89 83       	std	Y+1, r24	; 0x01
    18ec:	89 81       	ldd	r24, Y+1	; 0x01
    18ee:	88 30       	cpi	r24, 0x08	; 8
    18f0:	e0 f2       	brcs	.-72     	; 0x18aa <prvInitialiseNewTask+0x6c>
    18f2:	01 c0       	rjmp	.+2      	; 0x18f6 <prvInitialiseNewTask+0xb8>
    18f4:	00 00       	nop
    18f6:	89 89       	ldd	r24, Y+17	; 0x11
    18f8:	9a 89       	ldd	r25, Y+18	; 0x12
    18fa:	fc 01       	movw	r30, r24
    18fc:	10 a2       	std	Z+32, r1	; 0x20
    18fe:	04 c0       	rjmp	.+8      	; 0x1908 <prvInitialiseNewTask+0xca>
    1900:	89 89       	ldd	r24, Y+17	; 0x11
    1902:	9a 89       	ldd	r25, Y+18	; 0x12
    1904:	fc 01       	movw	r30, r24
    1906:	11 8e       	std	Z+25, r1	; 0x19
    1908:	8e 85       	ldd	r24, Y+14	; 0x0e
    190a:	86 30       	cpi	r24, 0x06	; 6
    190c:	10 f0       	brcs	.+4      	; 0x1912 <prvInitialiseNewTask+0xd4>
    190e:	85 e0       	ldi	r24, 0x05	; 5
    1910:	8e 87       	std	Y+14, r24	; 0x0e
    1912:	89 89       	ldd	r24, Y+17	; 0x11
    1914:	9a 89       	ldd	r25, Y+18	; 0x12
    1916:	2e 85       	ldd	r18, Y+14	; 0x0e
    1918:	fc 01       	movw	r30, r24
    191a:	26 8b       	std	Z+22, r18	; 0x16
    191c:	89 89       	ldd	r24, Y+17	; 0x11
    191e:	9a 89       	ldd	r25, Y+18	; 0x12
    1920:	2e 85       	ldd	r18, Y+14	; 0x0e
    1922:	fc 01       	movw	r30, r24
    1924:	21 a3       	std	Z+33, r18	; 0x21
    1926:	89 89       	ldd	r24, Y+17	; 0x11
    1928:	9a 89       	ldd	r25, Y+18	; 0x12
    192a:	fc 01       	movw	r30, r24
    192c:	12 a2       	std	Z+34, r1	; 0x22
    192e:	89 89       	ldd	r24, Y+17	; 0x11
    1930:	9a 89       	ldd	r25, Y+18	; 0x12
    1932:	02 96       	adiw	r24, 0x02	; 2
    1934:	0e 94 76 07 	call	0xeec	; 0xeec <vListInitialiseItem>
    1938:	89 89       	ldd	r24, Y+17	; 0x11
    193a:	9a 89       	ldd	r25, Y+18	; 0x12
    193c:	0c 96       	adiw	r24, 0x0c	; 12
    193e:	0e 94 76 07 	call	0xeec	; 0xeec <vListInitialiseItem>
    1942:	89 89       	ldd	r24, Y+17	; 0x11
    1944:	9a 89       	ldd	r25, Y+18	; 0x12
    1946:	29 89       	ldd	r18, Y+17	; 0x11
    1948:	3a 89       	ldd	r19, Y+18	; 0x12
    194a:	fc 01       	movw	r30, r24
    194c:	31 87       	std	Z+9, r19	; 0x09
    194e:	20 87       	std	Z+8, r18	; 0x08
    1950:	8e 85       	ldd	r24, Y+14	; 0x0e
    1952:	88 2f       	mov	r24, r24
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	26 e0       	ldi	r18, 0x06	; 6
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	28 1b       	sub	r18, r24
    195c:	39 0b       	sbc	r19, r25
    195e:	89 89       	ldd	r24, Y+17	; 0x11
    1960:	9a 89       	ldd	r25, Y+18	; 0x12
    1962:	fc 01       	movw	r30, r24
    1964:	35 87       	std	Z+13, r19	; 0x0d
    1966:	24 87       	std	Z+12, r18	; 0x0c
    1968:	89 89       	ldd	r24, Y+17	; 0x11
    196a:	9a 89       	ldd	r25, Y+18	; 0x12
    196c:	29 89       	ldd	r18, Y+17	; 0x11
    196e:	3a 89       	ldd	r19, Y+18	; 0x12
    1970:	fc 01       	movw	r30, r24
    1972:	33 8b       	std	Z+19, r19	; 0x13
    1974:	22 8b       	std	Z+18, r18	; 0x12
    1976:	89 89       	ldd	r24, Y+17	; 0x11
    1978:	9a 89       	ldd	r25, Y+18	; 0x12
    197a:	fc 01       	movw	r30, r24
    197c:	13 a2       	std	Z+35, r1	; 0x23
    197e:	14 a2       	std	Z+36, r1	; 0x24
    1980:	15 a2       	std	Z+37, r1	; 0x25
    1982:	16 a2       	std	Z+38, r1	; 0x26
    1984:	89 89       	ldd	r24, Y+17	; 0x11
    1986:	9a 89       	ldd	r25, Y+18	; 0x12
    1988:	fc 01       	movw	r30, r24
    198a:	17 a2       	std	Z+39, r1	; 0x27
    198c:	4c 85       	ldd	r20, Y+12	; 0x0c
    198e:	5d 85       	ldd	r21, Y+13	; 0x0d
    1990:	2c 81       	ldd	r18, Y+4	; 0x04
    1992:	3d 81       	ldd	r19, Y+5	; 0x05
    1994:	8a 81       	ldd	r24, Y+2	; 0x02
    1996:	9b 81       	ldd	r25, Y+3	; 0x03
    1998:	b9 01       	movw	r22, r18
    199a:	0e 94 a6 08 	call	0x114c	; 0x114c <pxPortInitialiseStack>
    199e:	9c 01       	movw	r18, r24
    19a0:	89 89       	ldd	r24, Y+17	; 0x11
    19a2:	9a 89       	ldd	r25, Y+18	; 0x12
    19a4:	fc 01       	movw	r30, r24
    19a6:	31 83       	std	Z+1, r19	; 0x01
    19a8:	20 83       	st	Z, r18
    19aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    19ac:	98 89       	ldd	r25, Y+16	; 0x10
    19ae:	89 2b       	or	r24, r25
    19b0:	39 f0       	breq	.+14     	; 0x19c0 <prvInitialiseNewTask+0x182>
    19b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    19b4:	98 89       	ldd	r25, Y+16	; 0x10
    19b6:	29 89       	ldd	r18, Y+17	; 0x11
    19b8:	3a 89       	ldd	r19, Y+18	; 0x12
    19ba:	fc 01       	movw	r30, r24
    19bc:	31 83       	std	Z+1, r19	; 0x01
    19be:	20 83       	st	Z, r18
    19c0:	00 00       	nop
    19c2:	64 96       	adiw	r28, 0x14	; 20
    19c4:	0f b6       	in	r0, 0x3f	; 63
    19c6:	f8 94       	cli
    19c8:	de bf       	out	0x3e, r29	; 62
    19ca:	0f be       	out	0x3f, r0	; 63
    19cc:	cd bf       	out	0x3d, r28	; 61
    19ce:	df 91       	pop	r29
    19d0:	cf 91       	pop	r28
    19d2:	1f 91       	pop	r17
    19d4:	0f 91       	pop	r16
    19d6:	ef 90       	pop	r14
    19d8:	df 90       	pop	r13
    19da:	cf 90       	pop	r12
    19dc:	bf 90       	pop	r11
    19de:	af 90       	pop	r10
    19e0:	9f 90       	pop	r9
    19e2:	8f 90       	pop	r8
    19e4:	08 95       	ret

000019e6 <prvAddNewTaskToReadyList>:
    19e6:	cf 93       	push	r28
    19e8:	df 93       	push	r29
    19ea:	00 d0       	rcall	.+0      	; 0x19ec <prvAddNewTaskToReadyList+0x6>
    19ec:	cd b7       	in	r28, 0x3d	; 61
    19ee:	de b7       	in	r29, 0x3e	; 62
    19f0:	9a 83       	std	Y+2, r25	; 0x02
    19f2:	89 83       	std	Y+1, r24	; 0x01
    19f4:	0f b6       	in	r0, 0x3f	; 63
    19f6:	f8 94       	cli
    19f8:	0f 92       	push	r0
    19fa:	80 91 1d 07 	lds	r24, 0x071D	; 0x80071d <uxCurrentNumberOfTasks>
    19fe:	8f 5f       	subi	r24, 0xFF	; 255
    1a00:	80 93 1d 07 	sts	0x071D, r24	; 0x80071d <uxCurrentNumberOfTasks>
    1a04:	80 91 b3 06 	lds	r24, 0x06B3	; 0x8006b3 <pxCurrentTCB>
    1a08:	90 91 b4 06 	lds	r25, 0x06B4	; 0x8006b4 <pxCurrentTCB+0x1>
    1a0c:	89 2b       	or	r24, r25
    1a0e:	69 f4       	brne	.+26     	; 0x1a2a <prvAddNewTaskToReadyList+0x44>
    1a10:	89 81       	ldd	r24, Y+1	; 0x01
    1a12:	9a 81       	ldd	r25, Y+2	; 0x02
    1a14:	90 93 b4 06 	sts	0x06B4, r25	; 0x8006b4 <pxCurrentTCB+0x1>
    1a18:	80 93 b3 06 	sts	0x06B3, r24	; 0x8006b3 <pxCurrentTCB>
    1a1c:	80 91 1d 07 	lds	r24, 0x071D	; 0x80071d <uxCurrentNumberOfTasks>
    1a20:	81 30       	cpi	r24, 0x01	; 1
    1a22:	c9 f4       	brne	.+50     	; 0x1a56 <prvAddNewTaskToReadyList+0x70>
    1a24:	0e 94 73 11 	call	0x22e6	; 0x22e6 <prvInitialiseTaskLists>
    1a28:	16 c0       	rjmp	.+44     	; 0x1a56 <prvAddNewTaskToReadyList+0x70>
    1a2a:	80 91 21 07 	lds	r24, 0x0721	; 0x800721 <xSchedulerRunning>
    1a2e:	88 23       	and	r24, r24
    1a30:	91 f4       	brne	.+36     	; 0x1a56 <prvAddNewTaskToReadyList+0x70>
    1a32:	80 91 b3 06 	lds	r24, 0x06B3	; 0x8006b3 <pxCurrentTCB>
    1a36:	90 91 b4 06 	lds	r25, 0x06B4	; 0x8006b4 <pxCurrentTCB+0x1>
    1a3a:	fc 01       	movw	r30, r24
    1a3c:	26 89       	ldd	r18, Z+22	; 0x16
    1a3e:	89 81       	ldd	r24, Y+1	; 0x01
    1a40:	9a 81       	ldd	r25, Y+2	; 0x02
    1a42:	fc 01       	movw	r30, r24
    1a44:	86 89       	ldd	r24, Z+22	; 0x16
    1a46:	82 17       	cp	r24, r18
    1a48:	30 f0       	brcs	.+12     	; 0x1a56 <prvAddNewTaskToReadyList+0x70>
    1a4a:	89 81       	ldd	r24, Y+1	; 0x01
    1a4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a4e:	90 93 b4 06 	sts	0x06B4, r25	; 0x8006b4 <pxCurrentTCB+0x1>
    1a52:	80 93 b3 06 	sts	0x06B3, r24	; 0x8006b3 <pxCurrentTCB>
    1a56:	80 91 25 07 	lds	r24, 0x0725	; 0x800725 <uxTaskNumber>
    1a5a:	8f 5f       	subi	r24, 0xFF	; 255
    1a5c:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <uxTaskNumber>
    1a60:	89 81       	ldd	r24, Y+1	; 0x01
    1a62:	9a 81       	ldd	r25, Y+2	; 0x02
    1a64:	fc 01       	movw	r30, r24
    1a66:	96 89       	ldd	r25, Z+22	; 0x16
    1a68:	80 91 20 07 	lds	r24, 0x0720	; 0x800720 <uxTopReadyPriority>
    1a6c:	89 17       	cp	r24, r25
    1a6e:	30 f4       	brcc	.+12     	; 0x1a7c <prvAddNewTaskToReadyList+0x96>
    1a70:	89 81       	ldd	r24, Y+1	; 0x01
    1a72:	9a 81       	ldd	r25, Y+2	; 0x02
    1a74:	fc 01       	movw	r30, r24
    1a76:	86 89       	ldd	r24, Z+22	; 0x16
    1a78:	80 93 20 07 	sts	0x0720, r24	; 0x800720 <uxTopReadyPriority>
    1a7c:	89 81       	ldd	r24, Y+1	; 0x01
    1a7e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a80:	ac 01       	movw	r20, r24
    1a82:	4e 5f       	subi	r20, 0xFE	; 254
    1a84:	5f 4f       	sbci	r21, 0xFF	; 255
    1a86:	89 81       	ldd	r24, Y+1	; 0x01
    1a88:	9a 81       	ldd	r25, Y+2	; 0x02
    1a8a:	fc 01       	movw	r30, r24
    1a8c:	86 89       	ldd	r24, Z+22	; 0x16
    1a8e:	28 2f       	mov	r18, r24
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	c9 01       	movw	r24, r18
    1a94:	88 0f       	add	r24, r24
    1a96:	99 1f       	adc	r25, r25
    1a98:	88 0f       	add	r24, r24
    1a9a:	99 1f       	adc	r25, r25
    1a9c:	88 0f       	add	r24, r24
    1a9e:	99 1f       	adc	r25, r25
    1aa0:	82 0f       	add	r24, r18
    1aa2:	93 1f       	adc	r25, r19
    1aa4:	8b 54       	subi	r24, 0x4B	; 75
    1aa6:	99 4f       	sbci	r25, 0xF9	; 249
    1aa8:	ba 01       	movw	r22, r20
    1aaa:	0e 94 88 07 	call	0xf10	; 0xf10 <vListInsertEnd>
    1aae:	0f 90       	pop	r0
    1ab0:	0f be       	out	0x3f, r0	; 63
    1ab2:	80 91 21 07 	lds	r24, 0x0721	; 0x800721 <xSchedulerRunning>
    1ab6:	88 23       	and	r24, r24
    1ab8:	71 f0       	breq	.+28     	; 0x1ad6 <prvAddNewTaskToReadyList+0xf0>
    1aba:	80 91 b3 06 	lds	r24, 0x06B3	; 0x8006b3 <pxCurrentTCB>
    1abe:	90 91 b4 06 	lds	r25, 0x06B4	; 0x8006b4 <pxCurrentTCB+0x1>
    1ac2:	fc 01       	movw	r30, r24
    1ac4:	26 89       	ldd	r18, Z+22	; 0x16
    1ac6:	89 81       	ldd	r24, Y+1	; 0x01
    1ac8:	9a 81       	ldd	r25, Y+2	; 0x02
    1aca:	fc 01       	movw	r30, r24
    1acc:	86 89       	ldd	r24, Z+22	; 0x16
    1ace:	28 17       	cp	r18, r24
    1ad0:	10 f4       	brcc	.+4      	; 0x1ad6 <prvAddNewTaskToReadyList+0xf0>
    1ad2:	0e 94 84 0a 	call	0x1508	; 0x1508 <vPortYield>
    1ad6:	00 00       	nop
    1ad8:	0f 90       	pop	r0
    1ada:	0f 90       	pop	r0
    1adc:	df 91       	pop	r29
    1ade:	cf 91       	pop	r28
    1ae0:	08 95       	ret

00001ae2 <vTaskDelay>:
    1ae2:	cf 93       	push	r28
    1ae4:	df 93       	push	r29
    1ae6:	00 d0       	rcall	.+0      	; 0x1ae8 <vTaskDelay+0x6>
    1ae8:	1f 92       	push	r1
    1aea:	cd b7       	in	r28, 0x3d	; 61
    1aec:	de b7       	in	r29, 0x3e	; 62
    1aee:	9b 83       	std	Y+3, r25	; 0x03
    1af0:	8a 83       	std	Y+2, r24	; 0x02
    1af2:	19 82       	std	Y+1, r1	; 0x01
    1af4:	8a 81       	ldd	r24, Y+2	; 0x02
    1af6:	9b 81       	ldd	r25, Y+3	; 0x03
    1af8:	89 2b       	or	r24, r25
    1afa:	51 f0       	breq	.+20     	; 0x1b10 <vTaskDelay+0x2e>
    1afc:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <vTaskSuspendAll>
    1b00:	8a 81       	ldd	r24, Y+2	; 0x02
    1b02:	9b 81       	ldd	r25, Y+3	; 0x03
    1b04:	60 e0       	ldi	r22, 0x00	; 0
    1b06:	0e 94 57 12 	call	0x24ae	; 0x24ae <prvAddCurrentTaskToDelayedList>
    1b0a:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <xTaskResumeAll>
    1b0e:	89 83       	std	Y+1, r24	; 0x01
    1b10:	89 81       	ldd	r24, Y+1	; 0x01
    1b12:	88 23       	and	r24, r24
    1b14:	11 f4       	brne	.+4      	; 0x1b1a <vTaskDelay+0x38>
    1b16:	0e 94 84 0a 	call	0x1508	; 0x1508 <vPortYield>
    1b1a:	00 00       	nop
    1b1c:	0f 90       	pop	r0
    1b1e:	0f 90       	pop	r0
    1b20:	0f 90       	pop	r0
    1b22:	df 91       	pop	r29
    1b24:	cf 91       	pop	r28
    1b26:	08 95       	ret

00001b28 <vTaskSuspend>:
    1b28:	cf 93       	push	r28
    1b2a:	df 93       	push	r29
    1b2c:	00 d0       	rcall	.+0      	; 0x1b2e <vTaskSuspend+0x6>
    1b2e:	00 d0       	rcall	.+0      	; 0x1b30 <vTaskSuspend+0x8>
    1b30:	cd b7       	in	r28, 0x3d	; 61
    1b32:	de b7       	in	r29, 0x3e	; 62
    1b34:	9c 83       	std	Y+4, r25	; 0x04
    1b36:	8b 83       	std	Y+3, r24	; 0x03
    1b38:	0f b6       	in	r0, 0x3f	; 63
    1b3a:	f8 94       	cli
    1b3c:	0f 92       	push	r0
    1b3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b40:	9c 81       	ldd	r25, Y+4	; 0x04
    1b42:	89 2b       	or	r24, r25
    1b44:	29 f4       	brne	.+10     	; 0x1b50 <vTaskSuspend+0x28>
    1b46:	80 91 b3 06 	lds	r24, 0x06B3	; 0x8006b3 <pxCurrentTCB>
    1b4a:	90 91 b4 06 	lds	r25, 0x06B4	; 0x8006b4 <pxCurrentTCB+0x1>
    1b4e:	02 c0       	rjmp	.+4      	; 0x1b54 <vTaskSuspend+0x2c>
    1b50:	8b 81       	ldd	r24, Y+3	; 0x03
    1b52:	9c 81       	ldd	r25, Y+4	; 0x04
    1b54:	9a 83       	std	Y+2, r25	; 0x02
    1b56:	89 83       	std	Y+1, r24	; 0x01
    1b58:	89 81       	ldd	r24, Y+1	; 0x01
    1b5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b5c:	02 96       	adiw	r24, 0x02	; 2
    1b5e:	0e 94 4f 08 	call	0x109e	; 0x109e <uxListRemove>
    1b62:	89 81       	ldd	r24, Y+1	; 0x01
    1b64:	9a 81       	ldd	r25, Y+2	; 0x02
    1b66:	fc 01       	movw	r30, r24
    1b68:	84 89       	ldd	r24, Z+20	; 0x14
    1b6a:	95 89       	ldd	r25, Z+21	; 0x15
    1b6c:	89 2b       	or	r24, r25
    1b6e:	29 f0       	breq	.+10     	; 0x1b7a <vTaskSuspend+0x52>
    1b70:	89 81       	ldd	r24, Y+1	; 0x01
    1b72:	9a 81       	ldd	r25, Y+2	; 0x02
    1b74:	0c 96       	adiw	r24, 0x0c	; 12
    1b76:	0e 94 4f 08 	call	0x109e	; 0x109e <uxListRemove>
    1b7a:	89 81       	ldd	r24, Y+1	; 0x01
    1b7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b7e:	02 96       	adiw	r24, 0x02	; 2
    1b80:	bc 01       	movw	r22, r24
    1b82:	84 e1       	ldi	r24, 0x14	; 20
    1b84:	97 e0       	ldi	r25, 0x07	; 7
    1b86:	0e 94 88 07 	call	0xf10	; 0xf10 <vListInsertEnd>
    1b8a:	89 81       	ldd	r24, Y+1	; 0x01
    1b8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b8e:	fc 01       	movw	r30, r24
    1b90:	87 a1       	ldd	r24, Z+39	; 0x27
    1b92:	81 30       	cpi	r24, 0x01	; 1
    1b94:	21 f4       	brne	.+8      	; 0x1b9e <vTaskSuspend+0x76>
    1b96:	89 81       	ldd	r24, Y+1	; 0x01
    1b98:	9a 81       	ldd	r25, Y+2	; 0x02
    1b9a:	fc 01       	movw	r30, r24
    1b9c:	17 a2       	std	Z+39, r1	; 0x27
    1b9e:	0f 90       	pop	r0
    1ba0:	0f be       	out	0x3f, r0	; 63
    1ba2:	80 91 21 07 	lds	r24, 0x0721	; 0x800721 <xSchedulerRunning>
    1ba6:	88 23       	and	r24, r24
    1ba8:	39 f0       	breq	.+14     	; 0x1bb8 <vTaskSuspend+0x90>
    1baa:	0f b6       	in	r0, 0x3f	; 63
    1bac:	f8 94       	cli
    1bae:	0f 92       	push	r0
    1bb0:	0e 94 fe 11 	call	0x23fc	; 0x23fc <prvResetNextTaskUnblockTime>
    1bb4:	0f 90       	pop	r0
    1bb6:	0f be       	out	0x3f, r0	; 63
    1bb8:	80 91 b3 06 	lds	r24, 0x06B3	; 0x8006b3 <pxCurrentTCB>
    1bbc:	90 91 b4 06 	lds	r25, 0x06B4	; 0x8006b4 <pxCurrentTCB+0x1>
    1bc0:	29 81       	ldd	r18, Y+1	; 0x01
    1bc2:	3a 81       	ldd	r19, Y+2	; 0x02
    1bc4:	28 17       	cp	r18, r24
    1bc6:	39 07       	cpc	r19, r25
    1bc8:	a1 f4       	brne	.+40     	; 0x1bf2 <vTaskSuspend+0xca>
    1bca:	80 91 21 07 	lds	r24, 0x0721	; 0x800721 <xSchedulerRunning>
    1bce:	88 23       	and	r24, r24
    1bd0:	19 f0       	breq	.+6      	; 0x1bd8 <vTaskSuspend+0xb0>
    1bd2:	0e 94 84 0a 	call	0x1508	; 0x1508 <vPortYield>
    1bd6:	0d c0       	rjmp	.+26     	; 0x1bf2 <vTaskSuspend+0xca>
    1bd8:	90 91 14 07 	lds	r25, 0x0714	; 0x800714 <xSuspendedTaskList>
    1bdc:	80 91 1d 07 	lds	r24, 0x071D	; 0x80071d <uxCurrentNumberOfTasks>
    1be0:	98 17       	cp	r25, r24
    1be2:	29 f4       	brne	.+10     	; 0x1bee <vTaskSuspend+0xc6>
    1be4:	10 92 b4 06 	sts	0x06B4, r1	; 0x8006b4 <pxCurrentTCB+0x1>
    1be8:	10 92 b3 06 	sts	0x06B3, r1	; 0x8006b3 <pxCurrentTCB>
    1bec:	02 c0       	rjmp	.+4      	; 0x1bf2 <vTaskSuspend+0xca>
    1bee:	0e 94 5f 10 	call	0x20be	; 0x20be <vTaskSwitchContext>
    1bf2:	00 00       	nop
    1bf4:	0f 90       	pop	r0
    1bf6:	0f 90       	pop	r0
    1bf8:	0f 90       	pop	r0
    1bfa:	0f 90       	pop	r0
    1bfc:	df 91       	pop	r29
    1bfe:	cf 91       	pop	r28
    1c00:	08 95       	ret

00001c02 <prvTaskIsTaskSuspended>:
    1c02:	cf 93       	push	r28
    1c04:	df 93       	push	r29
    1c06:	00 d0       	rcall	.+0      	; 0x1c08 <prvTaskIsTaskSuspended+0x6>
    1c08:	00 d0       	rcall	.+0      	; 0x1c0a <prvTaskIsTaskSuspended+0x8>
    1c0a:	1f 92       	push	r1
    1c0c:	cd b7       	in	r28, 0x3d	; 61
    1c0e:	de b7       	in	r29, 0x3e	; 62
    1c10:	9d 83       	std	Y+5, r25	; 0x05
    1c12:	8c 83       	std	Y+4, r24	; 0x04
    1c14:	19 82       	std	Y+1, r1	; 0x01
    1c16:	8c 81       	ldd	r24, Y+4	; 0x04
    1c18:	9d 81       	ldd	r25, Y+5	; 0x05
    1c1a:	9b 83       	std	Y+3, r25	; 0x03
    1c1c:	8a 83       	std	Y+2, r24	; 0x02
    1c1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c20:	9b 81       	ldd	r25, Y+3	; 0x03
    1c22:	fc 01       	movw	r30, r24
    1c24:	82 85       	ldd	r24, Z+10	; 0x0a
    1c26:	93 85       	ldd	r25, Z+11	; 0x0b
    1c28:	84 51       	subi	r24, 0x14	; 20
    1c2a:	97 40       	sbci	r25, 0x07	; 7
    1c2c:	89 f4       	brne	.+34     	; 0x1c50 <prvTaskIsTaskSuspended+0x4e>
    1c2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c30:	9b 81       	ldd	r25, Y+3	; 0x03
    1c32:	fc 01       	movw	r30, r24
    1c34:	84 89       	ldd	r24, Z+20	; 0x14
    1c36:	95 89       	ldd	r25, Z+21	; 0x15
    1c38:	81 50       	subi	r24, 0x01	; 1
    1c3a:	97 40       	sbci	r25, 0x07	; 7
    1c3c:	49 f0       	breq	.+18     	; 0x1c50 <prvTaskIsTaskSuspended+0x4e>
    1c3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c40:	9b 81       	ldd	r25, Y+3	; 0x03
    1c42:	fc 01       	movw	r30, r24
    1c44:	84 89       	ldd	r24, Z+20	; 0x14
    1c46:	95 89       	ldd	r25, Z+21	; 0x15
    1c48:	89 2b       	or	r24, r25
    1c4a:	11 f4       	brne	.+4      	; 0x1c50 <prvTaskIsTaskSuspended+0x4e>
    1c4c:	81 e0       	ldi	r24, 0x01	; 1
    1c4e:	89 83       	std	Y+1, r24	; 0x01
    1c50:	89 81       	ldd	r24, Y+1	; 0x01
    1c52:	0f 90       	pop	r0
    1c54:	0f 90       	pop	r0
    1c56:	0f 90       	pop	r0
    1c58:	0f 90       	pop	r0
    1c5a:	0f 90       	pop	r0
    1c5c:	df 91       	pop	r29
    1c5e:	cf 91       	pop	r28
    1c60:	08 95       	ret

00001c62 <vTaskResume>:
    1c62:	cf 93       	push	r28
    1c64:	df 93       	push	r29
    1c66:	00 d0       	rcall	.+0      	; 0x1c68 <vTaskResume+0x6>
    1c68:	00 d0       	rcall	.+0      	; 0x1c6a <vTaskResume+0x8>
    1c6a:	cd b7       	in	r28, 0x3d	; 61
    1c6c:	de b7       	in	r29, 0x3e	; 62
    1c6e:	9c 83       	std	Y+4, r25	; 0x04
    1c70:	8b 83       	std	Y+3, r24	; 0x03
    1c72:	8b 81       	ldd	r24, Y+3	; 0x03
    1c74:	9c 81       	ldd	r25, Y+4	; 0x04
    1c76:	9a 83       	std	Y+2, r25	; 0x02
    1c78:	89 83       	std	Y+1, r24	; 0x01
    1c7a:	80 91 b3 06 	lds	r24, 0x06B3	; 0x8006b3 <pxCurrentTCB>
    1c7e:	90 91 b4 06 	lds	r25, 0x06B4	; 0x8006b4 <pxCurrentTCB+0x1>
    1c82:	29 81       	ldd	r18, Y+1	; 0x01
    1c84:	3a 81       	ldd	r19, Y+2	; 0x02
    1c86:	28 17       	cp	r18, r24
    1c88:	39 07       	cpc	r19, r25
    1c8a:	09 f4       	brne	.+2      	; 0x1c8e <vTaskResume+0x2c>
    1c8c:	4a c0       	rjmp	.+148    	; 0x1d22 <vTaskResume+0xc0>
    1c8e:	89 81       	ldd	r24, Y+1	; 0x01
    1c90:	9a 81       	ldd	r25, Y+2	; 0x02
    1c92:	89 2b       	or	r24, r25
    1c94:	09 f4       	brne	.+2      	; 0x1c98 <vTaskResume+0x36>
    1c96:	45 c0       	rjmp	.+138    	; 0x1d22 <vTaskResume+0xc0>
    1c98:	0f b6       	in	r0, 0x3f	; 63
    1c9a:	f8 94       	cli
    1c9c:	0f 92       	push	r0
    1c9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ca0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ca2:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <prvTaskIsTaskSuspended>
    1ca6:	88 23       	and	r24, r24
    1ca8:	d1 f1       	breq	.+116    	; 0x1d1e <vTaskResume+0xbc>
    1caa:	89 81       	ldd	r24, Y+1	; 0x01
    1cac:	9a 81       	ldd	r25, Y+2	; 0x02
    1cae:	02 96       	adiw	r24, 0x02	; 2
    1cb0:	0e 94 4f 08 	call	0x109e	; 0x109e <uxListRemove>
    1cb4:	89 81       	ldd	r24, Y+1	; 0x01
    1cb6:	9a 81       	ldd	r25, Y+2	; 0x02
    1cb8:	fc 01       	movw	r30, r24
    1cba:	96 89       	ldd	r25, Z+22	; 0x16
    1cbc:	80 91 20 07 	lds	r24, 0x0720	; 0x800720 <uxTopReadyPriority>
    1cc0:	89 17       	cp	r24, r25
    1cc2:	30 f4       	brcc	.+12     	; 0x1cd0 <vTaskResume+0x6e>
    1cc4:	89 81       	ldd	r24, Y+1	; 0x01
    1cc6:	9a 81       	ldd	r25, Y+2	; 0x02
    1cc8:	fc 01       	movw	r30, r24
    1cca:	86 89       	ldd	r24, Z+22	; 0x16
    1ccc:	80 93 20 07 	sts	0x0720, r24	; 0x800720 <uxTopReadyPriority>
    1cd0:	89 81       	ldd	r24, Y+1	; 0x01
    1cd2:	9a 81       	ldd	r25, Y+2	; 0x02
    1cd4:	ac 01       	movw	r20, r24
    1cd6:	4e 5f       	subi	r20, 0xFE	; 254
    1cd8:	5f 4f       	sbci	r21, 0xFF	; 255
    1cda:	89 81       	ldd	r24, Y+1	; 0x01
    1cdc:	9a 81       	ldd	r25, Y+2	; 0x02
    1cde:	fc 01       	movw	r30, r24
    1ce0:	86 89       	ldd	r24, Z+22	; 0x16
    1ce2:	28 2f       	mov	r18, r24
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	c9 01       	movw	r24, r18
    1ce8:	88 0f       	add	r24, r24
    1cea:	99 1f       	adc	r25, r25
    1cec:	88 0f       	add	r24, r24
    1cee:	99 1f       	adc	r25, r25
    1cf0:	88 0f       	add	r24, r24
    1cf2:	99 1f       	adc	r25, r25
    1cf4:	82 0f       	add	r24, r18
    1cf6:	93 1f       	adc	r25, r19
    1cf8:	8b 54       	subi	r24, 0x4B	; 75
    1cfa:	99 4f       	sbci	r25, 0xF9	; 249
    1cfc:	ba 01       	movw	r22, r20
    1cfe:	0e 94 88 07 	call	0xf10	; 0xf10 <vListInsertEnd>
    1d02:	89 81       	ldd	r24, Y+1	; 0x01
    1d04:	9a 81       	ldd	r25, Y+2	; 0x02
    1d06:	fc 01       	movw	r30, r24
    1d08:	26 89       	ldd	r18, Z+22	; 0x16
    1d0a:	80 91 b3 06 	lds	r24, 0x06B3	; 0x8006b3 <pxCurrentTCB>
    1d0e:	90 91 b4 06 	lds	r25, 0x06B4	; 0x8006b4 <pxCurrentTCB+0x1>
    1d12:	fc 01       	movw	r30, r24
    1d14:	86 89       	ldd	r24, Z+22	; 0x16
    1d16:	28 17       	cp	r18, r24
    1d18:	10 f0       	brcs	.+4      	; 0x1d1e <vTaskResume+0xbc>
    1d1a:	0e 94 84 0a 	call	0x1508	; 0x1508 <vPortYield>
    1d1e:	0f 90       	pop	r0
    1d20:	0f be       	out	0x3f, r0	; 63
    1d22:	00 00       	nop
    1d24:	0f 90       	pop	r0
    1d26:	0f 90       	pop	r0
    1d28:	0f 90       	pop	r0
    1d2a:	0f 90       	pop	r0
    1d2c:	df 91       	pop	r29
    1d2e:	cf 91       	pop	r28
    1d30:	08 95       	ret

00001d32 <vTaskStartScheduler>:
    1d32:	ef 92       	push	r14
    1d34:	ff 92       	push	r15
    1d36:	0f 93       	push	r16
    1d38:	cf 93       	push	r28
    1d3a:	df 93       	push	r29
    1d3c:	1f 92       	push	r1
    1d3e:	cd b7       	in	r28, 0x3d	; 61
    1d40:	de b7       	in	r29, 0x3e	; 62
    1d42:	0f 2e       	mov	r0, r31
    1d44:	f8 e2       	ldi	r31, 0x28	; 40
    1d46:	ef 2e       	mov	r14, r31
    1d48:	f7 e0       	ldi	r31, 0x07	; 7
    1d4a:	ff 2e       	mov	r15, r31
    1d4c:	f0 2d       	mov	r31, r0
    1d4e:	00 e0       	ldi	r16, 0x00	; 0
    1d50:	20 e0       	ldi	r18, 0x00	; 0
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	45 e5       	ldi	r20, 0x55	; 85
    1d56:	50 e0       	ldi	r21, 0x00	; 0
    1d58:	62 ec       	ldi	r22, 0xC2	; 194
    1d5a:	70 e0       	ldi	r23, 0x00	; 0
    1d5c:	89 e6       	ldi	r24, 0x69	; 105
    1d5e:	91 e1       	ldi	r25, 0x11	; 17
    1d60:	0e 94 a2 0b 	call	0x1744	; 0x1744 <xTaskCreate>
    1d64:	89 83       	std	Y+1, r24	; 0x01
    1d66:	89 81       	ldd	r24, Y+1	; 0x01
    1d68:	81 30       	cpi	r24, 0x01	; 1
    1d6a:	81 f4       	brne	.+32     	; 0x1d8c <vTaskStartScheduler+0x5a>
    1d6c:	f8 94       	cli
    1d6e:	8f ef       	ldi	r24, 0xFF	; 255
    1d70:	9f ef       	ldi	r25, 0xFF	; 255
    1d72:	90 93 27 07 	sts	0x0727, r25	; 0x800727 <xNextTaskUnblockTime+0x1>
    1d76:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <xNextTaskUnblockTime>
    1d7a:	81 e0       	ldi	r24, 0x01	; 1
    1d7c:	80 93 21 07 	sts	0x0721, r24	; 0x800721 <xSchedulerRunning>
    1d80:	10 92 1f 07 	sts	0x071F, r1	; 0x80071f <xTickCount+0x1>
    1d84:	10 92 1e 07 	sts	0x071E, r1	; 0x80071e <xTickCount>
    1d88:	0e 94 4f 0a 	call	0x149e	; 0x149e <xPortStartScheduler>
    1d8c:	00 00       	nop
    1d8e:	0f 90       	pop	r0
    1d90:	df 91       	pop	r29
    1d92:	cf 91       	pop	r28
    1d94:	0f 91       	pop	r16
    1d96:	ff 90       	pop	r15
    1d98:	ef 90       	pop	r14
    1d9a:	08 95       	ret

00001d9c <vTaskSuspendAll>:
    1d9c:	cf 93       	push	r28
    1d9e:	df 93       	push	r29
    1da0:	cd b7       	in	r28, 0x3d	; 61
    1da2:	de b7       	in	r29, 0x3e	; 62
    1da4:	80 91 2a 07 	lds	r24, 0x072A	; 0x80072a <uxSchedulerSuspended>
    1da8:	8f 5f       	subi	r24, 0xFF	; 255
    1daa:	80 93 2a 07 	sts	0x072A, r24	; 0x80072a <uxSchedulerSuspended>
    1dae:	00 00       	nop
    1db0:	df 91       	pop	r29
    1db2:	cf 91       	pop	r28
    1db4:	08 95       	ret

00001db6 <xTaskResumeAll>:
    1db6:	cf 93       	push	r28
    1db8:	df 93       	push	r29
    1dba:	00 d0       	rcall	.+0      	; 0x1dbc <xTaskResumeAll+0x6>
    1dbc:	00 d0       	rcall	.+0      	; 0x1dbe <xTaskResumeAll+0x8>
    1dbe:	cd b7       	in	r28, 0x3d	; 61
    1dc0:	de b7       	in	r29, 0x3e	; 62
    1dc2:	1a 82       	std	Y+2, r1	; 0x02
    1dc4:	19 82       	std	Y+1, r1	; 0x01
    1dc6:	1b 82       	std	Y+3, r1	; 0x03
    1dc8:	0f b6       	in	r0, 0x3f	; 63
    1dca:	f8 94       	cli
    1dcc:	0f 92       	push	r0
    1dce:	80 91 2a 07 	lds	r24, 0x072A	; 0x80072a <uxSchedulerSuspended>
    1dd2:	81 50       	subi	r24, 0x01	; 1
    1dd4:	80 93 2a 07 	sts	0x072A, r24	; 0x80072a <uxSchedulerSuspended>
    1dd8:	80 91 2a 07 	lds	r24, 0x072A	; 0x80072a <uxSchedulerSuspended>
    1ddc:	88 23       	and	r24, r24
    1dde:	09 f0       	breq	.+2      	; 0x1de2 <xTaskResumeAll+0x2c>
    1de0:	77 c0       	rjmp	.+238    	; 0x1ed0 <xTaskResumeAll+0x11a>
    1de2:	80 91 1d 07 	lds	r24, 0x071D	; 0x80071d <uxCurrentNumberOfTasks>
    1de6:	88 23       	and	r24, r24
    1de8:	09 f4       	brne	.+2      	; 0x1dec <xTaskResumeAll+0x36>
    1dea:	72 c0       	rjmp	.+228    	; 0x1ed0 <xTaskResumeAll+0x11a>
    1dec:	49 c0       	rjmp	.+146    	; 0x1e80 <xTaskResumeAll+0xca>
    1dee:	80 91 06 07 	lds	r24, 0x0706	; 0x800706 <xPendingReadyList+0x5>
    1df2:	90 91 07 07 	lds	r25, 0x0707	; 0x800707 <xPendingReadyList+0x6>
    1df6:	fc 01       	movw	r30, r24
    1df8:	86 81       	ldd	r24, Z+6	; 0x06
    1dfa:	97 81       	ldd	r25, Z+7	; 0x07
    1dfc:	9a 83       	std	Y+2, r25	; 0x02
    1dfe:	89 83       	std	Y+1, r24	; 0x01
    1e00:	89 81       	ldd	r24, Y+1	; 0x01
    1e02:	9a 81       	ldd	r25, Y+2	; 0x02
    1e04:	0c 96       	adiw	r24, 0x0c	; 12
    1e06:	0e 94 4f 08 	call	0x109e	; 0x109e <uxListRemove>
    1e0a:	89 81       	ldd	r24, Y+1	; 0x01
    1e0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e0e:	02 96       	adiw	r24, 0x02	; 2
    1e10:	0e 94 4f 08 	call	0x109e	; 0x109e <uxListRemove>
    1e14:	89 81       	ldd	r24, Y+1	; 0x01
    1e16:	9a 81       	ldd	r25, Y+2	; 0x02
    1e18:	fc 01       	movw	r30, r24
    1e1a:	96 89       	ldd	r25, Z+22	; 0x16
    1e1c:	80 91 20 07 	lds	r24, 0x0720	; 0x800720 <uxTopReadyPriority>
    1e20:	89 17       	cp	r24, r25
    1e22:	30 f4       	brcc	.+12     	; 0x1e30 <xTaskResumeAll+0x7a>
    1e24:	89 81       	ldd	r24, Y+1	; 0x01
    1e26:	9a 81       	ldd	r25, Y+2	; 0x02
    1e28:	fc 01       	movw	r30, r24
    1e2a:	86 89       	ldd	r24, Z+22	; 0x16
    1e2c:	80 93 20 07 	sts	0x0720, r24	; 0x800720 <uxTopReadyPriority>
    1e30:	89 81       	ldd	r24, Y+1	; 0x01
    1e32:	9a 81       	ldd	r25, Y+2	; 0x02
    1e34:	ac 01       	movw	r20, r24
    1e36:	4e 5f       	subi	r20, 0xFE	; 254
    1e38:	5f 4f       	sbci	r21, 0xFF	; 255
    1e3a:	89 81       	ldd	r24, Y+1	; 0x01
    1e3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e3e:	fc 01       	movw	r30, r24
    1e40:	86 89       	ldd	r24, Z+22	; 0x16
    1e42:	28 2f       	mov	r18, r24
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	c9 01       	movw	r24, r18
    1e48:	88 0f       	add	r24, r24
    1e4a:	99 1f       	adc	r25, r25
    1e4c:	88 0f       	add	r24, r24
    1e4e:	99 1f       	adc	r25, r25
    1e50:	88 0f       	add	r24, r24
    1e52:	99 1f       	adc	r25, r25
    1e54:	82 0f       	add	r24, r18
    1e56:	93 1f       	adc	r25, r19
    1e58:	8b 54       	subi	r24, 0x4B	; 75
    1e5a:	99 4f       	sbci	r25, 0xF9	; 249
    1e5c:	ba 01       	movw	r22, r20
    1e5e:	0e 94 88 07 	call	0xf10	; 0xf10 <vListInsertEnd>
    1e62:	89 81       	ldd	r24, Y+1	; 0x01
    1e64:	9a 81       	ldd	r25, Y+2	; 0x02
    1e66:	fc 01       	movw	r30, r24
    1e68:	26 89       	ldd	r18, Z+22	; 0x16
    1e6a:	80 91 b3 06 	lds	r24, 0x06B3	; 0x8006b3 <pxCurrentTCB>
    1e6e:	90 91 b4 06 	lds	r25, 0x06B4	; 0x8006b4 <pxCurrentTCB+0x1>
    1e72:	fc 01       	movw	r30, r24
    1e74:	86 89       	ldd	r24, Z+22	; 0x16
    1e76:	28 17       	cp	r18, r24
    1e78:	18 f0       	brcs	.+6      	; 0x1e80 <xTaskResumeAll+0xca>
    1e7a:	81 e0       	ldi	r24, 0x01	; 1
    1e7c:	80 93 23 07 	sts	0x0723, r24	; 0x800723 <xYieldPending>
    1e80:	80 91 01 07 	lds	r24, 0x0701	; 0x800701 <xPendingReadyList>
    1e84:	88 23       	and	r24, r24
    1e86:	09 f0       	breq	.+2      	; 0x1e8a <xTaskResumeAll+0xd4>
    1e88:	b2 cf       	rjmp	.-156    	; 0x1dee <xTaskResumeAll+0x38>
    1e8a:	89 81       	ldd	r24, Y+1	; 0x01
    1e8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e8e:	89 2b       	or	r24, r25
    1e90:	11 f0       	breq	.+4      	; 0x1e96 <xTaskResumeAll+0xe0>
    1e92:	0e 94 fe 11 	call	0x23fc	; 0x23fc <prvResetNextTaskUnblockTime>
    1e96:	80 91 22 07 	lds	r24, 0x0722	; 0x800722 <uxPendedTicks>
    1e9a:	8c 83       	std	Y+4, r24	; 0x04
    1e9c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e9e:	88 23       	and	r24, r24
    1ea0:	79 f0       	breq	.+30     	; 0x1ec0 <xTaskResumeAll+0x10a>
    1ea2:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <xTaskIncrementTick>
    1ea6:	88 23       	and	r24, r24
    1ea8:	19 f0       	breq	.+6      	; 0x1eb0 <xTaskResumeAll+0xfa>
    1eaa:	81 e0       	ldi	r24, 0x01	; 1
    1eac:	80 93 23 07 	sts	0x0723, r24	; 0x800723 <xYieldPending>
    1eb0:	8c 81       	ldd	r24, Y+4	; 0x04
    1eb2:	81 50       	subi	r24, 0x01	; 1
    1eb4:	8c 83       	std	Y+4, r24	; 0x04
    1eb6:	8c 81       	ldd	r24, Y+4	; 0x04
    1eb8:	88 23       	and	r24, r24
    1eba:	99 f7       	brne	.-26     	; 0x1ea2 <xTaskResumeAll+0xec>
    1ebc:	10 92 22 07 	sts	0x0722, r1	; 0x800722 <uxPendedTicks>
    1ec0:	80 91 23 07 	lds	r24, 0x0723	; 0x800723 <xYieldPending>
    1ec4:	88 23       	and	r24, r24
    1ec6:	21 f0       	breq	.+8      	; 0x1ed0 <xTaskResumeAll+0x11a>
    1ec8:	81 e0       	ldi	r24, 0x01	; 1
    1eca:	8b 83       	std	Y+3, r24	; 0x03
    1ecc:	0e 94 84 0a 	call	0x1508	; 0x1508 <vPortYield>
    1ed0:	0f 90       	pop	r0
    1ed2:	0f be       	out	0x3f, r0	; 63
    1ed4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed6:	0f 90       	pop	r0
    1ed8:	0f 90       	pop	r0
    1eda:	0f 90       	pop	r0
    1edc:	0f 90       	pop	r0
    1ede:	df 91       	pop	r29
    1ee0:	cf 91       	pop	r28
    1ee2:	08 95       	ret

00001ee4 <xTaskIncrementTick>:
    1ee4:	cf 93       	push	r28
    1ee6:	df 93       	push	r29
    1ee8:	cd b7       	in	r28, 0x3d	; 61
    1eea:	de b7       	in	r29, 0x3e	; 62
    1eec:	29 97       	sbiw	r28, 0x09	; 9
    1eee:	0f b6       	in	r0, 0x3f	; 63
    1ef0:	f8 94       	cli
    1ef2:	de bf       	out	0x3e, r29	; 62
    1ef4:	0f be       	out	0x3f, r0	; 63
    1ef6:	cd bf       	out	0x3d, r28	; 61
    1ef8:	19 82       	std	Y+1, r1	; 0x01
    1efa:	80 91 2a 07 	lds	r24, 0x072A	; 0x80072a <uxSchedulerSuspended>
    1efe:	88 23       	and	r24, r24
    1f00:	09 f0       	breq	.+2      	; 0x1f04 <xTaskIncrementTick+0x20>
    1f02:	c8 c0       	rjmp	.+400    	; 0x2094 <xTaskIncrementTick+0x1b0>
    1f04:	80 91 1e 07 	lds	r24, 0x071E	; 0x80071e <xTickCount>
    1f08:	90 91 1f 07 	lds	r25, 0x071F	; 0x80071f <xTickCount+0x1>
    1f0c:	01 96       	adiw	r24, 0x01	; 1
    1f0e:	9b 83       	std	Y+3, r25	; 0x03
    1f10:	8a 83       	std	Y+2, r24	; 0x02
    1f12:	8a 81       	ldd	r24, Y+2	; 0x02
    1f14:	9b 81       	ldd	r25, Y+3	; 0x03
    1f16:	90 93 1f 07 	sts	0x071F, r25	; 0x80071f <xTickCount+0x1>
    1f1a:	80 93 1e 07 	sts	0x071E, r24	; 0x80071e <xTickCount>
    1f1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f20:	9b 81       	ldd	r25, Y+3	; 0x03
    1f22:	89 2b       	or	r24, r25
    1f24:	d9 f4       	brne	.+54     	; 0x1f5c <xTaskIncrementTick+0x78>
    1f26:	80 91 fd 06 	lds	r24, 0x06FD	; 0x8006fd <pxDelayedTaskList>
    1f2a:	90 91 fe 06 	lds	r25, 0x06FE	; 0x8006fe <pxDelayedTaskList+0x1>
    1f2e:	9d 83       	std	Y+5, r25	; 0x05
    1f30:	8c 83       	std	Y+4, r24	; 0x04
    1f32:	80 91 ff 06 	lds	r24, 0x06FF	; 0x8006ff <pxOverflowDelayedTaskList>
    1f36:	90 91 00 07 	lds	r25, 0x0700	; 0x800700 <pxOverflowDelayedTaskList+0x1>
    1f3a:	90 93 fe 06 	sts	0x06FE, r25	; 0x8006fe <pxDelayedTaskList+0x1>
    1f3e:	80 93 fd 06 	sts	0x06FD, r24	; 0x8006fd <pxDelayedTaskList>
    1f42:	8c 81       	ldd	r24, Y+4	; 0x04
    1f44:	9d 81       	ldd	r25, Y+5	; 0x05
    1f46:	90 93 00 07 	sts	0x0700, r25	; 0x800700 <pxOverflowDelayedTaskList+0x1>
    1f4a:	80 93 ff 06 	sts	0x06FF, r24	; 0x8006ff <pxOverflowDelayedTaskList>
    1f4e:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <xNumOfOverflows>
    1f52:	8f 5f       	subi	r24, 0xFF	; 255
    1f54:	80 93 24 07 	sts	0x0724, r24	; 0x800724 <xNumOfOverflows>
    1f58:	0e 94 fe 11 	call	0x23fc	; 0x23fc <prvResetNextTaskUnblockTime>
    1f5c:	80 91 26 07 	lds	r24, 0x0726	; 0x800726 <xNextTaskUnblockTime>
    1f60:	90 91 27 07 	lds	r25, 0x0727	; 0x800727 <xNextTaskUnblockTime+0x1>
    1f64:	2a 81       	ldd	r18, Y+2	; 0x02
    1f66:	3b 81       	ldd	r19, Y+3	; 0x03
    1f68:	28 17       	cp	r18, r24
    1f6a:	39 07       	cpc	r19, r25
    1f6c:	08 f4       	brcc	.+2      	; 0x1f70 <xTaskIncrementTick+0x8c>
    1f6e:	78 c0       	rjmp	.+240    	; 0x2060 <xTaskIncrementTick+0x17c>
    1f70:	80 91 fd 06 	lds	r24, 0x06FD	; 0x8006fd <pxDelayedTaskList>
    1f74:	90 91 fe 06 	lds	r25, 0x06FE	; 0x8006fe <pxDelayedTaskList+0x1>
    1f78:	fc 01       	movw	r30, r24
    1f7a:	80 81       	ld	r24, Z
    1f7c:	88 23       	and	r24, r24
    1f7e:	39 f4       	brne	.+14     	; 0x1f8e <xTaskIncrementTick+0xaa>
    1f80:	8f ef       	ldi	r24, 0xFF	; 255
    1f82:	9f ef       	ldi	r25, 0xFF	; 255
    1f84:	90 93 27 07 	sts	0x0727, r25	; 0x800727 <xNextTaskUnblockTime+0x1>
    1f88:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <xNextTaskUnblockTime>
    1f8c:	69 c0       	rjmp	.+210    	; 0x2060 <xTaskIncrementTick+0x17c>
    1f8e:	80 91 fd 06 	lds	r24, 0x06FD	; 0x8006fd <pxDelayedTaskList>
    1f92:	90 91 fe 06 	lds	r25, 0x06FE	; 0x8006fe <pxDelayedTaskList+0x1>
    1f96:	fc 01       	movw	r30, r24
    1f98:	85 81       	ldd	r24, Z+5	; 0x05
    1f9a:	96 81       	ldd	r25, Z+6	; 0x06
    1f9c:	fc 01       	movw	r30, r24
    1f9e:	86 81       	ldd	r24, Z+6	; 0x06
    1fa0:	97 81       	ldd	r25, Z+7	; 0x07
    1fa2:	9f 83       	std	Y+7, r25	; 0x07
    1fa4:	8e 83       	std	Y+6, r24	; 0x06
    1fa6:	8e 81       	ldd	r24, Y+6	; 0x06
    1fa8:	9f 81       	ldd	r25, Y+7	; 0x07
    1faa:	fc 01       	movw	r30, r24
    1fac:	82 81       	ldd	r24, Z+2	; 0x02
    1fae:	93 81       	ldd	r25, Z+3	; 0x03
    1fb0:	99 87       	std	Y+9, r25	; 0x09
    1fb2:	88 87       	std	Y+8, r24	; 0x08
    1fb4:	2a 81       	ldd	r18, Y+2	; 0x02
    1fb6:	3b 81       	ldd	r19, Y+3	; 0x03
    1fb8:	88 85       	ldd	r24, Y+8	; 0x08
    1fba:	99 85       	ldd	r25, Y+9	; 0x09
    1fbc:	28 17       	cp	r18, r24
    1fbe:	39 07       	cpc	r19, r25
    1fc0:	38 f4       	brcc	.+14     	; 0x1fd0 <xTaskIncrementTick+0xec>
    1fc2:	88 85       	ldd	r24, Y+8	; 0x08
    1fc4:	99 85       	ldd	r25, Y+9	; 0x09
    1fc6:	90 93 27 07 	sts	0x0727, r25	; 0x800727 <xNextTaskUnblockTime+0x1>
    1fca:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <xNextTaskUnblockTime>
    1fce:	48 c0       	rjmp	.+144    	; 0x2060 <xTaskIncrementTick+0x17c>
    1fd0:	8e 81       	ldd	r24, Y+6	; 0x06
    1fd2:	9f 81       	ldd	r25, Y+7	; 0x07
    1fd4:	02 96       	adiw	r24, 0x02	; 2
    1fd6:	0e 94 4f 08 	call	0x109e	; 0x109e <uxListRemove>
    1fda:	8e 81       	ldd	r24, Y+6	; 0x06
    1fdc:	9f 81       	ldd	r25, Y+7	; 0x07
    1fde:	fc 01       	movw	r30, r24
    1fe0:	84 89       	ldd	r24, Z+20	; 0x14
    1fe2:	95 89       	ldd	r25, Z+21	; 0x15
    1fe4:	89 2b       	or	r24, r25
    1fe6:	29 f0       	breq	.+10     	; 0x1ff2 <xTaskIncrementTick+0x10e>
    1fe8:	8e 81       	ldd	r24, Y+6	; 0x06
    1fea:	9f 81       	ldd	r25, Y+7	; 0x07
    1fec:	0c 96       	adiw	r24, 0x0c	; 12
    1fee:	0e 94 4f 08 	call	0x109e	; 0x109e <uxListRemove>
    1ff2:	8e 81       	ldd	r24, Y+6	; 0x06
    1ff4:	9f 81       	ldd	r25, Y+7	; 0x07
    1ff6:	fc 01       	movw	r30, r24
    1ff8:	96 89       	ldd	r25, Z+22	; 0x16
    1ffa:	80 91 20 07 	lds	r24, 0x0720	; 0x800720 <uxTopReadyPriority>
    1ffe:	89 17       	cp	r24, r25
    2000:	30 f4       	brcc	.+12     	; 0x200e <xTaskIncrementTick+0x12a>
    2002:	8e 81       	ldd	r24, Y+6	; 0x06
    2004:	9f 81       	ldd	r25, Y+7	; 0x07
    2006:	fc 01       	movw	r30, r24
    2008:	86 89       	ldd	r24, Z+22	; 0x16
    200a:	80 93 20 07 	sts	0x0720, r24	; 0x800720 <uxTopReadyPriority>
    200e:	8e 81       	ldd	r24, Y+6	; 0x06
    2010:	9f 81       	ldd	r25, Y+7	; 0x07
    2012:	ac 01       	movw	r20, r24
    2014:	4e 5f       	subi	r20, 0xFE	; 254
    2016:	5f 4f       	sbci	r21, 0xFF	; 255
    2018:	8e 81       	ldd	r24, Y+6	; 0x06
    201a:	9f 81       	ldd	r25, Y+7	; 0x07
    201c:	fc 01       	movw	r30, r24
    201e:	86 89       	ldd	r24, Z+22	; 0x16
    2020:	28 2f       	mov	r18, r24
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	c9 01       	movw	r24, r18
    2026:	88 0f       	add	r24, r24
    2028:	99 1f       	adc	r25, r25
    202a:	88 0f       	add	r24, r24
    202c:	99 1f       	adc	r25, r25
    202e:	88 0f       	add	r24, r24
    2030:	99 1f       	adc	r25, r25
    2032:	82 0f       	add	r24, r18
    2034:	93 1f       	adc	r25, r19
    2036:	8b 54       	subi	r24, 0x4B	; 75
    2038:	99 4f       	sbci	r25, 0xF9	; 249
    203a:	ba 01       	movw	r22, r20
    203c:	0e 94 88 07 	call	0xf10	; 0xf10 <vListInsertEnd>
    2040:	8e 81       	ldd	r24, Y+6	; 0x06
    2042:	9f 81       	ldd	r25, Y+7	; 0x07
    2044:	fc 01       	movw	r30, r24
    2046:	26 89       	ldd	r18, Z+22	; 0x16
    2048:	80 91 b3 06 	lds	r24, 0x06B3	; 0x8006b3 <pxCurrentTCB>
    204c:	90 91 b4 06 	lds	r25, 0x06B4	; 0x8006b4 <pxCurrentTCB+0x1>
    2050:	fc 01       	movw	r30, r24
    2052:	86 89       	ldd	r24, Z+22	; 0x16
    2054:	28 17       	cp	r18, r24
    2056:	08 f4       	brcc	.+2      	; 0x205a <xTaskIncrementTick+0x176>
    2058:	8b cf       	rjmp	.-234    	; 0x1f70 <xTaskIncrementTick+0x8c>
    205a:	81 e0       	ldi	r24, 0x01	; 1
    205c:	89 83       	std	Y+1, r24	; 0x01
    205e:	88 cf       	rjmp	.-240    	; 0x1f70 <xTaskIncrementTick+0x8c>
    2060:	80 91 b3 06 	lds	r24, 0x06B3	; 0x8006b3 <pxCurrentTCB>
    2064:	90 91 b4 06 	lds	r25, 0x06B4	; 0x8006b4 <pxCurrentTCB+0x1>
    2068:	fc 01       	movw	r30, r24
    206a:	86 89       	ldd	r24, Z+22	; 0x16
    206c:	28 2f       	mov	r18, r24
    206e:	30 e0       	ldi	r19, 0x00	; 0
    2070:	c9 01       	movw	r24, r18
    2072:	88 0f       	add	r24, r24
    2074:	99 1f       	adc	r25, r25
    2076:	88 0f       	add	r24, r24
    2078:	99 1f       	adc	r25, r25
    207a:	88 0f       	add	r24, r24
    207c:	99 1f       	adc	r25, r25
    207e:	82 0f       	add	r24, r18
    2080:	93 1f       	adc	r25, r19
    2082:	8b 54       	subi	r24, 0x4B	; 75
    2084:	99 4f       	sbci	r25, 0xF9	; 249
    2086:	fc 01       	movw	r30, r24
    2088:	80 81       	ld	r24, Z
    208a:	82 30       	cpi	r24, 0x02	; 2
    208c:	40 f0       	brcs	.+16     	; 0x209e <xTaskIncrementTick+0x1ba>
    208e:	81 e0       	ldi	r24, 0x01	; 1
    2090:	89 83       	std	Y+1, r24	; 0x01
    2092:	05 c0       	rjmp	.+10     	; 0x209e <xTaskIncrementTick+0x1ba>
    2094:	80 91 22 07 	lds	r24, 0x0722	; 0x800722 <uxPendedTicks>
    2098:	8f 5f       	subi	r24, 0xFF	; 255
    209a:	80 93 22 07 	sts	0x0722, r24	; 0x800722 <uxPendedTicks>
    209e:	80 91 23 07 	lds	r24, 0x0723	; 0x800723 <xYieldPending>
    20a2:	88 23       	and	r24, r24
    20a4:	11 f0       	breq	.+4      	; 0x20aa <xTaskIncrementTick+0x1c6>
    20a6:	81 e0       	ldi	r24, 0x01	; 1
    20a8:	89 83       	std	Y+1, r24	; 0x01
    20aa:	89 81       	ldd	r24, Y+1	; 0x01
    20ac:	29 96       	adiw	r28, 0x09	; 9
    20ae:	0f b6       	in	r0, 0x3f	; 63
    20b0:	f8 94       	cli
    20b2:	de bf       	out	0x3e, r29	; 62
    20b4:	0f be       	out	0x3f, r0	; 63
    20b6:	cd bf       	out	0x3d, r28	; 61
    20b8:	df 91       	pop	r29
    20ba:	cf 91       	pop	r28
    20bc:	08 95       	ret

000020be <vTaskSwitchContext>:
    20be:	cf 93       	push	r28
    20c0:	df 93       	push	r29
    20c2:	00 d0       	rcall	.+0      	; 0x20c4 <vTaskSwitchContext+0x6>
    20c4:	1f 92       	push	r1
    20c6:	cd b7       	in	r28, 0x3d	; 61
    20c8:	de b7       	in	r29, 0x3e	; 62
    20ca:	80 91 2a 07 	lds	r24, 0x072A	; 0x80072a <uxSchedulerSuspended>
    20ce:	88 23       	and	r24, r24
    20d0:	21 f0       	breq	.+8      	; 0x20da <vTaskSwitchContext+0x1c>
    20d2:	81 e0       	ldi	r24, 0x01	; 1
    20d4:	80 93 23 07 	sts	0x0723, r24	; 0x800723 <xYieldPending>
    20d8:	5f c0       	rjmp	.+190    	; 0x2198 <vTaskSwitchContext+0xda>
    20da:	10 92 23 07 	sts	0x0723, r1	; 0x800723 <xYieldPending>
    20de:	80 91 20 07 	lds	r24, 0x0720	; 0x800720 <uxTopReadyPriority>
    20e2:	89 83       	std	Y+1, r24	; 0x01
    20e4:	03 c0       	rjmp	.+6      	; 0x20ec <vTaskSwitchContext+0x2e>
    20e6:	89 81       	ldd	r24, Y+1	; 0x01
    20e8:	81 50       	subi	r24, 0x01	; 1
    20ea:	89 83       	std	Y+1, r24	; 0x01
    20ec:	89 81       	ldd	r24, Y+1	; 0x01
    20ee:	28 2f       	mov	r18, r24
    20f0:	30 e0       	ldi	r19, 0x00	; 0
    20f2:	c9 01       	movw	r24, r18
    20f4:	88 0f       	add	r24, r24
    20f6:	99 1f       	adc	r25, r25
    20f8:	88 0f       	add	r24, r24
    20fa:	99 1f       	adc	r25, r25
    20fc:	88 0f       	add	r24, r24
    20fe:	99 1f       	adc	r25, r25
    2100:	82 0f       	add	r24, r18
    2102:	93 1f       	adc	r25, r19
    2104:	8b 54       	subi	r24, 0x4B	; 75
    2106:	99 4f       	sbci	r25, 0xF9	; 249
    2108:	fc 01       	movw	r30, r24
    210a:	80 81       	ld	r24, Z
    210c:	88 23       	and	r24, r24
    210e:	59 f3       	breq	.-42     	; 0x20e6 <vTaskSwitchContext+0x28>
    2110:	89 81       	ldd	r24, Y+1	; 0x01
    2112:	28 2f       	mov	r18, r24
    2114:	30 e0       	ldi	r19, 0x00	; 0
    2116:	c9 01       	movw	r24, r18
    2118:	88 0f       	add	r24, r24
    211a:	99 1f       	adc	r25, r25
    211c:	88 0f       	add	r24, r24
    211e:	99 1f       	adc	r25, r25
    2120:	88 0f       	add	r24, r24
    2122:	99 1f       	adc	r25, r25
    2124:	82 0f       	add	r24, r18
    2126:	93 1f       	adc	r25, r19
    2128:	8b 54       	subi	r24, 0x4B	; 75
    212a:	99 4f       	sbci	r25, 0xF9	; 249
    212c:	9b 83       	std	Y+3, r25	; 0x03
    212e:	8a 83       	std	Y+2, r24	; 0x02
    2130:	8a 81       	ldd	r24, Y+2	; 0x02
    2132:	9b 81       	ldd	r25, Y+3	; 0x03
    2134:	fc 01       	movw	r30, r24
    2136:	81 81       	ldd	r24, Z+1	; 0x01
    2138:	92 81       	ldd	r25, Z+2	; 0x02
    213a:	fc 01       	movw	r30, r24
    213c:	22 81       	ldd	r18, Z+2	; 0x02
    213e:	33 81       	ldd	r19, Z+3	; 0x03
    2140:	8a 81       	ldd	r24, Y+2	; 0x02
    2142:	9b 81       	ldd	r25, Y+3	; 0x03
    2144:	fc 01       	movw	r30, r24
    2146:	32 83       	std	Z+2, r19	; 0x02
    2148:	21 83       	std	Z+1, r18	; 0x01
    214a:	8a 81       	ldd	r24, Y+2	; 0x02
    214c:	9b 81       	ldd	r25, Y+3	; 0x03
    214e:	fc 01       	movw	r30, r24
    2150:	21 81       	ldd	r18, Z+1	; 0x01
    2152:	32 81       	ldd	r19, Z+2	; 0x02
    2154:	8a 81       	ldd	r24, Y+2	; 0x02
    2156:	9b 81       	ldd	r25, Y+3	; 0x03
    2158:	03 96       	adiw	r24, 0x03	; 3
    215a:	28 17       	cp	r18, r24
    215c:	39 07       	cpc	r19, r25
    215e:	69 f4       	brne	.+26     	; 0x217a <vTaskSwitchContext+0xbc>
    2160:	8a 81       	ldd	r24, Y+2	; 0x02
    2162:	9b 81       	ldd	r25, Y+3	; 0x03
    2164:	fc 01       	movw	r30, r24
    2166:	81 81       	ldd	r24, Z+1	; 0x01
    2168:	92 81       	ldd	r25, Z+2	; 0x02
    216a:	fc 01       	movw	r30, r24
    216c:	22 81       	ldd	r18, Z+2	; 0x02
    216e:	33 81       	ldd	r19, Z+3	; 0x03
    2170:	8a 81       	ldd	r24, Y+2	; 0x02
    2172:	9b 81       	ldd	r25, Y+3	; 0x03
    2174:	fc 01       	movw	r30, r24
    2176:	32 83       	std	Z+2, r19	; 0x02
    2178:	21 83       	std	Z+1, r18	; 0x01
    217a:	8a 81       	ldd	r24, Y+2	; 0x02
    217c:	9b 81       	ldd	r25, Y+3	; 0x03
    217e:	fc 01       	movw	r30, r24
    2180:	81 81       	ldd	r24, Z+1	; 0x01
    2182:	92 81       	ldd	r25, Z+2	; 0x02
    2184:	fc 01       	movw	r30, r24
    2186:	86 81       	ldd	r24, Z+6	; 0x06
    2188:	97 81       	ldd	r25, Z+7	; 0x07
    218a:	90 93 b4 06 	sts	0x06B4, r25	; 0x8006b4 <pxCurrentTCB+0x1>
    218e:	80 93 b3 06 	sts	0x06B3, r24	; 0x8006b3 <pxCurrentTCB>
    2192:	89 81       	ldd	r24, Y+1	; 0x01
    2194:	80 93 20 07 	sts	0x0720, r24	; 0x800720 <uxTopReadyPriority>
    2198:	00 00       	nop
    219a:	0f 90       	pop	r0
    219c:	0f 90       	pop	r0
    219e:	0f 90       	pop	r0
    21a0:	df 91       	pop	r29
    21a2:	cf 91       	pop	r28
    21a4:	08 95       	ret

000021a6 <vTaskPlaceOnUnorderedEventList>:
    21a6:	cf 93       	push	r28
    21a8:	df 93       	push	r29
    21aa:	00 d0       	rcall	.+0      	; 0x21ac <vTaskPlaceOnUnorderedEventList+0x6>
    21ac:	00 d0       	rcall	.+0      	; 0x21ae <vTaskPlaceOnUnorderedEventList+0x8>
    21ae:	00 d0       	rcall	.+0      	; 0x21b0 <vTaskPlaceOnUnorderedEventList+0xa>
    21b0:	cd b7       	in	r28, 0x3d	; 61
    21b2:	de b7       	in	r29, 0x3e	; 62
    21b4:	9a 83       	std	Y+2, r25	; 0x02
    21b6:	89 83       	std	Y+1, r24	; 0x01
    21b8:	7c 83       	std	Y+4, r23	; 0x04
    21ba:	6b 83       	std	Y+3, r22	; 0x03
    21bc:	5e 83       	std	Y+6, r21	; 0x06
    21be:	4d 83       	std	Y+5, r20	; 0x05
    21c0:	80 91 b3 06 	lds	r24, 0x06B3	; 0x8006b3 <pxCurrentTCB>
    21c4:	90 91 b4 06 	lds	r25, 0x06B4	; 0x8006b4 <pxCurrentTCB+0x1>
    21c8:	2b 81       	ldd	r18, Y+3	; 0x03
    21ca:	3c 81       	ldd	r19, Y+4	; 0x04
    21cc:	30 68       	ori	r19, 0x80	; 128
    21ce:	fc 01       	movw	r30, r24
    21d0:	35 87       	std	Z+13, r19	; 0x0d
    21d2:	24 87       	std	Z+12, r18	; 0x0c
    21d4:	80 91 b3 06 	lds	r24, 0x06B3	; 0x8006b3 <pxCurrentTCB>
    21d8:	90 91 b4 06 	lds	r25, 0x06B4	; 0x8006b4 <pxCurrentTCB+0x1>
    21dc:	9c 01       	movw	r18, r24
    21de:	24 5f       	subi	r18, 0xF4	; 244
    21e0:	3f 4f       	sbci	r19, 0xFF	; 255
    21e2:	89 81       	ldd	r24, Y+1	; 0x01
    21e4:	9a 81       	ldd	r25, Y+2	; 0x02
    21e6:	b9 01       	movw	r22, r18
    21e8:	0e 94 88 07 	call	0xf10	; 0xf10 <vListInsertEnd>
    21ec:	8d 81       	ldd	r24, Y+5	; 0x05
    21ee:	9e 81       	ldd	r25, Y+6	; 0x06
    21f0:	61 e0       	ldi	r22, 0x01	; 1
    21f2:	0e 94 57 12 	call	0x24ae	; 0x24ae <prvAddCurrentTaskToDelayedList>
    21f6:	00 00       	nop
    21f8:	26 96       	adiw	r28, 0x06	; 6
    21fa:	0f b6       	in	r0, 0x3f	; 63
    21fc:	f8 94       	cli
    21fe:	de bf       	out	0x3e, r29	; 62
    2200:	0f be       	out	0x3f, r0	; 63
    2202:	cd bf       	out	0x3d, r28	; 61
    2204:	df 91       	pop	r29
    2206:	cf 91       	pop	r28
    2208:	08 95       	ret

0000220a <vTaskRemoveFromUnorderedEventList>:
    220a:	cf 93       	push	r28
    220c:	df 93       	push	r29
    220e:	00 d0       	rcall	.+0      	; 0x2210 <vTaskRemoveFromUnorderedEventList+0x6>
    2210:	00 d0       	rcall	.+0      	; 0x2212 <vTaskRemoveFromUnorderedEventList+0x8>
    2212:	00 d0       	rcall	.+0      	; 0x2214 <vTaskRemoveFromUnorderedEventList+0xa>
    2214:	cd b7       	in	r28, 0x3d	; 61
    2216:	de b7       	in	r29, 0x3e	; 62
    2218:	9c 83       	std	Y+4, r25	; 0x04
    221a:	8b 83       	std	Y+3, r24	; 0x03
    221c:	7e 83       	std	Y+6, r23	; 0x06
    221e:	6d 83       	std	Y+5, r22	; 0x05
    2220:	8d 81       	ldd	r24, Y+5	; 0x05
    2222:	9e 81       	ldd	r25, Y+6	; 0x06
    2224:	9c 01       	movw	r18, r24
    2226:	30 68       	ori	r19, 0x80	; 128
    2228:	8b 81       	ldd	r24, Y+3	; 0x03
    222a:	9c 81       	ldd	r25, Y+4	; 0x04
    222c:	fc 01       	movw	r30, r24
    222e:	31 83       	std	Z+1, r19	; 0x01
    2230:	20 83       	st	Z, r18
    2232:	8b 81       	ldd	r24, Y+3	; 0x03
    2234:	9c 81       	ldd	r25, Y+4	; 0x04
    2236:	fc 01       	movw	r30, r24
    2238:	86 81       	ldd	r24, Z+6	; 0x06
    223a:	97 81       	ldd	r25, Z+7	; 0x07
    223c:	9a 83       	std	Y+2, r25	; 0x02
    223e:	89 83       	std	Y+1, r24	; 0x01
    2240:	8b 81       	ldd	r24, Y+3	; 0x03
    2242:	9c 81       	ldd	r25, Y+4	; 0x04
    2244:	0e 94 4f 08 	call	0x109e	; 0x109e <uxListRemove>
    2248:	89 81       	ldd	r24, Y+1	; 0x01
    224a:	9a 81       	ldd	r25, Y+2	; 0x02
    224c:	02 96       	adiw	r24, 0x02	; 2
    224e:	0e 94 4f 08 	call	0x109e	; 0x109e <uxListRemove>
    2252:	89 81       	ldd	r24, Y+1	; 0x01
    2254:	9a 81       	ldd	r25, Y+2	; 0x02
    2256:	fc 01       	movw	r30, r24
    2258:	96 89       	ldd	r25, Z+22	; 0x16
    225a:	80 91 20 07 	lds	r24, 0x0720	; 0x800720 <uxTopReadyPriority>
    225e:	89 17       	cp	r24, r25
    2260:	30 f4       	brcc	.+12     	; 0x226e <vTaskRemoveFromUnorderedEventList+0x64>
    2262:	89 81       	ldd	r24, Y+1	; 0x01
    2264:	9a 81       	ldd	r25, Y+2	; 0x02
    2266:	fc 01       	movw	r30, r24
    2268:	86 89       	ldd	r24, Z+22	; 0x16
    226a:	80 93 20 07 	sts	0x0720, r24	; 0x800720 <uxTopReadyPriority>
    226e:	89 81       	ldd	r24, Y+1	; 0x01
    2270:	9a 81       	ldd	r25, Y+2	; 0x02
    2272:	ac 01       	movw	r20, r24
    2274:	4e 5f       	subi	r20, 0xFE	; 254
    2276:	5f 4f       	sbci	r21, 0xFF	; 255
    2278:	89 81       	ldd	r24, Y+1	; 0x01
    227a:	9a 81       	ldd	r25, Y+2	; 0x02
    227c:	fc 01       	movw	r30, r24
    227e:	86 89       	ldd	r24, Z+22	; 0x16
    2280:	28 2f       	mov	r18, r24
    2282:	30 e0       	ldi	r19, 0x00	; 0
    2284:	c9 01       	movw	r24, r18
    2286:	88 0f       	add	r24, r24
    2288:	99 1f       	adc	r25, r25
    228a:	88 0f       	add	r24, r24
    228c:	99 1f       	adc	r25, r25
    228e:	88 0f       	add	r24, r24
    2290:	99 1f       	adc	r25, r25
    2292:	82 0f       	add	r24, r18
    2294:	93 1f       	adc	r25, r19
    2296:	8b 54       	subi	r24, 0x4B	; 75
    2298:	99 4f       	sbci	r25, 0xF9	; 249
    229a:	ba 01       	movw	r22, r20
    229c:	0e 94 88 07 	call	0xf10	; 0xf10 <vListInsertEnd>
    22a0:	89 81       	ldd	r24, Y+1	; 0x01
    22a2:	9a 81       	ldd	r25, Y+2	; 0x02
    22a4:	fc 01       	movw	r30, r24
    22a6:	26 89       	ldd	r18, Z+22	; 0x16
    22a8:	80 91 b3 06 	lds	r24, 0x06B3	; 0x8006b3 <pxCurrentTCB>
    22ac:	90 91 b4 06 	lds	r25, 0x06B4	; 0x8006b4 <pxCurrentTCB+0x1>
    22b0:	fc 01       	movw	r30, r24
    22b2:	86 89       	ldd	r24, Z+22	; 0x16
    22b4:	82 17       	cp	r24, r18
    22b6:	18 f4       	brcc	.+6      	; 0x22be <vTaskRemoveFromUnorderedEventList+0xb4>
    22b8:	81 e0       	ldi	r24, 0x01	; 1
    22ba:	80 93 23 07 	sts	0x0723, r24	; 0x800723 <xYieldPending>
    22be:	00 00       	nop
    22c0:	26 96       	adiw	r28, 0x06	; 6
    22c2:	0f b6       	in	r0, 0x3f	; 63
    22c4:	f8 94       	cli
    22c6:	de bf       	out	0x3e, r29	; 62
    22c8:	0f be       	out	0x3f, r0	; 63
    22ca:	cd bf       	out	0x3d, r28	; 61
    22cc:	df 91       	pop	r29
    22ce:	cf 91       	pop	r28
    22d0:	08 95       	ret

000022d2 <prvIdleTask>:
    22d2:	cf 93       	push	r28
    22d4:	df 93       	push	r29
    22d6:	00 d0       	rcall	.+0      	; 0x22d8 <prvIdleTask+0x6>
    22d8:	cd b7       	in	r28, 0x3d	; 61
    22da:	de b7       	in	r29, 0x3e	; 62
    22dc:	9a 83       	std	Y+2, r25	; 0x02
    22de:	89 83       	std	Y+1, r24	; 0x01
    22e0:	0e 94 b5 11 	call	0x236a	; 0x236a <prvCheckTasksWaitingTermination>
    22e4:	fd cf       	rjmp	.-6      	; 0x22e0 <prvIdleTask+0xe>

000022e6 <prvInitialiseTaskLists>:
    22e6:	cf 93       	push	r28
    22e8:	df 93       	push	r29
    22ea:	1f 92       	push	r1
    22ec:	cd b7       	in	r28, 0x3d	; 61
    22ee:	de b7       	in	r29, 0x3e	; 62
    22f0:	19 82       	std	Y+1, r1	; 0x01
    22f2:	13 c0       	rjmp	.+38     	; 0x231a <prvInitialiseTaskLists+0x34>
    22f4:	89 81       	ldd	r24, Y+1	; 0x01
    22f6:	28 2f       	mov	r18, r24
    22f8:	30 e0       	ldi	r19, 0x00	; 0
    22fa:	c9 01       	movw	r24, r18
    22fc:	88 0f       	add	r24, r24
    22fe:	99 1f       	adc	r25, r25
    2300:	88 0f       	add	r24, r24
    2302:	99 1f       	adc	r25, r25
    2304:	88 0f       	add	r24, r24
    2306:	99 1f       	adc	r25, r25
    2308:	82 0f       	add	r24, r18
    230a:	93 1f       	adc	r25, r19
    230c:	8b 54       	subi	r24, 0x4B	; 75
    230e:	99 4f       	sbci	r25, 0xF9	; 249
    2310:	0e 94 40 07 	call	0xe80	; 0xe80 <vListInitialise>
    2314:	89 81       	ldd	r24, Y+1	; 0x01
    2316:	8f 5f       	subi	r24, 0xFF	; 255
    2318:	89 83       	std	Y+1, r24	; 0x01
    231a:	89 81       	ldd	r24, Y+1	; 0x01
    231c:	86 30       	cpi	r24, 0x06	; 6
    231e:	50 f3       	brcs	.-44     	; 0x22f4 <prvInitialiseTaskLists+0xe>
    2320:	8b ee       	ldi	r24, 0xEB	; 235
    2322:	96 e0       	ldi	r25, 0x06	; 6
    2324:	0e 94 40 07 	call	0xe80	; 0xe80 <vListInitialise>
    2328:	84 ef       	ldi	r24, 0xF4	; 244
    232a:	96 e0       	ldi	r25, 0x06	; 6
    232c:	0e 94 40 07 	call	0xe80	; 0xe80 <vListInitialise>
    2330:	81 e0       	ldi	r24, 0x01	; 1
    2332:	97 e0       	ldi	r25, 0x07	; 7
    2334:	0e 94 40 07 	call	0xe80	; 0xe80 <vListInitialise>
    2338:	8a e0       	ldi	r24, 0x0A	; 10
    233a:	97 e0       	ldi	r25, 0x07	; 7
    233c:	0e 94 40 07 	call	0xe80	; 0xe80 <vListInitialise>
    2340:	84 e1       	ldi	r24, 0x14	; 20
    2342:	97 e0       	ldi	r25, 0x07	; 7
    2344:	0e 94 40 07 	call	0xe80	; 0xe80 <vListInitialise>
    2348:	8b ee       	ldi	r24, 0xEB	; 235
    234a:	96 e0       	ldi	r25, 0x06	; 6
    234c:	90 93 fe 06 	sts	0x06FE, r25	; 0x8006fe <pxDelayedTaskList+0x1>
    2350:	80 93 fd 06 	sts	0x06FD, r24	; 0x8006fd <pxDelayedTaskList>
    2354:	84 ef       	ldi	r24, 0xF4	; 244
    2356:	96 e0       	ldi	r25, 0x06	; 6
    2358:	90 93 00 07 	sts	0x0700, r25	; 0x800700 <pxOverflowDelayedTaskList+0x1>
    235c:	80 93 ff 06 	sts	0x06FF, r24	; 0x8006ff <pxOverflowDelayedTaskList>
    2360:	00 00       	nop
    2362:	0f 90       	pop	r0
    2364:	df 91       	pop	r29
    2366:	cf 91       	pop	r28
    2368:	08 95       	ret

0000236a <prvCheckTasksWaitingTermination>:
    236a:	cf 93       	push	r28
    236c:	df 93       	push	r29
    236e:	00 d0       	rcall	.+0      	; 0x2370 <prvCheckTasksWaitingTermination+0x6>
    2370:	cd b7       	in	r28, 0x3d	; 61
    2372:	de b7       	in	r29, 0x3e	; 62
    2374:	21 c0       	rjmp	.+66     	; 0x23b8 <prvCheckTasksWaitingTermination+0x4e>
    2376:	0f b6       	in	r0, 0x3f	; 63
    2378:	f8 94       	cli
    237a:	0f 92       	push	r0
    237c:	80 91 0f 07 	lds	r24, 0x070F	; 0x80070f <xTasksWaitingTermination+0x5>
    2380:	90 91 10 07 	lds	r25, 0x0710	; 0x800710 <xTasksWaitingTermination+0x6>
    2384:	fc 01       	movw	r30, r24
    2386:	86 81       	ldd	r24, Z+6	; 0x06
    2388:	97 81       	ldd	r25, Z+7	; 0x07
    238a:	9a 83       	std	Y+2, r25	; 0x02
    238c:	89 83       	std	Y+1, r24	; 0x01
    238e:	89 81       	ldd	r24, Y+1	; 0x01
    2390:	9a 81       	ldd	r25, Y+2	; 0x02
    2392:	02 96       	adiw	r24, 0x02	; 2
    2394:	0e 94 4f 08 	call	0x109e	; 0x109e <uxListRemove>
    2398:	80 91 1d 07 	lds	r24, 0x071D	; 0x80071d <uxCurrentNumberOfTasks>
    239c:	81 50       	subi	r24, 0x01	; 1
    239e:	80 93 1d 07 	sts	0x071D, r24	; 0x80071d <uxCurrentNumberOfTasks>
    23a2:	80 91 13 07 	lds	r24, 0x0713	; 0x800713 <uxDeletedTasksWaitingCleanUp>
    23a6:	81 50       	subi	r24, 0x01	; 1
    23a8:	80 93 13 07 	sts	0x0713, r24	; 0x800713 <uxDeletedTasksWaitingCleanUp>
    23ac:	0f 90       	pop	r0
    23ae:	0f be       	out	0x3f, r0	; 63
    23b0:	89 81       	ldd	r24, Y+1	; 0x01
    23b2:	9a 81       	ldd	r25, Y+2	; 0x02
    23b4:	0e 94 e6 11 	call	0x23cc	; 0x23cc <prvDeleteTCB>
    23b8:	80 91 13 07 	lds	r24, 0x0713	; 0x800713 <uxDeletedTasksWaitingCleanUp>
    23bc:	88 23       	and	r24, r24
    23be:	d9 f6       	brne	.-74     	; 0x2376 <prvCheckTasksWaitingTermination+0xc>
    23c0:	00 00       	nop
    23c2:	0f 90       	pop	r0
    23c4:	0f 90       	pop	r0
    23c6:	df 91       	pop	r29
    23c8:	cf 91       	pop	r28
    23ca:	08 95       	ret

000023cc <prvDeleteTCB>:
    23cc:	cf 93       	push	r28
    23ce:	df 93       	push	r29
    23d0:	00 d0       	rcall	.+0      	; 0x23d2 <prvDeleteTCB+0x6>
    23d2:	cd b7       	in	r28, 0x3d	; 61
    23d4:	de b7       	in	r29, 0x3e	; 62
    23d6:	9a 83       	std	Y+2, r25	; 0x02
    23d8:	89 83       	std	Y+1, r24	; 0x01
    23da:	89 81       	ldd	r24, Y+1	; 0x01
    23dc:	9a 81       	ldd	r25, Y+2	; 0x02
    23de:	fc 01       	movw	r30, r24
    23e0:	87 89       	ldd	r24, Z+23	; 0x17
    23e2:	90 8d       	ldd	r25, Z+24	; 0x18
    23e4:	0e 94 33 07 	call	0xe66	; 0xe66 <vPortFree>
    23e8:	89 81       	ldd	r24, Y+1	; 0x01
    23ea:	9a 81       	ldd	r25, Y+2	; 0x02
    23ec:	0e 94 33 07 	call	0xe66	; 0xe66 <vPortFree>
    23f0:	00 00       	nop
    23f2:	0f 90       	pop	r0
    23f4:	0f 90       	pop	r0
    23f6:	df 91       	pop	r29
    23f8:	cf 91       	pop	r28
    23fa:	08 95       	ret

000023fc <prvResetNextTaskUnblockTime>:
    23fc:	cf 93       	push	r28
    23fe:	df 93       	push	r29
    2400:	00 d0       	rcall	.+0      	; 0x2402 <prvResetNextTaskUnblockTime+0x6>
    2402:	cd b7       	in	r28, 0x3d	; 61
    2404:	de b7       	in	r29, 0x3e	; 62
    2406:	80 91 fd 06 	lds	r24, 0x06FD	; 0x8006fd <pxDelayedTaskList>
    240a:	90 91 fe 06 	lds	r25, 0x06FE	; 0x8006fe <pxDelayedTaskList+0x1>
    240e:	fc 01       	movw	r30, r24
    2410:	80 81       	ld	r24, Z
    2412:	88 23       	and	r24, r24
    2414:	39 f4       	brne	.+14     	; 0x2424 <prvResetNextTaskUnblockTime+0x28>
    2416:	8f ef       	ldi	r24, 0xFF	; 255
    2418:	9f ef       	ldi	r25, 0xFF	; 255
    241a:	90 93 27 07 	sts	0x0727, r25	; 0x800727 <xNextTaskUnblockTime+0x1>
    241e:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <xNextTaskUnblockTime>
    2422:	15 c0       	rjmp	.+42     	; 0x244e <prvResetNextTaskUnblockTime+0x52>
    2424:	80 91 fd 06 	lds	r24, 0x06FD	; 0x8006fd <pxDelayedTaskList>
    2428:	90 91 fe 06 	lds	r25, 0x06FE	; 0x8006fe <pxDelayedTaskList+0x1>
    242c:	fc 01       	movw	r30, r24
    242e:	85 81       	ldd	r24, Z+5	; 0x05
    2430:	96 81       	ldd	r25, Z+6	; 0x06
    2432:	fc 01       	movw	r30, r24
    2434:	86 81       	ldd	r24, Z+6	; 0x06
    2436:	97 81       	ldd	r25, Z+7	; 0x07
    2438:	9a 83       	std	Y+2, r25	; 0x02
    243a:	89 83       	std	Y+1, r24	; 0x01
    243c:	89 81       	ldd	r24, Y+1	; 0x01
    243e:	9a 81       	ldd	r25, Y+2	; 0x02
    2440:	fc 01       	movw	r30, r24
    2442:	82 81       	ldd	r24, Z+2	; 0x02
    2444:	93 81       	ldd	r25, Z+3	; 0x03
    2446:	90 93 27 07 	sts	0x0727, r25	; 0x800727 <xNextTaskUnblockTime+0x1>
    244a:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <xNextTaskUnblockTime>
    244e:	00 00       	nop
    2450:	0f 90       	pop	r0
    2452:	0f 90       	pop	r0
    2454:	df 91       	pop	r29
    2456:	cf 91       	pop	r28
    2458:	08 95       	ret

0000245a <uxTaskResetEventItemValue>:
    245a:	cf 93       	push	r28
    245c:	df 93       	push	r29
    245e:	00 d0       	rcall	.+0      	; 0x2460 <uxTaskResetEventItemValue+0x6>
    2460:	cd b7       	in	r28, 0x3d	; 61
    2462:	de b7       	in	r29, 0x3e	; 62
    2464:	80 91 b3 06 	lds	r24, 0x06B3	; 0x8006b3 <pxCurrentTCB>
    2468:	90 91 b4 06 	lds	r25, 0x06B4	; 0x8006b4 <pxCurrentTCB+0x1>
    246c:	fc 01       	movw	r30, r24
    246e:	84 85       	ldd	r24, Z+12	; 0x0c
    2470:	95 85       	ldd	r25, Z+13	; 0x0d
    2472:	9a 83       	std	Y+2, r25	; 0x02
    2474:	89 83       	std	Y+1, r24	; 0x01
    2476:	80 91 b3 06 	lds	r24, 0x06B3	; 0x8006b3 <pxCurrentTCB>
    247a:	90 91 b4 06 	lds	r25, 0x06B4	; 0x8006b4 <pxCurrentTCB+0x1>
    247e:	20 91 b3 06 	lds	r18, 0x06B3	; 0x8006b3 <pxCurrentTCB>
    2482:	30 91 b4 06 	lds	r19, 0x06B4	; 0x8006b4 <pxCurrentTCB+0x1>
    2486:	f9 01       	movw	r30, r18
    2488:	26 89       	ldd	r18, Z+22	; 0x16
    248a:	22 2f       	mov	r18, r18
    248c:	30 e0       	ldi	r19, 0x00	; 0
    248e:	46 e0       	ldi	r20, 0x06	; 6
    2490:	50 e0       	ldi	r21, 0x00	; 0
    2492:	ba 01       	movw	r22, r20
    2494:	62 1b       	sub	r22, r18
    2496:	73 0b       	sbc	r23, r19
    2498:	9b 01       	movw	r18, r22
    249a:	fc 01       	movw	r30, r24
    249c:	35 87       	std	Z+13, r19	; 0x0d
    249e:	24 87       	std	Z+12, r18	; 0x0c
    24a0:	89 81       	ldd	r24, Y+1	; 0x01
    24a2:	9a 81       	ldd	r25, Y+2	; 0x02
    24a4:	0f 90       	pop	r0
    24a6:	0f 90       	pop	r0
    24a8:	df 91       	pop	r29
    24aa:	cf 91       	pop	r28
    24ac:	08 95       	ret

000024ae <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    24ae:	cf 93       	push	r28
    24b0:	df 93       	push	r29
    24b2:	cd b7       	in	r28, 0x3d	; 61
    24b4:	de b7       	in	r29, 0x3e	; 62
    24b6:	27 97       	sbiw	r28, 0x07	; 7
    24b8:	0f b6       	in	r0, 0x3f	; 63
    24ba:	f8 94       	cli
    24bc:	de bf       	out	0x3e, r29	; 62
    24be:	0f be       	out	0x3f, r0	; 63
    24c0:	cd bf       	out	0x3d, r28	; 61
    24c2:	9e 83       	std	Y+6, r25	; 0x06
    24c4:	8d 83       	std	Y+5, r24	; 0x05
    24c6:	6f 83       	std	Y+7, r22	; 0x07
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    24c8:	80 91 1e 07 	lds	r24, 0x071E	; 0x80071e <xTickCount>
    24cc:	90 91 1f 07 	lds	r25, 0x071F	; 0x80071f <xTickCount+0x1>
    24d0:	9a 83       	std	Y+2, r25	; 0x02
    24d2:	89 83       	std	Y+1, r24	; 0x01
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    24d4:	80 91 b3 06 	lds	r24, 0x06B3	; 0x8006b3 <pxCurrentTCB>
    24d8:	90 91 b4 06 	lds	r25, 0x06B4	; 0x8006b4 <pxCurrentTCB+0x1>
    24dc:	02 96       	adiw	r24, 0x02	; 2
    24de:	0e 94 4f 08 	call	0x109e	; 0x109e <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    24e2:	8d 81       	ldd	r24, Y+5	; 0x05
    24e4:	9e 81       	ldd	r25, Y+6	; 0x06
    24e6:	01 96       	adiw	r24, 0x01	; 1
    24e8:	71 f4       	brne	.+28     	; 0x2506 <prvAddCurrentTaskToDelayedList+0x58>
    24ea:	8f 81       	ldd	r24, Y+7	; 0x07
    24ec:	88 23       	and	r24, r24
    24ee:	59 f0       	breq	.+22     	; 0x2506 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    24f0:	80 91 b3 06 	lds	r24, 0x06B3	; 0x8006b3 <pxCurrentTCB>
    24f4:	90 91 b4 06 	lds	r25, 0x06B4	; 0x8006b4 <pxCurrentTCB+0x1>
    24f8:	02 96       	adiw	r24, 0x02	; 2
    24fa:	bc 01       	movw	r22, r24
    24fc:	84 e1       	ldi	r24, 0x14	; 20
    24fe:	97 e0       	ldi	r25, 0x07	; 7
    2500:	0e 94 88 07 	call	0xf10	; 0xf10 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    2504:	44 c0       	rjmp	.+136    	; 0x258e <prvAddCurrentTaskToDelayedList+0xe0>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    2506:	29 81       	ldd	r18, Y+1	; 0x01
    2508:	3a 81       	ldd	r19, Y+2	; 0x02
    250a:	8d 81       	ldd	r24, Y+5	; 0x05
    250c:	9e 81       	ldd	r25, Y+6	; 0x06
    250e:	82 0f       	add	r24, r18
    2510:	93 1f       	adc	r25, r19
    2512:	9c 83       	std	Y+4, r25	; 0x04
    2514:	8b 83       	std	Y+3, r24	; 0x03

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    2516:	80 91 b3 06 	lds	r24, 0x06B3	; 0x8006b3 <pxCurrentTCB>
    251a:	90 91 b4 06 	lds	r25, 0x06B4	; 0x8006b4 <pxCurrentTCB+0x1>
    251e:	2b 81       	ldd	r18, Y+3	; 0x03
    2520:	3c 81       	ldd	r19, Y+4	; 0x04
    2522:	fc 01       	movw	r30, r24
    2524:	33 83       	std	Z+3, r19	; 0x03
    2526:	22 83       	std	Z+2, r18	; 0x02

			if( xTimeToWake < xConstTickCount )
    2528:	2b 81       	ldd	r18, Y+3	; 0x03
    252a:	3c 81       	ldd	r19, Y+4	; 0x04
    252c:	89 81       	ldd	r24, Y+1	; 0x01
    252e:	9a 81       	ldd	r25, Y+2	; 0x02
    2530:	28 17       	cp	r18, r24
    2532:	39 07       	cpc	r19, r25
    2534:	78 f4       	brcc	.+30     	; 0x2554 <prvAddCurrentTaskToDelayedList+0xa6>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    2536:	80 91 b3 06 	lds	r24, 0x06B3	; 0x8006b3 <pxCurrentTCB>
    253a:	90 91 b4 06 	lds	r25, 0x06B4	; 0x8006b4 <pxCurrentTCB+0x1>
    253e:	9c 01       	movw	r18, r24
    2540:	2e 5f       	subi	r18, 0xFE	; 254
    2542:	3f 4f       	sbci	r19, 0xFF	; 255
    2544:	80 91 ff 06 	lds	r24, 0x06FF	; 0x8006ff <pxOverflowDelayedTaskList>
    2548:	90 91 00 07 	lds	r25, 0x0700	; 0x800700 <pxOverflowDelayedTaskList+0x1>
    254c:	b9 01       	movw	r22, r18
    254e:	0e 94 d7 07 	call	0xfae	; 0xfae <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    2552:	1d c0       	rjmp	.+58     	; 0x258e <prvAddCurrentTaskToDelayedList+0xe0>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    2554:	80 91 b3 06 	lds	r24, 0x06B3	; 0x8006b3 <pxCurrentTCB>
    2558:	90 91 b4 06 	lds	r25, 0x06B4	; 0x8006b4 <pxCurrentTCB+0x1>
    255c:	9c 01       	movw	r18, r24
    255e:	2e 5f       	subi	r18, 0xFE	; 254
    2560:	3f 4f       	sbci	r19, 0xFF	; 255
    2562:	80 91 fd 06 	lds	r24, 0x06FD	; 0x8006fd <pxDelayedTaskList>
    2566:	90 91 fe 06 	lds	r25, 0x06FE	; 0x8006fe <pxDelayedTaskList+0x1>
    256a:	b9 01       	movw	r22, r18
    256c:	0e 94 d7 07 	call	0xfae	; 0xfae <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
    2570:	80 91 26 07 	lds	r24, 0x0726	; 0x800726 <xNextTaskUnblockTime>
    2574:	90 91 27 07 	lds	r25, 0x0727	; 0x800727 <xNextTaskUnblockTime+0x1>
    2578:	2b 81       	ldd	r18, Y+3	; 0x03
    257a:	3c 81       	ldd	r19, Y+4	; 0x04
    257c:	28 17       	cp	r18, r24
    257e:	39 07       	cpc	r19, r25
    2580:	30 f4       	brcc	.+12     	; 0x258e <prvAddCurrentTaskToDelayedList+0xe0>
				{
					xNextTaskUnblockTime = xTimeToWake;
    2582:	8b 81       	ldd	r24, Y+3	; 0x03
    2584:	9c 81       	ldd	r25, Y+4	; 0x04
    2586:	90 93 27 07 	sts	0x0727, r25	; 0x800727 <xNextTaskUnblockTime+0x1>
    258a:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <xNextTaskUnblockTime>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    258e:	00 00       	nop
    2590:	27 96       	adiw	r28, 0x07	; 7
    2592:	0f b6       	in	r0, 0x3f	; 63
    2594:	f8 94       	cli
    2596:	de bf       	out	0x3e, r29	; 62
    2598:	0f be       	out	0x3f, r0	; 63
    259a:	cd bf       	out	0x3d, r28	; 61
    259c:	df 91       	pop	r29
    259e:	cf 91       	pop	r28
    25a0:	08 95       	ret

000025a2 <Gpio_PortDirection>:
		case MYPORTD :
		result = (PIN_D >> 4);
		break;
	}
	return result;
}
    25a2:	cf 93       	push	r28
    25a4:	df 93       	push	r29
    25a6:	00 d0       	rcall	.+0      	; 0x25a8 <Gpio_PortDirection+0x6>
    25a8:	cd b7       	in	r28, 0x3d	; 61
    25aa:	de b7       	in	r29, 0x3e	; 62
    25ac:	89 83       	std	Y+1, r24	; 0x01
    25ae:	6a 83       	std	Y+2, r22	; 0x02
    25b0:	89 81       	ldd	r24, Y+1	; 0x01
    25b2:	88 2f       	mov	r24, r24
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	81 30       	cpi	r24, 0x01	; 1
    25b8:	91 05       	cpc	r25, r1
    25ba:	91 f0       	breq	.+36     	; 0x25e0 <Gpio_PortDirection+0x3e>
    25bc:	82 30       	cpi	r24, 0x02	; 2
    25be:	91 05       	cpc	r25, r1
    25c0:	1c f4       	brge	.+6      	; 0x25c8 <Gpio_PortDirection+0x26>
    25c2:	89 2b       	or	r24, r25
    25c4:	39 f0       	breq	.+14     	; 0x25d4 <Gpio_PortDirection+0x32>
    25c6:	1e c0       	rjmp	.+60     	; 0x2604 <Gpio_PortDirection+0x62>
    25c8:	82 30       	cpi	r24, 0x02	; 2
    25ca:	91 05       	cpc	r25, r1
    25cc:	79 f0       	breq	.+30     	; 0x25ec <Gpio_PortDirection+0x4a>
    25ce:	03 97       	sbiw	r24, 0x03	; 3
    25d0:	99 f0       	breq	.+38     	; 0x25f8 <Gpio_PortDirection+0x56>
    25d2:	18 c0       	rjmp	.+48     	; 0x2604 <Gpio_PortDirection+0x62>
    25d4:	8a e3       	ldi	r24, 0x3A	; 58
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	2a 81       	ldd	r18, Y+2	; 0x02
    25da:	fc 01       	movw	r30, r24
    25dc:	20 83       	st	Z, r18
    25de:	12 c0       	rjmp	.+36     	; 0x2604 <Gpio_PortDirection+0x62>
    25e0:	87 e3       	ldi	r24, 0x37	; 55
    25e2:	90 e0       	ldi	r25, 0x00	; 0
    25e4:	2a 81       	ldd	r18, Y+2	; 0x02
    25e6:	fc 01       	movw	r30, r24
    25e8:	20 83       	st	Z, r18
    25ea:	0c c0       	rjmp	.+24     	; 0x2604 <Gpio_PortDirection+0x62>
    25ec:	84 e3       	ldi	r24, 0x34	; 52
    25ee:	90 e0       	ldi	r25, 0x00	; 0
    25f0:	2a 81       	ldd	r18, Y+2	; 0x02
    25f2:	fc 01       	movw	r30, r24
    25f4:	20 83       	st	Z, r18
    25f6:	06 c0       	rjmp	.+12     	; 0x2604 <Gpio_PortDirection+0x62>
    25f8:	81 e3       	ldi	r24, 0x31	; 49
    25fa:	90 e0       	ldi	r25, 0x00	; 0
    25fc:	2a 81       	ldd	r18, Y+2	; 0x02
    25fe:	fc 01       	movw	r30, r24
    2600:	20 83       	st	Z, r18
    2602:	00 00       	nop
    2604:	00 00       	nop
    2606:	0f 90       	pop	r0
    2608:	0f 90       	pop	r0
    260a:	df 91       	pop	r29
    260c:	cf 91       	pop	r28
    260e:	08 95       	ret

00002610 <Gpio_PinDirection>:
    2610:	cf 93       	push	r28
    2612:	df 93       	push	r29
    2614:	00 d0       	rcall	.+0      	; 0x2616 <Gpio_PinDirection+0x6>
    2616:	1f 92       	push	r1
    2618:	cd b7       	in	r28, 0x3d	; 61
    261a:	de b7       	in	r29, 0x3e	; 62
    261c:	89 83       	std	Y+1, r24	; 0x01
    261e:	6a 83       	std	Y+2, r22	; 0x02
    2620:	4b 83       	std	Y+3, r20	; 0x03
    2622:	89 81       	ldd	r24, Y+1	; 0x01
    2624:	88 2f       	mov	r24, r24
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	81 30       	cpi	r24, 0x01	; 1
    262a:	91 05       	cpc	r25, r1
    262c:	81 f1       	breq	.+96     	; 0x268e <Gpio_PinDirection+0x7e>
    262e:	82 30       	cpi	r24, 0x02	; 2
    2630:	91 05       	cpc	r25, r1
    2632:	1c f4       	brge	.+6      	; 0x263a <Gpio_PinDirection+0x2a>
    2634:	89 2b       	or	r24, r25
    2636:	49 f0       	breq	.+18     	; 0x264a <Gpio_PinDirection+0x3a>
    2638:	90 c0       	rjmp	.+288    	; 0x275a <Gpio_PinDirection+0x14a>
    263a:	82 30       	cpi	r24, 0x02	; 2
    263c:	91 05       	cpc	r25, r1
    263e:	09 f4       	brne	.+2      	; 0x2642 <Gpio_PinDirection+0x32>
    2640:	48 c0       	rjmp	.+144    	; 0x26d2 <Gpio_PinDirection+0xc2>
    2642:	03 97       	sbiw	r24, 0x03	; 3
    2644:	09 f4       	brne	.+2      	; 0x2648 <Gpio_PinDirection+0x38>
    2646:	67 c0       	rjmp	.+206    	; 0x2716 <Gpio_PinDirection+0x106>
    2648:	88 c0       	rjmp	.+272    	; 0x275a <Gpio_PinDirection+0x14a>
    264a:	8b 81       	ldd	r24, Y+3	; 0x03
    264c:	88 2f       	mov	r24, r24
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	00 97       	sbiw	r24, 0x00	; 0
    2652:	21 f0       	breq	.+8      	; 0x265c <Gpio_PinDirection+0x4c>
    2654:	8f 3f       	cpi	r24, 0xFF	; 255
    2656:	91 05       	cpc	r25, r1
    2658:	71 f0       	breq	.+28     	; 0x2676 <Gpio_PinDirection+0x66>
    265a:	7f c0       	rjmp	.+254    	; 0x275a <Gpio_PinDirection+0x14a>
    265c:	8a e3       	ldi	r24, 0x3A	; 58
    265e:	90 e0       	ldi	r25, 0x00	; 0
    2660:	2a e3       	ldi	r18, 0x3A	; 58
    2662:	30 e0       	ldi	r19, 0x00	; 0
    2664:	f9 01       	movw	r30, r18
    2666:	20 81       	ld	r18, Z
    2668:	32 2f       	mov	r19, r18
    266a:	2a 81       	ldd	r18, Y+2	; 0x02
    266c:	20 95       	com	r18
    266e:	23 23       	and	r18, r19
    2670:	fc 01       	movw	r30, r24
    2672:	20 83       	st	Z, r18
    2674:	0b c0       	rjmp	.+22     	; 0x268c <Gpio_PinDirection+0x7c>
    2676:	8a e3       	ldi	r24, 0x3A	; 58
    2678:	90 e0       	ldi	r25, 0x00	; 0
    267a:	2a e3       	ldi	r18, 0x3A	; 58
    267c:	30 e0       	ldi	r19, 0x00	; 0
    267e:	f9 01       	movw	r30, r18
    2680:	30 81       	ld	r19, Z
    2682:	2a 81       	ldd	r18, Y+2	; 0x02
    2684:	23 2b       	or	r18, r19
    2686:	fc 01       	movw	r30, r24
    2688:	20 83       	st	Z, r18
    268a:	00 00       	nop
    268c:	66 c0       	rjmp	.+204    	; 0x275a <Gpio_PinDirection+0x14a>
    268e:	8b 81       	ldd	r24, Y+3	; 0x03
    2690:	88 2f       	mov	r24, r24
    2692:	90 e0       	ldi	r25, 0x00	; 0
    2694:	00 97       	sbiw	r24, 0x00	; 0
    2696:	21 f0       	breq	.+8      	; 0x26a0 <Gpio_PinDirection+0x90>
    2698:	8f 3f       	cpi	r24, 0xFF	; 255
    269a:	91 05       	cpc	r25, r1
    269c:	71 f0       	breq	.+28     	; 0x26ba <Gpio_PinDirection+0xaa>
    269e:	5d c0       	rjmp	.+186    	; 0x275a <Gpio_PinDirection+0x14a>
    26a0:	87 e3       	ldi	r24, 0x37	; 55
    26a2:	90 e0       	ldi	r25, 0x00	; 0
    26a4:	27 e3       	ldi	r18, 0x37	; 55
    26a6:	30 e0       	ldi	r19, 0x00	; 0
    26a8:	f9 01       	movw	r30, r18
    26aa:	20 81       	ld	r18, Z
    26ac:	32 2f       	mov	r19, r18
    26ae:	2a 81       	ldd	r18, Y+2	; 0x02
    26b0:	20 95       	com	r18
    26b2:	23 23       	and	r18, r19
    26b4:	fc 01       	movw	r30, r24
    26b6:	20 83       	st	Z, r18
    26b8:	0b c0       	rjmp	.+22     	; 0x26d0 <Gpio_PinDirection+0xc0>
    26ba:	87 e3       	ldi	r24, 0x37	; 55
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	27 e3       	ldi	r18, 0x37	; 55
    26c0:	30 e0       	ldi	r19, 0x00	; 0
    26c2:	f9 01       	movw	r30, r18
    26c4:	30 81       	ld	r19, Z
    26c6:	2a 81       	ldd	r18, Y+2	; 0x02
    26c8:	23 2b       	or	r18, r19
    26ca:	fc 01       	movw	r30, r24
    26cc:	20 83       	st	Z, r18
    26ce:	00 00       	nop
    26d0:	44 c0       	rjmp	.+136    	; 0x275a <Gpio_PinDirection+0x14a>
    26d2:	8b 81       	ldd	r24, Y+3	; 0x03
    26d4:	88 2f       	mov	r24, r24
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	00 97       	sbiw	r24, 0x00	; 0
    26da:	21 f0       	breq	.+8      	; 0x26e4 <Gpio_PinDirection+0xd4>
    26dc:	8f 3f       	cpi	r24, 0xFF	; 255
    26de:	91 05       	cpc	r25, r1
    26e0:	71 f0       	breq	.+28     	; 0x26fe <Gpio_PinDirection+0xee>
    26e2:	3b c0       	rjmp	.+118    	; 0x275a <Gpio_PinDirection+0x14a>
    26e4:	84 e3       	ldi	r24, 0x34	; 52
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	24 e3       	ldi	r18, 0x34	; 52
    26ea:	30 e0       	ldi	r19, 0x00	; 0
    26ec:	f9 01       	movw	r30, r18
    26ee:	20 81       	ld	r18, Z
    26f0:	32 2f       	mov	r19, r18
    26f2:	2a 81       	ldd	r18, Y+2	; 0x02
    26f4:	20 95       	com	r18
    26f6:	23 23       	and	r18, r19
    26f8:	fc 01       	movw	r30, r24
    26fa:	20 83       	st	Z, r18
    26fc:	0b c0       	rjmp	.+22     	; 0x2714 <Gpio_PinDirection+0x104>
    26fe:	84 e3       	ldi	r24, 0x34	; 52
    2700:	90 e0       	ldi	r25, 0x00	; 0
    2702:	24 e3       	ldi	r18, 0x34	; 52
    2704:	30 e0       	ldi	r19, 0x00	; 0
    2706:	f9 01       	movw	r30, r18
    2708:	30 81       	ld	r19, Z
    270a:	2a 81       	ldd	r18, Y+2	; 0x02
    270c:	23 2b       	or	r18, r19
    270e:	fc 01       	movw	r30, r24
    2710:	20 83       	st	Z, r18
    2712:	00 00       	nop
    2714:	22 c0       	rjmp	.+68     	; 0x275a <Gpio_PinDirection+0x14a>
    2716:	8b 81       	ldd	r24, Y+3	; 0x03
    2718:	88 2f       	mov	r24, r24
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	00 97       	sbiw	r24, 0x00	; 0
    271e:	21 f0       	breq	.+8      	; 0x2728 <Gpio_PinDirection+0x118>
    2720:	8f 3f       	cpi	r24, 0xFF	; 255
    2722:	91 05       	cpc	r25, r1
    2724:	71 f0       	breq	.+28     	; 0x2742 <Gpio_PinDirection+0x132>
    2726:	18 c0       	rjmp	.+48     	; 0x2758 <Gpio_PinDirection+0x148>
    2728:	81 e3       	ldi	r24, 0x31	; 49
    272a:	90 e0       	ldi	r25, 0x00	; 0
    272c:	21 e3       	ldi	r18, 0x31	; 49
    272e:	30 e0       	ldi	r19, 0x00	; 0
    2730:	f9 01       	movw	r30, r18
    2732:	20 81       	ld	r18, Z
    2734:	32 2f       	mov	r19, r18
    2736:	2a 81       	ldd	r18, Y+2	; 0x02
    2738:	20 95       	com	r18
    273a:	23 23       	and	r18, r19
    273c:	fc 01       	movw	r30, r24
    273e:	20 83       	st	Z, r18
    2740:	0b c0       	rjmp	.+22     	; 0x2758 <Gpio_PinDirection+0x148>
    2742:	81 e3       	ldi	r24, 0x31	; 49
    2744:	90 e0       	ldi	r25, 0x00	; 0
    2746:	21 e3       	ldi	r18, 0x31	; 49
    2748:	30 e0       	ldi	r19, 0x00	; 0
    274a:	f9 01       	movw	r30, r18
    274c:	30 81       	ld	r19, Z
    274e:	2a 81       	ldd	r18, Y+2	; 0x02
    2750:	23 2b       	or	r18, r19
    2752:	fc 01       	movw	r30, r24
    2754:	20 83       	st	Z, r18
    2756:	00 00       	nop
    2758:	00 00       	nop
    275a:	00 00       	nop
    275c:	0f 90       	pop	r0
    275e:	0f 90       	pop	r0
    2760:	0f 90       	pop	r0
    2762:	df 91       	pop	r29
    2764:	cf 91       	pop	r28
    2766:	08 95       	ret

00002768 <Gpio_PinWrite>:
    2768:	cf 93       	push	r28
    276a:	df 93       	push	r29
    276c:	00 d0       	rcall	.+0      	; 0x276e <Gpio_PinWrite+0x6>
    276e:	1f 92       	push	r1
    2770:	cd b7       	in	r28, 0x3d	; 61
    2772:	de b7       	in	r29, 0x3e	; 62
    2774:	89 83       	std	Y+1, r24	; 0x01
    2776:	6a 83       	std	Y+2, r22	; 0x02
    2778:	4b 83       	std	Y+3, r20	; 0x03
    277a:	8b 81       	ldd	r24, Y+3	; 0x03
    277c:	88 2f       	mov	r24, r24
    277e:	90 e0       	ldi	r25, 0x00	; 0
    2780:	00 97       	sbiw	r24, 0x00	; 0
    2782:	09 f4       	brne	.+2      	; 0x2786 <Gpio_PinWrite+0x1e>
    2784:	42 c0       	rjmp	.+132    	; 0x280a <Gpio_PinWrite+0xa2>
    2786:	01 97       	sbiw	r24, 0x01	; 1
    2788:	09 f0       	breq	.+2      	; 0x278c <Gpio_PinWrite+0x24>
    278a:	86 c0       	rjmp	.+268    	; 0x2898 <Gpio_PinWrite+0x130>
    278c:	89 81       	ldd	r24, Y+1	; 0x01
    278e:	88 2f       	mov	r24, r24
    2790:	90 e0       	ldi	r25, 0x00	; 0
    2792:	81 30       	cpi	r24, 0x01	; 1
    2794:	91 05       	cpc	r25, r1
    2796:	b9 f0       	breq	.+46     	; 0x27c6 <Gpio_PinWrite+0x5e>
    2798:	82 30       	cpi	r24, 0x02	; 2
    279a:	91 05       	cpc	r25, r1
    279c:	1c f4       	brge	.+6      	; 0x27a4 <Gpio_PinWrite+0x3c>
    279e:	89 2b       	or	r24, r25
    27a0:	39 f0       	breq	.+14     	; 0x27b0 <Gpio_PinWrite+0x48>
    27a2:	7a c0       	rjmp	.+244    	; 0x2898 <Gpio_PinWrite+0x130>
    27a4:	82 30       	cpi	r24, 0x02	; 2
    27a6:	91 05       	cpc	r25, r1
    27a8:	c9 f0       	breq	.+50     	; 0x27dc <Gpio_PinWrite+0x74>
    27aa:	03 97       	sbiw	r24, 0x03	; 3
    27ac:	11 f1       	breq	.+68     	; 0x27f2 <Gpio_PinWrite+0x8a>
    27ae:	74 c0       	rjmp	.+232    	; 0x2898 <Gpio_PinWrite+0x130>
    27b0:	8b e3       	ldi	r24, 0x3B	; 59
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	2b e3       	ldi	r18, 0x3B	; 59
    27b6:	30 e0       	ldi	r19, 0x00	; 0
    27b8:	f9 01       	movw	r30, r18
    27ba:	30 81       	ld	r19, Z
    27bc:	2a 81       	ldd	r18, Y+2	; 0x02
    27be:	23 2b       	or	r18, r19
    27c0:	fc 01       	movw	r30, r24
    27c2:	20 83       	st	Z, r18
    27c4:	21 c0       	rjmp	.+66     	; 0x2808 <Gpio_PinWrite+0xa0>
    27c6:	88 e3       	ldi	r24, 0x38	; 56
    27c8:	90 e0       	ldi	r25, 0x00	; 0
    27ca:	28 e3       	ldi	r18, 0x38	; 56
    27cc:	30 e0       	ldi	r19, 0x00	; 0
    27ce:	f9 01       	movw	r30, r18
    27d0:	30 81       	ld	r19, Z
    27d2:	2a 81       	ldd	r18, Y+2	; 0x02
    27d4:	23 2b       	or	r18, r19
    27d6:	fc 01       	movw	r30, r24
    27d8:	20 83       	st	Z, r18
    27da:	16 c0       	rjmp	.+44     	; 0x2808 <Gpio_PinWrite+0xa0>
    27dc:	85 e3       	ldi	r24, 0x35	; 53
    27de:	90 e0       	ldi	r25, 0x00	; 0
    27e0:	25 e3       	ldi	r18, 0x35	; 53
    27e2:	30 e0       	ldi	r19, 0x00	; 0
    27e4:	f9 01       	movw	r30, r18
    27e6:	30 81       	ld	r19, Z
    27e8:	2a 81       	ldd	r18, Y+2	; 0x02
    27ea:	23 2b       	or	r18, r19
    27ec:	fc 01       	movw	r30, r24
    27ee:	20 83       	st	Z, r18
    27f0:	0b c0       	rjmp	.+22     	; 0x2808 <Gpio_PinWrite+0xa0>
    27f2:	82 e3       	ldi	r24, 0x32	; 50
    27f4:	90 e0       	ldi	r25, 0x00	; 0
    27f6:	22 e3       	ldi	r18, 0x32	; 50
    27f8:	30 e0       	ldi	r19, 0x00	; 0
    27fa:	f9 01       	movw	r30, r18
    27fc:	30 81       	ld	r19, Z
    27fe:	2a 81       	ldd	r18, Y+2	; 0x02
    2800:	23 2b       	or	r18, r19
    2802:	fc 01       	movw	r30, r24
    2804:	20 83       	st	Z, r18
    2806:	00 00       	nop
    2808:	47 c0       	rjmp	.+142    	; 0x2898 <Gpio_PinWrite+0x130>
    280a:	89 81       	ldd	r24, Y+1	; 0x01
    280c:	88 2f       	mov	r24, r24
    280e:	90 e0       	ldi	r25, 0x00	; 0
    2810:	81 30       	cpi	r24, 0x01	; 1
    2812:	91 05       	cpc	r25, r1
    2814:	c9 f0       	breq	.+50     	; 0x2848 <Gpio_PinWrite+0xe0>
    2816:	82 30       	cpi	r24, 0x02	; 2
    2818:	91 05       	cpc	r25, r1
    281a:	1c f4       	brge	.+6      	; 0x2822 <Gpio_PinWrite+0xba>
    281c:	89 2b       	or	r24, r25
    281e:	39 f0       	breq	.+14     	; 0x282e <Gpio_PinWrite+0xc6>
    2820:	3a c0       	rjmp	.+116    	; 0x2896 <Gpio_PinWrite+0x12e>
    2822:	82 30       	cpi	r24, 0x02	; 2
    2824:	91 05       	cpc	r25, r1
    2826:	e9 f0       	breq	.+58     	; 0x2862 <Gpio_PinWrite+0xfa>
    2828:	03 97       	sbiw	r24, 0x03	; 3
    282a:	41 f1       	breq	.+80     	; 0x287c <Gpio_PinWrite+0x114>
    282c:	34 c0       	rjmp	.+104    	; 0x2896 <Gpio_PinWrite+0x12e>
    282e:	8b e3       	ldi	r24, 0x3B	; 59
    2830:	90 e0       	ldi	r25, 0x00	; 0
    2832:	2b e3       	ldi	r18, 0x3B	; 59
    2834:	30 e0       	ldi	r19, 0x00	; 0
    2836:	f9 01       	movw	r30, r18
    2838:	20 81       	ld	r18, Z
    283a:	32 2f       	mov	r19, r18
    283c:	2a 81       	ldd	r18, Y+2	; 0x02
    283e:	20 95       	com	r18
    2840:	23 23       	and	r18, r19
    2842:	fc 01       	movw	r30, r24
    2844:	20 83       	st	Z, r18
    2846:	27 c0       	rjmp	.+78     	; 0x2896 <Gpio_PinWrite+0x12e>
    2848:	88 e3       	ldi	r24, 0x38	; 56
    284a:	90 e0       	ldi	r25, 0x00	; 0
    284c:	28 e3       	ldi	r18, 0x38	; 56
    284e:	30 e0       	ldi	r19, 0x00	; 0
    2850:	f9 01       	movw	r30, r18
    2852:	20 81       	ld	r18, Z
    2854:	32 2f       	mov	r19, r18
    2856:	2a 81       	ldd	r18, Y+2	; 0x02
    2858:	20 95       	com	r18
    285a:	23 23       	and	r18, r19
    285c:	fc 01       	movw	r30, r24
    285e:	20 83       	st	Z, r18
    2860:	1a c0       	rjmp	.+52     	; 0x2896 <Gpio_PinWrite+0x12e>
    2862:	85 e3       	ldi	r24, 0x35	; 53
    2864:	90 e0       	ldi	r25, 0x00	; 0
    2866:	25 e3       	ldi	r18, 0x35	; 53
    2868:	30 e0       	ldi	r19, 0x00	; 0
    286a:	f9 01       	movw	r30, r18
    286c:	20 81       	ld	r18, Z
    286e:	32 2f       	mov	r19, r18
    2870:	2a 81       	ldd	r18, Y+2	; 0x02
    2872:	20 95       	com	r18
    2874:	23 23       	and	r18, r19
    2876:	fc 01       	movw	r30, r24
    2878:	20 83       	st	Z, r18
    287a:	0d c0       	rjmp	.+26     	; 0x2896 <Gpio_PinWrite+0x12e>
    287c:	82 e3       	ldi	r24, 0x32	; 50
    287e:	90 e0       	ldi	r25, 0x00	; 0
    2880:	22 e3       	ldi	r18, 0x32	; 50
    2882:	30 e0       	ldi	r19, 0x00	; 0
    2884:	f9 01       	movw	r30, r18
    2886:	20 81       	ld	r18, Z
    2888:	32 2f       	mov	r19, r18
    288a:	2a 81       	ldd	r18, Y+2	; 0x02
    288c:	20 95       	com	r18
    288e:	23 23       	and	r18, r19
    2890:	fc 01       	movw	r30, r24
    2892:	20 83       	st	Z, r18
    2894:	00 00       	nop
    2896:	00 00       	nop
    2898:	00 00       	nop
    289a:	0f 90       	pop	r0
    289c:	0f 90       	pop	r0
    289e:	0f 90       	pop	r0
    28a0:	df 91       	pop	r29
    28a2:	cf 91       	pop	r28
    28a4:	08 95       	ret

000028a6 <Gpio_PinRead>:
    28a6:	cf 93       	push	r28
    28a8:	df 93       	push	r29
    28aa:	00 d0       	rcall	.+0      	; 0x28ac <Gpio_PinRead+0x6>
    28ac:	1f 92       	push	r1
    28ae:	cd b7       	in	r28, 0x3d	; 61
    28b0:	de b7       	in	r29, 0x3e	; 62
    28b2:	8a 83       	std	Y+2, r24	; 0x02
    28b4:	6b 83       	std	Y+3, r22	; 0x03
    28b6:	19 82       	std	Y+1, r1	; 0x01
    28b8:	8a 81       	ldd	r24, Y+2	; 0x02
    28ba:	88 2f       	mov	r24, r24
    28bc:	90 e0       	ldi	r25, 0x00	; 0
    28be:	81 30       	cpi	r24, 0x01	; 1
    28c0:	91 05       	cpc	r25, r1
    28c2:	e9 f0       	breq	.+58     	; 0x28fe <Gpio_PinRead+0x58>
    28c4:	82 30       	cpi	r24, 0x02	; 2
    28c6:	91 05       	cpc	r25, r1
    28c8:	1c f4       	brge	.+6      	; 0x28d0 <Gpio_PinRead+0x2a>
    28ca:	89 2b       	or	r24, r25
    28cc:	39 f0       	breq	.+14     	; 0x28dc <Gpio_PinRead+0x36>
    28ce:	4a c0       	rjmp	.+148    	; 0x2964 <Gpio_PinRead+0xbe>
    28d0:	82 30       	cpi	r24, 0x02	; 2
    28d2:	91 05       	cpc	r25, r1
    28d4:	29 f1       	breq	.+74     	; 0x2920 <Gpio_PinRead+0x7a>
    28d6:	03 97       	sbiw	r24, 0x03	; 3
    28d8:	a1 f1       	breq	.+104    	; 0x2942 <Gpio_PinRead+0x9c>
    28da:	44 c0       	rjmp	.+136    	; 0x2964 <Gpio_PinRead+0xbe>
    28dc:	89 e3       	ldi	r24, 0x39	; 57
    28de:	90 e0       	ldi	r25, 0x00	; 0
    28e0:	fc 01       	movw	r30, r24
    28e2:	80 81       	ld	r24, Z
    28e4:	88 2f       	mov	r24, r24
    28e6:	90 e0       	ldi	r25, 0x00	; 0
    28e8:	2b 81       	ldd	r18, Y+3	; 0x03
    28ea:	22 2f       	mov	r18, r18
    28ec:	30 e0       	ldi	r19, 0x00	; 0
    28ee:	02 c0       	rjmp	.+4      	; 0x28f4 <Gpio_PinRead+0x4e>
    28f0:	95 95       	asr	r25
    28f2:	87 95       	ror	r24
    28f4:	2a 95       	dec	r18
    28f6:	e2 f7       	brpl	.-8      	; 0x28f0 <Gpio_PinRead+0x4a>
    28f8:	81 70       	andi	r24, 0x01	; 1
    28fa:	89 83       	std	Y+1, r24	; 0x01
    28fc:	33 c0       	rjmp	.+102    	; 0x2964 <Gpio_PinRead+0xbe>
    28fe:	86 e3       	ldi	r24, 0x36	; 54
    2900:	90 e0       	ldi	r25, 0x00	; 0
    2902:	fc 01       	movw	r30, r24
    2904:	80 81       	ld	r24, Z
    2906:	88 2f       	mov	r24, r24
    2908:	90 e0       	ldi	r25, 0x00	; 0
    290a:	2b 81       	ldd	r18, Y+3	; 0x03
    290c:	22 2f       	mov	r18, r18
    290e:	30 e0       	ldi	r19, 0x00	; 0
    2910:	02 c0       	rjmp	.+4      	; 0x2916 <Gpio_PinRead+0x70>
    2912:	95 95       	asr	r25
    2914:	87 95       	ror	r24
    2916:	2a 95       	dec	r18
    2918:	e2 f7       	brpl	.-8      	; 0x2912 <Gpio_PinRead+0x6c>
    291a:	81 70       	andi	r24, 0x01	; 1
    291c:	89 83       	std	Y+1, r24	; 0x01
    291e:	22 c0       	rjmp	.+68     	; 0x2964 <Gpio_PinRead+0xbe>
    2920:	83 e3       	ldi	r24, 0x33	; 51
    2922:	90 e0       	ldi	r25, 0x00	; 0
    2924:	fc 01       	movw	r30, r24
    2926:	80 81       	ld	r24, Z
    2928:	88 2f       	mov	r24, r24
    292a:	90 e0       	ldi	r25, 0x00	; 0
    292c:	2b 81       	ldd	r18, Y+3	; 0x03
    292e:	22 2f       	mov	r18, r18
    2930:	30 e0       	ldi	r19, 0x00	; 0
    2932:	02 c0       	rjmp	.+4      	; 0x2938 <Gpio_PinRead+0x92>
    2934:	95 95       	asr	r25
    2936:	87 95       	ror	r24
    2938:	2a 95       	dec	r18
    293a:	e2 f7       	brpl	.-8      	; 0x2934 <Gpio_PinRead+0x8e>
    293c:	81 70       	andi	r24, 0x01	; 1
    293e:	89 83       	std	Y+1, r24	; 0x01
    2940:	11 c0       	rjmp	.+34     	; 0x2964 <Gpio_PinRead+0xbe>
    2942:	80 e3       	ldi	r24, 0x30	; 48
    2944:	90 e0       	ldi	r25, 0x00	; 0
    2946:	fc 01       	movw	r30, r24
    2948:	80 81       	ld	r24, Z
    294a:	88 2f       	mov	r24, r24
    294c:	90 e0       	ldi	r25, 0x00	; 0
    294e:	2b 81       	ldd	r18, Y+3	; 0x03
    2950:	22 2f       	mov	r18, r18
    2952:	30 e0       	ldi	r19, 0x00	; 0
    2954:	02 c0       	rjmp	.+4      	; 0x295a <Gpio_PinRead+0xb4>
    2956:	95 95       	asr	r25
    2958:	87 95       	ror	r24
    295a:	2a 95       	dec	r18
    295c:	e2 f7       	brpl	.-8      	; 0x2956 <Gpio_PinRead+0xb0>
    295e:	81 70       	andi	r24, 0x01	; 1
    2960:	89 83       	std	Y+1, r24	; 0x01
    2962:	00 00       	nop
    2964:	89 81       	ldd	r24, Y+1	; 0x01
    2966:	0f 90       	pop	r0
    2968:	0f 90       	pop	r0
    296a:	0f 90       	pop	r0
    296c:	df 91       	pop	r29
    296e:	cf 91       	pop	r28
    2970:	08 95       	ret

00002972 <Gpio_LowerNibbleDirection>:
 * @param port : the port that includes the LowerNibble {MYPORTA,MYPORTB,MYPORTC,MYPORTD}
 * @param direction : The Direction of the LowerNibble >> {SET_IN , SET_OUT}
 * Return : void
 */
void Gpio_LowerNibbleDirection(uint8 port, uint8 direction)
{
    2972:	cf 93       	push	r28
    2974:	df 93       	push	r29
    2976:	00 d0       	rcall	.+0      	; 0x2978 <Gpio_LowerNibbleDirection+0x6>
    2978:	cd b7       	in	r28, 0x3d	; 61
    297a:	de b7       	in	r29, 0x3e	; 62
    297c:	89 83       	std	Y+1, r24	; 0x01
    297e:	6a 83       	std	Y+2, r22	; 0x02
	switch(port)
    2980:	89 81       	ldd	r24, Y+1	; 0x01
    2982:	88 2f       	mov	r24, r24
    2984:	90 e0       	ldi	r25, 0x00	; 0
    2986:	81 30       	cpi	r24, 0x01	; 1
    2988:	91 05       	cpc	r25, r1
    298a:	61 f1       	breq	.+88     	; 0x29e4 <Gpio_LowerNibbleDirection+0x72>
    298c:	82 30       	cpi	r24, 0x02	; 2
    298e:	91 05       	cpc	r25, r1
    2990:	1c f4       	brge	.+6      	; 0x2998 <Gpio_LowerNibbleDirection+0x26>
    2992:	89 2b       	or	r24, r25
    2994:	49 f0       	breq	.+18     	; 0x29a8 <Gpio_LowerNibbleDirection+0x36>
				break;
			}
		}
		break;
	}
}
    2996:	80 c0       	rjmp	.+256    	; 0x2a98 <Gpio_LowerNibbleDirection+0x126>
 * @param direction : The Direction of the LowerNibble >> {SET_IN , SET_OUT}
 * Return : void
 */
void Gpio_LowerNibbleDirection(uint8 port, uint8 direction)
{
	switch(port)
    2998:	82 30       	cpi	r24, 0x02	; 2
    299a:	91 05       	cpc	r25, r1
    299c:	09 f4       	brne	.+2      	; 0x29a0 <Gpio_LowerNibbleDirection+0x2e>
    299e:	40 c0       	rjmp	.+128    	; 0x2a20 <Gpio_LowerNibbleDirection+0xae>
    29a0:	03 97       	sbiw	r24, 0x03	; 3
    29a2:	09 f4       	brne	.+2      	; 0x29a6 <Gpio_LowerNibbleDirection+0x34>
    29a4:	5b c0       	rjmp	.+182    	; 0x2a5c <Gpio_LowerNibbleDirection+0xea>
				break;
			}
		}
		break;
	}
}
    29a6:	78 c0       	rjmp	.+240    	; 0x2a98 <Gpio_LowerNibbleDirection+0x126>
{
	switch(port)
	{
		case MYPORTA :
		{
			switch(direction)
    29a8:	8a 81       	ldd	r24, Y+2	; 0x02
    29aa:	88 2f       	mov	r24, r24
    29ac:	90 e0       	ldi	r25, 0x00	; 0
    29ae:	00 97       	sbiw	r24, 0x00	; 0
    29b0:	21 f0       	breq	.+8      	; 0x29ba <Gpio_LowerNibbleDirection+0x48>
    29b2:	8f 3f       	cpi	r24, 0xFF	; 255
    29b4:	91 05       	cpc	r25, r1
    29b6:	59 f0       	breq	.+22     	; 0x29ce <Gpio_LowerNibbleDirection+0x5c>
				case SET_OUT :
				DDR_A |= 0x0f;
				break;
			}
		}
		break;
    29b8:	6f c0       	rjmp	.+222    	; 0x2a98 <Gpio_LowerNibbleDirection+0x126>
		case MYPORTA :
		{
			switch(direction)
			{
				case SET_IN :
				DDR_A &= 0xf0;
    29ba:	8a e3       	ldi	r24, 0x3A	; 58
    29bc:	90 e0       	ldi	r25, 0x00	; 0
    29be:	2a e3       	ldi	r18, 0x3A	; 58
    29c0:	30 e0       	ldi	r19, 0x00	; 0
    29c2:	f9 01       	movw	r30, r18
    29c4:	20 81       	ld	r18, Z
    29c6:	20 7f       	andi	r18, 0xF0	; 240
    29c8:	fc 01       	movw	r30, r24
    29ca:	20 83       	st	Z, r18
				break;
    29cc:	0a c0       	rjmp	.+20     	; 0x29e2 <Gpio_LowerNibbleDirection+0x70>
				case SET_OUT :
				DDR_A |= 0x0f;
    29ce:	8a e3       	ldi	r24, 0x3A	; 58
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	2a e3       	ldi	r18, 0x3A	; 58
    29d4:	30 e0       	ldi	r19, 0x00	; 0
    29d6:	f9 01       	movw	r30, r18
    29d8:	20 81       	ld	r18, Z
    29da:	2f 60       	ori	r18, 0x0F	; 15
    29dc:	fc 01       	movw	r30, r24
    29de:	20 83       	st	Z, r18
				break;
    29e0:	00 00       	nop
			}
		}
		break;
    29e2:	5a c0       	rjmp	.+180    	; 0x2a98 <Gpio_LowerNibbleDirection+0x126>
		case MYPORTB :
		{
			switch(direction)
    29e4:	8a 81       	ldd	r24, Y+2	; 0x02
    29e6:	88 2f       	mov	r24, r24
    29e8:	90 e0       	ldi	r25, 0x00	; 0
    29ea:	00 97       	sbiw	r24, 0x00	; 0
    29ec:	21 f0       	breq	.+8      	; 0x29f6 <Gpio_LowerNibbleDirection+0x84>
    29ee:	8f 3f       	cpi	r24, 0xFF	; 255
    29f0:	91 05       	cpc	r25, r1
    29f2:	59 f0       	breq	.+22     	; 0x2a0a <Gpio_LowerNibbleDirection+0x98>
				case SET_OUT :
				DDR_B |= 0x0f;
				break;
			}
		}
		break;
    29f4:	51 c0       	rjmp	.+162    	; 0x2a98 <Gpio_LowerNibbleDirection+0x126>
		case MYPORTB :
		{
			switch(direction)
			{
				case SET_IN :
				DDR_B &= 0xf0;
    29f6:	87 e3       	ldi	r24, 0x37	; 55
    29f8:	90 e0       	ldi	r25, 0x00	; 0
    29fa:	27 e3       	ldi	r18, 0x37	; 55
    29fc:	30 e0       	ldi	r19, 0x00	; 0
    29fe:	f9 01       	movw	r30, r18
    2a00:	20 81       	ld	r18, Z
    2a02:	20 7f       	andi	r18, 0xF0	; 240
    2a04:	fc 01       	movw	r30, r24
    2a06:	20 83       	st	Z, r18
				break;
    2a08:	0a c0       	rjmp	.+20     	; 0x2a1e <Gpio_LowerNibbleDirection+0xac>
				case SET_OUT :
				DDR_B |= 0x0f;
    2a0a:	87 e3       	ldi	r24, 0x37	; 55
    2a0c:	90 e0       	ldi	r25, 0x00	; 0
    2a0e:	27 e3       	ldi	r18, 0x37	; 55
    2a10:	30 e0       	ldi	r19, 0x00	; 0
    2a12:	f9 01       	movw	r30, r18
    2a14:	20 81       	ld	r18, Z
    2a16:	2f 60       	ori	r18, 0x0F	; 15
    2a18:	fc 01       	movw	r30, r24
    2a1a:	20 83       	st	Z, r18
				break;
    2a1c:	00 00       	nop
			}
		}
		break;
    2a1e:	3c c0       	rjmp	.+120    	; 0x2a98 <Gpio_LowerNibbleDirection+0x126>
		case MYPORTC :
		{
			switch(direction)
    2a20:	8a 81       	ldd	r24, Y+2	; 0x02
    2a22:	88 2f       	mov	r24, r24
    2a24:	90 e0       	ldi	r25, 0x00	; 0
    2a26:	00 97       	sbiw	r24, 0x00	; 0
    2a28:	21 f0       	breq	.+8      	; 0x2a32 <Gpio_LowerNibbleDirection+0xc0>
    2a2a:	8f 3f       	cpi	r24, 0xFF	; 255
    2a2c:	91 05       	cpc	r25, r1
    2a2e:	59 f0       	breq	.+22     	; 0x2a46 <Gpio_LowerNibbleDirection+0xd4>
				case SET_OUT :
				DDR_C |= 0x0f;
				break;
			}
		}
		break;
    2a30:	33 c0       	rjmp	.+102    	; 0x2a98 <Gpio_LowerNibbleDirection+0x126>
		case MYPORTC :
		{
			switch(direction)
			{
				case SET_IN :
				DDR_C &= 0xf0;
    2a32:	84 e3       	ldi	r24, 0x34	; 52
    2a34:	90 e0       	ldi	r25, 0x00	; 0
    2a36:	24 e3       	ldi	r18, 0x34	; 52
    2a38:	30 e0       	ldi	r19, 0x00	; 0
    2a3a:	f9 01       	movw	r30, r18
    2a3c:	20 81       	ld	r18, Z
    2a3e:	20 7f       	andi	r18, 0xF0	; 240
    2a40:	fc 01       	movw	r30, r24
    2a42:	20 83       	st	Z, r18
				break;
    2a44:	0a c0       	rjmp	.+20     	; 0x2a5a <Gpio_LowerNibbleDirection+0xe8>
				case SET_OUT :
				DDR_C |= 0x0f;
    2a46:	84 e3       	ldi	r24, 0x34	; 52
    2a48:	90 e0       	ldi	r25, 0x00	; 0
    2a4a:	24 e3       	ldi	r18, 0x34	; 52
    2a4c:	30 e0       	ldi	r19, 0x00	; 0
    2a4e:	f9 01       	movw	r30, r18
    2a50:	20 81       	ld	r18, Z
    2a52:	2f 60       	ori	r18, 0x0F	; 15
    2a54:	fc 01       	movw	r30, r24
    2a56:	20 83       	st	Z, r18
				break;
    2a58:	00 00       	nop
			}
		}
		break;
    2a5a:	1e c0       	rjmp	.+60     	; 0x2a98 <Gpio_LowerNibbleDirection+0x126>
		case MYPORTD :
		{
			switch(direction)
    2a5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a5e:	88 2f       	mov	r24, r24
    2a60:	90 e0       	ldi	r25, 0x00	; 0
    2a62:	00 97       	sbiw	r24, 0x00	; 0
    2a64:	21 f0       	breq	.+8      	; 0x2a6e <Gpio_LowerNibbleDirection+0xfc>
    2a66:	8f 3f       	cpi	r24, 0xFF	; 255
    2a68:	91 05       	cpc	r25, r1
    2a6a:	59 f0       	breq	.+22     	; 0x2a82 <Gpio_LowerNibbleDirection+0x110>
				case SET_OUT :
				DDR_D |= 0x0f;
				break;
			}
		}
		break;
    2a6c:	14 c0       	rjmp	.+40     	; 0x2a96 <Gpio_LowerNibbleDirection+0x124>
		case MYPORTD :
		{
			switch(direction)
			{
				case SET_IN :
				DDR_D &= 0xf0;
    2a6e:	81 e3       	ldi	r24, 0x31	; 49
    2a70:	90 e0       	ldi	r25, 0x00	; 0
    2a72:	21 e3       	ldi	r18, 0x31	; 49
    2a74:	30 e0       	ldi	r19, 0x00	; 0
    2a76:	f9 01       	movw	r30, r18
    2a78:	20 81       	ld	r18, Z
    2a7a:	20 7f       	andi	r18, 0xF0	; 240
    2a7c:	fc 01       	movw	r30, r24
    2a7e:	20 83       	st	Z, r18
				break;
    2a80:	0a c0       	rjmp	.+20     	; 0x2a96 <Gpio_LowerNibbleDirection+0x124>
				case SET_OUT :
				DDR_D |= 0x0f;
    2a82:	81 e3       	ldi	r24, 0x31	; 49
    2a84:	90 e0       	ldi	r25, 0x00	; 0
    2a86:	21 e3       	ldi	r18, 0x31	; 49
    2a88:	30 e0       	ldi	r19, 0x00	; 0
    2a8a:	f9 01       	movw	r30, r18
    2a8c:	20 81       	ld	r18, Z
    2a8e:	2f 60       	ori	r18, 0x0F	; 15
    2a90:	fc 01       	movw	r30, r24
    2a92:	20 83       	st	Z, r18
				break;
    2a94:	00 00       	nop
			}
		}
		break;
    2a96:	00 00       	nop
	}
}
    2a98:	00 00       	nop
    2a9a:	0f 90       	pop	r0
    2a9c:	0f 90       	pop	r0
    2a9e:	df 91       	pop	r29
    2aa0:	cf 91       	pop	r28
    2aa2:	08 95       	ret

00002aa4 <Gpio_LowerNibbleWrite>:
 * @param port : the port that includes the LowerNibble {MYPORTA,MYPORTB,MYPORTC,MYPORTD}
 * @param value : The value of the LowerNibble
 * Return : void
 */
void Gpio_LowerNibbleWrite(uint8 port, uint8 value)
{
    2aa4:	cf 93       	push	r28
    2aa6:	df 93       	push	r29
    2aa8:	00 d0       	rcall	.+0      	; 0x2aaa <Gpio_LowerNibbleWrite+0x6>
    2aaa:	cd b7       	in	r28, 0x3d	; 61
    2aac:	de b7       	in	r29, 0x3e	; 62
    2aae:	89 83       	std	Y+1, r24	; 0x01
    2ab0:	6a 83       	std	Y+2, r22	; 0x02
	switch(port)
    2ab2:	89 81       	ldd	r24, Y+1	; 0x01
    2ab4:	88 2f       	mov	r24, r24
    2ab6:	90 e0       	ldi	r25, 0x00	; 0
    2ab8:	81 30       	cpi	r24, 0x01	; 1
    2aba:	91 05       	cpc	r25, r1
    2abc:	d1 f0       	breq	.+52     	; 0x2af2 <Gpio_LowerNibbleWrite+0x4e>
    2abe:	82 30       	cpi	r24, 0x02	; 2
    2ac0:	91 05       	cpc	r25, r1
    2ac2:	1c f4       	brge	.+6      	; 0x2aca <Gpio_LowerNibbleWrite+0x26>
    2ac4:	89 2b       	or	r24, r25
    2ac6:	39 f0       	breq	.+14     	; 0x2ad6 <Gpio_LowerNibbleWrite+0x32>
		break;
		case MYPORTD :
		PORT_D = (PORT_D & 0xf0) | (value & 0x0f);
		break;
	}
}
    2ac8:	3e c0       	rjmp	.+124    	; 0x2b46 <Gpio_LowerNibbleWrite+0xa2>
 * @param value : The value of the LowerNibble
 * Return : void
 */
void Gpio_LowerNibbleWrite(uint8 port, uint8 value)
{
	switch(port)
    2aca:	82 30       	cpi	r24, 0x02	; 2
    2acc:	91 05       	cpc	r25, r1
    2ace:	f9 f0       	breq	.+62     	; 0x2b0e <Gpio_LowerNibbleWrite+0x6a>
    2ad0:	03 97       	sbiw	r24, 0x03	; 3
    2ad2:	59 f1       	breq	.+86     	; 0x2b2a <Gpio_LowerNibbleWrite+0x86>
		break;
		case MYPORTD :
		PORT_D = (PORT_D & 0xf0) | (value & 0x0f);
		break;
	}
}
    2ad4:	38 c0       	rjmp	.+112    	; 0x2b46 <Gpio_LowerNibbleWrite+0xa2>
void Gpio_LowerNibbleWrite(uint8 port, uint8 value)
{
	switch(port)
	{
		case MYPORTA :
		PORT_A = (PORT_A & 0xf0) | (value & 0x0f);
    2ad6:	8b e3       	ldi	r24, 0x3B	; 59
    2ad8:	90 e0       	ldi	r25, 0x00	; 0
    2ada:	2b e3       	ldi	r18, 0x3B	; 59
    2adc:	30 e0       	ldi	r19, 0x00	; 0
    2ade:	f9 01       	movw	r30, r18
    2ae0:	20 81       	ld	r18, Z
    2ae2:	32 2f       	mov	r19, r18
    2ae4:	30 7f       	andi	r19, 0xF0	; 240
    2ae6:	2a 81       	ldd	r18, Y+2	; 0x02
    2ae8:	2f 70       	andi	r18, 0x0F	; 15
    2aea:	23 2b       	or	r18, r19
    2aec:	fc 01       	movw	r30, r24
    2aee:	20 83       	st	Z, r18
		break;
    2af0:	2a c0       	rjmp	.+84     	; 0x2b46 <Gpio_LowerNibbleWrite+0xa2>
		case MYPORTB :
		PORT_B = (PORT_B & 0xf0) | (value & 0x0f);
    2af2:	88 e3       	ldi	r24, 0x38	; 56
    2af4:	90 e0       	ldi	r25, 0x00	; 0
    2af6:	28 e3       	ldi	r18, 0x38	; 56
    2af8:	30 e0       	ldi	r19, 0x00	; 0
    2afa:	f9 01       	movw	r30, r18
    2afc:	20 81       	ld	r18, Z
    2afe:	32 2f       	mov	r19, r18
    2b00:	30 7f       	andi	r19, 0xF0	; 240
    2b02:	2a 81       	ldd	r18, Y+2	; 0x02
    2b04:	2f 70       	andi	r18, 0x0F	; 15
    2b06:	23 2b       	or	r18, r19
    2b08:	fc 01       	movw	r30, r24
    2b0a:	20 83       	st	Z, r18
		break;
    2b0c:	1c c0       	rjmp	.+56     	; 0x2b46 <Gpio_LowerNibbleWrite+0xa2>
		case MYPORTC :
		PORT_C = (PORT_C & 0xf0) | (value & 0x0f);
    2b0e:	85 e3       	ldi	r24, 0x35	; 53
    2b10:	90 e0       	ldi	r25, 0x00	; 0
    2b12:	25 e3       	ldi	r18, 0x35	; 53
    2b14:	30 e0       	ldi	r19, 0x00	; 0
    2b16:	f9 01       	movw	r30, r18
    2b18:	20 81       	ld	r18, Z
    2b1a:	32 2f       	mov	r19, r18
    2b1c:	30 7f       	andi	r19, 0xF0	; 240
    2b1e:	2a 81       	ldd	r18, Y+2	; 0x02
    2b20:	2f 70       	andi	r18, 0x0F	; 15
    2b22:	23 2b       	or	r18, r19
    2b24:	fc 01       	movw	r30, r24
    2b26:	20 83       	st	Z, r18
		break;
    2b28:	0e c0       	rjmp	.+28     	; 0x2b46 <Gpio_LowerNibbleWrite+0xa2>
		case MYPORTD :
		PORT_D = (PORT_D & 0xf0) | (value & 0x0f);
    2b2a:	82 e3       	ldi	r24, 0x32	; 50
    2b2c:	90 e0       	ldi	r25, 0x00	; 0
    2b2e:	22 e3       	ldi	r18, 0x32	; 50
    2b30:	30 e0       	ldi	r19, 0x00	; 0
    2b32:	f9 01       	movw	r30, r18
    2b34:	20 81       	ld	r18, Z
    2b36:	32 2f       	mov	r19, r18
    2b38:	30 7f       	andi	r19, 0xF0	; 240
    2b3a:	2a 81       	ldd	r18, Y+2	; 0x02
    2b3c:	2f 70       	andi	r18, 0x0F	; 15
    2b3e:	23 2b       	or	r18, r19
    2b40:	fc 01       	movw	r30, r24
    2b42:	20 83       	st	Z, r18
		break;
    2b44:	00 00       	nop
	}
}
    2b46:	00 00       	nop
    2b48:	0f 90       	pop	r0
    2b4a:	0f 90       	pop	r0
    2b4c:	df 91       	pop	r29
    2b4e:	cf 91       	pop	r28
    2b50:	08 95       	ret

00002b52 <_exit>:
    2b52:	f8 94       	cli

00002b54 <__stop_program>:
    2b54:	ff cf       	rjmp	.-2      	; 0x2b54 <__stop_program>
