
Sprint1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b0c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005e  00800060  00002b0c  00002ba0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000661  008000be  008000be  00002bfe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002bfe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002c30  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000488  00000000  00000000  00002c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000033b5  00000000  00000000  000030f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001044  00000000  00000000  000064a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003553  00000000  00000000  000074ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000f30  00000000  00000000  0000aa40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000185b  00000000  00000000  0000b970  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001f29  00000000  00000000  0000d1cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003c8  00000000  00000000  0000f0f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 79 0b 	jmp	0x16f2	; 0x16f2 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e0       	ldi	r30, 0x0C	; 12
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ae 3b       	cpi	r26, 0xBE	; 190
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	27 e0       	ldi	r18, 0x07	; 7
      78:	ae eb       	ldi	r26, 0xBE	; 190
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 31       	cpi	r26, 0x1F	; 31
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d5 01 	call	0x3aa	; 0x3aa <main>
      8a:	0c 94 84 15 	jmp	0x2b08	; 0x2b08 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Init_Task>:
 * Description: This Task is used to Init the System
 * @param port : input parameter to the Task
 * Return : void
 */
void Init_Task(void* pvParameters)
{
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	00 d0       	rcall	.+0      	; 0x98 <Init_Task+0x6>
      98:	cd b7       	in	r28, 0x3d	; 61
      9a:	de b7       	in	r29, 0x3e	; 62
      9c:	9a 83       	std	Y+2, r25	; 0x02
      9e:	89 83       	std	Y+1, r24	; 0x01
	/* AtMaskCarriert to create the event group. */
    xCreatedEventGroup = xEventGroupCreate();
      a0:	0e 94 a8 04 	call	0x950	; 0x950 <xEventGroupCreate>
      a4:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <xCreatedEventGroup+0x1>
      a8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <xCreatedEventGroup>
    {
        /* The event group was created. */
    }
	
	/* Suspend all other tasks before initializing */
	vTaskSuspend(Display_Handle);
      ac:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <Display_Handle>
      b0:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <Display_Handle+0x1>
      b4:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <vTaskSuspend>
	vTaskSuspend(PB0_Handle);
      b8:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <PB0_Handle>
      bc:	90 91 c3 00 	lds	r25, 0x00C3	; 0x8000c3 <PB0_Handle+0x1>
      c0:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <vTaskSuspend>
	
	/* initializing the Leds */
	Led_Init(LED0);
      c4:	80 e1       	ldi	r24, 0x10	; 16
      c6:	0e 94 7d 03 	call	0x6fa	; 0x6fa <Led_Init>
	Led_Init(LED1);
      ca:	80 e2       	ldi	r24, 0x20	; 32
      cc:	0e 94 7d 03 	call	0x6fa	; 0x6fa <Led_Init>
	Led_Init(LED2);
      d0:	80 e4       	ldi	r24, 0x40	; 64
      d2:	0e 94 7d 03 	call	0x6fa	; 0x6fa <Led_Init>
	
	/* initializing the pushButtons */
	pushButton_Init(PUSH_BUTTON0);
      d6:	80 e1       	ldi	r24, 0x10	; 16
      d8:	90 e0       	ldi	r25, 0x00	; 0
      da:	0e 94 33 04 	call	0x866	; 0x866 <pushButton_Init>
	
	/* initializing the Seven Segment */
	SSD_Init_BCD(ssd1);
      de:	80 e0       	ldi	r24, 0x00	; 0
      e0:	0e 94 45 04 	call	0x88a	; 0x88a <SSD_Init_BCD>
	
	/* initializing the LCD */
	LCD_Init();
      e4:	0e 94 91 02 	call	0x522	; 0x522 <LCD_Init>

	/* Resume all other tasks before initializing */
	vTaskResume(Display_Handle);
      e8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <Display_Handle>
      ec:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <Display_Handle+0x1>
      f0:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <vTaskResume>
	vTaskResume(PB0_Handle);
      f4:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <PB0_Handle>
      f8:	90 91 c3 00 	lds	r25, 0x00C3	; 0x8000c3 <PB0_Handle+0x1>
      fc:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <vTaskResume>

	/* Suspend the Init Task */
	vTaskSuspend(Init_Task_Handle);
     100:	80 91 be 00 	lds	r24, 0x00BE	; 0x8000be <__data_end>
     104:	90 91 bf 00 	lds	r25, 0x00BF	; 0x8000bf <__data_end+0x1>
     108:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <vTaskSuspend>
	
	while(TRUE){}
     10c:	ff cf       	rjmp	.-2      	; 0x10c <Init_Task+0x7a>

0000010e <Display_Task>:
 * Description: This Task is used to Display String of Characters on the LCD
 * @param port : input parameter to the Task
 * Return : void
 */
void Display_Task(void* pvParameters)
{
     10e:	0f 93       	push	r16
     110:	1f 93       	push	r17
     112:	cf 93       	push	r28
     114:	df 93       	push	r29
     116:	cd b7       	in	r28, 0x3d	; 61
     118:	de b7       	in	r29, 0x3e	; 62
     11a:	65 97       	sbiw	r28, 0x15	; 21
     11c:	0f b6       	in	r0, 0x3f	; 63
     11e:	f8 94       	cli
     120:	de bf       	out	0x3e, r29	; 62
     122:	0f be       	out	0x3f, r0	; 63
     124:	cd bf       	out	0x3d, r28	; 61
     126:	9d 8b       	std	Y+21, r25	; 0x15
     128:	8c 8b       	std	Y+20, r24	; 0x14
	uint8 row = FIRST_ROW,col = FIRST_COLUMN;
     12a:	1d 82       	std	Y+5, r1	; 0x05
     12c:	19 82       	std	Y+1, r1	; 0x01
	uint8 Number_Passward[ARRAY_SIZE]		= {1,2,3,3,2};
     12e:	85 e0       	ldi	r24, 0x05	; 5
     130:	ea e8       	ldi	r30, 0x8A	; 138
     132:	f0 e0       	ldi	r31, 0x00	; 0
     134:	de 01       	movw	r26, r28
     136:	1a 96       	adiw	r26, 0x0a	; 10
     138:	01 90       	ld	r0, Z+
     13a:	0d 92       	st	X+, r0
     13c:	8a 95       	dec	r24
     13e:	e1 f7       	brne	.-8      	; 0x138 <Display_Task+0x2a>
	uint8 Number_LCD[ARRAY_SIZE]			= {INITIAL_ZERO};
     140:	25 e0       	ldi	r18, 0x05	; 5
     142:	ce 01       	movw	r24, r28
     144:	0f 96       	adiw	r24, 0x0f	; 15
     146:	fc 01       	movw	r30, r24
     148:	32 2f       	mov	r19, r18
     14a:	11 92       	st	Z+, r1
     14c:	3a 95       	dec	r19
     14e:	e9 f7       	brne	.-6      	; 0x14a <Display_Task+0x3c>
	uint8 Number_Index						= INITIAL_ZERO;
     150:	1a 82       	std	Y+2, r1	; 0x02
	uint8 Number_SSD						= INITIAL_ZERO;
     152:	1b 82       	std	Y+3, r1	; 0x03
	uint8 Success_Password					= FALSE;	
     154:	1c 82       	std	Y+4, r1	; 0x04
	EventBits_t uxBits						= FALSE;
     156:	1f 82       	std	Y+7, r1	; 0x07
     158:	1e 82       	std	Y+6, r1	; 0x06
	const TickType_t xTicksToWait			= TICK_TO_WAIT / portTICK_PERIOD_MS;
     15a:	84 e6       	ldi	r24, 0x64	; 100
     15c:	90 e0       	ldi	r25, 0x00	; 0
     15e:	99 87       	std	Y+9, r25	; 0x09
     160:	88 87       	std	Y+8, r24	; 0x08

	while(TRUE)
	{
		/* Wait a maximum of 100ms for either bit 0 or bit 4 to be set within
		the event group.  Clear the bits before exiting. */
		uxBits = xEventGroupWaitBits(
     162:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <xCreatedEventGroup>
     166:	90 91 c5 00 	lds	r25, 0x00C5	; 0x8000c5 <xCreatedEventGroup+0x1>
     16a:	28 85       	ldd	r18, Y+8	; 0x08
     16c:	39 85       	ldd	r19, Y+9	; 0x09
     16e:	89 01       	movw	r16, r18
     170:	20 e0       	ldi	r18, 0x00	; 0
     172:	41 e0       	ldi	r20, 0x01	; 1
     174:	67 e0       	ldi	r22, 0x07	; 7
     176:	70 e0       	ldi	r23, 0x00	; 0
     178:	0e 94 c8 04 	call	0x990	; 0x990 <xEventGroupWaitBits>
     17c:	9f 83       	std	Y+7, r25	; 0x07
     17e:	8e 83       	std	Y+6, r24	; 0x06
				( BIT0 | BIT1 | BIT2 ),	/* The bits within the event group to wait for. */
				pdTRUE,					/* BITs should be cleared before returning. */
				pdFALSE,			    /* Don't wait for both bits, either bit will do. */
				xTicksToWait );		    /* Wait a maximum of 100ms for either bit to be set. */
		
		if( ( uxBits & (BIT2 | BIT1 | BIT0 ) ) == (BIT2 | BIT1 | BIT0 ) )
     180:	8e 81       	ldd	r24, Y+6	; 0x06
     182:	9f 81       	ldd	r25, Y+7	; 0x07
     184:	87 70       	andi	r24, 0x07	; 7
     186:	99 27       	eor	r25, r25
     188:	07 97       	sbiw	r24, 0x07	; 7
     18a:	09 f0       	breq	.+2      	; 0x18e <Display_Task+0x80>
     18c:	5c c0       	rjmp	.+184    	; 0x246 <Display_Task+0x138>
		{
			for(Number_Index = INITIAL_ZERO ; Number_Index < ARRAY_SIZE ; Number_Index++)
     18e:	1a 82       	std	Y+2, r1	; 0x02
     190:	1e c0       	rjmp	.+60     	; 0x1ce <Display_Task+0xc0>
			{
				if (Number_LCD[Number_Index] == Number_Passward[Number_Index])
     192:	8a 81       	ldd	r24, Y+2	; 0x02
     194:	88 2f       	mov	r24, r24
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	9e 01       	movw	r18, r28
     19a:	21 5f       	subi	r18, 0xF1	; 241
     19c:	3f 4f       	sbci	r19, 0xFF	; 255
     19e:	82 0f       	add	r24, r18
     1a0:	93 1f       	adc	r25, r19
     1a2:	fc 01       	movw	r30, r24
     1a4:	40 81       	ld	r20, Z
     1a6:	8a 81       	ldd	r24, Y+2	; 0x02
     1a8:	88 2f       	mov	r24, r24
     1aa:	90 e0       	ldi	r25, 0x00	; 0
     1ac:	9e 01       	movw	r18, r28
     1ae:	26 5f       	subi	r18, 0xF6	; 246
     1b0:	3f 4f       	sbci	r19, 0xFF	; 255
     1b2:	82 0f       	add	r24, r18
     1b4:	93 1f       	adc	r25, r19
     1b6:	fc 01       	movw	r30, r24
     1b8:	80 81       	ld	r24, Z
     1ba:	48 17       	cp	r20, r24
     1bc:	19 f4       	brne	.+6      	; 0x1c4 <Display_Task+0xb6>
				{
					Success_Password = TRUE;
     1be:	81 e0       	ldi	r24, 0x01	; 1
     1c0:	8c 83       	std	Y+4, r24	; 0x04
     1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <Display_Task+0xba>
				}
				else
				{
					Success_Password = FALSE;
     1c4:	1c 82       	std	Y+4, r1	; 0x04
					break;
     1c6:	06 c0       	rjmp	.+12     	; 0x1d4 <Display_Task+0xc6>
				pdFALSE,			    /* Don't wait for both bits, either bit will do. */
				xTicksToWait );		    /* Wait a maximum of 100ms for either bit to be set. */
		
		if( ( uxBits & (BIT2 | BIT1 | BIT0 ) ) == (BIT2 | BIT1 | BIT0 ) )
		{
			for(Number_Index = INITIAL_ZERO ; Number_Index < ARRAY_SIZE ; Number_Index++)
     1c8:	8a 81       	ldd	r24, Y+2	; 0x02
     1ca:	8f 5f       	subi	r24, 0xFF	; 255
     1cc:	8a 83       	std	Y+2, r24	; 0x02
     1ce:	8a 81       	ldd	r24, Y+2	; 0x02
     1d0:	85 30       	cpi	r24, 0x05	; 5
     1d2:	f8 f2       	brcs	.-66     	; 0x192 <Display_Task+0x84>
				{
					Success_Password = FALSE;
					break;
				}
			}
			if (Success_Password)
     1d4:	8c 81       	ldd	r24, Y+4	; 0x04
     1d6:	88 23       	and	r24, r24
     1d8:	a9 f0       	breq	.+42     	; 0x204 <Display_Task+0xf6>
			{
				LCD_GotoRowColumn(FIRST_ROW,FIRST_COLUMN);
     1da:	60 e0       	ldi	r22, 0x00	; 0
     1dc:	80 e0       	ldi	r24, 0x00	; 0
     1de:	0e 94 66 03 	call	0x6cc	; 0x6cc <LCD_GotoRowColumn>
				LCD_DisplayString("Correct Password!!!");
     1e2:	80 e6       	ldi	r24, 0x60	; 96
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	0e 94 2d 03 	call	0x65a	; 0x65a <LCD_DisplayString>
				Led_On(LED0);
     1ea:	80 e1       	ldi	r24, 0x10	; 16
     1ec:	0e 94 c7 03 	call	0x78e	; 0x78e <Led_On>
				vTaskDelay(TASK_DELAY_CORRECT_ENTER_VALUE);
     1f0:	80 ed       	ldi	r24, 0xD0	; 208
     1f2:	97 e0       	ldi	r25, 0x07	; 7
     1f4:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <vTaskDelay>
				Led_Off(LED0);
     1f8:	80 e1       	ldi	r24, 0x10	; 16
     1fa:	0e 94 fd 03 	call	0x7fa	; 0x7fa <Led_Off>
				LCD_Clear();
     1fe:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <LCD_Clear>
     202:	14 c0       	rjmp	.+40     	; 0x22c <Display_Task+0x11e>
			}
			else
			{
				LCD_GotoRowColumn(FIRST_ROW,FIRST_COLUMN);
     204:	60 e0       	ldi	r22, 0x00	; 0
     206:	80 e0       	ldi	r24, 0x00	; 0
     208:	0e 94 66 03 	call	0x6cc	; 0x6cc <LCD_GotoRowColumn>
				LCD_DisplayString("Incorrect Password!!!");
     20c:	84 e7       	ldi	r24, 0x74	; 116
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	0e 94 2d 03 	call	0x65a	; 0x65a <LCD_DisplayString>
				Led_On(LED1);
     214:	80 e2       	ldi	r24, 0x20	; 32
     216:	0e 94 c7 03 	call	0x78e	; 0x78e <Led_On>

				vTaskDelay(TASK_DELAY_INCORRECT_ENTER_VALUE);
     21a:	88 eb       	ldi	r24, 0xB8	; 184
     21c:	9b e0       	ldi	r25, 0x0B	; 11
     21e:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <vTaskDelay>
				Led_Off(LED1);
     222:	80 e2       	ldi	r24, 0x20	; 32
     224:	0e 94 fd 03 	call	0x7fa	; 0x7fa <Led_Off>
				LCD_Clear();
     228:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <LCD_Clear>
			}
			
			uxBits = xEventGroupClearBits(
     22c:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <xCreatedEventGroup>
     230:	90 91 c5 00 	lds	r25, 0x00C5	; 0x8000c5 <xCreatedEventGroup+0x1>
     234:	64 e0       	ldi	r22, 0x04	; 4
     236:	70 e0       	ldi	r23, 0x00	; 0
     238:	0e 94 91 05 	call	0xb22	; 0xb22 <xEventGroupClearBits>
     23c:	9f 83       	std	Y+7, r25	; 0x07
     23e:	8e 83       	std	Y+6, r24	; 0x06
			xCreatedEventGroup,		 /* The event group being updated. */
			BIT2);
			uxBits = FALSE;					/* The bits being cleared. */
     240:	1f 82       	std	Y+7, r1	; 0x07
     242:	1e 82       	std	Y+6, r1	; 0x06
     244:	4d c0       	rjmp	.+154    	; 0x2e0 <Display_Task+0x1d2>
		}
		else if( ( uxBits & ( BIT0 | BIT1 ) ) == ( BIT0 | BIT1 ) )
     246:	8e 81       	ldd	r24, Y+6	; 0x06
     248:	9f 81       	ldd	r25, Y+7	; 0x07
     24a:	83 70       	andi	r24, 0x03	; 3
     24c:	99 27       	eor	r25, r25
     24e:	03 97       	sbiw	r24, 0x03	; 3
     250:	49 f5       	brne	.+82     	; 0x2a4 <Display_Task+0x196>
		{
			/* Display the Number to the LCD */
			LCD_GotoRowColumn(row,col++);
     252:	89 81       	ldd	r24, Y+1	; 0x01
     254:	91 e0       	ldi	r25, 0x01	; 1
     256:	98 0f       	add	r25, r24
     258:	99 83       	std	Y+1, r25	; 0x01
     25a:	68 2f       	mov	r22, r24
     25c:	8d 81       	ldd	r24, Y+5	; 0x05
     25e:	0e 94 66 03 	call	0x6cc	; 0x6cc <LCD_GotoRowColumn>
			LCD_DisplayChar(Number_SSD+NUMBER_TO_CHAR);
     262:	8b 81       	ldd	r24, Y+3	; 0x03
     264:	80 5d       	subi	r24, 0xD0	; 208
     266:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_DisplayChar>
			
			/* Set the Number to the Array to check later */
			Number_LCD[Number_Index] = Number_SSD;
     26a:	8a 81       	ldd	r24, Y+2	; 0x02
     26c:	88 2f       	mov	r24, r24
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	9e 01       	movw	r18, r28
     272:	21 5f       	subi	r18, 0xF1	; 241
     274:	3f 4f       	sbci	r19, 0xFF	; 255
     276:	82 0f       	add	r24, r18
     278:	93 1f       	adc	r25, r19
     27a:	2b 81       	ldd	r18, Y+3	; 0x03
     27c:	fc 01       	movw	r30, r24
     27e:	20 83       	st	Z, r18
			Number_Index++;
     280:	8a 81       	ldd	r24, Y+2	; 0x02
     282:	8f 5f       	subi	r24, 0xFF	; 255
     284:	8a 83       	std	Y+2, r24	; 0x02
			
			/* Display the Number Zero to the SSD */
			Number_SSD = INITIAL_ZERO;
     286:	1b 82       	std	Y+3, r1	; 0x03
			SSD_Display_BCD(Number_SSD);
     288:	8b 81       	ldd	r24, Y+3	; 0x03
     28a:	0e 94 95 04 	call	0x92a	; 0x92a <SSD_Display_BCD>
			
			/* Clear the Bits 0 and 1 */
			uxBits = xEventGroupClearBits(
     28e:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <xCreatedEventGroup>
     292:	90 91 c5 00 	lds	r25, 0x00C5	; 0x8000c5 <xCreatedEventGroup+0x1>
     296:	63 e0       	ldi	r22, 0x03	; 3
     298:	70 e0       	ldi	r23, 0x00	; 0
     29a:	0e 94 91 05 	call	0xb22	; 0xb22 <xEventGroupClearBits>
     29e:	9f 83       	std	Y+7, r25	; 0x07
     2a0:	8e 83       	std	Y+6, r24	; 0x06
     2a2:	1e c0       	rjmp	.+60     	; 0x2e0 <Display_Task+0x1d2>
			xCreatedEventGroup,			/* The event group being updated. */
			( BIT0 | BIT1 ));			/* The bits being cleared. */
		}
		else if( ( uxBits & BIT0 ) == BIT0)
     2a4:	8e 81       	ldd	r24, Y+6	; 0x06
     2a6:	9f 81       	ldd	r25, Y+7	; 0x07
     2a8:	81 70       	andi	r24, 0x01	; 1
     2aa:	99 27       	eor	r25, r25
     2ac:	89 2b       	or	r24, r25
     2ae:	c1 f0       	breq	.+48     	; 0x2e0 <Display_Task+0x1d2>
		{
			/* xEventGroupWaitBits() returned because just BIT_0 was set. */
			Number_SSD++;
     2b0:	8b 81       	ldd	r24, Y+3	; 0x03
     2b2:	8f 5f       	subi	r24, 0xFF	; 255
     2b4:	8b 83       	std	Y+3, r24	; 0x03
			if (Number_SSD < MAX_SSD_NUMBER)
     2b6:	8b 81       	ldd	r24, Y+3	; 0x03
     2b8:	8a 30       	cpi	r24, 0x0A	; 10
     2ba:	20 f4       	brcc	.+8      	; 0x2c4 <Display_Task+0x1b6>
			{
				SSD_Display_BCD(Number_SSD);
     2bc:	8b 81       	ldd	r24, Y+3	; 0x03
     2be:	0e 94 95 04 	call	0x92a	; 0x92a <SSD_Display_BCD>
     2c2:	04 c0       	rjmp	.+8      	; 0x2cc <Display_Task+0x1be>
			}
			else
			{
				Number_SSD = INITIAL_ZERO;
     2c4:	1b 82       	std	Y+3, r1	; 0x03
				SSD_Display_BCD(Number_SSD);
     2c6:	8b 81       	ldd	r24, Y+3	; 0x03
     2c8:	0e 94 95 04 	call	0x92a	; 0x92a <SSD_Display_BCD>
			}
			/* Clear bit 0 and bit 4 in xEventGroup. */
			uxBits = xEventGroupClearBits(
     2cc:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <xCreatedEventGroup>
     2d0:	90 91 c5 00 	lds	r25, 0x00C5	; 0x8000c5 <xCreatedEventGroup+0x1>
     2d4:	61 e0       	ldi	r22, 0x01	; 1
     2d6:	70 e0       	ldi	r23, 0x00	; 0
     2d8:	0e 94 91 05 	call	0xb22	; 0xb22 <xEventGroupClearBits>
     2dc:	9f 83       	std	Y+7, r25	; 0x07
     2de:	8e 83       	std	Y+6, r24	; 0x06
		} 
		else
		{
			//Do Nothing
		}
		uxBits = FALSE;
     2e0:	1f 82       	std	Y+7, r1	; 0x07
     2e2:	1e 82       	std	Y+6, r1	; 0x06
		vTaskDelay(TASK_DELAY_DISPLAY_VALUE);
     2e4:	84 e6       	ldi	r24, 0x64	; 100
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <vTaskDelay>
	}
     2ec:	3a cf       	rjmp	.-396    	; 0x162 <Display_Task+0x54>

000002ee <PB0_Task>:
 * Description: This Task is used to Check for the Switch 0 
 * @param port : input parameter to the Task 
 * Return : void
 */
void PB0_Task(void* pvParameters)
{	
     2ee:	cf 93       	push	r28
     2f0:	df 93       	push	r29
     2f2:	00 d0       	rcall	.+0      	; 0x2f4 <PB0_Task+0x6>
     2f4:	00 d0       	rcall	.+0      	; 0x2f6 <PB0_Task+0x8>
     2f6:	1f 92       	push	r1
     2f8:	cd b7       	in	r28, 0x3d	; 61
     2fa:	de b7       	in	r29, 0x3e	; 62
     2fc:	9d 83       	std	Y+5, r25	; 0x05
     2fe:	8c 83       	std	Y+4, r24	; 0x04
	EventBits_t uxBits	= FALSE;
     300:	1b 82       	std	Y+3, r1	; 0x03
     302:	1a 82       	std	Y+2, r1	; 0x02
	uint8 MaskCarrier	= FALSE;
     304:	19 82       	std	Y+1, r1	; 0x01
	
	while(TRUE)
	{
		if(Gpio_PinRead(PUSH_BUTTON0_PORT,PUSH_BUTTON0_PIN))
     306:	64 e0       	ldi	r22, 0x04	; 4
     308:	82 e0       	ldi	r24, 0x02	; 2
     30a:	0e 94 2e 14 	call	0x285c	; 0x285c <Gpio_PinRead>
     30e:	88 23       	and	r24, r24
     310:	09 f4       	brne	.+2      	; 0x314 <PB0_Task+0x26>
     312:	45 c0       	rjmp	.+138    	; 0x39e <PB0_Task+0xb0>
		{
			Led_On(LED0);
     314:	80 e1       	ldi	r24, 0x10	; 16
     316:	0e 94 c7 03 	call	0x78e	; 0x78e <Led_On>
			MaskCarrier |= BIT0;
     31a:	89 81       	ldd	r24, Y+1	; 0x01
     31c:	81 60       	ori	r24, 0x01	; 1
     31e:	89 83       	std	Y+1, r24	; 0x01
			vTaskDelay(TASK_DELAY_LONG_PRESSING_VALUE);
     320:	88 ee       	ldi	r24, 0xE8	; 232
     322:	93 e0       	ldi	r25, 0x03	; 3
     324:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <vTaskDelay>
			if(Gpio_PinRead(PUSH_BUTTON0_PORT,PUSH_BUTTON0_PIN))
     328:	64 e0       	ldi	r22, 0x04	; 4
     32a:	82 e0       	ldi	r24, 0x02	; 2
     32c:	0e 94 2e 14 	call	0x285c	; 0x285c <Gpio_PinRead>
     330:	88 23       	and	r24, r24
     332:	e1 f0       	breq	.+56     	; 0x36c <PB0_Task+0x7e>
			{
				Led_Off(LED0);
     334:	80 e1       	ldi	r24, 0x10	; 16
     336:	0e 94 fd 03 	call	0x7fa	; 0x7fa <Led_Off>
				Led_On(LED1);
     33a:	80 e2       	ldi	r24, 0x20	; 32
     33c:	0e 94 c7 03 	call	0x78e	; 0x78e <Led_On>
				MaskCarrier |= BIT1;
     340:	89 81       	ldd	r24, Y+1	; 0x01
     342:	82 60       	ori	r24, 0x02	; 2
     344:	89 83       	std	Y+1, r24	; 0x01
				vTaskDelay(TASK_DELAY_LONG_PRESSING_VALUE);
     346:	88 ee       	ldi	r24, 0xE8	; 232
     348:	93 e0       	ldi	r25, 0x03	; 3
     34a:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <vTaskDelay>
				if(Gpio_PinRead(PUSH_BUTTON0_PORT,PUSH_BUTTON0_PIN))
     34e:	64 e0       	ldi	r22, 0x04	; 4
     350:	82 e0       	ldi	r24, 0x02	; 2
     352:	0e 94 2e 14 	call	0x285c	; 0x285c <Gpio_PinRead>
     356:	88 23       	and	r24, r24
     358:	49 f0       	breq	.+18     	; 0x36c <PB0_Task+0x7e>
				{
					Led_Off(LED1);
     35a:	80 e2       	ldi	r24, 0x20	; 32
     35c:	0e 94 fd 03 	call	0x7fa	; 0x7fa <Led_Off>
					Led_On(LED2);
     360:	80 e4       	ldi	r24, 0x40	; 64
     362:	0e 94 c7 03 	call	0x78e	; 0x78e <Led_On>
					MaskCarrier |= BIT2;
     366:	89 81       	ldd	r24, Y+1	; 0x01
     368:	84 60       	ori	r24, 0x04	; 4
     36a:	89 83       	std	Y+1, r24	; 0x01
				}
			}
			uxBits = xEventGroupSetBits(
     36c:	89 81       	ldd	r24, Y+1	; 0x01
     36e:	28 2f       	mov	r18, r24
     370:	30 e0       	ldi	r19, 0x00	; 0
     372:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <xCreatedEventGroup>
     376:	90 91 c5 00 	lds	r25, 0x00C5	; 0x8000c5 <xCreatedEventGroup+0x1>
     37a:	b9 01       	movw	r22, r18
     37c:	0e 94 ca 05 	call	0xb94	; 0xb94 <xEventGroupSetBits>
     380:	9b 83       	std	Y+3, r25	; 0x03
     382:	8a 83       	std	Y+2, r24	; 0x02
			xCreatedEventGroup,    /* The event group being updated. */
			MaskCarrier);/* The bits being set. */
			vTaskDelay(TASK_DELAY_LONG_PRESSING_VALUE);
     384:	88 ee       	ldi	r24, 0xE8	; 232
     386:	93 e0       	ldi	r25, 0x03	; 3
     388:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <vTaskDelay>
			Led_Off(LED0);
     38c:	80 e1       	ldi	r24, 0x10	; 16
     38e:	0e 94 fd 03 	call	0x7fa	; 0x7fa <Led_Off>
			Led_Off(LED1);
     392:	80 e2       	ldi	r24, 0x20	; 32
     394:	0e 94 fd 03 	call	0x7fa	; 0x7fa <Led_Off>
			Led_Off(LED2);
     398:	80 e4       	ldi	r24, 0x40	; 64
     39a:	0e 94 fd 03 	call	0x7fa	; 0x7fa <Led_Off>
			
		}
		MaskCarrier = FALSE;
     39e:	19 82       	std	Y+1, r1	; 0x01
		vTaskDelay(TASK_DELAY_PB0_VALUE);
     3a0:	84 e6       	ldi	r24, 0x64	; 100
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <vTaskDelay>
	}
     3a8:	ae cf       	rjmp	.-164    	; 0x306 <PB0_Task+0x18>

000003aa <main>:

/************************************************************************/
/*				      Main Function Implementation			            */
/************************************************************************/
int main(void)
{
     3aa:	ef 92       	push	r14
     3ac:	ff 92       	push	r15
     3ae:	0f 93       	push	r16
     3b0:	cf 93       	push	r28
     3b2:	df 93       	push	r29
     3b4:	1f 92       	push	r1
     3b6:	cd b7       	in	r28, 0x3d	; 61
     3b8:	de b7       	in	r29, 0x3e	; 62
	BaseType_t xReturned = FALSE;
     3ba:	19 82       	std	Y+1, r1	; 0x01

/******** Init Task ******************/
	xReturned = xTaskCreate(Init_Task, 
     3bc:	0f 2e       	mov	r0, r31
     3be:	fe eb       	ldi	r31, 0xBE	; 190
     3c0:	ef 2e       	mov	r14, r31
     3c2:	f0 e0       	ldi	r31, 0x00	; 0
     3c4:	ff 2e       	mov	r15, r31
     3c6:	f0 2d       	mov	r31, r0
     3c8:	04 e0       	ldi	r16, 0x04	; 4
     3ca:	20 e0       	ldi	r18, 0x00	; 0
     3cc:	30 e0       	ldi	r19, 0x00	; 0
     3ce:	44 e6       	ldi	r20, 0x64	; 100
     3d0:	50 e0       	ldi	r21, 0x00	; 0
     3d2:	6f e8       	ldi	r22, 0x8F	; 143
     3d4:	70 e0       	ldi	r23, 0x00	; 0
     3d6:	89 e4       	ldi	r24, 0x49	; 73
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <xTaskCreate>
     3de:	89 83       	std	Y+1, r24	; 0x01
	{
		 // Error Handling Code
	}

/******** LCD_DisplayTask ******************/
	xReturned = xTaskCreate(Display_Task,
     3e0:	0f 2e       	mov	r0, r31
     3e2:	f0 ec       	ldi	r31, 0xC0	; 192
     3e4:	ef 2e       	mov	r14, r31
     3e6:	f0 e0       	ldi	r31, 0x00	; 0
     3e8:	ff 2e       	mov	r15, r31
     3ea:	f0 2d       	mov	r31, r0
     3ec:	01 e0       	ldi	r16, 0x01	; 1
     3ee:	20 e0       	ldi	r18, 0x00	; 0
     3f0:	30 e0       	ldi	r19, 0x00	; 0
     3f2:	40 e9       	ldi	r20, 0x90	; 144
     3f4:	51 e0       	ldi	r21, 0x01	; 1
     3f6:	63 ea       	ldi	r22, 0xA3	; 163
     3f8:	70 e0       	ldi	r23, 0x00	; 0
     3fa:	87 e8       	ldi	r24, 0x87	; 135
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <xTaskCreate>
     402:	89 83       	std	Y+1, r24	; 0x01
	{
		// Error Handling Code
	}
	
/******** TaskPB0 ******************/
	xReturned = xTaskCreate(PB0_Task,
     404:	0f 2e       	mov	r0, r31
     406:	f2 ec       	ldi	r31, 0xC2	; 194
     408:	ef 2e       	mov	r14, r31
     40a:	f0 e0       	ldi	r31, 0x00	; 0
     40c:	ff 2e       	mov	r15, r31
     40e:	f0 2d       	mov	r31, r0
     410:	03 e0       	ldi	r16, 0x03	; 3
     412:	20 e0       	ldi	r18, 0x00	; 0
     414:	30 e0       	ldi	r19, 0x00	; 0
     416:	40 e9       	ldi	r20, 0x90	; 144
     418:	51 e0       	ldi	r21, 0x01	; 1
     41a:	60 eb       	ldi	r22, 0xB0	; 176
     41c:	70 e0       	ldi	r23, 0x00	; 0
     41e:	87 e7       	ldi	r24, 0x77	; 119
     420:	91 e0       	ldi	r25, 0x01	; 1
     422:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <xTaskCreate>
     426:	89 83       	std	Y+1, r24	; 0x01
	{
		// Error Handling Code
	}

/******* Start Scheduler *********/
	vTaskStartScheduler();
     428:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <vTaskStartScheduler>
     42c:	80 e0       	ldi	r24, 0x00	; 0
     42e:	90 e0       	ldi	r25, 0x00	; 0
}
     430:	0f 90       	pop	r0
     432:	df 91       	pop	r29
     434:	cf 91       	pop	r28
     436:	0f 91       	pop	r16
     438:	ff 90       	pop	r15
     43a:	ef 90       	pop	r14
     43c:	08 95       	ret

0000043e <LCD_SendCommand>:
		}
		else
		{
			LCD_DisplayChar(Number+NUMBER_TO_CHAR_FACTOR);
		}
}
     43e:	cf 93       	push	r28
     440:	df 93       	push	r29
     442:	1f 92       	push	r1
     444:	cd b7       	in	r28, 0x3d	; 61
     446:	de b7       	in	r29, 0x3e	; 62
     448:	89 83       	std	Y+1, r24	; 0x01
     44a:	40 e0       	ldi	r20, 0x00	; 0
     44c:	62 e0       	ldi	r22, 0x02	; 2
     44e:	80 e0       	ldi	r24, 0x00	; 0
     450:	0e 94 8f 13 	call	0x271e	; 0x271e <Gpio_PinWrite>
     454:	40 e0       	ldi	r20, 0x00	; 0
     456:	64 e0       	ldi	r22, 0x04	; 4
     458:	80 e0       	ldi	r24, 0x00	; 0
     45a:	0e 94 8f 13 	call	0x271e	; 0x271e <Gpio_PinWrite>
     45e:	89 81       	ldd	r24, Y+1	; 0x01
     460:	88 1f       	adc	r24, r24
     462:	88 27       	eor	r24, r24
     464:	88 1f       	adc	r24, r24
     466:	48 2f       	mov	r20, r24
     468:	60 e8       	ldi	r22, 0x80	; 128
     46a:	80 e0       	ldi	r24, 0x00	; 0
     46c:	0e 94 8f 13 	call	0x271e	; 0x271e <Gpio_PinWrite>
     470:	89 81       	ldd	r24, Y+1	; 0x01
     472:	82 95       	swap	r24
     474:	86 95       	lsr	r24
     476:	86 95       	lsr	r24
     478:	83 70       	andi	r24, 0x03	; 3
     47a:	81 70       	andi	r24, 0x01	; 1
     47c:	48 2f       	mov	r20, r24
     47e:	60 e4       	ldi	r22, 0x40	; 64
     480:	80 e0       	ldi	r24, 0x00	; 0
     482:	0e 94 8f 13 	call	0x271e	; 0x271e <Gpio_PinWrite>
     486:	89 81       	ldd	r24, Y+1	; 0x01
     488:	82 95       	swap	r24
     48a:	86 95       	lsr	r24
     48c:	87 70       	andi	r24, 0x07	; 7
     48e:	81 70       	andi	r24, 0x01	; 1
     490:	48 2f       	mov	r20, r24
     492:	60 e2       	ldi	r22, 0x20	; 32
     494:	80 e0       	ldi	r24, 0x00	; 0
     496:	0e 94 8f 13 	call	0x271e	; 0x271e <Gpio_PinWrite>
     49a:	89 81       	ldd	r24, Y+1	; 0x01
     49c:	82 95       	swap	r24
     49e:	8f 70       	andi	r24, 0x0F	; 15
     4a0:	81 70       	andi	r24, 0x01	; 1
     4a2:	48 2f       	mov	r20, r24
     4a4:	60 e1       	ldi	r22, 0x10	; 16
     4a6:	80 e0       	ldi	r24, 0x00	; 0
     4a8:	0e 94 8f 13 	call	0x271e	; 0x271e <Gpio_PinWrite>
     4ac:	41 e0       	ldi	r20, 0x01	; 1
     4ae:	68 e0       	ldi	r22, 0x08	; 8
     4b0:	80 e0       	ldi	r24, 0x00	; 0
     4b2:	0e 94 8f 13 	call	0x271e	; 0x271e <Gpio_PinWrite>
     4b6:	40 e0       	ldi	r20, 0x00	; 0
     4b8:	68 e0       	ldi	r22, 0x08	; 8
     4ba:	80 e0       	ldi	r24, 0x00	; 0
     4bc:	0e 94 8f 13 	call	0x271e	; 0x271e <Gpio_PinWrite>
     4c0:	89 81       	ldd	r24, Y+1	; 0x01
     4c2:	86 95       	lsr	r24
     4c4:	86 95       	lsr	r24
     4c6:	86 95       	lsr	r24
     4c8:	81 70       	andi	r24, 0x01	; 1
     4ca:	48 2f       	mov	r20, r24
     4cc:	60 e8       	ldi	r22, 0x80	; 128
     4ce:	80 e0       	ldi	r24, 0x00	; 0
     4d0:	0e 94 8f 13 	call	0x271e	; 0x271e <Gpio_PinWrite>
     4d4:	89 81       	ldd	r24, Y+1	; 0x01
     4d6:	86 95       	lsr	r24
     4d8:	86 95       	lsr	r24
     4da:	81 70       	andi	r24, 0x01	; 1
     4dc:	48 2f       	mov	r20, r24
     4de:	60 e4       	ldi	r22, 0x40	; 64
     4e0:	80 e0       	ldi	r24, 0x00	; 0
     4e2:	0e 94 8f 13 	call	0x271e	; 0x271e <Gpio_PinWrite>
     4e6:	89 81       	ldd	r24, Y+1	; 0x01
     4e8:	86 95       	lsr	r24
     4ea:	81 70       	andi	r24, 0x01	; 1
     4ec:	48 2f       	mov	r20, r24
     4ee:	60 e2       	ldi	r22, 0x20	; 32
     4f0:	80 e0       	ldi	r24, 0x00	; 0
     4f2:	0e 94 8f 13 	call	0x271e	; 0x271e <Gpio_PinWrite>
     4f6:	89 81       	ldd	r24, Y+1	; 0x01
     4f8:	81 70       	andi	r24, 0x01	; 1
     4fa:	48 2f       	mov	r20, r24
     4fc:	60 e1       	ldi	r22, 0x10	; 16
     4fe:	80 e0       	ldi	r24, 0x00	; 0
     500:	0e 94 8f 13 	call	0x271e	; 0x271e <Gpio_PinWrite>
     504:	41 e0       	ldi	r20, 0x01	; 1
     506:	68 e0       	ldi	r22, 0x08	; 8
     508:	80 e0       	ldi	r24, 0x00	; 0
     50a:	0e 94 8f 13 	call	0x271e	; 0x271e <Gpio_PinWrite>
     50e:	40 e0       	ldi	r20, 0x00	; 0
     510:	68 e0       	ldi	r22, 0x08	; 8
     512:	80 e0       	ldi	r24, 0x00	; 0
     514:	0e 94 8f 13 	call	0x271e	; 0x271e <Gpio_PinWrite>
     518:	00 00       	nop
     51a:	0f 90       	pop	r0
     51c:	df 91       	pop	r29
     51e:	cf 91       	pop	r28
     520:	08 95       	ret

00000522 <LCD_Init>:
     522:	cf 93       	push	r28
     524:	df 93       	push	r29
     526:	1f 92       	push	r1
     528:	cd b7       	in	r28, 0x3d	; 61
     52a:	de b7       	in	r29, 0x3e	; 62
     52c:	19 82       	std	Y+1, r1	; 0x01
     52e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <InitState>
     532:	88 23       	and	r24, r24
     534:	a1 f4       	brne	.+40     	; 0x55e <LCD_Init+0x3c>
     536:	6f ef       	ldi	r22, 0xFF	; 255
     538:	80 e0       	ldi	r24, 0x00	; 0
     53a:	0e 94 ac 12 	call	0x2558	; 0x2558 <Gpio_PortDirection>
     53e:	82 e0       	ldi	r24, 0x02	; 2
     540:	0e 94 1f 02 	call	0x43e	; 0x43e <LCD_SendCommand>
     544:	88 e2       	ldi	r24, 0x28	; 40
     546:	0e 94 1f 02 	call	0x43e	; 0x43e <LCD_SendCommand>
     54a:	8e e0       	ldi	r24, 0x0E	; 14
     54c:	0e 94 1f 02 	call	0x43e	; 0x43e <LCD_SendCommand>
     550:	86 e0       	ldi	r24, 0x06	; 6
     552:	0e 94 1f 02 	call	0x43e	; 0x43e <LCD_SendCommand>
     556:	81 e0       	ldi	r24, 0x01	; 1
     558:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <InitState>
     55c:	02 c0       	rjmp	.+4      	; 0x562 <LCD_Init+0x40>
     55e:	83 e0       	ldi	r24, 0x03	; 3
     560:	89 83       	std	Y+1, r24	; 0x01
     562:	89 81       	ldd	r24, Y+1	; 0x01
     564:	0f 90       	pop	r0
     566:	df 91       	pop	r29
     568:	cf 91       	pop	r28
     56a:	08 95       	ret

0000056c <LCD_DisplayChar>:
     56c:	cf 93       	push	r28
     56e:	df 93       	push	r29
     570:	1f 92       	push	r1
     572:	cd b7       	in	r28, 0x3d	; 61
     574:	de b7       	in	r29, 0x3e	; 62
     576:	89 83       	std	Y+1, r24	; 0x01
     578:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <InitState>
     57c:	81 30       	cpi	r24, 0x01	; 1
     57e:	09 f0       	breq	.+2      	; 0x582 <LCD_DisplayChar+0x16>
     580:	67 c0       	rjmp	.+206    	; 0x650 <LCD_DisplayChar+0xe4>
     582:	41 e0       	ldi	r20, 0x01	; 1
     584:	62 e0       	ldi	r22, 0x02	; 2
     586:	80 e0       	ldi	r24, 0x00	; 0
     588:	0e 94 8f 13 	call	0x271e	; 0x271e <Gpio_PinWrite>
     58c:	40 e0       	ldi	r20, 0x00	; 0
     58e:	64 e0       	ldi	r22, 0x04	; 4
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	0e 94 8f 13 	call	0x271e	; 0x271e <Gpio_PinWrite>
     596:	89 81       	ldd	r24, Y+1	; 0x01
     598:	88 1f       	adc	r24, r24
     59a:	88 27       	eor	r24, r24
     59c:	88 1f       	adc	r24, r24
     59e:	48 2f       	mov	r20, r24
     5a0:	60 e8       	ldi	r22, 0x80	; 128
     5a2:	80 e0       	ldi	r24, 0x00	; 0
     5a4:	0e 94 8f 13 	call	0x271e	; 0x271e <Gpio_PinWrite>
     5a8:	89 81       	ldd	r24, Y+1	; 0x01
     5aa:	82 95       	swap	r24
     5ac:	86 95       	lsr	r24
     5ae:	86 95       	lsr	r24
     5b0:	83 70       	andi	r24, 0x03	; 3
     5b2:	81 70       	andi	r24, 0x01	; 1
     5b4:	48 2f       	mov	r20, r24
     5b6:	60 e4       	ldi	r22, 0x40	; 64
     5b8:	80 e0       	ldi	r24, 0x00	; 0
     5ba:	0e 94 8f 13 	call	0x271e	; 0x271e <Gpio_PinWrite>
     5be:	89 81       	ldd	r24, Y+1	; 0x01
     5c0:	82 95       	swap	r24
     5c2:	86 95       	lsr	r24
     5c4:	87 70       	andi	r24, 0x07	; 7
     5c6:	81 70       	andi	r24, 0x01	; 1
     5c8:	48 2f       	mov	r20, r24
     5ca:	60 e2       	ldi	r22, 0x20	; 32
     5cc:	80 e0       	ldi	r24, 0x00	; 0
     5ce:	0e 94 8f 13 	call	0x271e	; 0x271e <Gpio_PinWrite>
     5d2:	89 81       	ldd	r24, Y+1	; 0x01
     5d4:	82 95       	swap	r24
     5d6:	8f 70       	andi	r24, 0x0F	; 15
     5d8:	81 70       	andi	r24, 0x01	; 1
     5da:	48 2f       	mov	r20, r24
     5dc:	60 e1       	ldi	r22, 0x10	; 16
     5de:	80 e0       	ldi	r24, 0x00	; 0
     5e0:	0e 94 8f 13 	call	0x271e	; 0x271e <Gpio_PinWrite>
     5e4:	41 e0       	ldi	r20, 0x01	; 1
     5e6:	68 e0       	ldi	r22, 0x08	; 8
     5e8:	80 e0       	ldi	r24, 0x00	; 0
     5ea:	0e 94 8f 13 	call	0x271e	; 0x271e <Gpio_PinWrite>
     5ee:	40 e0       	ldi	r20, 0x00	; 0
     5f0:	68 e0       	ldi	r22, 0x08	; 8
     5f2:	80 e0       	ldi	r24, 0x00	; 0
     5f4:	0e 94 8f 13 	call	0x271e	; 0x271e <Gpio_PinWrite>
     5f8:	89 81       	ldd	r24, Y+1	; 0x01
     5fa:	86 95       	lsr	r24
     5fc:	86 95       	lsr	r24
     5fe:	86 95       	lsr	r24
     600:	81 70       	andi	r24, 0x01	; 1
     602:	48 2f       	mov	r20, r24
     604:	60 e8       	ldi	r22, 0x80	; 128
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	0e 94 8f 13 	call	0x271e	; 0x271e <Gpio_PinWrite>
     60c:	89 81       	ldd	r24, Y+1	; 0x01
     60e:	86 95       	lsr	r24
     610:	86 95       	lsr	r24
     612:	81 70       	andi	r24, 0x01	; 1
     614:	48 2f       	mov	r20, r24
     616:	60 e4       	ldi	r22, 0x40	; 64
     618:	80 e0       	ldi	r24, 0x00	; 0
     61a:	0e 94 8f 13 	call	0x271e	; 0x271e <Gpio_PinWrite>
     61e:	89 81       	ldd	r24, Y+1	; 0x01
     620:	86 95       	lsr	r24
     622:	81 70       	andi	r24, 0x01	; 1
     624:	48 2f       	mov	r20, r24
     626:	60 e2       	ldi	r22, 0x20	; 32
     628:	80 e0       	ldi	r24, 0x00	; 0
     62a:	0e 94 8f 13 	call	0x271e	; 0x271e <Gpio_PinWrite>
     62e:	89 81       	ldd	r24, Y+1	; 0x01
     630:	81 70       	andi	r24, 0x01	; 1
     632:	48 2f       	mov	r20, r24
     634:	60 e1       	ldi	r22, 0x10	; 16
     636:	80 e0       	ldi	r24, 0x00	; 0
     638:	0e 94 8f 13 	call	0x271e	; 0x271e <Gpio_PinWrite>
     63c:	41 e0       	ldi	r20, 0x01	; 1
     63e:	68 e0       	ldi	r22, 0x08	; 8
     640:	80 e0       	ldi	r24, 0x00	; 0
     642:	0e 94 8f 13 	call	0x271e	; 0x271e <Gpio_PinWrite>
     646:	40 e0       	ldi	r20, 0x00	; 0
     648:	68 e0       	ldi	r22, 0x08	; 8
     64a:	80 e0       	ldi	r24, 0x00	; 0
     64c:	0e 94 8f 13 	call	0x271e	; 0x271e <Gpio_PinWrite>
     650:	00 00       	nop
     652:	0f 90       	pop	r0
     654:	df 91       	pop	r29
     656:	cf 91       	pop	r28
     658:	08 95       	ret

0000065a <LCD_DisplayString>:
     65a:	cf 93       	push	r28
     65c:	df 93       	push	r29
     65e:	00 d0       	rcall	.+0      	; 0x660 <LCD_DisplayString+0x6>
     660:	1f 92       	push	r1
     662:	cd b7       	in	r28, 0x3d	; 61
     664:	de b7       	in	r29, 0x3e	; 62
     666:	9b 83       	std	Y+3, r25	; 0x03
     668:	8a 83       	std	Y+2, r24	; 0x02
     66a:	19 82       	std	Y+1, r1	; 0x01
     66c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <InitState>
     670:	81 30       	cpi	r24, 0x01	; 1
     672:	d1 f4       	brne	.+52     	; 0x6a8 <LCD_DisplayString+0x4e>
     674:	0e c0       	rjmp	.+28     	; 0x692 <LCD_DisplayString+0x38>
     676:	89 81       	ldd	r24, Y+1	; 0x01
     678:	88 2f       	mov	r24, r24
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	2a 81       	ldd	r18, Y+2	; 0x02
     67e:	3b 81       	ldd	r19, Y+3	; 0x03
     680:	82 0f       	add	r24, r18
     682:	93 1f       	adc	r25, r19
     684:	fc 01       	movw	r30, r24
     686:	80 81       	ld	r24, Z
     688:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_DisplayChar>
     68c:	89 81       	ldd	r24, Y+1	; 0x01
     68e:	8f 5f       	subi	r24, 0xFF	; 255
     690:	89 83       	std	Y+1, r24	; 0x01
     692:	89 81       	ldd	r24, Y+1	; 0x01
     694:	88 2f       	mov	r24, r24
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	2a 81       	ldd	r18, Y+2	; 0x02
     69a:	3b 81       	ldd	r19, Y+3	; 0x03
     69c:	82 0f       	add	r24, r18
     69e:	93 1f       	adc	r25, r19
     6a0:	fc 01       	movw	r30, r24
     6a2:	80 81       	ld	r24, Z
     6a4:	88 23       	and	r24, r24
     6a6:	39 f7       	brne	.-50     	; 0x676 <LCD_DisplayString+0x1c>
     6a8:	00 00       	nop
     6aa:	0f 90       	pop	r0
     6ac:	0f 90       	pop	r0
     6ae:	0f 90       	pop	r0
     6b0:	df 91       	pop	r29
     6b2:	cf 91       	pop	r28
     6b4:	08 95       	ret

000006b6 <LCD_Clear>:
 * Function : LCD_GotoRowColumn
 * Description: this function is to Clear the LCD
 * @return void                        
 */
void LCD_Clear(void)
{
     6b6:	cf 93       	push	r28
     6b8:	df 93       	push	r29
     6ba:	cd b7       	in	r28, 0x3d	; 61
     6bc:	de b7       	in	r29, 0x3e	; 62
	LCD_SendCommand(LCD_ClearScreen);
     6be:	81 e0       	ldi	r24, 0x01	; 1
     6c0:	0e 94 1f 02 	call	0x43e	; 0x43e <LCD_SendCommand>
}
     6c4:	00 00       	nop
     6c6:	df 91       	pop	r29
     6c8:	cf 91       	pop	r28
     6ca:	08 95       	ret

000006cc <LCD_GotoRowColumn>:
 * param row: the row of the cursor should range is [0 to 1]
 * param col: the column of the cursor should range is [0 to 15]
 * @return void                                                          
 */
void LCD_GotoRowColumn(uint8 row , uint8 col)
{
     6cc:	cf 93       	push	r28
     6ce:	df 93       	push	r29
     6d0:	00 d0       	rcall	.+0      	; 0x6d2 <LCD_GotoRowColumn+0x6>
     6d2:	cd b7       	in	r28, 0x3d	; 61
     6d4:	de b7       	in	r29, 0x3e	; 62
     6d6:	89 83       	std	Y+1, r24	; 0x01
     6d8:	6a 83       	std	Y+2, r22	; 0x02
	LCD_SendCommand( (GOTO_ROW_COL_MASK1) | ( col + (GOTO_ROW_COL_MASK2 * row ) ) );
     6da:	99 81       	ldd	r25, Y+1	; 0x01
     6dc:	89 2f       	mov	r24, r25
     6de:	88 0f       	add	r24, r24
     6e0:	88 0f       	add	r24, r24
     6e2:	98 0f       	add	r25, r24
     6e4:	8a 81       	ldd	r24, Y+2	; 0x02
     6e6:	89 0f       	add	r24, r25
     6e8:	80 68       	ori	r24, 0x80	; 128
     6ea:	0e 94 1f 02 	call	0x43e	; 0x43e <LCD_SendCommand>
     6ee:	00 00       	nop
     6f0:	0f 90       	pop	r0
     6f2:	0f 90       	pop	r0
     6f4:	df 91       	pop	r29
     6f6:	cf 91       	pop	r28
     6f8:	08 95       	ret

000006fa <Led_Init>:
/**
 * Description: Initializing Function to the Led
 * @param led_Num the number of the Led [LED0,LED1,LED2,LED3]
 */
void Led_Init(led led_Num)
{
     6fa:	cf 93       	push	r28
     6fc:	df 93       	push	r29
     6fe:	1f 92       	push	r1
     700:	cd b7       	in	r28, 0x3d	; 61
     702:	de b7       	in	r29, 0x3e	; 62
     704:	89 83       	std	Y+1, r24	; 0x01
	switch(led_Num)
     706:	89 81       	ldd	r24, Y+1	; 0x01
     708:	88 2f       	mov	r24, r24
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	80 32       	cpi	r24, 0x20	; 32
     70e:	91 05       	cpc	r25, r1
     710:	c1 f0       	breq	.+48     	; 0x742 <Led_Init+0x48>
     712:	81 32       	cpi	r24, 0x21	; 33
     714:	91 05       	cpc	r25, r1
     716:	1c f4       	brge	.+6      	; 0x71e <Led_Init+0x24>
     718:	40 97       	sbiw	r24, 0x10	; 16
     71a:	41 f0       	breq	.+16     	; 0x72c <Led_Init+0x32>
		case LED3 :
		Gpio_PinDirection(LED_PORT,LED3,SET_OUT);
		Gpio_PinWrite(LED_PORT,LED3,FALSE);
		break;
		default:
		break;
     71c:	33 c0       	rjmp	.+102    	; 0x784 <Led_Init+0x8a>
 * Description: Initializing Function to the Led
 * @param led_Num the number of the Led [LED0,LED1,LED2,LED3]
 */
void Led_Init(led led_Num)
{
	switch(led_Num)
     71e:	80 34       	cpi	r24, 0x40	; 64
     720:	91 05       	cpc	r25, r1
     722:	d1 f0       	breq	.+52     	; 0x758 <Led_Init+0x5e>
     724:	80 38       	cpi	r24, 0x80	; 128
     726:	91 05       	cpc	r25, r1
     728:	11 f1       	breq	.+68     	; 0x76e <Led_Init+0x74>
		case LED3 :
		Gpio_PinDirection(LED_PORT,LED3,SET_OUT);
		Gpio_PinWrite(LED_PORT,LED3,FALSE);
		break;
		default:
		break;
     72a:	2c c0       	rjmp	.+88     	; 0x784 <Led_Init+0x8a>
void Led_Init(led led_Num)
{
	switch(led_Num)
	{
		case LED0 :
		Gpio_PinDirection(LED_PORT,LED0,SET_OUT);
     72c:	4f ef       	ldi	r20, 0xFF	; 255
     72e:	60 e1       	ldi	r22, 0x10	; 16
     730:	81 e0       	ldi	r24, 0x01	; 1
     732:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <Gpio_PinDirection>
		Gpio_PinWrite(LED_PORT,LED0,FALSE);
     736:	40 e0       	ldi	r20, 0x00	; 0
     738:	60 e1       	ldi	r22, 0x10	; 16
     73a:	81 e0       	ldi	r24, 0x01	; 1
     73c:	0e 94 8f 13 	call	0x271e	; 0x271e <Gpio_PinWrite>
		break;
     740:	21 c0       	rjmp	.+66     	; 0x784 <Led_Init+0x8a>
		case LED1 :
		Gpio_PinDirection(LED_PORT,LED1,SET_OUT);
     742:	4f ef       	ldi	r20, 0xFF	; 255
     744:	60 e2       	ldi	r22, 0x20	; 32
     746:	81 e0       	ldi	r24, 0x01	; 1
     748:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <Gpio_PinDirection>
		Gpio_PinWrite(LED_PORT,LED1,FALSE);
     74c:	40 e0       	ldi	r20, 0x00	; 0
     74e:	60 e2       	ldi	r22, 0x20	; 32
     750:	81 e0       	ldi	r24, 0x01	; 1
     752:	0e 94 8f 13 	call	0x271e	; 0x271e <Gpio_PinWrite>
		break;
     756:	16 c0       	rjmp	.+44     	; 0x784 <Led_Init+0x8a>
		case LED2 :
		Gpio_PinDirection(LED_PORT,LED2,SET_OUT);
     758:	4f ef       	ldi	r20, 0xFF	; 255
     75a:	60 e4       	ldi	r22, 0x40	; 64
     75c:	81 e0       	ldi	r24, 0x01	; 1
     75e:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <Gpio_PinDirection>
		Gpio_PinWrite(LED_PORT,LED2,FALSE);
     762:	40 e0       	ldi	r20, 0x00	; 0
     764:	60 e4       	ldi	r22, 0x40	; 64
     766:	81 e0       	ldi	r24, 0x01	; 1
     768:	0e 94 8f 13 	call	0x271e	; 0x271e <Gpio_PinWrite>
		break;
     76c:	0b c0       	rjmp	.+22     	; 0x784 <Led_Init+0x8a>
		case LED3 :
		Gpio_PinDirection(LED_PORT,LED3,SET_OUT);
     76e:	4f ef       	ldi	r20, 0xFF	; 255
     770:	60 e8       	ldi	r22, 0x80	; 128
     772:	81 e0       	ldi	r24, 0x01	; 1
     774:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <Gpio_PinDirection>
		Gpio_PinWrite(LED_PORT,LED3,FALSE);
     778:	40 e0       	ldi	r20, 0x00	; 0
     77a:	60 e8       	ldi	r22, 0x80	; 128
     77c:	81 e0       	ldi	r24, 0x01	; 1
     77e:	0e 94 8f 13 	call	0x271e	; 0x271e <Gpio_PinWrite>
		break;
     782:	00 00       	nop
		default:
		break;
	}
}
     784:	00 00       	nop
     786:	0f 90       	pop	r0
     788:	df 91       	pop	r29
     78a:	cf 91       	pop	r28
     78c:	08 95       	ret

0000078e <Led_On>:
/**
 * Description: Function to set the Led to On
 * @param led_Num the number of the Led [LED0,LED1,LED2,LED3]
 */
void Led_On(led led_Num)
{
     78e:	cf 93       	push	r28
     790:	df 93       	push	r29
     792:	1f 92       	push	r1
     794:	cd b7       	in	r28, 0x3d	; 61
     796:	de b7       	in	r29, 0x3e	; 62
     798:	89 83       	std	Y+1, r24	; 0x01
	switch(led_Num)
     79a:	89 81       	ldd	r24, Y+1	; 0x01
     79c:	88 2f       	mov	r24, r24
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	80 32       	cpi	r24, 0x20	; 32
     7a2:	91 05       	cpc	r25, r1
     7a4:	99 f0       	breq	.+38     	; 0x7cc <Led_On+0x3e>
     7a6:	81 32       	cpi	r24, 0x21	; 33
     7a8:	91 05       	cpc	r25, r1
     7aa:	1c f4       	brge	.+6      	; 0x7b2 <Led_On+0x24>
     7ac:	40 97       	sbiw	r24, 0x10	; 16
     7ae:	41 f0       	breq	.+16     	; 0x7c0 <Led_On+0x32>
		break;
		case LED3 :
		Gpio_PinWrite(LED_PORT,LED3,HIGH);
		break;
		default:
		break;
     7b0:	1f c0       	rjmp	.+62     	; 0x7f0 <Led_On+0x62>
 * Description: Function to set the Led to On
 * @param led_Num the number of the Led [LED0,LED1,LED2,LED3]
 */
void Led_On(led led_Num)
{
	switch(led_Num)
     7b2:	80 34       	cpi	r24, 0x40	; 64
     7b4:	91 05       	cpc	r25, r1
     7b6:	81 f0       	breq	.+32     	; 0x7d8 <Led_On+0x4a>
     7b8:	80 38       	cpi	r24, 0x80	; 128
     7ba:	91 05       	cpc	r25, r1
     7bc:	99 f0       	breq	.+38     	; 0x7e4 <Led_On+0x56>
		break;
		case LED3 :
		Gpio_PinWrite(LED_PORT,LED3,HIGH);
		break;
		default:
		break;
     7be:	18 c0       	rjmp	.+48     	; 0x7f0 <Led_On+0x62>
void Led_On(led led_Num)
{
	switch(led_Num)
	{
		case LED0 :
		Gpio_PinWrite(LED_PORT,LED0,HIGH);
     7c0:	41 e0       	ldi	r20, 0x01	; 1
     7c2:	60 e1       	ldi	r22, 0x10	; 16
     7c4:	81 e0       	ldi	r24, 0x01	; 1
     7c6:	0e 94 8f 13 	call	0x271e	; 0x271e <Gpio_PinWrite>
		break;
     7ca:	12 c0       	rjmp	.+36     	; 0x7f0 <Led_On+0x62>
		case LED1 :
		Gpio_PinWrite(LED_PORT,LED1,HIGH);
     7cc:	41 e0       	ldi	r20, 0x01	; 1
     7ce:	60 e2       	ldi	r22, 0x20	; 32
     7d0:	81 e0       	ldi	r24, 0x01	; 1
     7d2:	0e 94 8f 13 	call	0x271e	; 0x271e <Gpio_PinWrite>
		break;
     7d6:	0c c0       	rjmp	.+24     	; 0x7f0 <Led_On+0x62>
		case LED2 :
		Gpio_PinWrite(LED_PORT,LED2,HIGH);
     7d8:	41 e0       	ldi	r20, 0x01	; 1
     7da:	60 e4       	ldi	r22, 0x40	; 64
     7dc:	81 e0       	ldi	r24, 0x01	; 1
     7de:	0e 94 8f 13 	call	0x271e	; 0x271e <Gpio_PinWrite>
		break;
     7e2:	06 c0       	rjmp	.+12     	; 0x7f0 <Led_On+0x62>
		case LED3 :
		Gpio_PinWrite(LED_PORT,LED3,HIGH);
     7e4:	41 e0       	ldi	r20, 0x01	; 1
     7e6:	60 e8       	ldi	r22, 0x80	; 128
     7e8:	81 e0       	ldi	r24, 0x01	; 1
     7ea:	0e 94 8f 13 	call	0x271e	; 0x271e <Gpio_PinWrite>
		break;
     7ee:	00 00       	nop
		default:
		break;
	}
}
     7f0:	00 00       	nop
     7f2:	0f 90       	pop	r0
     7f4:	df 91       	pop	r29
     7f6:	cf 91       	pop	r28
     7f8:	08 95       	ret

000007fa <Led_Off>:
/**
 * Description: Function to set the Led to Off.
 * @param led_Num the number of the Led [LED0,LED1,LED2,LED3].
 */
void Led_Off(led led_Num)
{
     7fa:	cf 93       	push	r28
     7fc:	df 93       	push	r29
     7fe:	1f 92       	push	r1
     800:	cd b7       	in	r28, 0x3d	; 61
     802:	de b7       	in	r29, 0x3e	; 62
     804:	89 83       	std	Y+1, r24	; 0x01
	switch(led_Num)
     806:	89 81       	ldd	r24, Y+1	; 0x01
     808:	88 2f       	mov	r24, r24
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	80 32       	cpi	r24, 0x20	; 32
     80e:	91 05       	cpc	r25, r1
     810:	99 f0       	breq	.+38     	; 0x838 <Led_Off+0x3e>
     812:	81 32       	cpi	r24, 0x21	; 33
     814:	91 05       	cpc	r25, r1
     816:	1c f4       	brge	.+6      	; 0x81e <Led_Off+0x24>
     818:	40 97       	sbiw	r24, 0x10	; 16
     81a:	41 f0       	breq	.+16     	; 0x82c <Led_Off+0x32>
		break;
		case LED3 :
		Gpio_PinWrite(LED_PORT,LED3,FALSE);
		break;
		default:
		break;
     81c:	1f c0       	rjmp	.+62     	; 0x85c <Led_Off+0x62>
 * Description: Function to set the Led to Off.
 * @param led_Num the number of the Led [LED0,LED1,LED2,LED3].
 */
void Led_Off(led led_Num)
{
	switch(led_Num)
     81e:	80 34       	cpi	r24, 0x40	; 64
     820:	91 05       	cpc	r25, r1
     822:	81 f0       	breq	.+32     	; 0x844 <Led_Off+0x4a>
     824:	80 38       	cpi	r24, 0x80	; 128
     826:	91 05       	cpc	r25, r1
     828:	99 f0       	breq	.+38     	; 0x850 <Led_Off+0x56>
		break;
		case LED3 :
		Gpio_PinWrite(LED_PORT,LED3,FALSE);
		break;
		default:
		break;
     82a:	18 c0       	rjmp	.+48     	; 0x85c <Led_Off+0x62>
void Led_Off(led led_Num)
{
	switch(led_Num)
	{
		case LED0 :
		Gpio_PinWrite(LED_PORT,LED0,FALSE);
     82c:	40 e0       	ldi	r20, 0x00	; 0
     82e:	60 e1       	ldi	r22, 0x10	; 16
     830:	81 e0       	ldi	r24, 0x01	; 1
     832:	0e 94 8f 13 	call	0x271e	; 0x271e <Gpio_PinWrite>
		break;
     836:	12 c0       	rjmp	.+36     	; 0x85c <Led_Off+0x62>
		case LED1 :
		Gpio_PinWrite(LED_PORT,LED1,FALSE);
     838:	40 e0       	ldi	r20, 0x00	; 0
     83a:	60 e2       	ldi	r22, 0x20	; 32
     83c:	81 e0       	ldi	r24, 0x01	; 1
     83e:	0e 94 8f 13 	call	0x271e	; 0x271e <Gpio_PinWrite>
		break;
     842:	0c c0       	rjmp	.+24     	; 0x85c <Led_Off+0x62>
		case LED2 :
		Gpio_PinWrite(LED_PORT,LED2,FALSE);
     844:	40 e0       	ldi	r20, 0x00	; 0
     846:	60 e4       	ldi	r22, 0x40	; 64
     848:	81 e0       	ldi	r24, 0x01	; 1
     84a:	0e 94 8f 13 	call	0x271e	; 0x271e <Gpio_PinWrite>
		break;
     84e:	06 c0       	rjmp	.+12     	; 0x85c <Led_Off+0x62>
		case LED3 :
		Gpio_PinWrite(LED_PORT,LED3,FALSE);
     850:	40 e0       	ldi	r20, 0x00	; 0
     852:	60 e8       	ldi	r22, 0x80	; 128
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	0e 94 8f 13 	call	0x271e	; 0x271e <Gpio_PinWrite>
		break;
     85a:	00 00       	nop
		default:
		break;
	}
}
     85c:	00 00       	nop
     85e:	0f 90       	pop	r0
     860:	df 91       	pop	r29
     862:	cf 91       	pop	r28
     864:	08 95       	ret

00000866 <pushButton_Init>:
/**
 * Description: Function to Initiate the Push Button.
 * @param push_Button the number of the pushButton [PUSH_BUTTON0,PUSH_BUTTON1]
 */
void pushButton_Init()
{
     866:	cf 93       	push	r28
     868:	df 93       	push	r29
     86a:	cd b7       	in	r28, 0x3d	; 61
     86c:	de b7       	in	r29, 0x3e	; 62
	Gpio_PinDirection(PUSH_BUTTON0_PORT,PUSH_BUTTON0_PIN,SET_IN);
     86e:	40 e0       	ldi	r20, 0x00	; 0
     870:	64 e0       	ldi	r22, 0x04	; 4
     872:	82 e0       	ldi	r24, 0x02	; 2
     874:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <Gpio_PinDirection>
	Gpio_PinDirection(PUSH_BUTTON1_PORT,PUSH_BUTTON1_PIN,SET_IN);
     878:	40 e0       	ldi	r20, 0x00	; 0
     87a:	62 e0       	ldi	r22, 0x02	; 2
     87c:	81 e0       	ldi	r24, 0x01	; 1
     87e:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <Gpio_PinDirection>
}
     882:	00 00       	nop
     884:	df 91       	pop	r29
     886:	cf 91       	pop	r28
     888:	08 95       	ret

0000088a <SSD_Init_BCD>:
		SSD_Display_BCD(number/10);
		Gpio_PinWrite(ssd_Enable_PORT,ssd2_Enable_Pin,FALSE);
		Gpio_PinWrite(ssd_Enable_PORT,ssd1_Enable_Pin,TRUE);
		SSD_Display_BCD(number%10);
	}
}
     88a:	cf 93       	push	r28
     88c:	df 93       	push	r29
     88e:	1f 92       	push	r1
     890:	cd b7       	in	r28, 0x3d	; 61
     892:	de b7       	in	r29, 0x3e	; 62
     894:	89 83       	std	Y+1, r24	; 0x01
     896:	6f ef       	ldi	r22, 0xFF	; 255
     898:	81 e0       	ldi	r24, 0x01	; 1
     89a:	0e 94 94 14 	call	0x2928	; 0x2928 <Gpio_LowerNibbleDirection>
     89e:	89 81       	ldd	r24, Y+1	; 0x01
     8a0:	88 2f       	mov	r24, r24
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	81 30       	cpi	r24, 0x01	; 1
     8a6:	91 05       	cpc	r25, r1
     8a8:	b9 f0       	breq	.+46     	; 0x8d8 <SSD_Init_BCD+0x4e>
     8aa:	82 30       	cpi	r24, 0x02	; 2
     8ac:	91 05       	cpc	r25, r1
     8ae:	1c f4       	brge	.+6      	; 0x8b6 <SSD_Init_BCD+0x2c>
     8b0:	89 2b       	or	r24, r25
     8b2:	39 f0       	breq	.+14     	; 0x8c2 <SSD_Init_BCD+0x38>
     8b4:	32 c0       	rjmp	.+100    	; 0x91a <SSD_Init_BCD+0x90>
     8b6:	82 30       	cpi	r24, 0x02	; 2
     8b8:	91 05       	cpc	r25, r1
     8ba:	c9 f0       	breq	.+50     	; 0x8ee <SSD_Init_BCD+0x64>
     8bc:	03 97       	sbiw	r24, 0x03	; 3
     8be:	11 f1       	breq	.+68     	; 0x904 <SSD_Init_BCD+0x7a>
     8c0:	2c c0       	rjmp	.+88     	; 0x91a <SSD_Init_BCD+0x90>
     8c2:	4f ef       	ldi	r20, 0xFF	; 255
     8c4:	64 e0       	ldi	r22, 0x04	; 4
     8c6:	83 e0       	ldi	r24, 0x03	; 3
     8c8:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <Gpio_PinDirection>
     8cc:	41 e0       	ldi	r20, 0x01	; 1
     8ce:	64 e0       	ldi	r22, 0x04	; 4
     8d0:	83 e0       	ldi	r24, 0x03	; 3
     8d2:	0e 94 8f 13 	call	0x271e	; 0x271e <Gpio_PinWrite>
     8d6:	21 c0       	rjmp	.+66     	; 0x91a <SSD_Init_BCD+0x90>
     8d8:	4f ef       	ldi	r20, 0xFF	; 255
     8da:	68 e0       	ldi	r22, 0x08	; 8
     8dc:	83 e0       	ldi	r24, 0x03	; 3
     8de:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <Gpio_PinDirection>
     8e2:	41 e0       	ldi	r20, 0x01	; 1
     8e4:	68 e0       	ldi	r22, 0x08	; 8
     8e6:	83 e0       	ldi	r24, 0x03	; 3
     8e8:	0e 94 8f 13 	call	0x271e	; 0x271e <Gpio_PinWrite>
     8ec:	16 c0       	rjmp	.+44     	; 0x91a <SSD_Init_BCD+0x90>
     8ee:	4f ef       	ldi	r20, 0xFF	; 255
     8f0:	60 e4       	ldi	r22, 0x40	; 64
     8f2:	83 e0       	ldi	r24, 0x03	; 3
     8f4:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <Gpio_PinDirection>
     8f8:	41 e0       	ldi	r20, 0x01	; 1
     8fa:	60 e4       	ldi	r22, 0x40	; 64
     8fc:	83 e0       	ldi	r24, 0x03	; 3
     8fe:	0e 94 8f 13 	call	0x271e	; 0x271e <Gpio_PinWrite>
     902:	0b c0       	rjmp	.+22     	; 0x91a <SSD_Init_BCD+0x90>
     904:	4f ef       	ldi	r20, 0xFF	; 255
     906:	60 e8       	ldi	r22, 0x80	; 128
     908:	83 e0       	ldi	r24, 0x03	; 3
     90a:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <Gpio_PinDirection>
     90e:	41 e0       	ldi	r20, 0x01	; 1
     910:	60 e8       	ldi	r22, 0x80	; 128
     912:	83 e0       	ldi	r24, 0x03	; 3
     914:	0e 94 8f 13 	call	0x271e	; 0x271e <Gpio_PinWrite>
     918:	00 00       	nop
     91a:	80 e0       	ldi	r24, 0x00	; 0
     91c:	0e 94 95 04 	call	0x92a	; 0x92a <SSD_Display_BCD>
     920:	00 00       	nop
     922:	0f 90       	pop	r0
     924:	df 91       	pop	r29
     926:	cf 91       	pop	r28
     928:	08 95       	ret

0000092a <SSD_Display_BCD>:
/**
 * Description: Function to set the Lower Nibble to the value of the number 
 * @param number the number to display [0 to F only]
 */
void SSD_Display_BCD(uint8 number)
{
     92a:	cf 93       	push	r28
     92c:	df 93       	push	r29
     92e:	1f 92       	push	r1
     930:	cd b7       	in	r28, 0x3d	; 61
     932:	de b7       	in	r29, 0x3e	; 62
     934:	89 83       	std	Y+1, r24	; 0x01
	Gpio_LowerNibbleDirection(SSD_PORT,SET_OUT);
     936:	6f ef       	ldi	r22, 0xFF	; 255
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	0e 94 94 14 	call	0x2928	; 0x2928 <Gpio_LowerNibbleDirection>
	Gpio_LowerNibbleWrite(SSD_PORT,number);
     93e:	69 81       	ldd	r22, Y+1	; 0x01
     940:	81 e0       	ldi	r24, 0x01	; 1
     942:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <Gpio_LowerNibbleWrite>
}
     946:	00 00       	nop
     948:	0f 90       	pop	r0
     94a:	df 91       	pop	r29
     94c:	cf 91       	pop	r28
     94e:	08 95       	ret

00000950 <xEventGroupCreate>:
/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
     950:	cf 93       	push	r28
     952:	df 93       	push	r29
     954:	00 d0       	rcall	.+0      	; 0x956 <xEventGroupCreate+0x6>
     956:	cd b7       	in	r28, 0x3d	; 61
     958:	de b7       	in	r29, 0x3e	; 62
     95a:	8b e0       	ldi	r24, 0x0B	; 11
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	0e 94 b9 06 	call	0xd72	; 0xd72 <pvPortMalloc>
     962:	9a 83       	std	Y+2, r25	; 0x02
     964:	89 83       	std	Y+1, r24	; 0x01
     966:	89 81       	ldd	r24, Y+1	; 0x01
     968:	9a 81       	ldd	r25, Y+2	; 0x02
     96a:	89 2b       	or	r24, r25
     96c:	51 f0       	breq	.+20     	; 0x982 <xEventGroupCreate+0x32>
     96e:	89 81       	ldd	r24, Y+1	; 0x01
     970:	9a 81       	ldd	r25, Y+2	; 0x02
     972:	fc 01       	movw	r30, r24
     974:	11 82       	std	Z+1, r1	; 0x01
     976:	10 82       	st	Z, r1
     978:	89 81       	ldd	r24, Y+1	; 0x01
     97a:	9a 81       	ldd	r25, Y+2	; 0x02
     97c:	02 96       	adiw	r24, 0x02	; 2
     97e:	0e 94 1b 07 	call	0xe36	; 0xe36 <vListInitialise>
     982:	89 81       	ldd	r24, Y+1	; 0x01
     984:	9a 81       	ldd	r25, Y+2	; 0x02
     986:	0f 90       	pop	r0
     988:	0f 90       	pop	r0
     98a:	df 91       	pop	r29
     98c:	cf 91       	pop	r28
     98e:	08 95       	ret

00000990 <xEventGroupWaitBits>:
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	cf 93       	push	r28
     996:	df 93       	push	r29
     998:	cd b7       	in	r28, 0x3d	; 61
     99a:	de b7       	in	r29, 0x3e	; 62
     99c:	63 97       	sbiw	r28, 0x13	; 19
     99e:	0f b6       	in	r0, 0x3f	; 63
     9a0:	f8 94       	cli
     9a2:	de bf       	out	0x3e, r29	; 62
     9a4:	0f be       	out	0x3f, r0	; 63
     9a6:	cd bf       	out	0x3d, r28	; 61
     9a8:	9d 87       	std	Y+13, r25	; 0x0d
     9aa:	8c 87       	std	Y+12, r24	; 0x0c
     9ac:	7f 87       	std	Y+15, r23	; 0x0f
     9ae:	6e 87       	std	Y+14, r22	; 0x0e
     9b0:	48 8b       	std	Y+16, r20	; 0x10
     9b2:	29 8b       	std	Y+17, r18	; 0x11
     9b4:	1b 8b       	std	Y+19, r17	; 0x13
     9b6:	0a 8b       	std	Y+18, r16	; 0x12
     9b8:	8c 85       	ldd	r24, Y+12	; 0x0c
     9ba:	9d 85       	ldd	r25, Y+13	; 0x0d
     9bc:	9e 83       	std	Y+6, r25	; 0x06
     9be:	8d 83       	std	Y+5, r24	; 0x05
     9c0:	1c 82       	std	Y+4, r1	; 0x04
     9c2:	1b 82       	std	Y+3, r1	; 0x03
     9c4:	1f 82       	std	Y+7, r1	; 0x07
     9c6:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <vTaskSuspendAll>
     9ca:	8d 81       	ldd	r24, Y+5	; 0x05
     9cc:	9e 81       	ldd	r25, Y+6	; 0x06
     9ce:	fc 01       	movw	r30, r24
     9d0:	80 81       	ld	r24, Z
     9d2:	91 81       	ldd	r25, Z+1	; 0x01
     9d4:	99 87       	std	Y+9, r25	; 0x09
     9d6:	88 87       	std	Y+8, r24	; 0x08
     9d8:	2e 85       	ldd	r18, Y+14	; 0x0e
     9da:	3f 85       	ldd	r19, Y+15	; 0x0f
     9dc:	88 85       	ldd	r24, Y+8	; 0x08
     9de:	99 85       	ldd	r25, Y+9	; 0x09
     9e0:	49 89       	ldd	r20, Y+17	; 0x11
     9e2:	b9 01       	movw	r22, r18
     9e4:	0e 94 87 06 	call	0xd0e	; 0xd0e <prvTestWaitCondition>
     9e8:	8a 87       	std	Y+10, r24	; 0x0a
     9ea:	8a 85       	ldd	r24, Y+10	; 0x0a
     9ec:	88 23       	and	r24, r24
     9ee:	d1 f0       	breq	.+52     	; 0xa24 <xEventGroupWaitBits+0x94>
     9f0:	88 85       	ldd	r24, Y+8	; 0x08
     9f2:	99 85       	ldd	r25, Y+9	; 0x09
     9f4:	9a 83       	std	Y+2, r25	; 0x02
     9f6:	89 83       	std	Y+1, r24	; 0x01
     9f8:	1b 8a       	std	Y+19, r1	; 0x13
     9fa:	1a 8a       	std	Y+18, r1	; 0x12
     9fc:	88 89       	ldd	r24, Y+16	; 0x10
     9fe:	88 23       	and	r24, r24
     a00:	e1 f1       	breq	.+120    	; 0xa7a <xEventGroupWaitBits+0xea>
     a02:	8d 81       	ldd	r24, Y+5	; 0x05
     a04:	9e 81       	ldd	r25, Y+6	; 0x06
     a06:	fc 01       	movw	r30, r24
     a08:	20 81       	ld	r18, Z
     a0a:	31 81       	ldd	r19, Z+1	; 0x01
     a0c:	8e 85       	ldd	r24, Y+14	; 0x0e
     a0e:	9f 85       	ldd	r25, Y+15	; 0x0f
     a10:	80 95       	com	r24
     a12:	90 95       	com	r25
     a14:	28 23       	and	r18, r24
     a16:	39 23       	and	r19, r25
     a18:	8d 81       	ldd	r24, Y+5	; 0x05
     a1a:	9e 81       	ldd	r25, Y+6	; 0x06
     a1c:	fc 01       	movw	r30, r24
     a1e:	31 83       	std	Z+1, r19	; 0x01
     a20:	20 83       	st	Z, r18
     a22:	2b c0       	rjmp	.+86     	; 0xa7a <xEventGroupWaitBits+0xea>
     a24:	8a 89       	ldd	r24, Y+18	; 0x12
     a26:	9b 89       	ldd	r25, Y+19	; 0x13
     a28:	89 2b       	or	r24, r25
     a2a:	39 f4       	brne	.+14     	; 0xa3a <xEventGroupWaitBits+0xaa>
     a2c:	88 85       	ldd	r24, Y+8	; 0x08
     a2e:	99 85       	ldd	r25, Y+9	; 0x09
     a30:	9a 83       	std	Y+2, r25	; 0x02
     a32:	89 83       	std	Y+1, r24	; 0x01
     a34:	81 e0       	ldi	r24, 0x01	; 1
     a36:	8f 83       	std	Y+7, r24	; 0x07
     a38:	20 c0       	rjmp	.+64     	; 0xa7a <xEventGroupWaitBits+0xea>
     a3a:	88 89       	ldd	r24, Y+16	; 0x10
     a3c:	88 23       	and	r24, r24
     a3e:	29 f0       	breq	.+10     	; 0xa4a <xEventGroupWaitBits+0xba>
     a40:	8b 81       	ldd	r24, Y+3	; 0x03
     a42:	9c 81       	ldd	r25, Y+4	; 0x04
     a44:	91 60       	ori	r25, 0x01	; 1
     a46:	9c 83       	std	Y+4, r25	; 0x04
     a48:	8b 83       	std	Y+3, r24	; 0x03
     a4a:	89 89       	ldd	r24, Y+17	; 0x11
     a4c:	88 23       	and	r24, r24
     a4e:	29 f0       	breq	.+10     	; 0xa5a <xEventGroupWaitBits+0xca>
     a50:	8b 81       	ldd	r24, Y+3	; 0x03
     a52:	9c 81       	ldd	r25, Y+4	; 0x04
     a54:	94 60       	ori	r25, 0x04	; 4
     a56:	9c 83       	std	Y+4, r25	; 0x04
     a58:	8b 83       	std	Y+3, r24	; 0x03
     a5a:	2e 85       	ldd	r18, Y+14	; 0x0e
     a5c:	3f 85       	ldd	r19, Y+15	; 0x0f
     a5e:	8b 81       	ldd	r24, Y+3	; 0x03
     a60:	9c 81       	ldd	r25, Y+4	; 0x04
     a62:	28 2b       	or	r18, r24
     a64:	39 2b       	or	r19, r25
     a66:	8d 81       	ldd	r24, Y+5	; 0x05
     a68:	9e 81       	ldd	r25, Y+6	; 0x06
     a6a:	02 96       	adiw	r24, 0x02	; 2
     a6c:	4a 89       	ldd	r20, Y+18	; 0x12
     a6e:	5b 89       	ldd	r21, Y+19	; 0x13
     a70:	b9 01       	movw	r22, r18
     a72:	0e 94 ae 10 	call	0x215c	; 0x215c <vTaskPlaceOnUnorderedEventList>
     a76:	1a 82       	std	Y+2, r1	; 0x02
     a78:	19 82       	std	Y+1, r1	; 0x01
     a7a:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <xTaskResumeAll>
     a7e:	8b 87       	std	Y+11, r24	; 0x0b
     a80:	8a 89       	ldd	r24, Y+18	; 0x12
     a82:	9b 89       	ldd	r25, Y+19	; 0x13
     a84:	89 2b       	or	r24, r25
     a86:	09 f4       	brne	.+2      	; 0xa8a <xEventGroupWaitBits+0xfa>
     a88:	3f c0       	rjmp	.+126    	; 0xb08 <xEventGroupWaitBits+0x178>
     a8a:	8b 85       	ldd	r24, Y+11	; 0x0b
     a8c:	88 23       	and	r24, r24
     a8e:	11 f4       	brne	.+4      	; 0xa94 <xEventGroupWaitBits+0x104>
     a90:	0e 94 5f 0a 	call	0x14be	; 0x14be <vPortYield>
     a94:	0e 94 08 12 	call	0x2410	; 0x2410 <uxTaskResetEventItemValue>
     a98:	9a 83       	std	Y+2, r25	; 0x02
     a9a:	89 83       	std	Y+1, r24	; 0x01
     a9c:	89 81       	ldd	r24, Y+1	; 0x01
     a9e:	9a 81       	ldd	r25, Y+2	; 0x02
     aa0:	88 27       	eor	r24, r24
     aa2:	92 70       	andi	r25, 0x02	; 2
     aa4:	89 2b       	or	r24, r25
     aa6:	59 f5       	brne	.+86     	; 0xafe <xEventGroupWaitBits+0x16e>
     aa8:	0f b6       	in	r0, 0x3f	; 63
     aaa:	f8 94       	cli
     aac:	0f 92       	push	r0
     aae:	8d 81       	ldd	r24, Y+5	; 0x05
     ab0:	9e 81       	ldd	r25, Y+6	; 0x06
     ab2:	fc 01       	movw	r30, r24
     ab4:	80 81       	ld	r24, Z
     ab6:	91 81       	ldd	r25, Z+1	; 0x01
     ab8:	9a 83       	std	Y+2, r25	; 0x02
     aba:	89 83       	std	Y+1, r24	; 0x01
     abc:	2e 85       	ldd	r18, Y+14	; 0x0e
     abe:	3f 85       	ldd	r19, Y+15	; 0x0f
     ac0:	89 81       	ldd	r24, Y+1	; 0x01
     ac2:	9a 81       	ldd	r25, Y+2	; 0x02
     ac4:	49 89       	ldd	r20, Y+17	; 0x11
     ac6:	b9 01       	movw	r22, r18
     ac8:	0e 94 87 06 	call	0xd0e	; 0xd0e <prvTestWaitCondition>
     acc:	88 23       	and	r24, r24
     ace:	99 f0       	breq	.+38     	; 0xaf6 <xEventGroupWaitBits+0x166>
     ad0:	88 89       	ldd	r24, Y+16	; 0x10
     ad2:	88 23       	and	r24, r24
     ad4:	81 f0       	breq	.+32     	; 0xaf6 <xEventGroupWaitBits+0x166>
     ad6:	8d 81       	ldd	r24, Y+5	; 0x05
     ad8:	9e 81       	ldd	r25, Y+6	; 0x06
     ada:	fc 01       	movw	r30, r24
     adc:	20 81       	ld	r18, Z
     ade:	31 81       	ldd	r19, Z+1	; 0x01
     ae0:	8e 85       	ldd	r24, Y+14	; 0x0e
     ae2:	9f 85       	ldd	r25, Y+15	; 0x0f
     ae4:	80 95       	com	r24
     ae6:	90 95       	com	r25
     ae8:	28 23       	and	r18, r24
     aea:	39 23       	and	r19, r25
     aec:	8d 81       	ldd	r24, Y+5	; 0x05
     aee:	9e 81       	ldd	r25, Y+6	; 0x06
     af0:	fc 01       	movw	r30, r24
     af2:	31 83       	std	Z+1, r19	; 0x01
     af4:	20 83       	st	Z, r18
     af6:	81 e0       	ldi	r24, 0x01	; 1
     af8:	8f 83       	std	Y+7, r24	; 0x07
     afa:	0f 90       	pop	r0
     afc:	0f be       	out	0x3f, r0	; 63
     afe:	89 81       	ldd	r24, Y+1	; 0x01
     b00:	9a 81       	ldd	r25, Y+2	; 0x02
     b02:	99 27       	eor	r25, r25
     b04:	9a 83       	std	Y+2, r25	; 0x02
     b06:	89 83       	std	Y+1, r24	; 0x01
     b08:	89 81       	ldd	r24, Y+1	; 0x01
     b0a:	9a 81       	ldd	r25, Y+2	; 0x02
     b0c:	63 96       	adiw	r28, 0x13	; 19
     b0e:	0f b6       	in	r0, 0x3f	; 63
     b10:	f8 94       	cli
     b12:	de bf       	out	0x3e, r29	; 62
     b14:	0f be       	out	0x3f, r0	; 63
     b16:	cd bf       	out	0x3d, r28	; 61
     b18:	df 91       	pop	r29
     b1a:	cf 91       	pop	r28
     b1c:	1f 91       	pop	r17
     b1e:	0f 91       	pop	r16
     b20:	08 95       	ret

00000b22 <xEventGroupClearBits>:
     b22:	cf 93       	push	r28
     b24:	df 93       	push	r29
     b26:	cd b7       	in	r28, 0x3d	; 61
     b28:	de b7       	in	r29, 0x3e	; 62
     b2a:	28 97       	sbiw	r28, 0x08	; 8
     b2c:	0f b6       	in	r0, 0x3f	; 63
     b2e:	f8 94       	cli
     b30:	de bf       	out	0x3e, r29	; 62
     b32:	0f be       	out	0x3f, r0	; 63
     b34:	cd bf       	out	0x3d, r28	; 61
     b36:	9e 83       	std	Y+6, r25	; 0x06
     b38:	8d 83       	std	Y+5, r24	; 0x05
     b3a:	78 87       	std	Y+8, r23	; 0x08
     b3c:	6f 83       	std	Y+7, r22	; 0x07
     b3e:	8d 81       	ldd	r24, Y+5	; 0x05
     b40:	9e 81       	ldd	r25, Y+6	; 0x06
     b42:	9a 83       	std	Y+2, r25	; 0x02
     b44:	89 83       	std	Y+1, r24	; 0x01
     b46:	0f b6       	in	r0, 0x3f	; 63
     b48:	f8 94       	cli
     b4a:	0f 92       	push	r0
     b4c:	89 81       	ldd	r24, Y+1	; 0x01
     b4e:	9a 81       	ldd	r25, Y+2	; 0x02
     b50:	fc 01       	movw	r30, r24
     b52:	80 81       	ld	r24, Z
     b54:	91 81       	ldd	r25, Z+1	; 0x01
     b56:	9c 83       	std	Y+4, r25	; 0x04
     b58:	8b 83       	std	Y+3, r24	; 0x03
     b5a:	89 81       	ldd	r24, Y+1	; 0x01
     b5c:	9a 81       	ldd	r25, Y+2	; 0x02
     b5e:	fc 01       	movw	r30, r24
     b60:	20 81       	ld	r18, Z
     b62:	31 81       	ldd	r19, Z+1	; 0x01
     b64:	8f 81       	ldd	r24, Y+7	; 0x07
     b66:	98 85       	ldd	r25, Y+8	; 0x08
     b68:	80 95       	com	r24
     b6a:	90 95       	com	r25
     b6c:	28 23       	and	r18, r24
     b6e:	39 23       	and	r19, r25
     b70:	89 81       	ldd	r24, Y+1	; 0x01
     b72:	9a 81       	ldd	r25, Y+2	; 0x02
     b74:	fc 01       	movw	r30, r24
     b76:	31 83       	std	Z+1, r19	; 0x01
     b78:	20 83       	st	Z, r18
     b7a:	0f 90       	pop	r0
     b7c:	0f be       	out	0x3f, r0	; 63
     b7e:	8b 81       	ldd	r24, Y+3	; 0x03
     b80:	9c 81       	ldd	r25, Y+4	; 0x04
     b82:	28 96       	adiw	r28, 0x08	; 8
     b84:	0f b6       	in	r0, 0x3f	; 63
     b86:	f8 94       	cli
     b88:	de bf       	out	0x3e, r29	; 62
     b8a:	0f be       	out	0x3f, r0	; 63
     b8c:	cd bf       	out	0x3d, r28	; 61
     b8e:	df 91       	pop	r29
     b90:	cf 91       	pop	r28
     b92:	08 95       	ret

00000b94 <xEventGroupSetBits>:
     b94:	cf 93       	push	r28
     b96:	df 93       	push	r29
     b98:	cd b7       	in	r28, 0x3d	; 61
     b9a:	de b7       	in	r29, 0x3e	; 62
     b9c:	65 97       	sbiw	r28, 0x15	; 21
     b9e:	0f b6       	in	r0, 0x3f	; 63
     ba0:	f8 94       	cli
     ba2:	de bf       	out	0x3e, r29	; 62
     ba4:	0f be       	out	0x3f, r0	; 63
     ba6:	cd bf       	out	0x3d, r28	; 61
     ba8:	9b 8b       	std	Y+19, r25	; 0x13
     baa:	8a 8b       	std	Y+18, r24	; 0x12
     bac:	7d 8b       	std	Y+21, r23	; 0x15
     bae:	6c 8b       	std	Y+20, r22	; 0x14
     bb0:	1c 82       	std	Y+4, r1	; 0x04
     bb2:	1b 82       	std	Y+3, r1	; 0x03
     bb4:	8a 89       	ldd	r24, Y+18	; 0x12
     bb6:	9b 89       	ldd	r25, Y+19	; 0x13
     bb8:	9f 83       	std	Y+7, r25	; 0x07
     bba:	8e 83       	std	Y+6, r24	; 0x06
     bbc:	1d 82       	std	Y+5, r1	; 0x05
     bbe:	8e 81       	ldd	r24, Y+6	; 0x06
     bc0:	9f 81       	ldd	r25, Y+7	; 0x07
     bc2:	02 96       	adiw	r24, 0x02	; 2
     bc4:	99 87       	std	Y+9, r25	; 0x09
     bc6:	88 87       	std	Y+8, r24	; 0x08
     bc8:	88 85       	ldd	r24, Y+8	; 0x08
     bca:	99 85       	ldd	r25, Y+9	; 0x09
     bcc:	03 96       	adiw	r24, 0x03	; 3
     bce:	9b 87       	std	Y+11, r25	; 0x0b
     bd0:	8a 87       	std	Y+10, r24	; 0x0a
     bd2:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <vTaskSuspendAll>
     bd6:	88 85       	ldd	r24, Y+8	; 0x08
     bd8:	99 85       	ldd	r25, Y+9	; 0x09
     bda:	fc 01       	movw	r30, r24
     bdc:	85 81       	ldd	r24, Z+5	; 0x05
     bde:	96 81       	ldd	r25, Z+6	; 0x06
     be0:	9a 83       	std	Y+2, r25	; 0x02
     be2:	89 83       	std	Y+1, r24	; 0x01
     be4:	8e 81       	ldd	r24, Y+6	; 0x06
     be6:	9f 81       	ldd	r25, Y+7	; 0x07
     be8:	fc 01       	movw	r30, r24
     bea:	20 81       	ld	r18, Z
     bec:	31 81       	ldd	r19, Z+1	; 0x01
     bee:	8c 89       	ldd	r24, Y+20	; 0x14
     bf0:	9d 89       	ldd	r25, Y+21	; 0x15
     bf2:	28 2b       	or	r18, r24
     bf4:	39 2b       	or	r19, r25
     bf6:	8e 81       	ldd	r24, Y+6	; 0x06
     bf8:	9f 81       	ldd	r25, Y+7	; 0x07
     bfa:	fc 01       	movw	r30, r24
     bfc:	31 83       	std	Z+1, r19	; 0x01
     bfe:	20 83       	st	Z, r18
     c00:	5e c0       	rjmp	.+188    	; 0xcbe <xEventGroupSetBits+0x12a>
     c02:	89 81       	ldd	r24, Y+1	; 0x01
     c04:	9a 81       	ldd	r25, Y+2	; 0x02
     c06:	fc 01       	movw	r30, r24
     c08:	82 81       	ldd	r24, Z+2	; 0x02
     c0a:	93 81       	ldd	r25, Z+3	; 0x03
     c0c:	9d 87       	std	Y+13, r25	; 0x0d
     c0e:	8c 87       	std	Y+12, r24	; 0x0c
     c10:	89 81       	ldd	r24, Y+1	; 0x01
     c12:	9a 81       	ldd	r25, Y+2	; 0x02
     c14:	fc 01       	movw	r30, r24
     c16:	80 81       	ld	r24, Z
     c18:	91 81       	ldd	r25, Z+1	; 0x01
     c1a:	9f 87       	std	Y+15, r25	; 0x0f
     c1c:	8e 87       	std	Y+14, r24	; 0x0e
     c1e:	1d 82       	std	Y+5, r1	; 0x05
     c20:	8e 85       	ldd	r24, Y+14	; 0x0e
     c22:	9f 85       	ldd	r25, Y+15	; 0x0f
     c24:	88 27       	eor	r24, r24
     c26:	99 8b       	std	Y+17, r25	; 0x11
     c28:	88 8b       	std	Y+16, r24	; 0x10
     c2a:	8e 85       	ldd	r24, Y+14	; 0x0e
     c2c:	9f 85       	ldd	r25, Y+15	; 0x0f
     c2e:	99 27       	eor	r25, r25
     c30:	9f 87       	std	Y+15, r25	; 0x0f
     c32:	8e 87       	std	Y+14, r24	; 0x0e
     c34:	88 89       	ldd	r24, Y+16	; 0x10
     c36:	99 89       	ldd	r25, Y+17	; 0x11
     c38:	88 27       	eor	r24, r24
     c3a:	94 70       	andi	r25, 0x04	; 4
     c3c:	89 2b       	or	r24, r25
     c3e:	71 f4       	brne	.+28     	; 0xc5c <xEventGroupSetBits+0xc8>
     c40:	8e 81       	ldd	r24, Y+6	; 0x06
     c42:	9f 81       	ldd	r25, Y+7	; 0x07
     c44:	fc 01       	movw	r30, r24
     c46:	20 81       	ld	r18, Z
     c48:	31 81       	ldd	r19, Z+1	; 0x01
     c4a:	8e 85       	ldd	r24, Y+14	; 0x0e
     c4c:	9f 85       	ldd	r25, Y+15	; 0x0f
     c4e:	82 23       	and	r24, r18
     c50:	93 23       	and	r25, r19
     c52:	89 2b       	or	r24, r25
     c54:	99 f0       	breq	.+38     	; 0xc7c <xEventGroupSetBits+0xe8>
     c56:	81 e0       	ldi	r24, 0x01	; 1
     c58:	8d 83       	std	Y+5, r24	; 0x05
     c5a:	10 c0       	rjmp	.+32     	; 0xc7c <xEventGroupSetBits+0xe8>
     c5c:	8e 81       	ldd	r24, Y+6	; 0x06
     c5e:	9f 81       	ldd	r25, Y+7	; 0x07
     c60:	fc 01       	movw	r30, r24
     c62:	20 81       	ld	r18, Z
     c64:	31 81       	ldd	r19, Z+1	; 0x01
     c66:	8e 85       	ldd	r24, Y+14	; 0x0e
     c68:	9f 85       	ldd	r25, Y+15	; 0x0f
     c6a:	28 23       	and	r18, r24
     c6c:	39 23       	and	r19, r25
     c6e:	8e 85       	ldd	r24, Y+14	; 0x0e
     c70:	9f 85       	ldd	r25, Y+15	; 0x0f
     c72:	28 17       	cp	r18, r24
     c74:	39 07       	cpc	r19, r25
     c76:	11 f4       	brne	.+4      	; 0xc7c <xEventGroupSetBits+0xe8>
     c78:	81 e0       	ldi	r24, 0x01	; 1
     c7a:	8d 83       	std	Y+5, r24	; 0x05
     c7c:	8d 81       	ldd	r24, Y+5	; 0x05
     c7e:	88 23       	and	r24, r24
     c80:	d1 f0       	breq	.+52     	; 0xcb6 <xEventGroupSetBits+0x122>
     c82:	88 89       	ldd	r24, Y+16	; 0x10
     c84:	99 89       	ldd	r25, Y+17	; 0x11
     c86:	88 27       	eor	r24, r24
     c88:	91 70       	andi	r25, 0x01	; 1
     c8a:	89 2b       	or	r24, r25
     c8c:	41 f0       	breq	.+16     	; 0xc9e <xEventGroupSetBits+0x10a>
     c8e:	2b 81       	ldd	r18, Y+3	; 0x03
     c90:	3c 81       	ldd	r19, Y+4	; 0x04
     c92:	8e 85       	ldd	r24, Y+14	; 0x0e
     c94:	9f 85       	ldd	r25, Y+15	; 0x0f
     c96:	82 2b       	or	r24, r18
     c98:	93 2b       	or	r25, r19
     c9a:	9c 83       	std	Y+4, r25	; 0x04
     c9c:	8b 83       	std	Y+3, r24	; 0x03
     c9e:	8e 81       	ldd	r24, Y+6	; 0x06
     ca0:	9f 81       	ldd	r25, Y+7	; 0x07
     ca2:	fc 01       	movw	r30, r24
     ca4:	80 81       	ld	r24, Z
     ca6:	91 81       	ldd	r25, Z+1	; 0x01
     ca8:	9c 01       	movw	r18, r24
     caa:	32 60       	ori	r19, 0x02	; 2
     cac:	89 81       	ldd	r24, Y+1	; 0x01
     cae:	9a 81       	ldd	r25, Y+2	; 0x02
     cb0:	b9 01       	movw	r22, r18
     cb2:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <vTaskRemoveFromUnorderedEventList>
     cb6:	8c 85       	ldd	r24, Y+12	; 0x0c
     cb8:	9d 85       	ldd	r25, Y+13	; 0x0d
     cba:	9a 83       	std	Y+2, r25	; 0x02
     cbc:	89 83       	std	Y+1, r24	; 0x01
     cbe:	29 81       	ldd	r18, Y+1	; 0x01
     cc0:	3a 81       	ldd	r19, Y+2	; 0x02
     cc2:	8a 85       	ldd	r24, Y+10	; 0x0a
     cc4:	9b 85       	ldd	r25, Y+11	; 0x0b
     cc6:	28 17       	cp	r18, r24
     cc8:	39 07       	cpc	r19, r25
     cca:	09 f0       	breq	.+2      	; 0xcce <xEventGroupSetBits+0x13a>
     ccc:	9a cf       	rjmp	.-204    	; 0xc02 <xEventGroupSetBits+0x6e>
     cce:	8e 81       	ldd	r24, Y+6	; 0x06
     cd0:	9f 81       	ldd	r25, Y+7	; 0x07
     cd2:	fc 01       	movw	r30, r24
     cd4:	20 81       	ld	r18, Z
     cd6:	31 81       	ldd	r19, Z+1	; 0x01
     cd8:	8b 81       	ldd	r24, Y+3	; 0x03
     cda:	9c 81       	ldd	r25, Y+4	; 0x04
     cdc:	80 95       	com	r24
     cde:	90 95       	com	r25
     ce0:	28 23       	and	r18, r24
     ce2:	39 23       	and	r19, r25
     ce4:	8e 81       	ldd	r24, Y+6	; 0x06
     ce6:	9f 81       	ldd	r25, Y+7	; 0x07
     ce8:	fc 01       	movw	r30, r24
     cea:	31 83       	std	Z+1, r19	; 0x01
     cec:	20 83       	st	Z, r18
     cee:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <xTaskResumeAll>
     cf2:	8e 81       	ldd	r24, Y+6	; 0x06
     cf4:	9f 81       	ldd	r25, Y+7	; 0x07
     cf6:	fc 01       	movw	r30, r24
     cf8:	80 81       	ld	r24, Z
     cfa:	91 81       	ldd	r25, Z+1	; 0x01
     cfc:	65 96       	adiw	r28, 0x15	; 21
     cfe:	0f b6       	in	r0, 0x3f	; 63
     d00:	f8 94       	cli
     d02:	de bf       	out	0x3e, r29	; 62
     d04:	0f be       	out	0x3f, r0	; 63
     d06:	cd bf       	out	0x3d, r28	; 61
     d08:	df 91       	pop	r29
     d0a:	cf 91       	pop	r28
     d0c:	08 95       	ret

00000d0e <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
     d0e:	cf 93       	push	r28
     d10:	df 93       	push	r29
     d12:	00 d0       	rcall	.+0      	; 0xd14 <prvTestWaitCondition+0x6>
     d14:	00 d0       	rcall	.+0      	; 0xd16 <prvTestWaitCondition+0x8>
     d16:	00 d0       	rcall	.+0      	; 0xd18 <prvTestWaitCondition+0xa>
     d18:	cd b7       	in	r28, 0x3d	; 61
     d1a:	de b7       	in	r29, 0x3e	; 62
     d1c:	9b 83       	std	Y+3, r25	; 0x03
     d1e:	8a 83       	std	Y+2, r24	; 0x02
     d20:	7d 83       	std	Y+5, r23	; 0x05
     d22:	6c 83       	std	Y+4, r22	; 0x04
     d24:	4e 83       	std	Y+6, r20	; 0x06
BaseType_t xWaitConditionMet = pdFALSE;
     d26:	19 82       	std	Y+1, r1	; 0x01

	if( xWaitForAllBits == pdFALSE )
     d28:	8e 81       	ldd	r24, Y+6	; 0x06
     d2a:	88 23       	and	r24, r24
     d2c:	59 f4       	brne	.+22     	; 0xd44 <prvTestWaitCondition+0x36>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
     d2e:	2a 81       	ldd	r18, Y+2	; 0x02
     d30:	3b 81       	ldd	r19, Y+3	; 0x03
     d32:	8c 81       	ldd	r24, Y+4	; 0x04
     d34:	9d 81       	ldd	r25, Y+5	; 0x05
     d36:	82 23       	and	r24, r18
     d38:	93 23       	and	r25, r19
     d3a:	89 2b       	or	r24, r25
     d3c:	81 f0       	breq	.+32     	; 0xd5e <prvTestWaitCondition+0x50>
		{
			xWaitConditionMet = pdTRUE;
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	89 83       	std	Y+1, r24	; 0x01
     d42:	0d c0       	rjmp	.+26     	; 0xd5e <prvTestWaitCondition+0x50>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
     d44:	2a 81       	ldd	r18, Y+2	; 0x02
     d46:	3b 81       	ldd	r19, Y+3	; 0x03
     d48:	8c 81       	ldd	r24, Y+4	; 0x04
     d4a:	9d 81       	ldd	r25, Y+5	; 0x05
     d4c:	28 23       	and	r18, r24
     d4e:	39 23       	and	r19, r25
     d50:	8c 81       	ldd	r24, Y+4	; 0x04
     d52:	9d 81       	ldd	r25, Y+5	; 0x05
     d54:	28 17       	cp	r18, r24
     d56:	39 07       	cpc	r19, r25
     d58:	11 f4       	brne	.+4      	; 0xd5e <prvTestWaitCondition+0x50>
		{
			xWaitConditionMet = pdTRUE;
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	89 83       	std	Y+1, r24	; 0x01
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
     d5e:	89 81       	ldd	r24, Y+1	; 0x01
}
     d60:	26 96       	adiw	r28, 0x06	; 6
     d62:	0f b6       	in	r0, 0x3f	; 63
     d64:	f8 94       	cli
     d66:	de bf       	out	0x3e, r29	; 62
     d68:	0f be       	out	0x3f, r0	; 63
     d6a:	cd bf       	out	0x3d, r28	; 61
     d6c:	df 91       	pop	r29
     d6e:	cf 91       	pop	r28
     d70:	08 95       	ret

00000d72 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     d72:	cf 93       	push	r28
     d74:	df 93       	push	r29
     d76:	00 d0       	rcall	.+0      	; 0xd78 <pvPortMalloc+0x6>
     d78:	00 d0       	rcall	.+0      	; 0xd7a <pvPortMalloc+0x8>
     d7a:	cd b7       	in	r28, 0x3d	; 61
     d7c:	de b7       	in	r29, 0x3e	; 62
     d7e:	9c 83       	std	Y+4, r25	; 0x04
     d80:	8b 83       	std	Y+3, r24	; 0x03
void *pvReturn = NULL;
     d82:	1a 82       	std	Y+2, r1	; 0x02
     d84:	19 82       	std	Y+1, r1	; 0x01
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	}
	#endif

	vTaskSuspendAll();
     d86:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
     d8a:	80 91 a5 06 	lds	r24, 0x06A5	; 0x8006a5 <pucAlignedHeap.2085>
     d8e:	90 91 a6 06 	lds	r25, 0x06A6	; 0x8006a6 <pucAlignedHeap.2085+0x1>
     d92:	89 2b       	or	r24, r25
     d94:	31 f4       	brne	.+12     	; 0xda2 <pvPortMalloc+0x30>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
     d96:	88 ec       	ldi	r24, 0xC8	; 200
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	90 93 a6 06 	sts	0x06A6, r25	; 0x8006a6 <pucAlignedHeap.2085+0x1>
     d9e:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <pucAlignedHeap.2085>
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     da2:	20 91 a3 06 	lds	r18, 0x06A3	; 0x8006a3 <xNextFreeByte>
     da6:	30 91 a4 06 	lds	r19, 0x06A4	; 0x8006a4 <xNextFreeByte+0x1>
     daa:	8b 81       	ldd	r24, Y+3	; 0x03
     dac:	9c 81       	ldd	r25, Y+4	; 0x04
     dae:	82 0f       	add	r24, r18
     db0:	93 1f       	adc	r25, r19
     db2:	8b 3d       	cpi	r24, 0xDB	; 219
     db4:	95 40       	sbci	r25, 0x05	; 5
     db6:	38 f5       	brcc	.+78     	; 0xe06 <pvPortMalloc+0x94>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
     db8:	20 91 a3 06 	lds	r18, 0x06A3	; 0x8006a3 <xNextFreeByte>
     dbc:	30 91 a4 06 	lds	r19, 0x06A4	; 0x8006a4 <xNextFreeByte+0x1>
     dc0:	8b 81       	ldd	r24, Y+3	; 0x03
     dc2:	9c 81       	ldd	r25, Y+4	; 0x04
     dc4:	28 0f       	add	r18, r24
     dc6:	39 1f       	adc	r19, r25
     dc8:	80 91 a3 06 	lds	r24, 0x06A3	; 0x8006a3 <xNextFreeByte>
     dcc:	90 91 a4 06 	lds	r25, 0x06A4	; 0x8006a4 <xNextFreeByte+0x1>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     dd0:	82 17       	cp	r24, r18
     dd2:	93 07       	cpc	r25, r19
     dd4:	c0 f4       	brcc	.+48     	; 0xe06 <pvPortMalloc+0x94>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
     dd6:	20 91 a5 06 	lds	r18, 0x06A5	; 0x8006a5 <pucAlignedHeap.2085>
     dda:	30 91 a6 06 	lds	r19, 0x06A6	; 0x8006a6 <pucAlignedHeap.2085+0x1>
     dde:	80 91 a3 06 	lds	r24, 0x06A3	; 0x8006a3 <xNextFreeByte>
     de2:	90 91 a4 06 	lds	r25, 0x06A4	; 0x8006a4 <xNextFreeByte+0x1>
     de6:	82 0f       	add	r24, r18
     de8:	93 1f       	adc	r25, r19
     dea:	9a 83       	std	Y+2, r25	; 0x02
     dec:	89 83       	std	Y+1, r24	; 0x01
			xNextFreeByte += xWantedSize;
     dee:	20 91 a3 06 	lds	r18, 0x06A3	; 0x8006a3 <xNextFreeByte>
     df2:	30 91 a4 06 	lds	r19, 0x06A4	; 0x8006a4 <xNextFreeByte+0x1>
     df6:	8b 81       	ldd	r24, Y+3	; 0x03
     df8:	9c 81       	ldd	r25, Y+4	; 0x04
     dfa:	82 0f       	add	r24, r18
     dfc:	93 1f       	adc	r25, r19
     dfe:	90 93 a4 06 	sts	0x06A4, r25	; 0x8006a4 <xNextFreeByte+0x1>
     e02:	80 93 a3 06 	sts	0x06A3, r24	; 0x8006a3 <xNextFreeByte>
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     e06:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
     e0a:	89 81       	ldd	r24, Y+1	; 0x01
     e0c:	9a 81       	ldd	r25, Y+2	; 0x02
}
     e0e:	0f 90       	pop	r0
     e10:	0f 90       	pop	r0
     e12:	0f 90       	pop	r0
     e14:	0f 90       	pop	r0
     e16:	df 91       	pop	r29
     e18:	cf 91       	pop	r28
     e1a:	08 95       	ret

00000e1c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     e1c:	cf 93       	push	r28
     e1e:	df 93       	push	r29
     e20:	00 d0       	rcall	.+0      	; 0xe22 <vPortFree+0x6>
     e22:	cd b7       	in	r28, 0x3d	; 61
     e24:	de b7       	in	r29, 0x3e	; 62
     e26:	9a 83       	std	Y+2, r25	; 0x02
     e28:	89 83       	std	Y+1, r24	; 0x01
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
}
     e2a:	00 00       	nop
     e2c:	0f 90       	pop	r0
     e2e:	0f 90       	pop	r0
     e30:	df 91       	pop	r29
     e32:	cf 91       	pop	r28
     e34:	08 95       	ret

00000e36 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     e36:	cf 93       	push	r28
     e38:	df 93       	push	r29
     e3a:	00 d0       	rcall	.+0      	; 0xe3c <vListInitialise+0x6>
     e3c:	cd b7       	in	r28, 0x3d	; 61
     e3e:	de b7       	in	r29, 0x3e	; 62
     e40:	9a 83       	std	Y+2, r25	; 0x02
     e42:	89 83       	std	Y+1, r24	; 0x01
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     e44:	89 81       	ldd	r24, Y+1	; 0x01
     e46:	9a 81       	ldd	r25, Y+2	; 0x02
     e48:	9c 01       	movw	r18, r24
     e4a:	2d 5f       	subi	r18, 0xFD	; 253
     e4c:	3f 4f       	sbci	r19, 0xFF	; 255
     e4e:	89 81       	ldd	r24, Y+1	; 0x01
     e50:	9a 81       	ldd	r25, Y+2	; 0x02
     e52:	fc 01       	movw	r30, r24
     e54:	32 83       	std	Z+2, r19	; 0x02
     e56:	21 83       	std	Z+1, r18	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     e58:	89 81       	ldd	r24, Y+1	; 0x01
     e5a:	9a 81       	ldd	r25, Y+2	; 0x02
     e5c:	2f ef       	ldi	r18, 0xFF	; 255
     e5e:	3f ef       	ldi	r19, 0xFF	; 255
     e60:	fc 01       	movw	r30, r24
     e62:	34 83       	std	Z+4, r19	; 0x04
     e64:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     e66:	89 81       	ldd	r24, Y+1	; 0x01
     e68:	9a 81       	ldd	r25, Y+2	; 0x02
     e6a:	9c 01       	movw	r18, r24
     e6c:	2d 5f       	subi	r18, 0xFD	; 253
     e6e:	3f 4f       	sbci	r19, 0xFF	; 255
     e70:	89 81       	ldd	r24, Y+1	; 0x01
     e72:	9a 81       	ldd	r25, Y+2	; 0x02
     e74:	fc 01       	movw	r30, r24
     e76:	36 83       	std	Z+6, r19	; 0x06
     e78:	25 83       	std	Z+5, r18	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     e7a:	89 81       	ldd	r24, Y+1	; 0x01
     e7c:	9a 81       	ldd	r25, Y+2	; 0x02
     e7e:	9c 01       	movw	r18, r24
     e80:	2d 5f       	subi	r18, 0xFD	; 253
     e82:	3f 4f       	sbci	r19, 0xFF	; 255
     e84:	89 81       	ldd	r24, Y+1	; 0x01
     e86:	9a 81       	ldd	r25, Y+2	; 0x02
     e88:	fc 01       	movw	r30, r24
     e8a:	30 87       	std	Z+8, r19	; 0x08
     e8c:	27 83       	std	Z+7, r18	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     e8e:	89 81       	ldd	r24, Y+1	; 0x01
     e90:	9a 81       	ldd	r25, Y+2	; 0x02
     e92:	fc 01       	movw	r30, r24
     e94:	10 82       	st	Z, r1

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
     e96:	00 00       	nop
     e98:	0f 90       	pop	r0
     e9a:	0f 90       	pop	r0
     e9c:	df 91       	pop	r29
     e9e:	cf 91       	pop	r28
     ea0:	08 95       	ret

00000ea2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
     ea2:	cf 93       	push	r28
     ea4:	df 93       	push	r29
     ea6:	00 d0       	rcall	.+0      	; 0xea8 <vListInitialiseItem+0x6>
     ea8:	cd b7       	in	r28, 0x3d	; 61
     eaa:	de b7       	in	r29, 0x3e	; 62
     eac:	9a 83       	std	Y+2, r25	; 0x02
     eae:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
     eb0:	89 81       	ldd	r24, Y+1	; 0x01
     eb2:	9a 81       	ldd	r25, Y+2	; 0x02
     eb4:	fc 01       	movw	r30, r24
     eb6:	11 86       	std	Z+9, r1	; 0x09
     eb8:	10 86       	std	Z+8, r1	; 0x08

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
     eba:	00 00       	nop
     ebc:	0f 90       	pop	r0
     ebe:	0f 90       	pop	r0
     ec0:	df 91       	pop	r29
     ec2:	cf 91       	pop	r28
     ec4:	08 95       	ret

00000ec6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     ec6:	cf 93       	push	r28
     ec8:	df 93       	push	r29
     eca:	00 d0       	rcall	.+0      	; 0xecc <vListInsertEnd+0x6>
     ecc:	00 d0       	rcall	.+0      	; 0xece <vListInsertEnd+0x8>
     ece:	00 d0       	rcall	.+0      	; 0xed0 <vListInsertEnd+0xa>
     ed0:	cd b7       	in	r28, 0x3d	; 61
     ed2:	de b7       	in	r29, 0x3e	; 62
     ed4:	9c 83       	std	Y+4, r25	; 0x04
     ed6:	8b 83       	std	Y+3, r24	; 0x03
     ed8:	7e 83       	std	Y+6, r23	; 0x06
     eda:	6d 83       	std	Y+5, r22	; 0x05
ListItem_t * const pxIndex = pxList->pxIndex;
     edc:	8b 81       	ldd	r24, Y+3	; 0x03
     ede:	9c 81       	ldd	r25, Y+4	; 0x04
     ee0:	fc 01       	movw	r30, r24
     ee2:	81 81       	ldd	r24, Z+1	; 0x01
     ee4:	92 81       	ldd	r25, Z+2	; 0x02
     ee6:	9a 83       	std	Y+2, r25	; 0x02
     ee8:	89 83       	std	Y+1, r24	; 0x01
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     eea:	8d 81       	ldd	r24, Y+5	; 0x05
     eec:	9e 81       	ldd	r25, Y+6	; 0x06
     eee:	29 81       	ldd	r18, Y+1	; 0x01
     ef0:	3a 81       	ldd	r19, Y+2	; 0x02
     ef2:	fc 01       	movw	r30, r24
     ef4:	33 83       	std	Z+3, r19	; 0x03
     ef6:	22 83       	std	Z+2, r18	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     ef8:	89 81       	ldd	r24, Y+1	; 0x01
     efa:	9a 81       	ldd	r25, Y+2	; 0x02
     efc:	fc 01       	movw	r30, r24
     efe:	24 81       	ldd	r18, Z+4	; 0x04
     f00:	35 81       	ldd	r19, Z+5	; 0x05
     f02:	8d 81       	ldd	r24, Y+5	; 0x05
     f04:	9e 81       	ldd	r25, Y+6	; 0x06
     f06:	fc 01       	movw	r30, r24
     f08:	35 83       	std	Z+5, r19	; 0x05
     f0a:	24 83       	std	Z+4, r18	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     f0c:	89 81       	ldd	r24, Y+1	; 0x01
     f0e:	9a 81       	ldd	r25, Y+2	; 0x02
     f10:	fc 01       	movw	r30, r24
     f12:	84 81       	ldd	r24, Z+4	; 0x04
     f14:	95 81       	ldd	r25, Z+5	; 0x05
     f16:	2d 81       	ldd	r18, Y+5	; 0x05
     f18:	3e 81       	ldd	r19, Y+6	; 0x06
     f1a:	fc 01       	movw	r30, r24
     f1c:	33 83       	std	Z+3, r19	; 0x03
     f1e:	22 83       	std	Z+2, r18	; 0x02
	pxIndex->pxPrevious = pxNewListItem;
     f20:	89 81       	ldd	r24, Y+1	; 0x01
     f22:	9a 81       	ldd	r25, Y+2	; 0x02
     f24:	2d 81       	ldd	r18, Y+5	; 0x05
     f26:	3e 81       	ldd	r19, Y+6	; 0x06
     f28:	fc 01       	movw	r30, r24
     f2a:	35 83       	std	Z+5, r19	; 0x05
     f2c:	24 83       	std	Z+4, r18	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
     f2e:	8d 81       	ldd	r24, Y+5	; 0x05
     f30:	9e 81       	ldd	r25, Y+6	; 0x06
     f32:	2b 81       	ldd	r18, Y+3	; 0x03
     f34:	3c 81       	ldd	r19, Y+4	; 0x04
     f36:	fc 01       	movw	r30, r24
     f38:	31 87       	std	Z+9, r19	; 0x09
     f3a:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
     f3c:	8b 81       	ldd	r24, Y+3	; 0x03
     f3e:	9c 81       	ldd	r25, Y+4	; 0x04
     f40:	fc 01       	movw	r30, r24
     f42:	80 81       	ld	r24, Z
     f44:	21 e0       	ldi	r18, 0x01	; 1
     f46:	28 0f       	add	r18, r24
     f48:	8b 81       	ldd	r24, Y+3	; 0x03
     f4a:	9c 81       	ldd	r25, Y+4	; 0x04
     f4c:	fc 01       	movw	r30, r24
     f4e:	20 83       	st	Z, r18
}
     f50:	00 00       	nop
     f52:	26 96       	adiw	r28, 0x06	; 6
     f54:	0f b6       	in	r0, 0x3f	; 63
     f56:	f8 94       	cli
     f58:	de bf       	out	0x3e, r29	; 62
     f5a:	0f be       	out	0x3f, r0	; 63
     f5c:	cd bf       	out	0x3d, r28	; 61
     f5e:	df 91       	pop	r29
     f60:	cf 91       	pop	r28
     f62:	08 95       	ret

00000f64 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     f64:	cf 93       	push	r28
     f66:	df 93       	push	r29
     f68:	cd b7       	in	r28, 0x3d	; 61
     f6a:	de b7       	in	r29, 0x3e	; 62
     f6c:	28 97       	sbiw	r28, 0x08	; 8
     f6e:	0f b6       	in	r0, 0x3f	; 63
     f70:	f8 94       	cli
     f72:	de bf       	out	0x3e, r29	; 62
     f74:	0f be       	out	0x3f, r0	; 63
     f76:	cd bf       	out	0x3d, r28	; 61
     f78:	9e 83       	std	Y+6, r25	; 0x06
     f7a:	8d 83       	std	Y+5, r24	; 0x05
     f7c:	78 87       	std	Y+8, r23	; 0x08
     f7e:	6f 83       	std	Y+7, r22	; 0x07
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     f80:	8f 81       	ldd	r24, Y+7	; 0x07
     f82:	98 85       	ldd	r25, Y+8	; 0x08
     f84:	fc 01       	movw	r30, r24
     f86:	80 81       	ld	r24, Z
     f88:	91 81       	ldd	r25, Z+1	; 0x01
     f8a:	9c 83       	std	Y+4, r25	; 0x04
     f8c:	8b 83       	std	Y+3, r24	; 0x03
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     f8e:	8b 81       	ldd	r24, Y+3	; 0x03
     f90:	9c 81       	ldd	r25, Y+4	; 0x04
     f92:	01 96       	adiw	r24, 0x01	; 1
     f94:	41 f4       	brne	.+16     	; 0xfa6 <vListInsert+0x42>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     f96:	8d 81       	ldd	r24, Y+5	; 0x05
     f98:	9e 81       	ldd	r25, Y+6	; 0x06
     f9a:	fc 01       	movw	r30, r24
     f9c:	87 81       	ldd	r24, Z+7	; 0x07
     f9e:	90 85       	ldd	r25, Z+8	; 0x08
     fa0:	9a 83       	std	Y+2, r25	; 0x02
     fa2:	89 83       	std	Y+1, r24	; 0x01
     fa4:	1a c0       	rjmp	.+52     	; 0xfda <vListInsert+0x76>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     fa6:	8d 81       	ldd	r24, Y+5	; 0x05
     fa8:	9e 81       	ldd	r25, Y+6	; 0x06
     faa:	03 96       	adiw	r24, 0x03	; 3
     fac:	9a 83       	std	Y+2, r25	; 0x02
     fae:	89 83       	std	Y+1, r24	; 0x01
     fb0:	07 c0       	rjmp	.+14     	; 0xfc0 <vListInsert+0x5c>
     fb2:	89 81       	ldd	r24, Y+1	; 0x01
     fb4:	9a 81       	ldd	r25, Y+2	; 0x02
     fb6:	fc 01       	movw	r30, r24
     fb8:	82 81       	ldd	r24, Z+2	; 0x02
     fba:	93 81       	ldd	r25, Z+3	; 0x03
     fbc:	9a 83       	std	Y+2, r25	; 0x02
     fbe:	89 83       	std	Y+1, r24	; 0x01
     fc0:	89 81       	ldd	r24, Y+1	; 0x01
     fc2:	9a 81       	ldd	r25, Y+2	; 0x02
     fc4:	fc 01       	movw	r30, r24
     fc6:	82 81       	ldd	r24, Z+2	; 0x02
     fc8:	93 81       	ldd	r25, Z+3	; 0x03
     fca:	fc 01       	movw	r30, r24
     fcc:	20 81       	ld	r18, Z
     fce:	31 81       	ldd	r19, Z+1	; 0x01
     fd0:	8b 81       	ldd	r24, Y+3	; 0x03
     fd2:	9c 81       	ldd	r25, Y+4	; 0x04
     fd4:	82 17       	cp	r24, r18
     fd6:	93 07       	cpc	r25, r19
     fd8:	60 f7       	brcc	.-40     	; 0xfb2 <vListInsert+0x4e>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     fda:	89 81       	ldd	r24, Y+1	; 0x01
     fdc:	9a 81       	ldd	r25, Y+2	; 0x02
     fde:	fc 01       	movw	r30, r24
     fe0:	22 81       	ldd	r18, Z+2	; 0x02
     fe2:	33 81       	ldd	r19, Z+3	; 0x03
     fe4:	8f 81       	ldd	r24, Y+7	; 0x07
     fe6:	98 85       	ldd	r25, Y+8	; 0x08
     fe8:	fc 01       	movw	r30, r24
     fea:	33 83       	std	Z+3, r19	; 0x03
     fec:	22 83       	std	Z+2, r18	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     fee:	8f 81       	ldd	r24, Y+7	; 0x07
     ff0:	98 85       	ldd	r25, Y+8	; 0x08
     ff2:	fc 01       	movw	r30, r24
     ff4:	82 81       	ldd	r24, Z+2	; 0x02
     ff6:	93 81       	ldd	r25, Z+3	; 0x03
     ff8:	2f 81       	ldd	r18, Y+7	; 0x07
     ffa:	38 85       	ldd	r19, Y+8	; 0x08
     ffc:	fc 01       	movw	r30, r24
     ffe:	35 83       	std	Z+5, r19	; 0x05
    1000:	24 83       	std	Z+4, r18	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    1002:	8f 81       	ldd	r24, Y+7	; 0x07
    1004:	98 85       	ldd	r25, Y+8	; 0x08
    1006:	29 81       	ldd	r18, Y+1	; 0x01
    1008:	3a 81       	ldd	r19, Y+2	; 0x02
    100a:	fc 01       	movw	r30, r24
    100c:	35 83       	std	Z+5, r19	; 0x05
    100e:	24 83       	std	Z+4, r18	; 0x04
	pxIterator->pxNext = pxNewListItem;
    1010:	89 81       	ldd	r24, Y+1	; 0x01
    1012:	9a 81       	ldd	r25, Y+2	; 0x02
    1014:	2f 81       	ldd	r18, Y+7	; 0x07
    1016:	38 85       	ldd	r19, Y+8	; 0x08
    1018:	fc 01       	movw	r30, r24
    101a:	33 83       	std	Z+3, r19	; 0x03
    101c:	22 83       	std	Z+2, r18	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
    101e:	8f 81       	ldd	r24, Y+7	; 0x07
    1020:	98 85       	ldd	r25, Y+8	; 0x08
    1022:	2d 81       	ldd	r18, Y+5	; 0x05
    1024:	3e 81       	ldd	r19, Y+6	; 0x06
    1026:	fc 01       	movw	r30, r24
    1028:	31 87       	std	Z+9, r19	; 0x09
    102a:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
    102c:	8d 81       	ldd	r24, Y+5	; 0x05
    102e:	9e 81       	ldd	r25, Y+6	; 0x06
    1030:	fc 01       	movw	r30, r24
    1032:	80 81       	ld	r24, Z
    1034:	21 e0       	ldi	r18, 0x01	; 1
    1036:	28 0f       	add	r18, r24
    1038:	8d 81       	ldd	r24, Y+5	; 0x05
    103a:	9e 81       	ldd	r25, Y+6	; 0x06
    103c:	fc 01       	movw	r30, r24
    103e:	20 83       	st	Z, r18
}
    1040:	00 00       	nop
    1042:	28 96       	adiw	r28, 0x08	; 8
    1044:	0f b6       	in	r0, 0x3f	; 63
    1046:	f8 94       	cli
    1048:	de bf       	out	0x3e, r29	; 62
    104a:	0f be       	out	0x3f, r0	; 63
    104c:	cd bf       	out	0x3d, r28	; 61
    104e:	df 91       	pop	r29
    1050:	cf 91       	pop	r28
    1052:	08 95       	ret

00001054 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    1054:	cf 93       	push	r28
    1056:	df 93       	push	r29
    1058:	00 d0       	rcall	.+0      	; 0x105a <uxListRemove+0x6>
    105a:	00 d0       	rcall	.+0      	; 0x105c <uxListRemove+0x8>
    105c:	cd b7       	in	r28, 0x3d	; 61
    105e:	de b7       	in	r29, 0x3e	; 62
    1060:	9c 83       	std	Y+4, r25	; 0x04
    1062:	8b 83       	std	Y+3, r24	; 0x03
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    1064:	8b 81       	ldd	r24, Y+3	; 0x03
    1066:	9c 81       	ldd	r25, Y+4	; 0x04
    1068:	fc 01       	movw	r30, r24
    106a:	80 85       	ldd	r24, Z+8	; 0x08
    106c:	91 85       	ldd	r25, Z+9	; 0x09
    106e:	9a 83       	std	Y+2, r25	; 0x02
    1070:	89 83       	std	Y+1, r24	; 0x01

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1072:	8b 81       	ldd	r24, Y+3	; 0x03
    1074:	9c 81       	ldd	r25, Y+4	; 0x04
    1076:	fc 01       	movw	r30, r24
    1078:	82 81       	ldd	r24, Z+2	; 0x02
    107a:	93 81       	ldd	r25, Z+3	; 0x03
    107c:	2b 81       	ldd	r18, Y+3	; 0x03
    107e:	3c 81       	ldd	r19, Y+4	; 0x04
    1080:	f9 01       	movw	r30, r18
    1082:	24 81       	ldd	r18, Z+4	; 0x04
    1084:	35 81       	ldd	r19, Z+5	; 0x05
    1086:	fc 01       	movw	r30, r24
    1088:	35 83       	std	Z+5, r19	; 0x05
    108a:	24 83       	std	Z+4, r18	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    108c:	8b 81       	ldd	r24, Y+3	; 0x03
    108e:	9c 81       	ldd	r25, Y+4	; 0x04
    1090:	fc 01       	movw	r30, r24
    1092:	84 81       	ldd	r24, Z+4	; 0x04
    1094:	95 81       	ldd	r25, Z+5	; 0x05
    1096:	2b 81       	ldd	r18, Y+3	; 0x03
    1098:	3c 81       	ldd	r19, Y+4	; 0x04
    109a:	f9 01       	movw	r30, r18
    109c:	22 81       	ldd	r18, Z+2	; 0x02
    109e:	33 81       	ldd	r19, Z+3	; 0x03
    10a0:	fc 01       	movw	r30, r24
    10a2:	33 83       	std	Z+3, r19	; 0x03
    10a4:	22 83       	std	Z+2, r18	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    10a6:	89 81       	ldd	r24, Y+1	; 0x01
    10a8:	9a 81       	ldd	r25, Y+2	; 0x02
    10aa:	fc 01       	movw	r30, r24
    10ac:	21 81       	ldd	r18, Z+1	; 0x01
    10ae:	32 81       	ldd	r19, Z+2	; 0x02
    10b0:	8b 81       	ldd	r24, Y+3	; 0x03
    10b2:	9c 81       	ldd	r25, Y+4	; 0x04
    10b4:	28 17       	cp	r18, r24
    10b6:	39 07       	cpc	r19, r25
    10b8:	51 f4       	brne	.+20     	; 0x10ce <uxListRemove+0x7a>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    10ba:	8b 81       	ldd	r24, Y+3	; 0x03
    10bc:	9c 81       	ldd	r25, Y+4	; 0x04
    10be:	fc 01       	movw	r30, r24
    10c0:	24 81       	ldd	r18, Z+4	; 0x04
    10c2:	35 81       	ldd	r19, Z+5	; 0x05
    10c4:	89 81       	ldd	r24, Y+1	; 0x01
    10c6:	9a 81       	ldd	r25, Y+2	; 0x02
    10c8:	fc 01       	movw	r30, r24
    10ca:	32 83       	std	Z+2, r19	; 0x02
    10cc:	21 83       	std	Z+1, r18	; 0x01
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
    10ce:	8b 81       	ldd	r24, Y+3	; 0x03
    10d0:	9c 81       	ldd	r25, Y+4	; 0x04
    10d2:	fc 01       	movw	r30, r24
    10d4:	11 86       	std	Z+9, r1	; 0x09
    10d6:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
    10d8:	89 81       	ldd	r24, Y+1	; 0x01
    10da:	9a 81       	ldd	r25, Y+2	; 0x02
    10dc:	fc 01       	movw	r30, r24
    10de:	80 81       	ld	r24, Z
    10e0:	2f ef       	ldi	r18, 0xFF	; 255
    10e2:	28 0f       	add	r18, r24
    10e4:	89 81       	ldd	r24, Y+1	; 0x01
    10e6:	9a 81       	ldd	r25, Y+2	; 0x02
    10e8:	fc 01       	movw	r30, r24
    10ea:	20 83       	st	Z, r18

	return pxList->uxNumberOfItems;
    10ec:	89 81       	ldd	r24, Y+1	; 0x01
    10ee:	9a 81       	ldd	r25, Y+2	; 0x02
    10f0:	fc 01       	movw	r30, r24
    10f2:	80 81       	ld	r24, Z
}
    10f4:	0f 90       	pop	r0
    10f6:	0f 90       	pop	r0
    10f8:	0f 90       	pop	r0
    10fa:	0f 90       	pop	r0
    10fc:	df 91       	pop	r29
    10fe:	cf 91       	pop	r28
    1100:	08 95       	ret

00001102 <pxPortInitialiseStack>:

void vPortEndScheduler( void )
{
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    1102:	cf 93       	push	r28
    1104:	df 93       	push	r29
    1106:	cd b7       	in	r28, 0x3d	; 61
    1108:	de b7       	in	r29, 0x3e	; 62
    110a:	28 97       	sbiw	r28, 0x08	; 8
    110c:	0f b6       	in	r0, 0x3f	; 63
    110e:	f8 94       	cli
    1110:	de bf       	out	0x3e, r29	; 62
    1112:	0f be       	out	0x3f, r0	; 63
    1114:	cd bf       	out	0x3d, r28	; 61
    1116:	9c 83       	std	Y+4, r25	; 0x04
    1118:	8b 83       	std	Y+3, r24	; 0x03
    111a:	7e 83       	std	Y+6, r23	; 0x06
    111c:	6d 83       	std	Y+5, r22	; 0x05
    111e:	58 87       	std	Y+8, r21	; 0x08
    1120:	4f 83       	std	Y+7, r20	; 0x07
    1122:	8b 81       	ldd	r24, Y+3	; 0x03
    1124:	9c 81       	ldd	r25, Y+4	; 0x04
    1126:	21 e1       	ldi	r18, 0x11	; 17
    1128:	fc 01       	movw	r30, r24
    112a:	20 83       	st	Z, r18
    112c:	8b 81       	ldd	r24, Y+3	; 0x03
    112e:	9c 81       	ldd	r25, Y+4	; 0x04
    1130:	01 97       	sbiw	r24, 0x01	; 1
    1132:	9c 83       	std	Y+4, r25	; 0x04
    1134:	8b 83       	std	Y+3, r24	; 0x03
    1136:	8b 81       	ldd	r24, Y+3	; 0x03
    1138:	9c 81       	ldd	r25, Y+4	; 0x04
    113a:	22 e2       	ldi	r18, 0x22	; 34
    113c:	fc 01       	movw	r30, r24
    113e:	20 83       	st	Z, r18
    1140:	8b 81       	ldd	r24, Y+3	; 0x03
    1142:	9c 81       	ldd	r25, Y+4	; 0x04
    1144:	01 97       	sbiw	r24, 0x01	; 1
    1146:	9c 83       	std	Y+4, r25	; 0x04
    1148:	8b 83       	std	Y+3, r24	; 0x03
    114a:	8b 81       	ldd	r24, Y+3	; 0x03
    114c:	9c 81       	ldd	r25, Y+4	; 0x04
    114e:	23 e3       	ldi	r18, 0x33	; 51
    1150:	fc 01       	movw	r30, r24
    1152:	20 83       	st	Z, r18
    1154:	8b 81       	ldd	r24, Y+3	; 0x03
    1156:	9c 81       	ldd	r25, Y+4	; 0x04
    1158:	01 97       	sbiw	r24, 0x01	; 1
    115a:	9c 83       	std	Y+4, r25	; 0x04
    115c:	8b 83       	std	Y+3, r24	; 0x03
    115e:	8d 81       	ldd	r24, Y+5	; 0x05
    1160:	9e 81       	ldd	r25, Y+6	; 0x06
    1162:	9a 83       	std	Y+2, r25	; 0x02
    1164:	89 83       	std	Y+1, r24	; 0x01
    1166:	29 81       	ldd	r18, Y+1	; 0x01
    1168:	8b 81       	ldd	r24, Y+3	; 0x03
    116a:	9c 81       	ldd	r25, Y+4	; 0x04
    116c:	fc 01       	movw	r30, r24
    116e:	20 83       	st	Z, r18
    1170:	8b 81       	ldd	r24, Y+3	; 0x03
    1172:	9c 81       	ldd	r25, Y+4	; 0x04
    1174:	01 97       	sbiw	r24, 0x01	; 1
    1176:	9c 83       	std	Y+4, r25	; 0x04
    1178:	8b 83       	std	Y+3, r24	; 0x03
    117a:	89 81       	ldd	r24, Y+1	; 0x01
    117c:	9a 81       	ldd	r25, Y+2	; 0x02
    117e:	89 2f       	mov	r24, r25
    1180:	99 27       	eor	r25, r25
    1182:	9a 83       	std	Y+2, r25	; 0x02
    1184:	89 83       	std	Y+1, r24	; 0x01
    1186:	29 81       	ldd	r18, Y+1	; 0x01
    1188:	8b 81       	ldd	r24, Y+3	; 0x03
    118a:	9c 81       	ldd	r25, Y+4	; 0x04
    118c:	fc 01       	movw	r30, r24
    118e:	20 83       	st	Z, r18
    1190:	8b 81       	ldd	r24, Y+3	; 0x03
    1192:	9c 81       	ldd	r25, Y+4	; 0x04
    1194:	01 97       	sbiw	r24, 0x01	; 1
    1196:	9c 83       	std	Y+4, r25	; 0x04
    1198:	8b 83       	std	Y+3, r24	; 0x03
    119a:	8b 81       	ldd	r24, Y+3	; 0x03
    119c:	9c 81       	ldd	r25, Y+4	; 0x04
    119e:	fc 01       	movw	r30, r24
    11a0:	10 82       	st	Z, r1
    11a2:	8b 81       	ldd	r24, Y+3	; 0x03
    11a4:	9c 81       	ldd	r25, Y+4	; 0x04
    11a6:	01 97       	sbiw	r24, 0x01	; 1
    11a8:	9c 83       	std	Y+4, r25	; 0x04
    11aa:	8b 83       	std	Y+3, r24	; 0x03
    11ac:	8b 81       	ldd	r24, Y+3	; 0x03
    11ae:	9c 81       	ldd	r25, Y+4	; 0x04
    11b0:	20 e8       	ldi	r18, 0x80	; 128
    11b2:	fc 01       	movw	r30, r24
    11b4:	20 83       	st	Z, r18
    11b6:	8b 81       	ldd	r24, Y+3	; 0x03
    11b8:	9c 81       	ldd	r25, Y+4	; 0x04
    11ba:	01 97       	sbiw	r24, 0x01	; 1
    11bc:	9c 83       	std	Y+4, r25	; 0x04
    11be:	8b 83       	std	Y+3, r24	; 0x03
    11c0:	8b 81       	ldd	r24, Y+3	; 0x03
    11c2:	9c 81       	ldd	r25, Y+4	; 0x04
    11c4:	fc 01       	movw	r30, r24
    11c6:	10 82       	st	Z, r1
    11c8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ca:	9c 81       	ldd	r25, Y+4	; 0x04
    11cc:	01 97       	sbiw	r24, 0x01	; 1
    11ce:	9c 83       	std	Y+4, r25	; 0x04
    11d0:	8b 83       	std	Y+3, r24	; 0x03
    11d2:	8b 81       	ldd	r24, Y+3	; 0x03
    11d4:	9c 81       	ldd	r25, Y+4	; 0x04
    11d6:	22 e0       	ldi	r18, 0x02	; 2
    11d8:	fc 01       	movw	r30, r24
    11da:	20 83       	st	Z, r18
    11dc:	8b 81       	ldd	r24, Y+3	; 0x03
    11de:	9c 81       	ldd	r25, Y+4	; 0x04
    11e0:	01 97       	sbiw	r24, 0x01	; 1
    11e2:	9c 83       	std	Y+4, r25	; 0x04
    11e4:	8b 83       	std	Y+3, r24	; 0x03
    11e6:	8b 81       	ldd	r24, Y+3	; 0x03
    11e8:	9c 81       	ldd	r25, Y+4	; 0x04
    11ea:	23 e0       	ldi	r18, 0x03	; 3
    11ec:	fc 01       	movw	r30, r24
    11ee:	20 83       	st	Z, r18
    11f0:	8b 81       	ldd	r24, Y+3	; 0x03
    11f2:	9c 81       	ldd	r25, Y+4	; 0x04
    11f4:	01 97       	sbiw	r24, 0x01	; 1
    11f6:	9c 83       	std	Y+4, r25	; 0x04
    11f8:	8b 83       	std	Y+3, r24	; 0x03
    11fa:	8b 81       	ldd	r24, Y+3	; 0x03
    11fc:	9c 81       	ldd	r25, Y+4	; 0x04
    11fe:	24 e0       	ldi	r18, 0x04	; 4
    1200:	fc 01       	movw	r30, r24
    1202:	20 83       	st	Z, r18
    1204:	8b 81       	ldd	r24, Y+3	; 0x03
    1206:	9c 81       	ldd	r25, Y+4	; 0x04
    1208:	01 97       	sbiw	r24, 0x01	; 1
    120a:	9c 83       	std	Y+4, r25	; 0x04
    120c:	8b 83       	std	Y+3, r24	; 0x03
    120e:	8b 81       	ldd	r24, Y+3	; 0x03
    1210:	9c 81       	ldd	r25, Y+4	; 0x04
    1212:	25 e0       	ldi	r18, 0x05	; 5
    1214:	fc 01       	movw	r30, r24
    1216:	20 83       	st	Z, r18
    1218:	8b 81       	ldd	r24, Y+3	; 0x03
    121a:	9c 81       	ldd	r25, Y+4	; 0x04
    121c:	01 97       	sbiw	r24, 0x01	; 1
    121e:	9c 83       	std	Y+4, r25	; 0x04
    1220:	8b 83       	std	Y+3, r24	; 0x03
    1222:	8b 81       	ldd	r24, Y+3	; 0x03
    1224:	9c 81       	ldd	r25, Y+4	; 0x04
    1226:	26 e0       	ldi	r18, 0x06	; 6
    1228:	fc 01       	movw	r30, r24
    122a:	20 83       	st	Z, r18
    122c:	8b 81       	ldd	r24, Y+3	; 0x03
    122e:	9c 81       	ldd	r25, Y+4	; 0x04
    1230:	01 97       	sbiw	r24, 0x01	; 1
    1232:	9c 83       	std	Y+4, r25	; 0x04
    1234:	8b 83       	std	Y+3, r24	; 0x03
    1236:	8b 81       	ldd	r24, Y+3	; 0x03
    1238:	9c 81       	ldd	r25, Y+4	; 0x04
    123a:	27 e0       	ldi	r18, 0x07	; 7
    123c:	fc 01       	movw	r30, r24
    123e:	20 83       	st	Z, r18
    1240:	8b 81       	ldd	r24, Y+3	; 0x03
    1242:	9c 81       	ldd	r25, Y+4	; 0x04
    1244:	01 97       	sbiw	r24, 0x01	; 1
    1246:	9c 83       	std	Y+4, r25	; 0x04
    1248:	8b 83       	std	Y+3, r24	; 0x03
    124a:	8b 81       	ldd	r24, Y+3	; 0x03
    124c:	9c 81       	ldd	r25, Y+4	; 0x04
    124e:	28 e0       	ldi	r18, 0x08	; 8
    1250:	fc 01       	movw	r30, r24
    1252:	20 83       	st	Z, r18
    1254:	8b 81       	ldd	r24, Y+3	; 0x03
    1256:	9c 81       	ldd	r25, Y+4	; 0x04
    1258:	01 97       	sbiw	r24, 0x01	; 1
    125a:	9c 83       	std	Y+4, r25	; 0x04
    125c:	8b 83       	std	Y+3, r24	; 0x03
    125e:	8b 81       	ldd	r24, Y+3	; 0x03
    1260:	9c 81       	ldd	r25, Y+4	; 0x04
    1262:	29 e0       	ldi	r18, 0x09	; 9
    1264:	fc 01       	movw	r30, r24
    1266:	20 83       	st	Z, r18
    1268:	8b 81       	ldd	r24, Y+3	; 0x03
    126a:	9c 81       	ldd	r25, Y+4	; 0x04
    126c:	01 97       	sbiw	r24, 0x01	; 1
    126e:	9c 83       	std	Y+4, r25	; 0x04
    1270:	8b 83       	std	Y+3, r24	; 0x03
    1272:	8b 81       	ldd	r24, Y+3	; 0x03
    1274:	9c 81       	ldd	r25, Y+4	; 0x04
    1276:	20 e1       	ldi	r18, 0x10	; 16
    1278:	fc 01       	movw	r30, r24
    127a:	20 83       	st	Z, r18
    127c:	8b 81       	ldd	r24, Y+3	; 0x03
    127e:	9c 81       	ldd	r25, Y+4	; 0x04
    1280:	01 97       	sbiw	r24, 0x01	; 1
    1282:	9c 83       	std	Y+4, r25	; 0x04
    1284:	8b 83       	std	Y+3, r24	; 0x03
    1286:	8b 81       	ldd	r24, Y+3	; 0x03
    1288:	9c 81       	ldd	r25, Y+4	; 0x04
    128a:	21 e1       	ldi	r18, 0x11	; 17
    128c:	fc 01       	movw	r30, r24
    128e:	20 83       	st	Z, r18
    1290:	8b 81       	ldd	r24, Y+3	; 0x03
    1292:	9c 81       	ldd	r25, Y+4	; 0x04
    1294:	01 97       	sbiw	r24, 0x01	; 1
    1296:	9c 83       	std	Y+4, r25	; 0x04
    1298:	8b 83       	std	Y+3, r24	; 0x03
    129a:	8b 81       	ldd	r24, Y+3	; 0x03
    129c:	9c 81       	ldd	r25, Y+4	; 0x04
    129e:	22 e1       	ldi	r18, 0x12	; 18
    12a0:	fc 01       	movw	r30, r24
    12a2:	20 83       	st	Z, r18
    12a4:	8b 81       	ldd	r24, Y+3	; 0x03
    12a6:	9c 81       	ldd	r25, Y+4	; 0x04
    12a8:	01 97       	sbiw	r24, 0x01	; 1
    12aa:	9c 83       	std	Y+4, r25	; 0x04
    12ac:	8b 83       	std	Y+3, r24	; 0x03
    12ae:	8b 81       	ldd	r24, Y+3	; 0x03
    12b0:	9c 81       	ldd	r25, Y+4	; 0x04
    12b2:	23 e1       	ldi	r18, 0x13	; 19
    12b4:	fc 01       	movw	r30, r24
    12b6:	20 83       	st	Z, r18
    12b8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ba:	9c 81       	ldd	r25, Y+4	; 0x04
    12bc:	01 97       	sbiw	r24, 0x01	; 1
    12be:	9c 83       	std	Y+4, r25	; 0x04
    12c0:	8b 83       	std	Y+3, r24	; 0x03
    12c2:	8b 81       	ldd	r24, Y+3	; 0x03
    12c4:	9c 81       	ldd	r25, Y+4	; 0x04
    12c6:	24 e1       	ldi	r18, 0x14	; 20
    12c8:	fc 01       	movw	r30, r24
    12ca:	20 83       	st	Z, r18
    12cc:	8b 81       	ldd	r24, Y+3	; 0x03
    12ce:	9c 81       	ldd	r25, Y+4	; 0x04
    12d0:	01 97       	sbiw	r24, 0x01	; 1
    12d2:	9c 83       	std	Y+4, r25	; 0x04
    12d4:	8b 83       	std	Y+3, r24	; 0x03
    12d6:	8b 81       	ldd	r24, Y+3	; 0x03
    12d8:	9c 81       	ldd	r25, Y+4	; 0x04
    12da:	25 e1       	ldi	r18, 0x15	; 21
    12dc:	fc 01       	movw	r30, r24
    12de:	20 83       	st	Z, r18
    12e0:	8b 81       	ldd	r24, Y+3	; 0x03
    12e2:	9c 81       	ldd	r25, Y+4	; 0x04
    12e4:	01 97       	sbiw	r24, 0x01	; 1
    12e6:	9c 83       	std	Y+4, r25	; 0x04
    12e8:	8b 83       	std	Y+3, r24	; 0x03
    12ea:	8b 81       	ldd	r24, Y+3	; 0x03
    12ec:	9c 81       	ldd	r25, Y+4	; 0x04
    12ee:	26 e1       	ldi	r18, 0x16	; 22
    12f0:	fc 01       	movw	r30, r24
    12f2:	20 83       	st	Z, r18
    12f4:	8b 81       	ldd	r24, Y+3	; 0x03
    12f6:	9c 81       	ldd	r25, Y+4	; 0x04
    12f8:	01 97       	sbiw	r24, 0x01	; 1
    12fa:	9c 83       	std	Y+4, r25	; 0x04
    12fc:	8b 83       	std	Y+3, r24	; 0x03
    12fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1300:	9c 81       	ldd	r25, Y+4	; 0x04
    1302:	27 e1       	ldi	r18, 0x17	; 23
    1304:	fc 01       	movw	r30, r24
    1306:	20 83       	st	Z, r18
    1308:	8b 81       	ldd	r24, Y+3	; 0x03
    130a:	9c 81       	ldd	r25, Y+4	; 0x04
    130c:	01 97       	sbiw	r24, 0x01	; 1
    130e:	9c 83       	std	Y+4, r25	; 0x04
    1310:	8b 83       	std	Y+3, r24	; 0x03
    1312:	8b 81       	ldd	r24, Y+3	; 0x03
    1314:	9c 81       	ldd	r25, Y+4	; 0x04
    1316:	28 e1       	ldi	r18, 0x18	; 24
    1318:	fc 01       	movw	r30, r24
    131a:	20 83       	st	Z, r18
    131c:	8b 81       	ldd	r24, Y+3	; 0x03
    131e:	9c 81       	ldd	r25, Y+4	; 0x04
    1320:	01 97       	sbiw	r24, 0x01	; 1
    1322:	9c 83       	std	Y+4, r25	; 0x04
    1324:	8b 83       	std	Y+3, r24	; 0x03
    1326:	8b 81       	ldd	r24, Y+3	; 0x03
    1328:	9c 81       	ldd	r25, Y+4	; 0x04
    132a:	29 e1       	ldi	r18, 0x19	; 25
    132c:	fc 01       	movw	r30, r24
    132e:	20 83       	st	Z, r18
    1330:	8b 81       	ldd	r24, Y+3	; 0x03
    1332:	9c 81       	ldd	r25, Y+4	; 0x04
    1334:	01 97       	sbiw	r24, 0x01	; 1
    1336:	9c 83       	std	Y+4, r25	; 0x04
    1338:	8b 83       	std	Y+3, r24	; 0x03
    133a:	8b 81       	ldd	r24, Y+3	; 0x03
    133c:	9c 81       	ldd	r25, Y+4	; 0x04
    133e:	20 e2       	ldi	r18, 0x20	; 32
    1340:	fc 01       	movw	r30, r24
    1342:	20 83       	st	Z, r18
    1344:	8b 81       	ldd	r24, Y+3	; 0x03
    1346:	9c 81       	ldd	r25, Y+4	; 0x04
    1348:	01 97       	sbiw	r24, 0x01	; 1
    134a:	9c 83       	std	Y+4, r25	; 0x04
    134c:	8b 83       	std	Y+3, r24	; 0x03
    134e:	8b 81       	ldd	r24, Y+3	; 0x03
    1350:	9c 81       	ldd	r25, Y+4	; 0x04
    1352:	21 e2       	ldi	r18, 0x21	; 33
    1354:	fc 01       	movw	r30, r24
    1356:	20 83       	st	Z, r18
    1358:	8b 81       	ldd	r24, Y+3	; 0x03
    135a:	9c 81       	ldd	r25, Y+4	; 0x04
    135c:	01 97       	sbiw	r24, 0x01	; 1
    135e:	9c 83       	std	Y+4, r25	; 0x04
    1360:	8b 83       	std	Y+3, r24	; 0x03
    1362:	8b 81       	ldd	r24, Y+3	; 0x03
    1364:	9c 81       	ldd	r25, Y+4	; 0x04
    1366:	22 e2       	ldi	r18, 0x22	; 34
    1368:	fc 01       	movw	r30, r24
    136a:	20 83       	st	Z, r18
    136c:	8b 81       	ldd	r24, Y+3	; 0x03
    136e:	9c 81       	ldd	r25, Y+4	; 0x04
    1370:	01 97       	sbiw	r24, 0x01	; 1
    1372:	9c 83       	std	Y+4, r25	; 0x04
    1374:	8b 83       	std	Y+3, r24	; 0x03
    1376:	8b 81       	ldd	r24, Y+3	; 0x03
    1378:	9c 81       	ldd	r25, Y+4	; 0x04
    137a:	23 e2       	ldi	r18, 0x23	; 35
    137c:	fc 01       	movw	r30, r24
    137e:	20 83       	st	Z, r18
    1380:	8b 81       	ldd	r24, Y+3	; 0x03
    1382:	9c 81       	ldd	r25, Y+4	; 0x04
    1384:	01 97       	sbiw	r24, 0x01	; 1
    1386:	9c 83       	std	Y+4, r25	; 0x04
    1388:	8b 83       	std	Y+3, r24	; 0x03
    138a:	8f 81       	ldd	r24, Y+7	; 0x07
    138c:	98 85       	ldd	r25, Y+8	; 0x08
    138e:	9a 83       	std	Y+2, r25	; 0x02
    1390:	89 83       	std	Y+1, r24	; 0x01
    1392:	29 81       	ldd	r18, Y+1	; 0x01
    1394:	8b 81       	ldd	r24, Y+3	; 0x03
    1396:	9c 81       	ldd	r25, Y+4	; 0x04
    1398:	fc 01       	movw	r30, r24
    139a:	20 83       	st	Z, r18
    139c:	8b 81       	ldd	r24, Y+3	; 0x03
    139e:	9c 81       	ldd	r25, Y+4	; 0x04
    13a0:	01 97       	sbiw	r24, 0x01	; 1
    13a2:	9c 83       	std	Y+4, r25	; 0x04
    13a4:	8b 83       	std	Y+3, r24	; 0x03
    13a6:	89 81       	ldd	r24, Y+1	; 0x01
    13a8:	9a 81       	ldd	r25, Y+2	; 0x02
    13aa:	89 2f       	mov	r24, r25
    13ac:	99 27       	eor	r25, r25
    13ae:	9a 83       	std	Y+2, r25	; 0x02
    13b0:	89 83       	std	Y+1, r24	; 0x01
    13b2:	29 81       	ldd	r18, Y+1	; 0x01
    13b4:	8b 81       	ldd	r24, Y+3	; 0x03
    13b6:	9c 81       	ldd	r25, Y+4	; 0x04
    13b8:	fc 01       	movw	r30, r24
    13ba:	20 83       	st	Z, r18
    13bc:	8b 81       	ldd	r24, Y+3	; 0x03
    13be:	9c 81       	ldd	r25, Y+4	; 0x04
    13c0:	01 97       	sbiw	r24, 0x01	; 1
    13c2:	9c 83       	std	Y+4, r25	; 0x04
    13c4:	8b 83       	std	Y+3, r24	; 0x03
    13c6:	8b 81       	ldd	r24, Y+3	; 0x03
    13c8:	9c 81       	ldd	r25, Y+4	; 0x04
    13ca:	26 e2       	ldi	r18, 0x26	; 38
    13cc:	fc 01       	movw	r30, r24
    13ce:	20 83       	st	Z, r18
    13d0:	8b 81       	ldd	r24, Y+3	; 0x03
    13d2:	9c 81       	ldd	r25, Y+4	; 0x04
    13d4:	01 97       	sbiw	r24, 0x01	; 1
    13d6:	9c 83       	std	Y+4, r25	; 0x04
    13d8:	8b 83       	std	Y+3, r24	; 0x03
    13da:	8b 81       	ldd	r24, Y+3	; 0x03
    13dc:	9c 81       	ldd	r25, Y+4	; 0x04
    13de:	27 e2       	ldi	r18, 0x27	; 39
    13e0:	fc 01       	movw	r30, r24
    13e2:	20 83       	st	Z, r18
    13e4:	8b 81       	ldd	r24, Y+3	; 0x03
    13e6:	9c 81       	ldd	r25, Y+4	; 0x04
    13e8:	01 97       	sbiw	r24, 0x01	; 1
    13ea:	9c 83       	std	Y+4, r25	; 0x04
    13ec:	8b 83       	std	Y+3, r24	; 0x03
    13ee:	8b 81       	ldd	r24, Y+3	; 0x03
    13f0:	9c 81       	ldd	r25, Y+4	; 0x04
    13f2:	28 e2       	ldi	r18, 0x28	; 40
    13f4:	fc 01       	movw	r30, r24
    13f6:	20 83       	st	Z, r18
    13f8:	8b 81       	ldd	r24, Y+3	; 0x03
    13fa:	9c 81       	ldd	r25, Y+4	; 0x04
    13fc:	01 97       	sbiw	r24, 0x01	; 1
    13fe:	9c 83       	std	Y+4, r25	; 0x04
    1400:	8b 83       	std	Y+3, r24	; 0x03
    1402:	8b 81       	ldd	r24, Y+3	; 0x03
    1404:	9c 81       	ldd	r25, Y+4	; 0x04
    1406:	29 e2       	ldi	r18, 0x29	; 41
    1408:	fc 01       	movw	r30, r24
    140a:	20 83       	st	Z, r18
    140c:	8b 81       	ldd	r24, Y+3	; 0x03
    140e:	9c 81       	ldd	r25, Y+4	; 0x04
    1410:	01 97       	sbiw	r24, 0x01	; 1
    1412:	9c 83       	std	Y+4, r25	; 0x04
    1414:	8b 83       	std	Y+3, r24	; 0x03
    1416:	8b 81       	ldd	r24, Y+3	; 0x03
    1418:	9c 81       	ldd	r25, Y+4	; 0x04
    141a:	20 e3       	ldi	r18, 0x30	; 48
    141c:	fc 01       	movw	r30, r24
    141e:	20 83       	st	Z, r18
    1420:	8b 81       	ldd	r24, Y+3	; 0x03
    1422:	9c 81       	ldd	r25, Y+4	; 0x04
    1424:	01 97       	sbiw	r24, 0x01	; 1
    1426:	9c 83       	std	Y+4, r25	; 0x04
    1428:	8b 83       	std	Y+3, r24	; 0x03
    142a:	8b 81       	ldd	r24, Y+3	; 0x03
    142c:	9c 81       	ldd	r25, Y+4	; 0x04
    142e:	21 e3       	ldi	r18, 0x31	; 49
    1430:	fc 01       	movw	r30, r24
    1432:	20 83       	st	Z, r18
    1434:	8b 81       	ldd	r24, Y+3	; 0x03
    1436:	9c 81       	ldd	r25, Y+4	; 0x04
    1438:	01 97       	sbiw	r24, 0x01	; 1
    143a:	9c 83       	std	Y+4, r25	; 0x04
    143c:	8b 83       	std	Y+3, r24	; 0x03
    143e:	8b 81       	ldd	r24, Y+3	; 0x03
    1440:	9c 81       	ldd	r25, Y+4	; 0x04
    1442:	28 96       	adiw	r28, 0x08	; 8
    1444:	0f b6       	in	r0, 0x3f	; 63
    1446:	f8 94       	cli
    1448:	de bf       	out	0x3e, r29	; 62
    144a:	0f be       	out	0x3f, r0	; 63
    144c:	cd bf       	out	0x3d, r28	; 61
    144e:	df 91       	pop	r29
    1450:	cf 91       	pop	r28
    1452:	08 95       	ret

00001454 <xPortStartScheduler>:
    1454:	cf 93       	push	r28
    1456:	df 93       	push	r29
    1458:	cd b7       	in	r28, 0x3d	; 61
    145a:	de b7       	in	r29, 0x3e	; 62
    145c:	0e 94 17 0b 	call	0x162e	; 0x162e <prvSetupTimerInterrupt>
    1460:	a0 91 a7 06 	lds	r26, 0x06A7	; 0x8006a7 <pxCurrentTCB>
    1464:	b0 91 a8 06 	lds	r27, 0x06A8	; 0x8006a8 <pxCurrentTCB+0x1>
    1468:	cd 91       	ld	r28, X+
    146a:	cd bf       	out	0x3d, r28	; 61
    146c:	dd 91       	ld	r29, X+
    146e:	de bf       	out	0x3e, r29	; 62
    1470:	ff 91       	pop	r31
    1472:	ef 91       	pop	r30
    1474:	df 91       	pop	r29
    1476:	cf 91       	pop	r28
    1478:	bf 91       	pop	r27
    147a:	af 91       	pop	r26
    147c:	9f 91       	pop	r25
    147e:	8f 91       	pop	r24
    1480:	7f 91       	pop	r23
    1482:	6f 91       	pop	r22
    1484:	5f 91       	pop	r21
    1486:	4f 91       	pop	r20
    1488:	3f 91       	pop	r19
    148a:	2f 91       	pop	r18
    148c:	1f 91       	pop	r17
    148e:	0f 91       	pop	r16
    1490:	ff 90       	pop	r15
    1492:	ef 90       	pop	r14
    1494:	df 90       	pop	r13
    1496:	cf 90       	pop	r12
    1498:	bf 90       	pop	r11
    149a:	af 90       	pop	r10
    149c:	9f 90       	pop	r9
    149e:	8f 90       	pop	r8
    14a0:	7f 90       	pop	r7
    14a2:	6f 90       	pop	r6
    14a4:	5f 90       	pop	r5
    14a6:	4f 90       	pop	r4
    14a8:	3f 90       	pop	r3
    14aa:	2f 90       	pop	r2
    14ac:	1f 90       	pop	r1
    14ae:	0f 90       	pop	r0
    14b0:	0f be       	out	0x3f, r0	; 63
    14b2:	0f 90       	pop	r0
    14b4:	08 95       	ret
    14b6:	81 e0       	ldi	r24, 0x01	; 1
    14b8:	df 91       	pop	r29
    14ba:	cf 91       	pop	r28
    14bc:	08 95       	ret

000014be <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    14be:	0f 92       	push	r0
    14c0:	0f b6       	in	r0, 0x3f	; 63
    14c2:	f8 94       	cli
    14c4:	0f 92       	push	r0
    14c6:	1f 92       	push	r1
    14c8:	11 24       	eor	r1, r1
    14ca:	2f 92       	push	r2
    14cc:	3f 92       	push	r3
    14ce:	4f 92       	push	r4
    14d0:	5f 92       	push	r5
    14d2:	6f 92       	push	r6
    14d4:	7f 92       	push	r7
    14d6:	8f 92       	push	r8
    14d8:	9f 92       	push	r9
    14da:	af 92       	push	r10
    14dc:	bf 92       	push	r11
    14de:	cf 92       	push	r12
    14e0:	df 92       	push	r13
    14e2:	ef 92       	push	r14
    14e4:	ff 92       	push	r15
    14e6:	0f 93       	push	r16
    14e8:	1f 93       	push	r17
    14ea:	2f 93       	push	r18
    14ec:	3f 93       	push	r19
    14ee:	4f 93       	push	r20
    14f0:	5f 93       	push	r21
    14f2:	6f 93       	push	r22
    14f4:	7f 93       	push	r23
    14f6:	8f 93       	push	r24
    14f8:	9f 93       	push	r25
    14fa:	af 93       	push	r26
    14fc:	bf 93       	push	r27
    14fe:	cf 93       	push	r28
    1500:	df 93       	push	r29
    1502:	ef 93       	push	r30
    1504:	ff 93       	push	r31
    1506:	a0 91 a7 06 	lds	r26, 0x06A7	; 0x8006a7 <pxCurrentTCB>
    150a:	b0 91 a8 06 	lds	r27, 0x06A8	; 0x8006a8 <pxCurrentTCB+0x1>
    150e:	0d b6       	in	r0, 0x3d	; 61
    1510:	0d 92       	st	X+, r0
    1512:	0e b6       	in	r0, 0x3e	; 62
    1514:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    1516:	0e 94 3a 10 	call	0x2074	; 0x2074 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    151a:	a0 91 a7 06 	lds	r26, 0x06A7	; 0x8006a7 <pxCurrentTCB>
    151e:	b0 91 a8 06 	lds	r27, 0x06A8	; 0x8006a8 <pxCurrentTCB+0x1>
    1522:	cd 91       	ld	r28, X+
    1524:	cd bf       	out	0x3d, r28	; 61
    1526:	dd 91       	ld	r29, X+
    1528:	de bf       	out	0x3e, r29	; 62
    152a:	ff 91       	pop	r31
    152c:	ef 91       	pop	r30
    152e:	df 91       	pop	r29
    1530:	cf 91       	pop	r28
    1532:	bf 91       	pop	r27
    1534:	af 91       	pop	r26
    1536:	9f 91       	pop	r25
    1538:	8f 91       	pop	r24
    153a:	7f 91       	pop	r23
    153c:	6f 91       	pop	r22
    153e:	5f 91       	pop	r21
    1540:	4f 91       	pop	r20
    1542:	3f 91       	pop	r19
    1544:	2f 91       	pop	r18
    1546:	1f 91       	pop	r17
    1548:	0f 91       	pop	r16
    154a:	ff 90       	pop	r15
    154c:	ef 90       	pop	r14
    154e:	df 90       	pop	r13
    1550:	cf 90       	pop	r12
    1552:	bf 90       	pop	r11
    1554:	af 90       	pop	r10
    1556:	9f 90       	pop	r9
    1558:	8f 90       	pop	r8
    155a:	7f 90       	pop	r7
    155c:	6f 90       	pop	r6
    155e:	5f 90       	pop	r5
    1560:	4f 90       	pop	r4
    1562:	3f 90       	pop	r3
    1564:	2f 90       	pop	r2
    1566:	1f 90       	pop	r1
    1568:	0f 90       	pop	r0
    156a:	0f be       	out	0x3f, r0	; 63
    156c:	0f 90       	pop	r0

	asm volatile ( "ret" );
    156e:	08 95       	ret
	...

00001572 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    1572:	0f 92       	push	r0
    1574:	0f b6       	in	r0, 0x3f	; 63
    1576:	f8 94       	cli
    1578:	0f 92       	push	r0
    157a:	1f 92       	push	r1
    157c:	11 24       	eor	r1, r1
    157e:	2f 92       	push	r2
    1580:	3f 92       	push	r3
    1582:	4f 92       	push	r4
    1584:	5f 92       	push	r5
    1586:	6f 92       	push	r6
    1588:	7f 92       	push	r7
    158a:	8f 92       	push	r8
    158c:	9f 92       	push	r9
    158e:	af 92       	push	r10
    1590:	bf 92       	push	r11
    1592:	cf 92       	push	r12
    1594:	df 92       	push	r13
    1596:	ef 92       	push	r14
    1598:	ff 92       	push	r15
    159a:	0f 93       	push	r16
    159c:	1f 93       	push	r17
    159e:	2f 93       	push	r18
    15a0:	3f 93       	push	r19
    15a2:	4f 93       	push	r20
    15a4:	5f 93       	push	r21
    15a6:	6f 93       	push	r22
    15a8:	7f 93       	push	r23
    15aa:	8f 93       	push	r24
    15ac:	9f 93       	push	r25
    15ae:	af 93       	push	r26
    15b0:	bf 93       	push	r27
    15b2:	cf 93       	push	r28
    15b4:	df 93       	push	r29
    15b6:	ef 93       	push	r30
    15b8:	ff 93       	push	r31
    15ba:	a0 91 a7 06 	lds	r26, 0x06A7	; 0x8006a7 <pxCurrentTCB>
    15be:	b0 91 a8 06 	lds	r27, 0x06A8	; 0x8006a8 <pxCurrentTCB+0x1>
    15c2:	0d b6       	in	r0, 0x3d	; 61
    15c4:	0d 92       	st	X+, r0
    15c6:	0e b6       	in	r0, 0x3e	; 62
    15c8:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
    15ca:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <xTaskIncrementTick>
    15ce:	88 23       	and	r24, r24
    15d0:	11 f0       	breq	.+4      	; 0x15d6 <vPortYieldFromTick+0x64>
	{
		vTaskSwitchContext();
    15d2:	0e 94 3a 10 	call	0x2074	; 0x2074 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
    15d6:	a0 91 a7 06 	lds	r26, 0x06A7	; 0x8006a7 <pxCurrentTCB>
    15da:	b0 91 a8 06 	lds	r27, 0x06A8	; 0x8006a8 <pxCurrentTCB+0x1>
    15de:	cd 91       	ld	r28, X+
    15e0:	cd bf       	out	0x3d, r28	; 61
    15e2:	dd 91       	ld	r29, X+
    15e4:	de bf       	out	0x3e, r29	; 62
    15e6:	ff 91       	pop	r31
    15e8:	ef 91       	pop	r30
    15ea:	df 91       	pop	r29
    15ec:	cf 91       	pop	r28
    15ee:	bf 91       	pop	r27
    15f0:	af 91       	pop	r26
    15f2:	9f 91       	pop	r25
    15f4:	8f 91       	pop	r24
    15f6:	7f 91       	pop	r23
    15f8:	6f 91       	pop	r22
    15fa:	5f 91       	pop	r21
    15fc:	4f 91       	pop	r20
    15fe:	3f 91       	pop	r19
    1600:	2f 91       	pop	r18
    1602:	1f 91       	pop	r17
    1604:	0f 91       	pop	r16
    1606:	ff 90       	pop	r15
    1608:	ef 90       	pop	r14
    160a:	df 90       	pop	r13
    160c:	cf 90       	pop	r12
    160e:	bf 90       	pop	r11
    1610:	af 90       	pop	r10
    1612:	9f 90       	pop	r9
    1614:	8f 90       	pop	r8
    1616:	7f 90       	pop	r7
    1618:	6f 90       	pop	r6
    161a:	5f 90       	pop	r5
    161c:	4f 90       	pop	r4
    161e:	3f 90       	pop	r3
    1620:	2f 90       	pop	r2
    1622:	1f 90       	pop	r1
    1624:	0f 90       	pop	r0
    1626:	0f be       	out	0x3f, r0	; 63
    1628:	0f 90       	pop	r0

	asm volatile ( "ret" );
    162a:	08 95       	ret
	...

0000162e <prvSetupTimerInterrupt>:

/*
 * Setup timer 1 compare match A to generate a tick interrupt.
 */
static void prvSetupTimerInterrupt( void )
{
    162e:	cf 93       	push	r28
    1630:	df 93       	push	r29
    1632:	00 d0       	rcall	.+0      	; 0x1634 <prvSetupTimerInterrupt+0x6>
    1634:	00 d0       	rcall	.+0      	; 0x1636 <prvSetupTimerInterrupt+0x8>
    1636:	00 d0       	rcall	.+0      	; 0x1638 <prvSetupTimerInterrupt+0xa>
    1638:	cd b7       	in	r28, 0x3d	; 61
    163a:	de b7       	in	r29, 0x3e	; 62
uint8_t ucHighByte, ucLowByte;

	/* Using 16bit timer 1 to generate the tick.  Correct fuses must be
	selected for the configCPU_CLOCK_HZ clock. */

	ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    163c:	80 e8       	ldi	r24, 0x80	; 128
    163e:	9e e3       	ldi	r25, 0x3E	; 62
    1640:	a0 e0       	ldi	r26, 0x00	; 0
    1642:	b0 e0       	ldi	r27, 0x00	; 0
    1644:	89 83       	std	Y+1, r24	; 0x01
    1646:	9a 83       	std	Y+2, r25	; 0x02
    1648:	ab 83       	std	Y+3, r26	; 0x03
    164a:	bc 83       	std	Y+4, r27	; 0x04

	/* We only have 16 bits so have to scale to get our required tick rate. */
	ulCompareMatch /= portCLOCK_PRESCALER;
    164c:	89 81       	ldd	r24, Y+1	; 0x01
    164e:	9a 81       	ldd	r25, Y+2	; 0x02
    1650:	ab 81       	ldd	r26, Y+3	; 0x03
    1652:	bc 81       	ldd	r27, Y+4	; 0x04
    1654:	68 94       	set
    1656:	15 f8       	bld	r1, 5
    1658:	b6 95       	lsr	r27
    165a:	a7 95       	ror	r26
    165c:	97 95       	ror	r25
    165e:	87 95       	ror	r24
    1660:	16 94       	lsr	r1
    1662:	d1 f7       	brne	.-12     	; 0x1658 <prvSetupTimerInterrupt+0x2a>
    1664:	89 83       	std	Y+1, r24	; 0x01
    1666:	9a 83       	std	Y+2, r25	; 0x02
    1668:	ab 83       	std	Y+3, r26	; 0x03
    166a:	bc 83       	std	Y+4, r27	; 0x04

	/* Adjust for correct value. */
	ulCompareMatch -= ( uint32_t ) 1;
    166c:	89 81       	ldd	r24, Y+1	; 0x01
    166e:	9a 81       	ldd	r25, Y+2	; 0x02
    1670:	ab 81       	ldd	r26, Y+3	; 0x03
    1672:	bc 81       	ldd	r27, Y+4	; 0x04
    1674:	01 97       	sbiw	r24, 0x01	; 1
    1676:	a1 09       	sbc	r26, r1
    1678:	b1 09       	sbc	r27, r1
    167a:	89 83       	std	Y+1, r24	; 0x01
    167c:	9a 83       	std	Y+2, r25	; 0x02
    167e:	ab 83       	std	Y+3, r26	; 0x03
    1680:	bc 83       	std	Y+4, r27	; 0x04

	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    1682:	89 81       	ldd	r24, Y+1	; 0x01
    1684:	8d 83       	std	Y+5, r24	; 0x05
	ulCompareMatch >>= 8;
    1686:	89 81       	ldd	r24, Y+1	; 0x01
    1688:	9a 81       	ldd	r25, Y+2	; 0x02
    168a:	ab 81       	ldd	r26, Y+3	; 0x03
    168c:	bc 81       	ldd	r27, Y+4	; 0x04
    168e:	89 2f       	mov	r24, r25
    1690:	9a 2f       	mov	r25, r26
    1692:	ab 2f       	mov	r26, r27
    1694:	bb 27       	eor	r27, r27
    1696:	89 83       	std	Y+1, r24	; 0x01
    1698:	9a 83       	std	Y+2, r25	; 0x02
    169a:	ab 83       	std	Y+3, r26	; 0x03
    169c:	bc 83       	std	Y+4, r27	; 0x04
	ucHighByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    169e:	89 81       	ldd	r24, Y+1	; 0x01
    16a0:	8e 83       	std	Y+6, r24	; 0x06
	OCR1AH = ucHighByte;
    16a2:	8b e4       	ldi	r24, 0x4B	; 75
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	2e 81       	ldd	r18, Y+6	; 0x06
    16a8:	fc 01       	movw	r30, r24
    16aa:	20 83       	st	Z, r18
	OCR1AL = ucLowByte;
    16ac:	8a e4       	ldi	r24, 0x4A	; 74
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	2d 81       	ldd	r18, Y+5	; 0x05
    16b2:	fc 01       	movw	r30, r24
    16b4:	20 83       	st	Z, r18

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
    16b6:	8b e0       	ldi	r24, 0x0B	; 11
    16b8:	8d 83       	std	Y+5, r24	; 0x05
	TCCR1B = ucLowByte;
    16ba:	8e e4       	ldi	r24, 0x4E	; 78
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	2d 81       	ldd	r18, Y+5	; 0x05
    16c0:	fc 01       	movw	r30, r24
    16c2:	20 83       	st	Z, r18

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK;
    16c4:	89 e5       	ldi	r24, 0x59	; 89
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	fc 01       	movw	r30, r24
    16ca:	80 81       	ld	r24, Z
    16cc:	8d 83       	std	Y+5, r24	; 0x05
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    16ce:	8d 81       	ldd	r24, Y+5	; 0x05
    16d0:	80 61       	ori	r24, 0x10	; 16
    16d2:	8d 83       	std	Y+5, r24	; 0x05
	TIMSK = ucLowByte;
    16d4:	89 e5       	ldi	r24, 0x59	; 89
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	2d 81       	ldd	r18, Y+5	; 0x05
    16da:	fc 01       	movw	r30, r24
    16dc:	20 83       	st	Z, r18
}
    16de:	00 00       	nop
    16e0:	26 96       	adiw	r28, 0x06	; 6
    16e2:	0f b6       	in	r0, 0x3f	; 63
    16e4:	f8 94       	cli
    16e6:	de bf       	out	0x3e, r29	; 62
    16e8:	0f be       	out	0x3f, r0	; 63
    16ea:	cd bf       	out	0x3d, r28	; 61
    16ec:	df 91       	pop	r29
    16ee:	cf 91       	pop	r28
    16f0:	08 95       	ret

000016f2 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
    16f2:	0e 94 b9 0a 	call	0x1572	; 0x1572 <vPortYieldFromTick>
		asm volatile ( "reti" );
    16f6:	18 95       	reti
	...

000016fa <xTaskCreate>:
			}
		}
		taskEXIT_CRITICAL();

		return xReturn;
	}
    16fa:	8f 92       	push	r8
    16fc:	9f 92       	push	r9
    16fe:	af 92       	push	r10
    1700:	bf 92       	push	r11
    1702:	cf 92       	push	r12
    1704:	df 92       	push	r13
    1706:	ef 92       	push	r14
    1708:	ff 92       	push	r15
    170a:	0f 93       	push	r16
    170c:	1f 93       	push	r17
    170e:	cf 93       	push	r28
    1710:	df 93       	push	r29
    1712:	cd b7       	in	r28, 0x3d	; 61
    1714:	de b7       	in	r29, 0x3e	; 62
    1716:	60 97       	sbiw	r28, 0x10	; 16
    1718:	0f b6       	in	r0, 0x3f	; 63
    171a:	f8 94       	cli
    171c:	de bf       	out	0x3e, r29	; 62
    171e:	0f be       	out	0x3f, r0	; 63
    1720:	cd bf       	out	0x3d, r28	; 61
    1722:	9f 83       	std	Y+7, r25	; 0x07
    1724:	8e 83       	std	Y+6, r24	; 0x06
    1726:	79 87       	std	Y+9, r23	; 0x09
    1728:	68 87       	std	Y+8, r22	; 0x08
    172a:	5b 87       	std	Y+11, r21	; 0x0b
    172c:	4a 87       	std	Y+10, r20	; 0x0a
    172e:	3d 87       	std	Y+13, r19	; 0x0d
    1730:	2c 87       	std	Y+12, r18	; 0x0c
    1732:	0e 87       	std	Y+14, r16	; 0x0e
    1734:	f8 8a       	std	Y+16, r15	; 0x10
    1736:	ef 86       	std	Y+15, r14	; 0x0f
    1738:	8a 85       	ldd	r24, Y+10	; 0x0a
    173a:	9b 85       	ldd	r25, Y+11	; 0x0b
    173c:	0e 94 b9 06 	call	0xd72	; 0xd72 <pvPortMalloc>
    1740:	9d 83       	std	Y+5, r25	; 0x05
    1742:	8c 83       	std	Y+4, r24	; 0x04
    1744:	8c 81       	ldd	r24, Y+4	; 0x04
    1746:	9d 81       	ldd	r25, Y+5	; 0x05
    1748:	89 2b       	or	r24, r25
    174a:	b9 f0       	breq	.+46     	; 0x177a <xTaskCreate+0x80>
    174c:	88 e2       	ldi	r24, 0x28	; 40
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	0e 94 b9 06 	call	0xd72	; 0xd72 <pvPortMalloc>
    1754:	9a 83       	std	Y+2, r25	; 0x02
    1756:	89 83       	std	Y+1, r24	; 0x01
    1758:	89 81       	ldd	r24, Y+1	; 0x01
    175a:	9a 81       	ldd	r25, Y+2	; 0x02
    175c:	89 2b       	or	r24, r25
    175e:	41 f0       	breq	.+16     	; 0x1770 <xTaskCreate+0x76>
    1760:	89 81       	ldd	r24, Y+1	; 0x01
    1762:	9a 81       	ldd	r25, Y+2	; 0x02
    1764:	2c 81       	ldd	r18, Y+4	; 0x04
    1766:	3d 81       	ldd	r19, Y+5	; 0x05
    1768:	fc 01       	movw	r30, r24
    176a:	30 8f       	std	Z+24, r19	; 0x18
    176c:	27 8b       	std	Z+23, r18	; 0x17
    176e:	07 c0       	rjmp	.+14     	; 0x177e <xTaskCreate+0x84>
    1770:	8c 81       	ldd	r24, Y+4	; 0x04
    1772:	9d 81       	ldd	r25, Y+5	; 0x05
    1774:	0e 94 0e 07 	call	0xe1c	; 0xe1c <vPortFree>
    1778:	02 c0       	rjmp	.+4      	; 0x177e <xTaskCreate+0x84>
    177a:	1a 82       	std	Y+2, r1	; 0x02
    177c:	19 82       	std	Y+1, r1	; 0x01
    177e:	89 81       	ldd	r24, Y+1	; 0x01
    1780:	9a 81       	ldd	r25, Y+2	; 0x02
    1782:	89 2b       	or	r24, r25
    1784:	09 f1       	breq	.+66     	; 0x17c8 <xTaskCreate+0xce>
    1786:	8a 85       	ldd	r24, Y+10	; 0x0a
    1788:	9b 85       	ldd	r25, Y+11	; 0x0b
    178a:	cc 01       	movw	r24, r24
    178c:	a0 e0       	ldi	r26, 0x00	; 0
    178e:	b0 e0       	ldi	r27, 0x00	; 0
    1790:	09 81       	ldd	r16, Y+1	; 0x01
    1792:	1a 81       	ldd	r17, Y+2	; 0x02
    1794:	4f 85       	ldd	r20, Y+15	; 0x0f
    1796:	58 89       	ldd	r21, Y+16	; 0x10
    1798:	2c 85       	ldd	r18, Y+12	; 0x0c
    179a:	3d 85       	ldd	r19, Y+13	; 0x0d
    179c:	68 85       	ldd	r22, Y+8	; 0x08
    179e:	79 85       	ldd	r23, Y+9	; 0x09
    17a0:	ee 81       	ldd	r30, Y+6	; 0x06
    17a2:	ff 81       	ldd	r31, Y+7	; 0x07
    17a4:	81 2c       	mov	r8, r1
    17a6:	91 2c       	mov	r9, r1
    17a8:	58 01       	movw	r10, r16
    17aa:	6a 01       	movw	r12, r20
    17ac:	ee 84       	ldd	r14, Y+14	; 0x0e
    17ae:	89 01       	movw	r16, r18
    17b0:	9c 01       	movw	r18, r24
    17b2:	ad 01       	movw	r20, r26
    17b4:	cf 01       	movw	r24, r30
    17b6:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <prvInitialiseNewTask>
    17ba:	89 81       	ldd	r24, Y+1	; 0x01
    17bc:	9a 81       	ldd	r25, Y+2	; 0x02
    17be:	0e 94 ce 0c 	call	0x199c	; 0x199c <prvAddNewTaskToReadyList>
    17c2:	81 e0       	ldi	r24, 0x01	; 1
    17c4:	8b 83       	std	Y+3, r24	; 0x03
    17c6:	02 c0       	rjmp	.+4      	; 0x17cc <xTaskCreate+0xd2>
    17c8:	8f ef       	ldi	r24, 0xFF	; 255
    17ca:	8b 83       	std	Y+3, r24	; 0x03
    17cc:	8b 81       	ldd	r24, Y+3	; 0x03
    17ce:	60 96       	adiw	r28, 0x10	; 16
    17d0:	0f b6       	in	r0, 0x3f	; 63
    17d2:	f8 94       	cli
    17d4:	de bf       	out	0x3e, r29	; 62
    17d6:	0f be       	out	0x3f, r0	; 63
    17d8:	cd bf       	out	0x3d, r28	; 61
    17da:	df 91       	pop	r29
    17dc:	cf 91       	pop	r28
    17de:	1f 91       	pop	r17
    17e0:	0f 91       	pop	r16
    17e2:	ff 90       	pop	r15
    17e4:	ef 90       	pop	r14
    17e6:	df 90       	pop	r13
    17e8:	cf 90       	pop	r12
    17ea:	bf 90       	pop	r11
    17ec:	af 90       	pop	r10
    17ee:	9f 90       	pop	r9
    17f0:	8f 90       	pop	r8
    17f2:	08 95       	ret

000017f4 <prvInitialiseNewTask>:
    17f4:	8f 92       	push	r8
    17f6:	9f 92       	push	r9
    17f8:	af 92       	push	r10
    17fa:	bf 92       	push	r11
    17fc:	cf 92       	push	r12
    17fe:	df 92       	push	r13
    1800:	ef 92       	push	r14
    1802:	0f 93       	push	r16
    1804:	1f 93       	push	r17
    1806:	cf 93       	push	r28
    1808:	df 93       	push	r29
    180a:	cd b7       	in	r28, 0x3d	; 61
    180c:	de b7       	in	r29, 0x3e	; 62
    180e:	64 97       	sbiw	r28, 0x14	; 20
    1810:	0f b6       	in	r0, 0x3f	; 63
    1812:	f8 94       	cli
    1814:	de bf       	out	0x3e, r29	; 62
    1816:	0f be       	out	0x3f, r0	; 63
    1818:	cd bf       	out	0x3d, r28	; 61
    181a:	9d 83       	std	Y+5, r25	; 0x05
    181c:	8c 83       	std	Y+4, r24	; 0x04
    181e:	7f 83       	std	Y+7, r23	; 0x07
    1820:	6e 83       	std	Y+6, r22	; 0x06
    1822:	28 87       	std	Y+8, r18	; 0x08
    1824:	39 87       	std	Y+9, r19	; 0x09
    1826:	4a 87       	std	Y+10, r20	; 0x0a
    1828:	5b 87       	std	Y+11, r21	; 0x0b
    182a:	1d 87       	std	Y+13, r17	; 0x0d
    182c:	0c 87       	std	Y+12, r16	; 0x0c
    182e:	ee 86       	std	Y+14, r14	; 0x0e
    1830:	d8 8a       	std	Y+16, r13	; 0x10
    1832:	cf 86       	std	Y+15, r12	; 0x0f
    1834:	ba 8a       	std	Y+18, r11	; 0x12
    1836:	a9 8a       	std	Y+17, r10	; 0x11
    1838:	9c 8a       	std	Y+20, r9	; 0x14
    183a:	8b 8a       	std	Y+19, r8	; 0x13
    183c:	89 89       	ldd	r24, Y+17	; 0x11
    183e:	9a 89       	ldd	r25, Y+18	; 0x12
    1840:	fc 01       	movw	r30, r24
    1842:	27 89       	ldd	r18, Z+23	; 0x17
    1844:	30 8d       	ldd	r19, Z+24	; 0x18
    1846:	88 85       	ldd	r24, Y+8	; 0x08
    1848:	99 85       	ldd	r25, Y+9	; 0x09
    184a:	01 97       	sbiw	r24, 0x01	; 1
    184c:	82 0f       	add	r24, r18
    184e:	93 1f       	adc	r25, r19
    1850:	9b 83       	std	Y+3, r25	; 0x03
    1852:	8a 83       	std	Y+2, r24	; 0x02
    1854:	8e 81       	ldd	r24, Y+6	; 0x06
    1856:	9f 81       	ldd	r25, Y+7	; 0x07
    1858:	89 2b       	or	r24, r25
    185a:	69 f1       	breq	.+90     	; 0x18b6 <prvInitialiseNewTask+0xc2>
    185c:	19 82       	std	Y+1, r1	; 0x01
    185e:	21 c0       	rjmp	.+66     	; 0x18a2 <prvInitialiseNewTask+0xae>
    1860:	89 81       	ldd	r24, Y+1	; 0x01
    1862:	88 2f       	mov	r24, r24
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	29 81       	ldd	r18, Y+1	; 0x01
    1868:	22 2f       	mov	r18, r18
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	4e 81       	ldd	r20, Y+6	; 0x06
    186e:	5f 81       	ldd	r21, Y+7	; 0x07
    1870:	24 0f       	add	r18, r20
    1872:	35 1f       	adc	r19, r21
    1874:	f9 01       	movw	r30, r18
    1876:	40 81       	ld	r20, Z
    1878:	29 89       	ldd	r18, Y+17	; 0x11
    187a:	3a 89       	ldd	r19, Y+18	; 0x12
    187c:	82 0f       	add	r24, r18
    187e:	93 1f       	adc	r25, r19
    1880:	49 96       	adiw	r24, 0x19	; 25
    1882:	fc 01       	movw	r30, r24
    1884:	40 83       	st	Z, r20
    1886:	89 81       	ldd	r24, Y+1	; 0x01
    1888:	88 2f       	mov	r24, r24
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	2e 81       	ldd	r18, Y+6	; 0x06
    188e:	3f 81       	ldd	r19, Y+7	; 0x07
    1890:	82 0f       	add	r24, r18
    1892:	93 1f       	adc	r25, r19
    1894:	fc 01       	movw	r30, r24
    1896:	80 81       	ld	r24, Z
    1898:	88 23       	and	r24, r24
    189a:	39 f0       	breq	.+14     	; 0x18aa <prvInitialiseNewTask+0xb6>
    189c:	89 81       	ldd	r24, Y+1	; 0x01
    189e:	8f 5f       	subi	r24, 0xFF	; 255
    18a0:	89 83       	std	Y+1, r24	; 0x01
    18a2:	89 81       	ldd	r24, Y+1	; 0x01
    18a4:	88 30       	cpi	r24, 0x08	; 8
    18a6:	e0 f2       	brcs	.-72     	; 0x1860 <prvInitialiseNewTask+0x6c>
    18a8:	01 c0       	rjmp	.+2      	; 0x18ac <prvInitialiseNewTask+0xb8>
    18aa:	00 00       	nop
    18ac:	89 89       	ldd	r24, Y+17	; 0x11
    18ae:	9a 89       	ldd	r25, Y+18	; 0x12
    18b0:	fc 01       	movw	r30, r24
    18b2:	10 a2       	std	Z+32, r1	; 0x20
    18b4:	04 c0       	rjmp	.+8      	; 0x18be <prvInitialiseNewTask+0xca>
    18b6:	89 89       	ldd	r24, Y+17	; 0x11
    18b8:	9a 89       	ldd	r25, Y+18	; 0x12
    18ba:	fc 01       	movw	r30, r24
    18bc:	11 8e       	std	Z+25, r1	; 0x19
    18be:	8e 85       	ldd	r24, Y+14	; 0x0e
    18c0:	86 30       	cpi	r24, 0x06	; 6
    18c2:	10 f0       	brcs	.+4      	; 0x18c8 <prvInitialiseNewTask+0xd4>
    18c4:	85 e0       	ldi	r24, 0x05	; 5
    18c6:	8e 87       	std	Y+14, r24	; 0x0e
    18c8:	89 89       	ldd	r24, Y+17	; 0x11
    18ca:	9a 89       	ldd	r25, Y+18	; 0x12
    18cc:	2e 85       	ldd	r18, Y+14	; 0x0e
    18ce:	fc 01       	movw	r30, r24
    18d0:	26 8b       	std	Z+22, r18	; 0x16
    18d2:	89 89       	ldd	r24, Y+17	; 0x11
    18d4:	9a 89       	ldd	r25, Y+18	; 0x12
    18d6:	2e 85       	ldd	r18, Y+14	; 0x0e
    18d8:	fc 01       	movw	r30, r24
    18da:	21 a3       	std	Z+33, r18	; 0x21
    18dc:	89 89       	ldd	r24, Y+17	; 0x11
    18de:	9a 89       	ldd	r25, Y+18	; 0x12
    18e0:	fc 01       	movw	r30, r24
    18e2:	12 a2       	std	Z+34, r1	; 0x22
    18e4:	89 89       	ldd	r24, Y+17	; 0x11
    18e6:	9a 89       	ldd	r25, Y+18	; 0x12
    18e8:	02 96       	adiw	r24, 0x02	; 2
    18ea:	0e 94 51 07 	call	0xea2	; 0xea2 <vListInitialiseItem>
    18ee:	89 89       	ldd	r24, Y+17	; 0x11
    18f0:	9a 89       	ldd	r25, Y+18	; 0x12
    18f2:	0c 96       	adiw	r24, 0x0c	; 12
    18f4:	0e 94 51 07 	call	0xea2	; 0xea2 <vListInitialiseItem>
    18f8:	89 89       	ldd	r24, Y+17	; 0x11
    18fa:	9a 89       	ldd	r25, Y+18	; 0x12
    18fc:	29 89       	ldd	r18, Y+17	; 0x11
    18fe:	3a 89       	ldd	r19, Y+18	; 0x12
    1900:	fc 01       	movw	r30, r24
    1902:	31 87       	std	Z+9, r19	; 0x09
    1904:	20 87       	std	Z+8, r18	; 0x08
    1906:	8e 85       	ldd	r24, Y+14	; 0x0e
    1908:	88 2f       	mov	r24, r24
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	26 e0       	ldi	r18, 0x06	; 6
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	28 1b       	sub	r18, r24
    1912:	39 0b       	sbc	r19, r25
    1914:	89 89       	ldd	r24, Y+17	; 0x11
    1916:	9a 89       	ldd	r25, Y+18	; 0x12
    1918:	fc 01       	movw	r30, r24
    191a:	35 87       	std	Z+13, r19	; 0x0d
    191c:	24 87       	std	Z+12, r18	; 0x0c
    191e:	89 89       	ldd	r24, Y+17	; 0x11
    1920:	9a 89       	ldd	r25, Y+18	; 0x12
    1922:	29 89       	ldd	r18, Y+17	; 0x11
    1924:	3a 89       	ldd	r19, Y+18	; 0x12
    1926:	fc 01       	movw	r30, r24
    1928:	33 8b       	std	Z+19, r19	; 0x13
    192a:	22 8b       	std	Z+18, r18	; 0x12
    192c:	89 89       	ldd	r24, Y+17	; 0x11
    192e:	9a 89       	ldd	r25, Y+18	; 0x12
    1930:	fc 01       	movw	r30, r24
    1932:	13 a2       	std	Z+35, r1	; 0x23
    1934:	14 a2       	std	Z+36, r1	; 0x24
    1936:	15 a2       	std	Z+37, r1	; 0x25
    1938:	16 a2       	std	Z+38, r1	; 0x26
    193a:	89 89       	ldd	r24, Y+17	; 0x11
    193c:	9a 89       	ldd	r25, Y+18	; 0x12
    193e:	fc 01       	movw	r30, r24
    1940:	17 a2       	std	Z+39, r1	; 0x27
    1942:	4c 85       	ldd	r20, Y+12	; 0x0c
    1944:	5d 85       	ldd	r21, Y+13	; 0x0d
    1946:	2c 81       	ldd	r18, Y+4	; 0x04
    1948:	3d 81       	ldd	r19, Y+5	; 0x05
    194a:	8a 81       	ldd	r24, Y+2	; 0x02
    194c:	9b 81       	ldd	r25, Y+3	; 0x03
    194e:	b9 01       	movw	r22, r18
    1950:	0e 94 81 08 	call	0x1102	; 0x1102 <pxPortInitialiseStack>
    1954:	9c 01       	movw	r18, r24
    1956:	89 89       	ldd	r24, Y+17	; 0x11
    1958:	9a 89       	ldd	r25, Y+18	; 0x12
    195a:	fc 01       	movw	r30, r24
    195c:	31 83       	std	Z+1, r19	; 0x01
    195e:	20 83       	st	Z, r18
    1960:	8f 85       	ldd	r24, Y+15	; 0x0f
    1962:	98 89       	ldd	r25, Y+16	; 0x10
    1964:	89 2b       	or	r24, r25
    1966:	39 f0       	breq	.+14     	; 0x1976 <prvInitialiseNewTask+0x182>
    1968:	8f 85       	ldd	r24, Y+15	; 0x0f
    196a:	98 89       	ldd	r25, Y+16	; 0x10
    196c:	29 89       	ldd	r18, Y+17	; 0x11
    196e:	3a 89       	ldd	r19, Y+18	; 0x12
    1970:	fc 01       	movw	r30, r24
    1972:	31 83       	std	Z+1, r19	; 0x01
    1974:	20 83       	st	Z, r18
    1976:	00 00       	nop
    1978:	64 96       	adiw	r28, 0x14	; 20
    197a:	0f b6       	in	r0, 0x3f	; 63
    197c:	f8 94       	cli
    197e:	de bf       	out	0x3e, r29	; 62
    1980:	0f be       	out	0x3f, r0	; 63
    1982:	cd bf       	out	0x3d, r28	; 61
    1984:	df 91       	pop	r29
    1986:	cf 91       	pop	r28
    1988:	1f 91       	pop	r17
    198a:	0f 91       	pop	r16
    198c:	ef 90       	pop	r14
    198e:	df 90       	pop	r13
    1990:	cf 90       	pop	r12
    1992:	bf 90       	pop	r11
    1994:	af 90       	pop	r10
    1996:	9f 90       	pop	r9
    1998:	8f 90       	pop	r8
    199a:	08 95       	ret

0000199c <prvAddNewTaskToReadyList>:
    199c:	cf 93       	push	r28
    199e:	df 93       	push	r29
    19a0:	00 d0       	rcall	.+0      	; 0x19a2 <prvAddNewTaskToReadyList+0x6>
    19a2:	cd b7       	in	r28, 0x3d	; 61
    19a4:	de b7       	in	r29, 0x3e	; 62
    19a6:	9a 83       	std	Y+2, r25	; 0x02
    19a8:	89 83       	std	Y+1, r24	; 0x01
    19aa:	0f b6       	in	r0, 0x3f	; 63
    19ac:	f8 94       	cli
    19ae:	0f 92       	push	r0
    19b0:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <uxCurrentNumberOfTasks>
    19b4:	8f 5f       	subi	r24, 0xFF	; 255
    19b6:	80 93 11 07 	sts	0x0711, r24	; 0x800711 <uxCurrentNumberOfTasks>
    19ba:	80 91 a7 06 	lds	r24, 0x06A7	; 0x8006a7 <pxCurrentTCB>
    19be:	90 91 a8 06 	lds	r25, 0x06A8	; 0x8006a8 <pxCurrentTCB+0x1>
    19c2:	89 2b       	or	r24, r25
    19c4:	69 f4       	brne	.+26     	; 0x19e0 <prvAddNewTaskToReadyList+0x44>
    19c6:	89 81       	ldd	r24, Y+1	; 0x01
    19c8:	9a 81       	ldd	r25, Y+2	; 0x02
    19ca:	90 93 a8 06 	sts	0x06A8, r25	; 0x8006a8 <pxCurrentTCB+0x1>
    19ce:	80 93 a7 06 	sts	0x06A7, r24	; 0x8006a7 <pxCurrentTCB>
    19d2:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <uxCurrentNumberOfTasks>
    19d6:	81 30       	cpi	r24, 0x01	; 1
    19d8:	c9 f4       	brne	.+50     	; 0x1a0c <prvAddNewTaskToReadyList+0x70>
    19da:	0e 94 4e 11 	call	0x229c	; 0x229c <prvInitialiseTaskLists>
    19de:	16 c0       	rjmp	.+44     	; 0x1a0c <prvAddNewTaskToReadyList+0x70>
    19e0:	80 91 15 07 	lds	r24, 0x0715	; 0x800715 <xSchedulerRunning>
    19e4:	88 23       	and	r24, r24
    19e6:	91 f4       	brne	.+36     	; 0x1a0c <prvAddNewTaskToReadyList+0x70>
    19e8:	80 91 a7 06 	lds	r24, 0x06A7	; 0x8006a7 <pxCurrentTCB>
    19ec:	90 91 a8 06 	lds	r25, 0x06A8	; 0x8006a8 <pxCurrentTCB+0x1>
    19f0:	fc 01       	movw	r30, r24
    19f2:	26 89       	ldd	r18, Z+22	; 0x16
    19f4:	89 81       	ldd	r24, Y+1	; 0x01
    19f6:	9a 81       	ldd	r25, Y+2	; 0x02
    19f8:	fc 01       	movw	r30, r24
    19fa:	86 89       	ldd	r24, Z+22	; 0x16
    19fc:	82 17       	cp	r24, r18
    19fe:	30 f0       	brcs	.+12     	; 0x1a0c <prvAddNewTaskToReadyList+0x70>
    1a00:	89 81       	ldd	r24, Y+1	; 0x01
    1a02:	9a 81       	ldd	r25, Y+2	; 0x02
    1a04:	90 93 a8 06 	sts	0x06A8, r25	; 0x8006a8 <pxCurrentTCB+0x1>
    1a08:	80 93 a7 06 	sts	0x06A7, r24	; 0x8006a7 <pxCurrentTCB>
    1a0c:	80 91 19 07 	lds	r24, 0x0719	; 0x800719 <uxTaskNumber>
    1a10:	8f 5f       	subi	r24, 0xFF	; 255
    1a12:	80 93 19 07 	sts	0x0719, r24	; 0x800719 <uxTaskNumber>
    1a16:	89 81       	ldd	r24, Y+1	; 0x01
    1a18:	9a 81       	ldd	r25, Y+2	; 0x02
    1a1a:	fc 01       	movw	r30, r24
    1a1c:	96 89       	ldd	r25, Z+22	; 0x16
    1a1e:	80 91 14 07 	lds	r24, 0x0714	; 0x800714 <uxTopReadyPriority>
    1a22:	89 17       	cp	r24, r25
    1a24:	30 f4       	brcc	.+12     	; 0x1a32 <prvAddNewTaskToReadyList+0x96>
    1a26:	89 81       	ldd	r24, Y+1	; 0x01
    1a28:	9a 81       	ldd	r25, Y+2	; 0x02
    1a2a:	fc 01       	movw	r30, r24
    1a2c:	86 89       	ldd	r24, Z+22	; 0x16
    1a2e:	80 93 14 07 	sts	0x0714, r24	; 0x800714 <uxTopReadyPriority>
    1a32:	89 81       	ldd	r24, Y+1	; 0x01
    1a34:	9a 81       	ldd	r25, Y+2	; 0x02
    1a36:	ac 01       	movw	r20, r24
    1a38:	4e 5f       	subi	r20, 0xFE	; 254
    1a3a:	5f 4f       	sbci	r21, 0xFF	; 255
    1a3c:	89 81       	ldd	r24, Y+1	; 0x01
    1a3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a40:	fc 01       	movw	r30, r24
    1a42:	86 89       	ldd	r24, Z+22	; 0x16
    1a44:	28 2f       	mov	r18, r24
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	c9 01       	movw	r24, r18
    1a4a:	88 0f       	add	r24, r24
    1a4c:	99 1f       	adc	r25, r25
    1a4e:	88 0f       	add	r24, r24
    1a50:	99 1f       	adc	r25, r25
    1a52:	88 0f       	add	r24, r24
    1a54:	99 1f       	adc	r25, r25
    1a56:	82 0f       	add	r24, r18
    1a58:	93 1f       	adc	r25, r19
    1a5a:	87 55       	subi	r24, 0x57	; 87
    1a5c:	99 4f       	sbci	r25, 0xF9	; 249
    1a5e:	ba 01       	movw	r22, r20
    1a60:	0e 94 63 07 	call	0xec6	; 0xec6 <vListInsertEnd>
    1a64:	0f 90       	pop	r0
    1a66:	0f be       	out	0x3f, r0	; 63
    1a68:	80 91 15 07 	lds	r24, 0x0715	; 0x800715 <xSchedulerRunning>
    1a6c:	88 23       	and	r24, r24
    1a6e:	71 f0       	breq	.+28     	; 0x1a8c <prvAddNewTaskToReadyList+0xf0>
    1a70:	80 91 a7 06 	lds	r24, 0x06A7	; 0x8006a7 <pxCurrentTCB>
    1a74:	90 91 a8 06 	lds	r25, 0x06A8	; 0x8006a8 <pxCurrentTCB+0x1>
    1a78:	fc 01       	movw	r30, r24
    1a7a:	26 89       	ldd	r18, Z+22	; 0x16
    1a7c:	89 81       	ldd	r24, Y+1	; 0x01
    1a7e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a80:	fc 01       	movw	r30, r24
    1a82:	86 89       	ldd	r24, Z+22	; 0x16
    1a84:	28 17       	cp	r18, r24
    1a86:	10 f4       	brcc	.+4      	; 0x1a8c <prvAddNewTaskToReadyList+0xf0>
    1a88:	0e 94 5f 0a 	call	0x14be	; 0x14be <vPortYield>
    1a8c:	00 00       	nop
    1a8e:	0f 90       	pop	r0
    1a90:	0f 90       	pop	r0
    1a92:	df 91       	pop	r29
    1a94:	cf 91       	pop	r28
    1a96:	08 95       	ret

00001a98 <vTaskDelay>:
    1a98:	cf 93       	push	r28
    1a9a:	df 93       	push	r29
    1a9c:	00 d0       	rcall	.+0      	; 0x1a9e <vTaskDelay+0x6>
    1a9e:	1f 92       	push	r1
    1aa0:	cd b7       	in	r28, 0x3d	; 61
    1aa2:	de b7       	in	r29, 0x3e	; 62
    1aa4:	9b 83       	std	Y+3, r25	; 0x03
    1aa6:	8a 83       	std	Y+2, r24	; 0x02
    1aa8:	19 82       	std	Y+1, r1	; 0x01
    1aaa:	8a 81       	ldd	r24, Y+2	; 0x02
    1aac:	9b 81       	ldd	r25, Y+3	; 0x03
    1aae:	89 2b       	or	r24, r25
    1ab0:	51 f0       	breq	.+20     	; 0x1ac6 <vTaskDelay+0x2e>
    1ab2:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <vTaskSuspendAll>
    1ab6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab8:	9b 81       	ldd	r25, Y+3	; 0x03
    1aba:	60 e0       	ldi	r22, 0x00	; 0
    1abc:	0e 94 32 12 	call	0x2464	; 0x2464 <prvAddCurrentTaskToDelayedList>
    1ac0:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <xTaskResumeAll>
    1ac4:	89 83       	std	Y+1, r24	; 0x01
    1ac6:	89 81       	ldd	r24, Y+1	; 0x01
    1ac8:	88 23       	and	r24, r24
    1aca:	11 f4       	brne	.+4      	; 0x1ad0 <vTaskDelay+0x38>
    1acc:	0e 94 5f 0a 	call	0x14be	; 0x14be <vPortYield>
    1ad0:	00 00       	nop
    1ad2:	0f 90       	pop	r0
    1ad4:	0f 90       	pop	r0
    1ad6:	0f 90       	pop	r0
    1ad8:	df 91       	pop	r29
    1ada:	cf 91       	pop	r28
    1adc:	08 95       	ret

00001ade <vTaskSuspend>:
    1ade:	cf 93       	push	r28
    1ae0:	df 93       	push	r29
    1ae2:	00 d0       	rcall	.+0      	; 0x1ae4 <vTaskSuspend+0x6>
    1ae4:	00 d0       	rcall	.+0      	; 0x1ae6 <vTaskSuspend+0x8>
    1ae6:	cd b7       	in	r28, 0x3d	; 61
    1ae8:	de b7       	in	r29, 0x3e	; 62
    1aea:	9c 83       	std	Y+4, r25	; 0x04
    1aec:	8b 83       	std	Y+3, r24	; 0x03
    1aee:	0f b6       	in	r0, 0x3f	; 63
    1af0:	f8 94       	cli
    1af2:	0f 92       	push	r0
    1af4:	8b 81       	ldd	r24, Y+3	; 0x03
    1af6:	9c 81       	ldd	r25, Y+4	; 0x04
    1af8:	89 2b       	or	r24, r25
    1afa:	29 f4       	brne	.+10     	; 0x1b06 <vTaskSuspend+0x28>
    1afc:	80 91 a7 06 	lds	r24, 0x06A7	; 0x8006a7 <pxCurrentTCB>
    1b00:	90 91 a8 06 	lds	r25, 0x06A8	; 0x8006a8 <pxCurrentTCB+0x1>
    1b04:	02 c0       	rjmp	.+4      	; 0x1b0a <vTaskSuspend+0x2c>
    1b06:	8b 81       	ldd	r24, Y+3	; 0x03
    1b08:	9c 81       	ldd	r25, Y+4	; 0x04
    1b0a:	9a 83       	std	Y+2, r25	; 0x02
    1b0c:	89 83       	std	Y+1, r24	; 0x01
    1b0e:	89 81       	ldd	r24, Y+1	; 0x01
    1b10:	9a 81       	ldd	r25, Y+2	; 0x02
    1b12:	02 96       	adiw	r24, 0x02	; 2
    1b14:	0e 94 2a 08 	call	0x1054	; 0x1054 <uxListRemove>
    1b18:	89 81       	ldd	r24, Y+1	; 0x01
    1b1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b1c:	fc 01       	movw	r30, r24
    1b1e:	84 89       	ldd	r24, Z+20	; 0x14
    1b20:	95 89       	ldd	r25, Z+21	; 0x15
    1b22:	89 2b       	or	r24, r25
    1b24:	29 f0       	breq	.+10     	; 0x1b30 <vTaskSuspend+0x52>
    1b26:	89 81       	ldd	r24, Y+1	; 0x01
    1b28:	9a 81       	ldd	r25, Y+2	; 0x02
    1b2a:	0c 96       	adiw	r24, 0x0c	; 12
    1b2c:	0e 94 2a 08 	call	0x1054	; 0x1054 <uxListRemove>
    1b30:	89 81       	ldd	r24, Y+1	; 0x01
    1b32:	9a 81       	ldd	r25, Y+2	; 0x02
    1b34:	02 96       	adiw	r24, 0x02	; 2
    1b36:	bc 01       	movw	r22, r24
    1b38:	88 e0       	ldi	r24, 0x08	; 8
    1b3a:	97 e0       	ldi	r25, 0x07	; 7
    1b3c:	0e 94 63 07 	call	0xec6	; 0xec6 <vListInsertEnd>
    1b40:	89 81       	ldd	r24, Y+1	; 0x01
    1b42:	9a 81       	ldd	r25, Y+2	; 0x02
    1b44:	fc 01       	movw	r30, r24
    1b46:	87 a1       	ldd	r24, Z+39	; 0x27
    1b48:	81 30       	cpi	r24, 0x01	; 1
    1b4a:	21 f4       	brne	.+8      	; 0x1b54 <vTaskSuspend+0x76>
    1b4c:	89 81       	ldd	r24, Y+1	; 0x01
    1b4e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b50:	fc 01       	movw	r30, r24
    1b52:	17 a2       	std	Z+39, r1	; 0x27
    1b54:	0f 90       	pop	r0
    1b56:	0f be       	out	0x3f, r0	; 63
    1b58:	80 91 15 07 	lds	r24, 0x0715	; 0x800715 <xSchedulerRunning>
    1b5c:	88 23       	and	r24, r24
    1b5e:	39 f0       	breq	.+14     	; 0x1b6e <vTaskSuspend+0x90>
    1b60:	0f b6       	in	r0, 0x3f	; 63
    1b62:	f8 94       	cli
    1b64:	0f 92       	push	r0
    1b66:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <prvResetNextTaskUnblockTime>
    1b6a:	0f 90       	pop	r0
    1b6c:	0f be       	out	0x3f, r0	; 63
    1b6e:	80 91 a7 06 	lds	r24, 0x06A7	; 0x8006a7 <pxCurrentTCB>
    1b72:	90 91 a8 06 	lds	r25, 0x06A8	; 0x8006a8 <pxCurrentTCB+0x1>
    1b76:	29 81       	ldd	r18, Y+1	; 0x01
    1b78:	3a 81       	ldd	r19, Y+2	; 0x02
    1b7a:	28 17       	cp	r18, r24
    1b7c:	39 07       	cpc	r19, r25
    1b7e:	a1 f4       	brne	.+40     	; 0x1ba8 <vTaskSuspend+0xca>
    1b80:	80 91 15 07 	lds	r24, 0x0715	; 0x800715 <xSchedulerRunning>
    1b84:	88 23       	and	r24, r24
    1b86:	19 f0       	breq	.+6      	; 0x1b8e <vTaskSuspend+0xb0>
    1b88:	0e 94 5f 0a 	call	0x14be	; 0x14be <vPortYield>
    1b8c:	0d c0       	rjmp	.+26     	; 0x1ba8 <vTaskSuspend+0xca>
    1b8e:	90 91 08 07 	lds	r25, 0x0708	; 0x800708 <xSuspendedTaskList>
    1b92:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <uxCurrentNumberOfTasks>
    1b96:	98 17       	cp	r25, r24
    1b98:	29 f4       	brne	.+10     	; 0x1ba4 <vTaskSuspend+0xc6>
    1b9a:	10 92 a8 06 	sts	0x06A8, r1	; 0x8006a8 <pxCurrentTCB+0x1>
    1b9e:	10 92 a7 06 	sts	0x06A7, r1	; 0x8006a7 <pxCurrentTCB>
    1ba2:	02 c0       	rjmp	.+4      	; 0x1ba8 <vTaskSuspend+0xca>
    1ba4:	0e 94 3a 10 	call	0x2074	; 0x2074 <vTaskSwitchContext>
    1ba8:	00 00       	nop
    1baa:	0f 90       	pop	r0
    1bac:	0f 90       	pop	r0
    1bae:	0f 90       	pop	r0
    1bb0:	0f 90       	pop	r0
    1bb2:	df 91       	pop	r29
    1bb4:	cf 91       	pop	r28
    1bb6:	08 95       	ret

00001bb8 <prvTaskIsTaskSuspended>:
    1bb8:	cf 93       	push	r28
    1bba:	df 93       	push	r29
    1bbc:	00 d0       	rcall	.+0      	; 0x1bbe <prvTaskIsTaskSuspended+0x6>
    1bbe:	00 d0       	rcall	.+0      	; 0x1bc0 <prvTaskIsTaskSuspended+0x8>
    1bc0:	1f 92       	push	r1
    1bc2:	cd b7       	in	r28, 0x3d	; 61
    1bc4:	de b7       	in	r29, 0x3e	; 62
    1bc6:	9d 83       	std	Y+5, r25	; 0x05
    1bc8:	8c 83       	std	Y+4, r24	; 0x04
    1bca:	19 82       	std	Y+1, r1	; 0x01
    1bcc:	8c 81       	ldd	r24, Y+4	; 0x04
    1bce:	9d 81       	ldd	r25, Y+5	; 0x05
    1bd0:	9b 83       	std	Y+3, r25	; 0x03
    1bd2:	8a 83       	std	Y+2, r24	; 0x02
    1bd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd6:	9b 81       	ldd	r25, Y+3	; 0x03
    1bd8:	fc 01       	movw	r30, r24
    1bda:	82 85       	ldd	r24, Z+10	; 0x0a
    1bdc:	93 85       	ldd	r25, Z+11	; 0x0b
    1bde:	88 50       	subi	r24, 0x08	; 8
    1be0:	97 40       	sbci	r25, 0x07	; 7
    1be2:	89 f4       	brne	.+34     	; 0x1c06 <prvTaskIsTaskSuspended+0x4e>
    1be4:	8a 81       	ldd	r24, Y+2	; 0x02
    1be6:	9b 81       	ldd	r25, Y+3	; 0x03
    1be8:	fc 01       	movw	r30, r24
    1bea:	84 89       	ldd	r24, Z+20	; 0x14
    1bec:	95 89       	ldd	r25, Z+21	; 0x15
    1bee:	85 5f       	subi	r24, 0xF5	; 245
    1bf0:	96 40       	sbci	r25, 0x06	; 6
    1bf2:	49 f0       	breq	.+18     	; 0x1c06 <prvTaskIsTaskSuspended+0x4e>
    1bf4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf6:	9b 81       	ldd	r25, Y+3	; 0x03
    1bf8:	fc 01       	movw	r30, r24
    1bfa:	84 89       	ldd	r24, Z+20	; 0x14
    1bfc:	95 89       	ldd	r25, Z+21	; 0x15
    1bfe:	89 2b       	or	r24, r25
    1c00:	11 f4       	brne	.+4      	; 0x1c06 <prvTaskIsTaskSuspended+0x4e>
    1c02:	81 e0       	ldi	r24, 0x01	; 1
    1c04:	89 83       	std	Y+1, r24	; 0x01
    1c06:	89 81       	ldd	r24, Y+1	; 0x01
    1c08:	0f 90       	pop	r0
    1c0a:	0f 90       	pop	r0
    1c0c:	0f 90       	pop	r0
    1c0e:	0f 90       	pop	r0
    1c10:	0f 90       	pop	r0
    1c12:	df 91       	pop	r29
    1c14:	cf 91       	pop	r28
    1c16:	08 95       	ret

00001c18 <vTaskResume>:
    1c18:	cf 93       	push	r28
    1c1a:	df 93       	push	r29
    1c1c:	00 d0       	rcall	.+0      	; 0x1c1e <vTaskResume+0x6>
    1c1e:	00 d0       	rcall	.+0      	; 0x1c20 <vTaskResume+0x8>
    1c20:	cd b7       	in	r28, 0x3d	; 61
    1c22:	de b7       	in	r29, 0x3e	; 62
    1c24:	9c 83       	std	Y+4, r25	; 0x04
    1c26:	8b 83       	std	Y+3, r24	; 0x03
    1c28:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c2c:	9a 83       	std	Y+2, r25	; 0x02
    1c2e:	89 83       	std	Y+1, r24	; 0x01
    1c30:	80 91 a7 06 	lds	r24, 0x06A7	; 0x8006a7 <pxCurrentTCB>
    1c34:	90 91 a8 06 	lds	r25, 0x06A8	; 0x8006a8 <pxCurrentTCB+0x1>
    1c38:	29 81       	ldd	r18, Y+1	; 0x01
    1c3a:	3a 81       	ldd	r19, Y+2	; 0x02
    1c3c:	28 17       	cp	r18, r24
    1c3e:	39 07       	cpc	r19, r25
    1c40:	09 f4       	brne	.+2      	; 0x1c44 <vTaskResume+0x2c>
    1c42:	4a c0       	rjmp	.+148    	; 0x1cd8 <vTaskResume+0xc0>
    1c44:	89 81       	ldd	r24, Y+1	; 0x01
    1c46:	9a 81       	ldd	r25, Y+2	; 0x02
    1c48:	89 2b       	or	r24, r25
    1c4a:	09 f4       	brne	.+2      	; 0x1c4e <vTaskResume+0x36>
    1c4c:	45 c0       	rjmp	.+138    	; 0x1cd8 <vTaskResume+0xc0>
    1c4e:	0f b6       	in	r0, 0x3f	; 63
    1c50:	f8 94       	cli
    1c52:	0f 92       	push	r0
    1c54:	89 81       	ldd	r24, Y+1	; 0x01
    1c56:	9a 81       	ldd	r25, Y+2	; 0x02
    1c58:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <prvTaskIsTaskSuspended>
    1c5c:	88 23       	and	r24, r24
    1c5e:	d1 f1       	breq	.+116    	; 0x1cd4 <vTaskResume+0xbc>
    1c60:	89 81       	ldd	r24, Y+1	; 0x01
    1c62:	9a 81       	ldd	r25, Y+2	; 0x02
    1c64:	02 96       	adiw	r24, 0x02	; 2
    1c66:	0e 94 2a 08 	call	0x1054	; 0x1054 <uxListRemove>
    1c6a:	89 81       	ldd	r24, Y+1	; 0x01
    1c6c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c6e:	fc 01       	movw	r30, r24
    1c70:	96 89       	ldd	r25, Z+22	; 0x16
    1c72:	80 91 14 07 	lds	r24, 0x0714	; 0x800714 <uxTopReadyPriority>
    1c76:	89 17       	cp	r24, r25
    1c78:	30 f4       	brcc	.+12     	; 0x1c86 <vTaskResume+0x6e>
    1c7a:	89 81       	ldd	r24, Y+1	; 0x01
    1c7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c7e:	fc 01       	movw	r30, r24
    1c80:	86 89       	ldd	r24, Z+22	; 0x16
    1c82:	80 93 14 07 	sts	0x0714, r24	; 0x800714 <uxTopReadyPriority>
    1c86:	89 81       	ldd	r24, Y+1	; 0x01
    1c88:	9a 81       	ldd	r25, Y+2	; 0x02
    1c8a:	ac 01       	movw	r20, r24
    1c8c:	4e 5f       	subi	r20, 0xFE	; 254
    1c8e:	5f 4f       	sbci	r21, 0xFF	; 255
    1c90:	89 81       	ldd	r24, Y+1	; 0x01
    1c92:	9a 81       	ldd	r25, Y+2	; 0x02
    1c94:	fc 01       	movw	r30, r24
    1c96:	86 89       	ldd	r24, Z+22	; 0x16
    1c98:	28 2f       	mov	r18, r24
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	c9 01       	movw	r24, r18
    1c9e:	88 0f       	add	r24, r24
    1ca0:	99 1f       	adc	r25, r25
    1ca2:	88 0f       	add	r24, r24
    1ca4:	99 1f       	adc	r25, r25
    1ca6:	88 0f       	add	r24, r24
    1ca8:	99 1f       	adc	r25, r25
    1caa:	82 0f       	add	r24, r18
    1cac:	93 1f       	adc	r25, r19
    1cae:	87 55       	subi	r24, 0x57	; 87
    1cb0:	99 4f       	sbci	r25, 0xF9	; 249
    1cb2:	ba 01       	movw	r22, r20
    1cb4:	0e 94 63 07 	call	0xec6	; 0xec6 <vListInsertEnd>
    1cb8:	89 81       	ldd	r24, Y+1	; 0x01
    1cba:	9a 81       	ldd	r25, Y+2	; 0x02
    1cbc:	fc 01       	movw	r30, r24
    1cbe:	26 89       	ldd	r18, Z+22	; 0x16
    1cc0:	80 91 a7 06 	lds	r24, 0x06A7	; 0x8006a7 <pxCurrentTCB>
    1cc4:	90 91 a8 06 	lds	r25, 0x06A8	; 0x8006a8 <pxCurrentTCB+0x1>
    1cc8:	fc 01       	movw	r30, r24
    1cca:	86 89       	ldd	r24, Z+22	; 0x16
    1ccc:	28 17       	cp	r18, r24
    1cce:	10 f0       	brcs	.+4      	; 0x1cd4 <vTaskResume+0xbc>
    1cd0:	0e 94 5f 0a 	call	0x14be	; 0x14be <vPortYield>
    1cd4:	0f 90       	pop	r0
    1cd6:	0f be       	out	0x3f, r0	; 63
    1cd8:	00 00       	nop
    1cda:	0f 90       	pop	r0
    1cdc:	0f 90       	pop	r0
    1cde:	0f 90       	pop	r0
    1ce0:	0f 90       	pop	r0
    1ce2:	df 91       	pop	r29
    1ce4:	cf 91       	pop	r28
    1ce6:	08 95       	ret

00001ce8 <vTaskStartScheduler>:
    1ce8:	ef 92       	push	r14
    1cea:	ff 92       	push	r15
    1cec:	0f 93       	push	r16
    1cee:	cf 93       	push	r28
    1cf0:	df 93       	push	r29
    1cf2:	1f 92       	push	r1
    1cf4:	cd b7       	in	r28, 0x3d	; 61
    1cf6:	de b7       	in	r29, 0x3e	; 62
    1cf8:	0f 2e       	mov	r0, r31
    1cfa:	fc e1       	ldi	r31, 0x1C	; 28
    1cfc:	ef 2e       	mov	r14, r31
    1cfe:	f7 e0       	ldi	r31, 0x07	; 7
    1d00:	ff 2e       	mov	r15, r31
    1d02:	f0 2d       	mov	r31, r0
    1d04:	00 e0       	ldi	r16, 0x00	; 0
    1d06:	20 e0       	ldi	r18, 0x00	; 0
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	45 e5       	ldi	r20, 0x55	; 85
    1d0c:	50 e0       	ldi	r21, 0x00	; 0
    1d0e:	69 eb       	ldi	r22, 0xB9	; 185
    1d10:	70 e0       	ldi	r23, 0x00	; 0
    1d12:	84 e4       	ldi	r24, 0x44	; 68
    1d14:	91 e1       	ldi	r25, 0x11	; 17
    1d16:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <xTaskCreate>
    1d1a:	89 83       	std	Y+1, r24	; 0x01
    1d1c:	89 81       	ldd	r24, Y+1	; 0x01
    1d1e:	81 30       	cpi	r24, 0x01	; 1
    1d20:	81 f4       	brne	.+32     	; 0x1d42 <vTaskStartScheduler+0x5a>
    1d22:	f8 94       	cli
    1d24:	8f ef       	ldi	r24, 0xFF	; 255
    1d26:	9f ef       	ldi	r25, 0xFF	; 255
    1d28:	90 93 1b 07 	sts	0x071B, r25	; 0x80071b <xNextTaskUnblockTime+0x1>
    1d2c:	80 93 1a 07 	sts	0x071A, r24	; 0x80071a <xNextTaskUnblockTime>
    1d30:	81 e0       	ldi	r24, 0x01	; 1
    1d32:	80 93 15 07 	sts	0x0715, r24	; 0x800715 <xSchedulerRunning>
    1d36:	10 92 13 07 	sts	0x0713, r1	; 0x800713 <xTickCount+0x1>
    1d3a:	10 92 12 07 	sts	0x0712, r1	; 0x800712 <xTickCount>
    1d3e:	0e 94 2a 0a 	call	0x1454	; 0x1454 <xPortStartScheduler>
    1d42:	00 00       	nop
    1d44:	0f 90       	pop	r0
    1d46:	df 91       	pop	r29
    1d48:	cf 91       	pop	r28
    1d4a:	0f 91       	pop	r16
    1d4c:	ff 90       	pop	r15
    1d4e:	ef 90       	pop	r14
    1d50:	08 95       	ret

00001d52 <vTaskSuspendAll>:
    1d52:	cf 93       	push	r28
    1d54:	df 93       	push	r29
    1d56:	cd b7       	in	r28, 0x3d	; 61
    1d58:	de b7       	in	r29, 0x3e	; 62
    1d5a:	80 91 1e 07 	lds	r24, 0x071E	; 0x80071e <uxSchedulerSuspended>
    1d5e:	8f 5f       	subi	r24, 0xFF	; 255
    1d60:	80 93 1e 07 	sts	0x071E, r24	; 0x80071e <uxSchedulerSuspended>
    1d64:	00 00       	nop
    1d66:	df 91       	pop	r29
    1d68:	cf 91       	pop	r28
    1d6a:	08 95       	ret

00001d6c <xTaskResumeAll>:
    1d6c:	cf 93       	push	r28
    1d6e:	df 93       	push	r29
    1d70:	00 d0       	rcall	.+0      	; 0x1d72 <xTaskResumeAll+0x6>
    1d72:	00 d0       	rcall	.+0      	; 0x1d74 <xTaskResumeAll+0x8>
    1d74:	cd b7       	in	r28, 0x3d	; 61
    1d76:	de b7       	in	r29, 0x3e	; 62
    1d78:	1a 82       	std	Y+2, r1	; 0x02
    1d7a:	19 82       	std	Y+1, r1	; 0x01
    1d7c:	1b 82       	std	Y+3, r1	; 0x03
    1d7e:	0f b6       	in	r0, 0x3f	; 63
    1d80:	f8 94       	cli
    1d82:	0f 92       	push	r0
    1d84:	80 91 1e 07 	lds	r24, 0x071E	; 0x80071e <uxSchedulerSuspended>
    1d88:	81 50       	subi	r24, 0x01	; 1
    1d8a:	80 93 1e 07 	sts	0x071E, r24	; 0x80071e <uxSchedulerSuspended>
    1d8e:	80 91 1e 07 	lds	r24, 0x071E	; 0x80071e <uxSchedulerSuspended>
    1d92:	88 23       	and	r24, r24
    1d94:	09 f0       	breq	.+2      	; 0x1d98 <xTaskResumeAll+0x2c>
    1d96:	77 c0       	rjmp	.+238    	; 0x1e86 <xTaskResumeAll+0x11a>
    1d98:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <uxCurrentNumberOfTasks>
    1d9c:	88 23       	and	r24, r24
    1d9e:	09 f4       	brne	.+2      	; 0x1da2 <xTaskResumeAll+0x36>
    1da0:	72 c0       	rjmp	.+228    	; 0x1e86 <xTaskResumeAll+0x11a>
    1da2:	49 c0       	rjmp	.+146    	; 0x1e36 <xTaskResumeAll+0xca>
    1da4:	80 91 fa 06 	lds	r24, 0x06FA	; 0x8006fa <xPendingReadyList+0x5>
    1da8:	90 91 fb 06 	lds	r25, 0x06FB	; 0x8006fb <xPendingReadyList+0x6>
    1dac:	fc 01       	movw	r30, r24
    1dae:	86 81       	ldd	r24, Z+6	; 0x06
    1db0:	97 81       	ldd	r25, Z+7	; 0x07
    1db2:	9a 83       	std	Y+2, r25	; 0x02
    1db4:	89 83       	std	Y+1, r24	; 0x01
    1db6:	89 81       	ldd	r24, Y+1	; 0x01
    1db8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dba:	0c 96       	adiw	r24, 0x0c	; 12
    1dbc:	0e 94 2a 08 	call	0x1054	; 0x1054 <uxListRemove>
    1dc0:	89 81       	ldd	r24, Y+1	; 0x01
    1dc2:	9a 81       	ldd	r25, Y+2	; 0x02
    1dc4:	02 96       	adiw	r24, 0x02	; 2
    1dc6:	0e 94 2a 08 	call	0x1054	; 0x1054 <uxListRemove>
    1dca:	89 81       	ldd	r24, Y+1	; 0x01
    1dcc:	9a 81       	ldd	r25, Y+2	; 0x02
    1dce:	fc 01       	movw	r30, r24
    1dd0:	96 89       	ldd	r25, Z+22	; 0x16
    1dd2:	80 91 14 07 	lds	r24, 0x0714	; 0x800714 <uxTopReadyPriority>
    1dd6:	89 17       	cp	r24, r25
    1dd8:	30 f4       	brcc	.+12     	; 0x1de6 <xTaskResumeAll+0x7a>
    1dda:	89 81       	ldd	r24, Y+1	; 0x01
    1ddc:	9a 81       	ldd	r25, Y+2	; 0x02
    1dde:	fc 01       	movw	r30, r24
    1de0:	86 89       	ldd	r24, Z+22	; 0x16
    1de2:	80 93 14 07 	sts	0x0714, r24	; 0x800714 <uxTopReadyPriority>
    1de6:	89 81       	ldd	r24, Y+1	; 0x01
    1de8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dea:	ac 01       	movw	r20, r24
    1dec:	4e 5f       	subi	r20, 0xFE	; 254
    1dee:	5f 4f       	sbci	r21, 0xFF	; 255
    1df0:	89 81       	ldd	r24, Y+1	; 0x01
    1df2:	9a 81       	ldd	r25, Y+2	; 0x02
    1df4:	fc 01       	movw	r30, r24
    1df6:	86 89       	ldd	r24, Z+22	; 0x16
    1df8:	28 2f       	mov	r18, r24
    1dfa:	30 e0       	ldi	r19, 0x00	; 0
    1dfc:	c9 01       	movw	r24, r18
    1dfe:	88 0f       	add	r24, r24
    1e00:	99 1f       	adc	r25, r25
    1e02:	88 0f       	add	r24, r24
    1e04:	99 1f       	adc	r25, r25
    1e06:	88 0f       	add	r24, r24
    1e08:	99 1f       	adc	r25, r25
    1e0a:	82 0f       	add	r24, r18
    1e0c:	93 1f       	adc	r25, r19
    1e0e:	87 55       	subi	r24, 0x57	; 87
    1e10:	99 4f       	sbci	r25, 0xF9	; 249
    1e12:	ba 01       	movw	r22, r20
    1e14:	0e 94 63 07 	call	0xec6	; 0xec6 <vListInsertEnd>
    1e18:	89 81       	ldd	r24, Y+1	; 0x01
    1e1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e1c:	fc 01       	movw	r30, r24
    1e1e:	26 89       	ldd	r18, Z+22	; 0x16
    1e20:	80 91 a7 06 	lds	r24, 0x06A7	; 0x8006a7 <pxCurrentTCB>
    1e24:	90 91 a8 06 	lds	r25, 0x06A8	; 0x8006a8 <pxCurrentTCB+0x1>
    1e28:	fc 01       	movw	r30, r24
    1e2a:	86 89       	ldd	r24, Z+22	; 0x16
    1e2c:	28 17       	cp	r18, r24
    1e2e:	18 f0       	brcs	.+6      	; 0x1e36 <xTaskResumeAll+0xca>
    1e30:	81 e0       	ldi	r24, 0x01	; 1
    1e32:	80 93 17 07 	sts	0x0717, r24	; 0x800717 <xYieldPending>
    1e36:	80 91 f5 06 	lds	r24, 0x06F5	; 0x8006f5 <xPendingReadyList>
    1e3a:	88 23       	and	r24, r24
    1e3c:	09 f0       	breq	.+2      	; 0x1e40 <xTaskResumeAll+0xd4>
    1e3e:	b2 cf       	rjmp	.-156    	; 0x1da4 <xTaskResumeAll+0x38>
    1e40:	89 81       	ldd	r24, Y+1	; 0x01
    1e42:	9a 81       	ldd	r25, Y+2	; 0x02
    1e44:	89 2b       	or	r24, r25
    1e46:	11 f0       	breq	.+4      	; 0x1e4c <xTaskResumeAll+0xe0>
    1e48:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <prvResetNextTaskUnblockTime>
    1e4c:	80 91 16 07 	lds	r24, 0x0716	; 0x800716 <uxPendedTicks>
    1e50:	8c 83       	std	Y+4, r24	; 0x04
    1e52:	8c 81       	ldd	r24, Y+4	; 0x04
    1e54:	88 23       	and	r24, r24
    1e56:	79 f0       	breq	.+30     	; 0x1e76 <xTaskResumeAll+0x10a>
    1e58:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <xTaskIncrementTick>
    1e5c:	88 23       	and	r24, r24
    1e5e:	19 f0       	breq	.+6      	; 0x1e66 <xTaskResumeAll+0xfa>
    1e60:	81 e0       	ldi	r24, 0x01	; 1
    1e62:	80 93 17 07 	sts	0x0717, r24	; 0x800717 <xYieldPending>
    1e66:	8c 81       	ldd	r24, Y+4	; 0x04
    1e68:	81 50       	subi	r24, 0x01	; 1
    1e6a:	8c 83       	std	Y+4, r24	; 0x04
    1e6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e6e:	88 23       	and	r24, r24
    1e70:	99 f7       	brne	.-26     	; 0x1e58 <xTaskResumeAll+0xec>
    1e72:	10 92 16 07 	sts	0x0716, r1	; 0x800716 <uxPendedTicks>
    1e76:	80 91 17 07 	lds	r24, 0x0717	; 0x800717 <xYieldPending>
    1e7a:	88 23       	and	r24, r24
    1e7c:	21 f0       	breq	.+8      	; 0x1e86 <xTaskResumeAll+0x11a>
    1e7e:	81 e0       	ldi	r24, 0x01	; 1
    1e80:	8b 83       	std	Y+3, r24	; 0x03
    1e82:	0e 94 5f 0a 	call	0x14be	; 0x14be <vPortYield>
    1e86:	0f 90       	pop	r0
    1e88:	0f be       	out	0x3f, r0	; 63
    1e8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8c:	0f 90       	pop	r0
    1e8e:	0f 90       	pop	r0
    1e90:	0f 90       	pop	r0
    1e92:	0f 90       	pop	r0
    1e94:	df 91       	pop	r29
    1e96:	cf 91       	pop	r28
    1e98:	08 95       	ret

00001e9a <xTaskIncrementTick>:
    1e9a:	cf 93       	push	r28
    1e9c:	df 93       	push	r29
    1e9e:	cd b7       	in	r28, 0x3d	; 61
    1ea0:	de b7       	in	r29, 0x3e	; 62
    1ea2:	29 97       	sbiw	r28, 0x09	; 9
    1ea4:	0f b6       	in	r0, 0x3f	; 63
    1ea6:	f8 94       	cli
    1ea8:	de bf       	out	0x3e, r29	; 62
    1eaa:	0f be       	out	0x3f, r0	; 63
    1eac:	cd bf       	out	0x3d, r28	; 61
    1eae:	19 82       	std	Y+1, r1	; 0x01
    1eb0:	80 91 1e 07 	lds	r24, 0x071E	; 0x80071e <uxSchedulerSuspended>
    1eb4:	88 23       	and	r24, r24
    1eb6:	09 f0       	breq	.+2      	; 0x1eba <xTaskIncrementTick+0x20>
    1eb8:	c8 c0       	rjmp	.+400    	; 0x204a <xTaskIncrementTick+0x1b0>
    1eba:	80 91 12 07 	lds	r24, 0x0712	; 0x800712 <xTickCount>
    1ebe:	90 91 13 07 	lds	r25, 0x0713	; 0x800713 <xTickCount+0x1>
    1ec2:	01 96       	adiw	r24, 0x01	; 1
    1ec4:	9b 83       	std	Y+3, r25	; 0x03
    1ec6:	8a 83       	std	Y+2, r24	; 0x02
    1ec8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eca:	9b 81       	ldd	r25, Y+3	; 0x03
    1ecc:	90 93 13 07 	sts	0x0713, r25	; 0x800713 <xTickCount+0x1>
    1ed0:	80 93 12 07 	sts	0x0712, r24	; 0x800712 <xTickCount>
    1ed4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ed8:	89 2b       	or	r24, r25
    1eda:	d9 f4       	brne	.+54     	; 0x1f12 <xTaskIncrementTick+0x78>
    1edc:	80 91 f1 06 	lds	r24, 0x06F1	; 0x8006f1 <pxDelayedTaskList>
    1ee0:	90 91 f2 06 	lds	r25, 0x06F2	; 0x8006f2 <pxDelayedTaskList+0x1>
    1ee4:	9d 83       	std	Y+5, r25	; 0x05
    1ee6:	8c 83       	std	Y+4, r24	; 0x04
    1ee8:	80 91 f3 06 	lds	r24, 0x06F3	; 0x8006f3 <pxOverflowDelayedTaskList>
    1eec:	90 91 f4 06 	lds	r25, 0x06F4	; 0x8006f4 <pxOverflowDelayedTaskList+0x1>
    1ef0:	90 93 f2 06 	sts	0x06F2, r25	; 0x8006f2 <pxDelayedTaskList+0x1>
    1ef4:	80 93 f1 06 	sts	0x06F1, r24	; 0x8006f1 <pxDelayedTaskList>
    1ef8:	8c 81       	ldd	r24, Y+4	; 0x04
    1efa:	9d 81       	ldd	r25, Y+5	; 0x05
    1efc:	90 93 f4 06 	sts	0x06F4, r25	; 0x8006f4 <pxOverflowDelayedTaskList+0x1>
    1f00:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <pxOverflowDelayedTaskList>
    1f04:	80 91 18 07 	lds	r24, 0x0718	; 0x800718 <xNumOfOverflows>
    1f08:	8f 5f       	subi	r24, 0xFF	; 255
    1f0a:	80 93 18 07 	sts	0x0718, r24	; 0x800718 <xNumOfOverflows>
    1f0e:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <prvResetNextTaskUnblockTime>
    1f12:	80 91 1a 07 	lds	r24, 0x071A	; 0x80071a <xNextTaskUnblockTime>
    1f16:	90 91 1b 07 	lds	r25, 0x071B	; 0x80071b <xNextTaskUnblockTime+0x1>
    1f1a:	2a 81       	ldd	r18, Y+2	; 0x02
    1f1c:	3b 81       	ldd	r19, Y+3	; 0x03
    1f1e:	28 17       	cp	r18, r24
    1f20:	39 07       	cpc	r19, r25
    1f22:	08 f4       	brcc	.+2      	; 0x1f26 <xTaskIncrementTick+0x8c>
    1f24:	78 c0       	rjmp	.+240    	; 0x2016 <xTaskIncrementTick+0x17c>
    1f26:	80 91 f1 06 	lds	r24, 0x06F1	; 0x8006f1 <pxDelayedTaskList>
    1f2a:	90 91 f2 06 	lds	r25, 0x06F2	; 0x8006f2 <pxDelayedTaskList+0x1>
    1f2e:	fc 01       	movw	r30, r24
    1f30:	80 81       	ld	r24, Z
    1f32:	88 23       	and	r24, r24
    1f34:	39 f4       	brne	.+14     	; 0x1f44 <xTaskIncrementTick+0xaa>
    1f36:	8f ef       	ldi	r24, 0xFF	; 255
    1f38:	9f ef       	ldi	r25, 0xFF	; 255
    1f3a:	90 93 1b 07 	sts	0x071B, r25	; 0x80071b <xNextTaskUnblockTime+0x1>
    1f3e:	80 93 1a 07 	sts	0x071A, r24	; 0x80071a <xNextTaskUnblockTime>
    1f42:	69 c0       	rjmp	.+210    	; 0x2016 <xTaskIncrementTick+0x17c>
    1f44:	80 91 f1 06 	lds	r24, 0x06F1	; 0x8006f1 <pxDelayedTaskList>
    1f48:	90 91 f2 06 	lds	r25, 0x06F2	; 0x8006f2 <pxDelayedTaskList+0x1>
    1f4c:	fc 01       	movw	r30, r24
    1f4e:	85 81       	ldd	r24, Z+5	; 0x05
    1f50:	96 81       	ldd	r25, Z+6	; 0x06
    1f52:	fc 01       	movw	r30, r24
    1f54:	86 81       	ldd	r24, Z+6	; 0x06
    1f56:	97 81       	ldd	r25, Z+7	; 0x07
    1f58:	9f 83       	std	Y+7, r25	; 0x07
    1f5a:	8e 83       	std	Y+6, r24	; 0x06
    1f5c:	8e 81       	ldd	r24, Y+6	; 0x06
    1f5e:	9f 81       	ldd	r25, Y+7	; 0x07
    1f60:	fc 01       	movw	r30, r24
    1f62:	82 81       	ldd	r24, Z+2	; 0x02
    1f64:	93 81       	ldd	r25, Z+3	; 0x03
    1f66:	99 87       	std	Y+9, r25	; 0x09
    1f68:	88 87       	std	Y+8, r24	; 0x08
    1f6a:	2a 81       	ldd	r18, Y+2	; 0x02
    1f6c:	3b 81       	ldd	r19, Y+3	; 0x03
    1f6e:	88 85       	ldd	r24, Y+8	; 0x08
    1f70:	99 85       	ldd	r25, Y+9	; 0x09
    1f72:	28 17       	cp	r18, r24
    1f74:	39 07       	cpc	r19, r25
    1f76:	38 f4       	brcc	.+14     	; 0x1f86 <xTaskIncrementTick+0xec>
    1f78:	88 85       	ldd	r24, Y+8	; 0x08
    1f7a:	99 85       	ldd	r25, Y+9	; 0x09
    1f7c:	90 93 1b 07 	sts	0x071B, r25	; 0x80071b <xNextTaskUnblockTime+0x1>
    1f80:	80 93 1a 07 	sts	0x071A, r24	; 0x80071a <xNextTaskUnblockTime>
    1f84:	48 c0       	rjmp	.+144    	; 0x2016 <xTaskIncrementTick+0x17c>
    1f86:	8e 81       	ldd	r24, Y+6	; 0x06
    1f88:	9f 81       	ldd	r25, Y+7	; 0x07
    1f8a:	02 96       	adiw	r24, 0x02	; 2
    1f8c:	0e 94 2a 08 	call	0x1054	; 0x1054 <uxListRemove>
    1f90:	8e 81       	ldd	r24, Y+6	; 0x06
    1f92:	9f 81       	ldd	r25, Y+7	; 0x07
    1f94:	fc 01       	movw	r30, r24
    1f96:	84 89       	ldd	r24, Z+20	; 0x14
    1f98:	95 89       	ldd	r25, Z+21	; 0x15
    1f9a:	89 2b       	or	r24, r25
    1f9c:	29 f0       	breq	.+10     	; 0x1fa8 <xTaskIncrementTick+0x10e>
    1f9e:	8e 81       	ldd	r24, Y+6	; 0x06
    1fa0:	9f 81       	ldd	r25, Y+7	; 0x07
    1fa2:	0c 96       	adiw	r24, 0x0c	; 12
    1fa4:	0e 94 2a 08 	call	0x1054	; 0x1054 <uxListRemove>
    1fa8:	8e 81       	ldd	r24, Y+6	; 0x06
    1faa:	9f 81       	ldd	r25, Y+7	; 0x07
    1fac:	fc 01       	movw	r30, r24
    1fae:	96 89       	ldd	r25, Z+22	; 0x16
    1fb0:	80 91 14 07 	lds	r24, 0x0714	; 0x800714 <uxTopReadyPriority>
    1fb4:	89 17       	cp	r24, r25
    1fb6:	30 f4       	brcc	.+12     	; 0x1fc4 <xTaskIncrementTick+0x12a>
    1fb8:	8e 81       	ldd	r24, Y+6	; 0x06
    1fba:	9f 81       	ldd	r25, Y+7	; 0x07
    1fbc:	fc 01       	movw	r30, r24
    1fbe:	86 89       	ldd	r24, Z+22	; 0x16
    1fc0:	80 93 14 07 	sts	0x0714, r24	; 0x800714 <uxTopReadyPriority>
    1fc4:	8e 81       	ldd	r24, Y+6	; 0x06
    1fc6:	9f 81       	ldd	r25, Y+7	; 0x07
    1fc8:	ac 01       	movw	r20, r24
    1fca:	4e 5f       	subi	r20, 0xFE	; 254
    1fcc:	5f 4f       	sbci	r21, 0xFF	; 255
    1fce:	8e 81       	ldd	r24, Y+6	; 0x06
    1fd0:	9f 81       	ldd	r25, Y+7	; 0x07
    1fd2:	fc 01       	movw	r30, r24
    1fd4:	86 89       	ldd	r24, Z+22	; 0x16
    1fd6:	28 2f       	mov	r18, r24
    1fd8:	30 e0       	ldi	r19, 0x00	; 0
    1fda:	c9 01       	movw	r24, r18
    1fdc:	88 0f       	add	r24, r24
    1fde:	99 1f       	adc	r25, r25
    1fe0:	88 0f       	add	r24, r24
    1fe2:	99 1f       	adc	r25, r25
    1fe4:	88 0f       	add	r24, r24
    1fe6:	99 1f       	adc	r25, r25
    1fe8:	82 0f       	add	r24, r18
    1fea:	93 1f       	adc	r25, r19
    1fec:	87 55       	subi	r24, 0x57	; 87
    1fee:	99 4f       	sbci	r25, 0xF9	; 249
    1ff0:	ba 01       	movw	r22, r20
    1ff2:	0e 94 63 07 	call	0xec6	; 0xec6 <vListInsertEnd>
    1ff6:	8e 81       	ldd	r24, Y+6	; 0x06
    1ff8:	9f 81       	ldd	r25, Y+7	; 0x07
    1ffa:	fc 01       	movw	r30, r24
    1ffc:	26 89       	ldd	r18, Z+22	; 0x16
    1ffe:	80 91 a7 06 	lds	r24, 0x06A7	; 0x8006a7 <pxCurrentTCB>
    2002:	90 91 a8 06 	lds	r25, 0x06A8	; 0x8006a8 <pxCurrentTCB+0x1>
    2006:	fc 01       	movw	r30, r24
    2008:	86 89       	ldd	r24, Z+22	; 0x16
    200a:	28 17       	cp	r18, r24
    200c:	08 f4       	brcc	.+2      	; 0x2010 <xTaskIncrementTick+0x176>
    200e:	8b cf       	rjmp	.-234    	; 0x1f26 <xTaskIncrementTick+0x8c>
    2010:	81 e0       	ldi	r24, 0x01	; 1
    2012:	89 83       	std	Y+1, r24	; 0x01
    2014:	88 cf       	rjmp	.-240    	; 0x1f26 <xTaskIncrementTick+0x8c>
    2016:	80 91 a7 06 	lds	r24, 0x06A7	; 0x8006a7 <pxCurrentTCB>
    201a:	90 91 a8 06 	lds	r25, 0x06A8	; 0x8006a8 <pxCurrentTCB+0x1>
    201e:	fc 01       	movw	r30, r24
    2020:	86 89       	ldd	r24, Z+22	; 0x16
    2022:	28 2f       	mov	r18, r24
    2024:	30 e0       	ldi	r19, 0x00	; 0
    2026:	c9 01       	movw	r24, r18
    2028:	88 0f       	add	r24, r24
    202a:	99 1f       	adc	r25, r25
    202c:	88 0f       	add	r24, r24
    202e:	99 1f       	adc	r25, r25
    2030:	88 0f       	add	r24, r24
    2032:	99 1f       	adc	r25, r25
    2034:	82 0f       	add	r24, r18
    2036:	93 1f       	adc	r25, r19
    2038:	87 55       	subi	r24, 0x57	; 87
    203a:	99 4f       	sbci	r25, 0xF9	; 249
    203c:	fc 01       	movw	r30, r24
    203e:	80 81       	ld	r24, Z
    2040:	82 30       	cpi	r24, 0x02	; 2
    2042:	40 f0       	brcs	.+16     	; 0x2054 <xTaskIncrementTick+0x1ba>
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	89 83       	std	Y+1, r24	; 0x01
    2048:	05 c0       	rjmp	.+10     	; 0x2054 <xTaskIncrementTick+0x1ba>
    204a:	80 91 16 07 	lds	r24, 0x0716	; 0x800716 <uxPendedTicks>
    204e:	8f 5f       	subi	r24, 0xFF	; 255
    2050:	80 93 16 07 	sts	0x0716, r24	; 0x800716 <uxPendedTicks>
    2054:	80 91 17 07 	lds	r24, 0x0717	; 0x800717 <xYieldPending>
    2058:	88 23       	and	r24, r24
    205a:	11 f0       	breq	.+4      	; 0x2060 <xTaskIncrementTick+0x1c6>
    205c:	81 e0       	ldi	r24, 0x01	; 1
    205e:	89 83       	std	Y+1, r24	; 0x01
    2060:	89 81       	ldd	r24, Y+1	; 0x01
    2062:	29 96       	adiw	r28, 0x09	; 9
    2064:	0f b6       	in	r0, 0x3f	; 63
    2066:	f8 94       	cli
    2068:	de bf       	out	0x3e, r29	; 62
    206a:	0f be       	out	0x3f, r0	; 63
    206c:	cd bf       	out	0x3d, r28	; 61
    206e:	df 91       	pop	r29
    2070:	cf 91       	pop	r28
    2072:	08 95       	ret

00002074 <vTaskSwitchContext>:
    2074:	cf 93       	push	r28
    2076:	df 93       	push	r29
    2078:	00 d0       	rcall	.+0      	; 0x207a <vTaskSwitchContext+0x6>
    207a:	1f 92       	push	r1
    207c:	cd b7       	in	r28, 0x3d	; 61
    207e:	de b7       	in	r29, 0x3e	; 62
    2080:	80 91 1e 07 	lds	r24, 0x071E	; 0x80071e <uxSchedulerSuspended>
    2084:	88 23       	and	r24, r24
    2086:	21 f0       	breq	.+8      	; 0x2090 <vTaskSwitchContext+0x1c>
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	80 93 17 07 	sts	0x0717, r24	; 0x800717 <xYieldPending>
    208e:	5f c0       	rjmp	.+190    	; 0x214e <vTaskSwitchContext+0xda>
    2090:	10 92 17 07 	sts	0x0717, r1	; 0x800717 <xYieldPending>
    2094:	80 91 14 07 	lds	r24, 0x0714	; 0x800714 <uxTopReadyPriority>
    2098:	89 83       	std	Y+1, r24	; 0x01
    209a:	03 c0       	rjmp	.+6      	; 0x20a2 <vTaskSwitchContext+0x2e>
    209c:	89 81       	ldd	r24, Y+1	; 0x01
    209e:	81 50       	subi	r24, 0x01	; 1
    20a0:	89 83       	std	Y+1, r24	; 0x01
    20a2:	89 81       	ldd	r24, Y+1	; 0x01
    20a4:	28 2f       	mov	r18, r24
    20a6:	30 e0       	ldi	r19, 0x00	; 0
    20a8:	c9 01       	movw	r24, r18
    20aa:	88 0f       	add	r24, r24
    20ac:	99 1f       	adc	r25, r25
    20ae:	88 0f       	add	r24, r24
    20b0:	99 1f       	adc	r25, r25
    20b2:	88 0f       	add	r24, r24
    20b4:	99 1f       	adc	r25, r25
    20b6:	82 0f       	add	r24, r18
    20b8:	93 1f       	adc	r25, r19
    20ba:	87 55       	subi	r24, 0x57	; 87
    20bc:	99 4f       	sbci	r25, 0xF9	; 249
    20be:	fc 01       	movw	r30, r24
    20c0:	80 81       	ld	r24, Z
    20c2:	88 23       	and	r24, r24
    20c4:	59 f3       	breq	.-42     	; 0x209c <vTaskSwitchContext+0x28>
    20c6:	89 81       	ldd	r24, Y+1	; 0x01
    20c8:	28 2f       	mov	r18, r24
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	c9 01       	movw	r24, r18
    20ce:	88 0f       	add	r24, r24
    20d0:	99 1f       	adc	r25, r25
    20d2:	88 0f       	add	r24, r24
    20d4:	99 1f       	adc	r25, r25
    20d6:	88 0f       	add	r24, r24
    20d8:	99 1f       	adc	r25, r25
    20da:	82 0f       	add	r24, r18
    20dc:	93 1f       	adc	r25, r19
    20de:	87 55       	subi	r24, 0x57	; 87
    20e0:	99 4f       	sbci	r25, 0xF9	; 249
    20e2:	9b 83       	std	Y+3, r25	; 0x03
    20e4:	8a 83       	std	Y+2, r24	; 0x02
    20e6:	8a 81       	ldd	r24, Y+2	; 0x02
    20e8:	9b 81       	ldd	r25, Y+3	; 0x03
    20ea:	fc 01       	movw	r30, r24
    20ec:	81 81       	ldd	r24, Z+1	; 0x01
    20ee:	92 81       	ldd	r25, Z+2	; 0x02
    20f0:	fc 01       	movw	r30, r24
    20f2:	22 81       	ldd	r18, Z+2	; 0x02
    20f4:	33 81       	ldd	r19, Z+3	; 0x03
    20f6:	8a 81       	ldd	r24, Y+2	; 0x02
    20f8:	9b 81       	ldd	r25, Y+3	; 0x03
    20fa:	fc 01       	movw	r30, r24
    20fc:	32 83       	std	Z+2, r19	; 0x02
    20fe:	21 83       	std	Z+1, r18	; 0x01
    2100:	8a 81       	ldd	r24, Y+2	; 0x02
    2102:	9b 81       	ldd	r25, Y+3	; 0x03
    2104:	fc 01       	movw	r30, r24
    2106:	21 81       	ldd	r18, Z+1	; 0x01
    2108:	32 81       	ldd	r19, Z+2	; 0x02
    210a:	8a 81       	ldd	r24, Y+2	; 0x02
    210c:	9b 81       	ldd	r25, Y+3	; 0x03
    210e:	03 96       	adiw	r24, 0x03	; 3
    2110:	28 17       	cp	r18, r24
    2112:	39 07       	cpc	r19, r25
    2114:	69 f4       	brne	.+26     	; 0x2130 <vTaskSwitchContext+0xbc>
    2116:	8a 81       	ldd	r24, Y+2	; 0x02
    2118:	9b 81       	ldd	r25, Y+3	; 0x03
    211a:	fc 01       	movw	r30, r24
    211c:	81 81       	ldd	r24, Z+1	; 0x01
    211e:	92 81       	ldd	r25, Z+2	; 0x02
    2120:	fc 01       	movw	r30, r24
    2122:	22 81       	ldd	r18, Z+2	; 0x02
    2124:	33 81       	ldd	r19, Z+3	; 0x03
    2126:	8a 81       	ldd	r24, Y+2	; 0x02
    2128:	9b 81       	ldd	r25, Y+3	; 0x03
    212a:	fc 01       	movw	r30, r24
    212c:	32 83       	std	Z+2, r19	; 0x02
    212e:	21 83       	std	Z+1, r18	; 0x01
    2130:	8a 81       	ldd	r24, Y+2	; 0x02
    2132:	9b 81       	ldd	r25, Y+3	; 0x03
    2134:	fc 01       	movw	r30, r24
    2136:	81 81       	ldd	r24, Z+1	; 0x01
    2138:	92 81       	ldd	r25, Z+2	; 0x02
    213a:	fc 01       	movw	r30, r24
    213c:	86 81       	ldd	r24, Z+6	; 0x06
    213e:	97 81       	ldd	r25, Z+7	; 0x07
    2140:	90 93 a8 06 	sts	0x06A8, r25	; 0x8006a8 <pxCurrentTCB+0x1>
    2144:	80 93 a7 06 	sts	0x06A7, r24	; 0x8006a7 <pxCurrentTCB>
    2148:	89 81       	ldd	r24, Y+1	; 0x01
    214a:	80 93 14 07 	sts	0x0714, r24	; 0x800714 <uxTopReadyPriority>
    214e:	00 00       	nop
    2150:	0f 90       	pop	r0
    2152:	0f 90       	pop	r0
    2154:	0f 90       	pop	r0
    2156:	df 91       	pop	r29
    2158:	cf 91       	pop	r28
    215a:	08 95       	ret

0000215c <vTaskPlaceOnUnorderedEventList>:
    215c:	cf 93       	push	r28
    215e:	df 93       	push	r29
    2160:	00 d0       	rcall	.+0      	; 0x2162 <vTaskPlaceOnUnorderedEventList+0x6>
    2162:	00 d0       	rcall	.+0      	; 0x2164 <vTaskPlaceOnUnorderedEventList+0x8>
    2164:	00 d0       	rcall	.+0      	; 0x2166 <vTaskPlaceOnUnorderedEventList+0xa>
    2166:	cd b7       	in	r28, 0x3d	; 61
    2168:	de b7       	in	r29, 0x3e	; 62
    216a:	9a 83       	std	Y+2, r25	; 0x02
    216c:	89 83       	std	Y+1, r24	; 0x01
    216e:	7c 83       	std	Y+4, r23	; 0x04
    2170:	6b 83       	std	Y+3, r22	; 0x03
    2172:	5e 83       	std	Y+6, r21	; 0x06
    2174:	4d 83       	std	Y+5, r20	; 0x05
    2176:	80 91 a7 06 	lds	r24, 0x06A7	; 0x8006a7 <pxCurrentTCB>
    217a:	90 91 a8 06 	lds	r25, 0x06A8	; 0x8006a8 <pxCurrentTCB+0x1>
    217e:	2b 81       	ldd	r18, Y+3	; 0x03
    2180:	3c 81       	ldd	r19, Y+4	; 0x04
    2182:	30 68       	ori	r19, 0x80	; 128
    2184:	fc 01       	movw	r30, r24
    2186:	35 87       	std	Z+13, r19	; 0x0d
    2188:	24 87       	std	Z+12, r18	; 0x0c
    218a:	80 91 a7 06 	lds	r24, 0x06A7	; 0x8006a7 <pxCurrentTCB>
    218e:	90 91 a8 06 	lds	r25, 0x06A8	; 0x8006a8 <pxCurrentTCB+0x1>
    2192:	9c 01       	movw	r18, r24
    2194:	24 5f       	subi	r18, 0xF4	; 244
    2196:	3f 4f       	sbci	r19, 0xFF	; 255
    2198:	89 81       	ldd	r24, Y+1	; 0x01
    219a:	9a 81       	ldd	r25, Y+2	; 0x02
    219c:	b9 01       	movw	r22, r18
    219e:	0e 94 63 07 	call	0xec6	; 0xec6 <vListInsertEnd>
    21a2:	8d 81       	ldd	r24, Y+5	; 0x05
    21a4:	9e 81       	ldd	r25, Y+6	; 0x06
    21a6:	61 e0       	ldi	r22, 0x01	; 1
    21a8:	0e 94 32 12 	call	0x2464	; 0x2464 <prvAddCurrentTaskToDelayedList>
    21ac:	00 00       	nop
    21ae:	26 96       	adiw	r28, 0x06	; 6
    21b0:	0f b6       	in	r0, 0x3f	; 63
    21b2:	f8 94       	cli
    21b4:	de bf       	out	0x3e, r29	; 62
    21b6:	0f be       	out	0x3f, r0	; 63
    21b8:	cd bf       	out	0x3d, r28	; 61
    21ba:	df 91       	pop	r29
    21bc:	cf 91       	pop	r28
    21be:	08 95       	ret

000021c0 <vTaskRemoveFromUnorderedEventList>:
    21c0:	cf 93       	push	r28
    21c2:	df 93       	push	r29
    21c4:	00 d0       	rcall	.+0      	; 0x21c6 <vTaskRemoveFromUnorderedEventList+0x6>
    21c6:	00 d0       	rcall	.+0      	; 0x21c8 <vTaskRemoveFromUnorderedEventList+0x8>
    21c8:	00 d0       	rcall	.+0      	; 0x21ca <vTaskRemoveFromUnorderedEventList+0xa>
    21ca:	cd b7       	in	r28, 0x3d	; 61
    21cc:	de b7       	in	r29, 0x3e	; 62
    21ce:	9c 83       	std	Y+4, r25	; 0x04
    21d0:	8b 83       	std	Y+3, r24	; 0x03
    21d2:	7e 83       	std	Y+6, r23	; 0x06
    21d4:	6d 83       	std	Y+5, r22	; 0x05
    21d6:	8d 81       	ldd	r24, Y+5	; 0x05
    21d8:	9e 81       	ldd	r25, Y+6	; 0x06
    21da:	9c 01       	movw	r18, r24
    21dc:	30 68       	ori	r19, 0x80	; 128
    21de:	8b 81       	ldd	r24, Y+3	; 0x03
    21e0:	9c 81       	ldd	r25, Y+4	; 0x04
    21e2:	fc 01       	movw	r30, r24
    21e4:	31 83       	std	Z+1, r19	; 0x01
    21e6:	20 83       	st	Z, r18
    21e8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ea:	9c 81       	ldd	r25, Y+4	; 0x04
    21ec:	fc 01       	movw	r30, r24
    21ee:	86 81       	ldd	r24, Z+6	; 0x06
    21f0:	97 81       	ldd	r25, Z+7	; 0x07
    21f2:	9a 83       	std	Y+2, r25	; 0x02
    21f4:	89 83       	std	Y+1, r24	; 0x01
    21f6:	8b 81       	ldd	r24, Y+3	; 0x03
    21f8:	9c 81       	ldd	r25, Y+4	; 0x04
    21fa:	0e 94 2a 08 	call	0x1054	; 0x1054 <uxListRemove>
    21fe:	89 81       	ldd	r24, Y+1	; 0x01
    2200:	9a 81       	ldd	r25, Y+2	; 0x02
    2202:	02 96       	adiw	r24, 0x02	; 2
    2204:	0e 94 2a 08 	call	0x1054	; 0x1054 <uxListRemove>
    2208:	89 81       	ldd	r24, Y+1	; 0x01
    220a:	9a 81       	ldd	r25, Y+2	; 0x02
    220c:	fc 01       	movw	r30, r24
    220e:	96 89       	ldd	r25, Z+22	; 0x16
    2210:	80 91 14 07 	lds	r24, 0x0714	; 0x800714 <uxTopReadyPriority>
    2214:	89 17       	cp	r24, r25
    2216:	30 f4       	brcc	.+12     	; 0x2224 <vTaskRemoveFromUnorderedEventList+0x64>
    2218:	89 81       	ldd	r24, Y+1	; 0x01
    221a:	9a 81       	ldd	r25, Y+2	; 0x02
    221c:	fc 01       	movw	r30, r24
    221e:	86 89       	ldd	r24, Z+22	; 0x16
    2220:	80 93 14 07 	sts	0x0714, r24	; 0x800714 <uxTopReadyPriority>
    2224:	89 81       	ldd	r24, Y+1	; 0x01
    2226:	9a 81       	ldd	r25, Y+2	; 0x02
    2228:	ac 01       	movw	r20, r24
    222a:	4e 5f       	subi	r20, 0xFE	; 254
    222c:	5f 4f       	sbci	r21, 0xFF	; 255
    222e:	89 81       	ldd	r24, Y+1	; 0x01
    2230:	9a 81       	ldd	r25, Y+2	; 0x02
    2232:	fc 01       	movw	r30, r24
    2234:	86 89       	ldd	r24, Z+22	; 0x16
    2236:	28 2f       	mov	r18, r24
    2238:	30 e0       	ldi	r19, 0x00	; 0
    223a:	c9 01       	movw	r24, r18
    223c:	88 0f       	add	r24, r24
    223e:	99 1f       	adc	r25, r25
    2240:	88 0f       	add	r24, r24
    2242:	99 1f       	adc	r25, r25
    2244:	88 0f       	add	r24, r24
    2246:	99 1f       	adc	r25, r25
    2248:	82 0f       	add	r24, r18
    224a:	93 1f       	adc	r25, r19
    224c:	87 55       	subi	r24, 0x57	; 87
    224e:	99 4f       	sbci	r25, 0xF9	; 249
    2250:	ba 01       	movw	r22, r20
    2252:	0e 94 63 07 	call	0xec6	; 0xec6 <vListInsertEnd>
    2256:	89 81       	ldd	r24, Y+1	; 0x01
    2258:	9a 81       	ldd	r25, Y+2	; 0x02
    225a:	fc 01       	movw	r30, r24
    225c:	26 89       	ldd	r18, Z+22	; 0x16
    225e:	80 91 a7 06 	lds	r24, 0x06A7	; 0x8006a7 <pxCurrentTCB>
    2262:	90 91 a8 06 	lds	r25, 0x06A8	; 0x8006a8 <pxCurrentTCB+0x1>
    2266:	fc 01       	movw	r30, r24
    2268:	86 89       	ldd	r24, Z+22	; 0x16
    226a:	82 17       	cp	r24, r18
    226c:	18 f4       	brcc	.+6      	; 0x2274 <vTaskRemoveFromUnorderedEventList+0xb4>
    226e:	81 e0       	ldi	r24, 0x01	; 1
    2270:	80 93 17 07 	sts	0x0717, r24	; 0x800717 <xYieldPending>
    2274:	00 00       	nop
    2276:	26 96       	adiw	r28, 0x06	; 6
    2278:	0f b6       	in	r0, 0x3f	; 63
    227a:	f8 94       	cli
    227c:	de bf       	out	0x3e, r29	; 62
    227e:	0f be       	out	0x3f, r0	; 63
    2280:	cd bf       	out	0x3d, r28	; 61
    2282:	df 91       	pop	r29
    2284:	cf 91       	pop	r28
    2286:	08 95       	ret

00002288 <prvIdleTask>:
    2288:	cf 93       	push	r28
    228a:	df 93       	push	r29
    228c:	00 d0       	rcall	.+0      	; 0x228e <prvIdleTask+0x6>
    228e:	cd b7       	in	r28, 0x3d	; 61
    2290:	de b7       	in	r29, 0x3e	; 62
    2292:	9a 83       	std	Y+2, r25	; 0x02
    2294:	89 83       	std	Y+1, r24	; 0x01
    2296:	0e 94 90 11 	call	0x2320	; 0x2320 <prvCheckTasksWaitingTermination>
    229a:	fd cf       	rjmp	.-6      	; 0x2296 <prvIdleTask+0xe>

0000229c <prvInitialiseTaskLists>:
    229c:	cf 93       	push	r28
    229e:	df 93       	push	r29
    22a0:	1f 92       	push	r1
    22a2:	cd b7       	in	r28, 0x3d	; 61
    22a4:	de b7       	in	r29, 0x3e	; 62
    22a6:	19 82       	std	Y+1, r1	; 0x01
    22a8:	13 c0       	rjmp	.+38     	; 0x22d0 <prvInitialiseTaskLists+0x34>
    22aa:	89 81       	ldd	r24, Y+1	; 0x01
    22ac:	28 2f       	mov	r18, r24
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	c9 01       	movw	r24, r18
    22b2:	88 0f       	add	r24, r24
    22b4:	99 1f       	adc	r25, r25
    22b6:	88 0f       	add	r24, r24
    22b8:	99 1f       	adc	r25, r25
    22ba:	88 0f       	add	r24, r24
    22bc:	99 1f       	adc	r25, r25
    22be:	82 0f       	add	r24, r18
    22c0:	93 1f       	adc	r25, r19
    22c2:	87 55       	subi	r24, 0x57	; 87
    22c4:	99 4f       	sbci	r25, 0xF9	; 249
    22c6:	0e 94 1b 07 	call	0xe36	; 0xe36 <vListInitialise>
    22ca:	89 81       	ldd	r24, Y+1	; 0x01
    22cc:	8f 5f       	subi	r24, 0xFF	; 255
    22ce:	89 83       	std	Y+1, r24	; 0x01
    22d0:	89 81       	ldd	r24, Y+1	; 0x01
    22d2:	86 30       	cpi	r24, 0x06	; 6
    22d4:	50 f3       	brcs	.-44     	; 0x22aa <prvInitialiseTaskLists+0xe>
    22d6:	8f ed       	ldi	r24, 0xDF	; 223
    22d8:	96 e0       	ldi	r25, 0x06	; 6
    22da:	0e 94 1b 07 	call	0xe36	; 0xe36 <vListInitialise>
    22de:	88 ee       	ldi	r24, 0xE8	; 232
    22e0:	96 e0       	ldi	r25, 0x06	; 6
    22e2:	0e 94 1b 07 	call	0xe36	; 0xe36 <vListInitialise>
    22e6:	85 ef       	ldi	r24, 0xF5	; 245
    22e8:	96 e0       	ldi	r25, 0x06	; 6
    22ea:	0e 94 1b 07 	call	0xe36	; 0xe36 <vListInitialise>
    22ee:	8e ef       	ldi	r24, 0xFE	; 254
    22f0:	96 e0       	ldi	r25, 0x06	; 6
    22f2:	0e 94 1b 07 	call	0xe36	; 0xe36 <vListInitialise>
    22f6:	88 e0       	ldi	r24, 0x08	; 8
    22f8:	97 e0       	ldi	r25, 0x07	; 7
    22fa:	0e 94 1b 07 	call	0xe36	; 0xe36 <vListInitialise>
    22fe:	8f ed       	ldi	r24, 0xDF	; 223
    2300:	96 e0       	ldi	r25, 0x06	; 6
    2302:	90 93 f2 06 	sts	0x06F2, r25	; 0x8006f2 <pxDelayedTaskList+0x1>
    2306:	80 93 f1 06 	sts	0x06F1, r24	; 0x8006f1 <pxDelayedTaskList>
    230a:	88 ee       	ldi	r24, 0xE8	; 232
    230c:	96 e0       	ldi	r25, 0x06	; 6
    230e:	90 93 f4 06 	sts	0x06F4, r25	; 0x8006f4 <pxOverflowDelayedTaskList+0x1>
    2312:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <pxOverflowDelayedTaskList>
    2316:	00 00       	nop
    2318:	0f 90       	pop	r0
    231a:	df 91       	pop	r29
    231c:	cf 91       	pop	r28
    231e:	08 95       	ret

00002320 <prvCheckTasksWaitingTermination>:
    2320:	cf 93       	push	r28
    2322:	df 93       	push	r29
    2324:	00 d0       	rcall	.+0      	; 0x2326 <prvCheckTasksWaitingTermination+0x6>
    2326:	cd b7       	in	r28, 0x3d	; 61
    2328:	de b7       	in	r29, 0x3e	; 62
    232a:	21 c0       	rjmp	.+66     	; 0x236e <prvCheckTasksWaitingTermination+0x4e>
    232c:	0f b6       	in	r0, 0x3f	; 63
    232e:	f8 94       	cli
    2330:	0f 92       	push	r0
    2332:	80 91 03 07 	lds	r24, 0x0703	; 0x800703 <xTasksWaitingTermination+0x5>
    2336:	90 91 04 07 	lds	r25, 0x0704	; 0x800704 <xTasksWaitingTermination+0x6>
    233a:	fc 01       	movw	r30, r24
    233c:	86 81       	ldd	r24, Z+6	; 0x06
    233e:	97 81       	ldd	r25, Z+7	; 0x07
    2340:	9a 83       	std	Y+2, r25	; 0x02
    2342:	89 83       	std	Y+1, r24	; 0x01
    2344:	89 81       	ldd	r24, Y+1	; 0x01
    2346:	9a 81       	ldd	r25, Y+2	; 0x02
    2348:	02 96       	adiw	r24, 0x02	; 2
    234a:	0e 94 2a 08 	call	0x1054	; 0x1054 <uxListRemove>
    234e:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <uxCurrentNumberOfTasks>
    2352:	81 50       	subi	r24, 0x01	; 1
    2354:	80 93 11 07 	sts	0x0711, r24	; 0x800711 <uxCurrentNumberOfTasks>
    2358:	80 91 07 07 	lds	r24, 0x0707	; 0x800707 <uxDeletedTasksWaitingCleanUp>
    235c:	81 50       	subi	r24, 0x01	; 1
    235e:	80 93 07 07 	sts	0x0707, r24	; 0x800707 <uxDeletedTasksWaitingCleanUp>
    2362:	0f 90       	pop	r0
    2364:	0f be       	out	0x3f, r0	; 63
    2366:	89 81       	ldd	r24, Y+1	; 0x01
    2368:	9a 81       	ldd	r25, Y+2	; 0x02
    236a:	0e 94 c1 11 	call	0x2382	; 0x2382 <prvDeleteTCB>
    236e:	80 91 07 07 	lds	r24, 0x0707	; 0x800707 <uxDeletedTasksWaitingCleanUp>
    2372:	88 23       	and	r24, r24
    2374:	d9 f6       	brne	.-74     	; 0x232c <prvCheckTasksWaitingTermination+0xc>
    2376:	00 00       	nop
    2378:	0f 90       	pop	r0
    237a:	0f 90       	pop	r0
    237c:	df 91       	pop	r29
    237e:	cf 91       	pop	r28
    2380:	08 95       	ret

00002382 <prvDeleteTCB>:
    2382:	cf 93       	push	r28
    2384:	df 93       	push	r29
    2386:	00 d0       	rcall	.+0      	; 0x2388 <prvDeleteTCB+0x6>
    2388:	cd b7       	in	r28, 0x3d	; 61
    238a:	de b7       	in	r29, 0x3e	; 62
    238c:	9a 83       	std	Y+2, r25	; 0x02
    238e:	89 83       	std	Y+1, r24	; 0x01
    2390:	89 81       	ldd	r24, Y+1	; 0x01
    2392:	9a 81       	ldd	r25, Y+2	; 0x02
    2394:	fc 01       	movw	r30, r24
    2396:	87 89       	ldd	r24, Z+23	; 0x17
    2398:	90 8d       	ldd	r25, Z+24	; 0x18
    239a:	0e 94 0e 07 	call	0xe1c	; 0xe1c <vPortFree>
    239e:	89 81       	ldd	r24, Y+1	; 0x01
    23a0:	9a 81       	ldd	r25, Y+2	; 0x02
    23a2:	0e 94 0e 07 	call	0xe1c	; 0xe1c <vPortFree>
    23a6:	00 00       	nop
    23a8:	0f 90       	pop	r0
    23aa:	0f 90       	pop	r0
    23ac:	df 91       	pop	r29
    23ae:	cf 91       	pop	r28
    23b0:	08 95       	ret

000023b2 <prvResetNextTaskUnblockTime>:
    23b2:	cf 93       	push	r28
    23b4:	df 93       	push	r29
    23b6:	00 d0       	rcall	.+0      	; 0x23b8 <prvResetNextTaskUnblockTime+0x6>
    23b8:	cd b7       	in	r28, 0x3d	; 61
    23ba:	de b7       	in	r29, 0x3e	; 62
    23bc:	80 91 f1 06 	lds	r24, 0x06F1	; 0x8006f1 <pxDelayedTaskList>
    23c0:	90 91 f2 06 	lds	r25, 0x06F2	; 0x8006f2 <pxDelayedTaskList+0x1>
    23c4:	fc 01       	movw	r30, r24
    23c6:	80 81       	ld	r24, Z
    23c8:	88 23       	and	r24, r24
    23ca:	39 f4       	brne	.+14     	; 0x23da <prvResetNextTaskUnblockTime+0x28>
    23cc:	8f ef       	ldi	r24, 0xFF	; 255
    23ce:	9f ef       	ldi	r25, 0xFF	; 255
    23d0:	90 93 1b 07 	sts	0x071B, r25	; 0x80071b <xNextTaskUnblockTime+0x1>
    23d4:	80 93 1a 07 	sts	0x071A, r24	; 0x80071a <xNextTaskUnblockTime>
    23d8:	15 c0       	rjmp	.+42     	; 0x2404 <prvResetNextTaskUnblockTime+0x52>
    23da:	80 91 f1 06 	lds	r24, 0x06F1	; 0x8006f1 <pxDelayedTaskList>
    23de:	90 91 f2 06 	lds	r25, 0x06F2	; 0x8006f2 <pxDelayedTaskList+0x1>
    23e2:	fc 01       	movw	r30, r24
    23e4:	85 81       	ldd	r24, Z+5	; 0x05
    23e6:	96 81       	ldd	r25, Z+6	; 0x06
    23e8:	fc 01       	movw	r30, r24
    23ea:	86 81       	ldd	r24, Z+6	; 0x06
    23ec:	97 81       	ldd	r25, Z+7	; 0x07
    23ee:	9a 83       	std	Y+2, r25	; 0x02
    23f0:	89 83       	std	Y+1, r24	; 0x01
    23f2:	89 81       	ldd	r24, Y+1	; 0x01
    23f4:	9a 81       	ldd	r25, Y+2	; 0x02
    23f6:	fc 01       	movw	r30, r24
    23f8:	82 81       	ldd	r24, Z+2	; 0x02
    23fa:	93 81       	ldd	r25, Z+3	; 0x03
    23fc:	90 93 1b 07 	sts	0x071B, r25	; 0x80071b <xNextTaskUnblockTime+0x1>
    2400:	80 93 1a 07 	sts	0x071A, r24	; 0x80071a <xNextTaskUnblockTime>
    2404:	00 00       	nop
    2406:	0f 90       	pop	r0
    2408:	0f 90       	pop	r0
    240a:	df 91       	pop	r29
    240c:	cf 91       	pop	r28
    240e:	08 95       	ret

00002410 <uxTaskResetEventItemValue>:
    2410:	cf 93       	push	r28
    2412:	df 93       	push	r29
    2414:	00 d0       	rcall	.+0      	; 0x2416 <uxTaskResetEventItemValue+0x6>
    2416:	cd b7       	in	r28, 0x3d	; 61
    2418:	de b7       	in	r29, 0x3e	; 62
    241a:	80 91 a7 06 	lds	r24, 0x06A7	; 0x8006a7 <pxCurrentTCB>
    241e:	90 91 a8 06 	lds	r25, 0x06A8	; 0x8006a8 <pxCurrentTCB+0x1>
    2422:	fc 01       	movw	r30, r24
    2424:	84 85       	ldd	r24, Z+12	; 0x0c
    2426:	95 85       	ldd	r25, Z+13	; 0x0d
    2428:	9a 83       	std	Y+2, r25	; 0x02
    242a:	89 83       	std	Y+1, r24	; 0x01
    242c:	80 91 a7 06 	lds	r24, 0x06A7	; 0x8006a7 <pxCurrentTCB>
    2430:	90 91 a8 06 	lds	r25, 0x06A8	; 0x8006a8 <pxCurrentTCB+0x1>
    2434:	20 91 a7 06 	lds	r18, 0x06A7	; 0x8006a7 <pxCurrentTCB>
    2438:	30 91 a8 06 	lds	r19, 0x06A8	; 0x8006a8 <pxCurrentTCB+0x1>
    243c:	f9 01       	movw	r30, r18
    243e:	26 89       	ldd	r18, Z+22	; 0x16
    2440:	22 2f       	mov	r18, r18
    2442:	30 e0       	ldi	r19, 0x00	; 0
    2444:	46 e0       	ldi	r20, 0x06	; 6
    2446:	50 e0       	ldi	r21, 0x00	; 0
    2448:	ba 01       	movw	r22, r20
    244a:	62 1b       	sub	r22, r18
    244c:	73 0b       	sbc	r23, r19
    244e:	9b 01       	movw	r18, r22
    2450:	fc 01       	movw	r30, r24
    2452:	35 87       	std	Z+13, r19	; 0x0d
    2454:	24 87       	std	Z+12, r18	; 0x0c
    2456:	89 81       	ldd	r24, Y+1	; 0x01
    2458:	9a 81       	ldd	r25, Y+2	; 0x02
    245a:	0f 90       	pop	r0
    245c:	0f 90       	pop	r0
    245e:	df 91       	pop	r29
    2460:	cf 91       	pop	r28
    2462:	08 95       	ret

00002464 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    2464:	cf 93       	push	r28
    2466:	df 93       	push	r29
    2468:	cd b7       	in	r28, 0x3d	; 61
    246a:	de b7       	in	r29, 0x3e	; 62
    246c:	27 97       	sbiw	r28, 0x07	; 7
    246e:	0f b6       	in	r0, 0x3f	; 63
    2470:	f8 94       	cli
    2472:	de bf       	out	0x3e, r29	; 62
    2474:	0f be       	out	0x3f, r0	; 63
    2476:	cd bf       	out	0x3d, r28	; 61
    2478:	9e 83       	std	Y+6, r25	; 0x06
    247a:	8d 83       	std	Y+5, r24	; 0x05
    247c:	6f 83       	std	Y+7, r22	; 0x07
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    247e:	80 91 12 07 	lds	r24, 0x0712	; 0x800712 <xTickCount>
    2482:	90 91 13 07 	lds	r25, 0x0713	; 0x800713 <xTickCount+0x1>
    2486:	9a 83       	std	Y+2, r25	; 0x02
    2488:	89 83       	std	Y+1, r24	; 0x01
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    248a:	80 91 a7 06 	lds	r24, 0x06A7	; 0x8006a7 <pxCurrentTCB>
    248e:	90 91 a8 06 	lds	r25, 0x06A8	; 0x8006a8 <pxCurrentTCB+0x1>
    2492:	02 96       	adiw	r24, 0x02	; 2
    2494:	0e 94 2a 08 	call	0x1054	; 0x1054 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    2498:	8d 81       	ldd	r24, Y+5	; 0x05
    249a:	9e 81       	ldd	r25, Y+6	; 0x06
    249c:	01 96       	adiw	r24, 0x01	; 1
    249e:	71 f4       	brne	.+28     	; 0x24bc <prvAddCurrentTaskToDelayedList+0x58>
    24a0:	8f 81       	ldd	r24, Y+7	; 0x07
    24a2:	88 23       	and	r24, r24
    24a4:	59 f0       	breq	.+22     	; 0x24bc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    24a6:	80 91 a7 06 	lds	r24, 0x06A7	; 0x8006a7 <pxCurrentTCB>
    24aa:	90 91 a8 06 	lds	r25, 0x06A8	; 0x8006a8 <pxCurrentTCB+0x1>
    24ae:	02 96       	adiw	r24, 0x02	; 2
    24b0:	bc 01       	movw	r22, r24
    24b2:	88 e0       	ldi	r24, 0x08	; 8
    24b4:	97 e0       	ldi	r25, 0x07	; 7
    24b6:	0e 94 63 07 	call	0xec6	; 0xec6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    24ba:	44 c0       	rjmp	.+136    	; 0x2544 <prvAddCurrentTaskToDelayedList+0xe0>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    24bc:	29 81       	ldd	r18, Y+1	; 0x01
    24be:	3a 81       	ldd	r19, Y+2	; 0x02
    24c0:	8d 81       	ldd	r24, Y+5	; 0x05
    24c2:	9e 81       	ldd	r25, Y+6	; 0x06
    24c4:	82 0f       	add	r24, r18
    24c6:	93 1f       	adc	r25, r19
    24c8:	9c 83       	std	Y+4, r25	; 0x04
    24ca:	8b 83       	std	Y+3, r24	; 0x03

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    24cc:	80 91 a7 06 	lds	r24, 0x06A7	; 0x8006a7 <pxCurrentTCB>
    24d0:	90 91 a8 06 	lds	r25, 0x06A8	; 0x8006a8 <pxCurrentTCB+0x1>
    24d4:	2b 81       	ldd	r18, Y+3	; 0x03
    24d6:	3c 81       	ldd	r19, Y+4	; 0x04
    24d8:	fc 01       	movw	r30, r24
    24da:	33 83       	std	Z+3, r19	; 0x03
    24dc:	22 83       	std	Z+2, r18	; 0x02

			if( xTimeToWake < xConstTickCount )
    24de:	2b 81       	ldd	r18, Y+3	; 0x03
    24e0:	3c 81       	ldd	r19, Y+4	; 0x04
    24e2:	89 81       	ldd	r24, Y+1	; 0x01
    24e4:	9a 81       	ldd	r25, Y+2	; 0x02
    24e6:	28 17       	cp	r18, r24
    24e8:	39 07       	cpc	r19, r25
    24ea:	78 f4       	brcc	.+30     	; 0x250a <prvAddCurrentTaskToDelayedList+0xa6>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    24ec:	80 91 a7 06 	lds	r24, 0x06A7	; 0x8006a7 <pxCurrentTCB>
    24f0:	90 91 a8 06 	lds	r25, 0x06A8	; 0x8006a8 <pxCurrentTCB+0x1>
    24f4:	9c 01       	movw	r18, r24
    24f6:	2e 5f       	subi	r18, 0xFE	; 254
    24f8:	3f 4f       	sbci	r19, 0xFF	; 255
    24fa:	80 91 f3 06 	lds	r24, 0x06F3	; 0x8006f3 <pxOverflowDelayedTaskList>
    24fe:	90 91 f4 06 	lds	r25, 0x06F4	; 0x8006f4 <pxOverflowDelayedTaskList+0x1>
    2502:	b9 01       	movw	r22, r18
    2504:	0e 94 b2 07 	call	0xf64	; 0xf64 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    2508:	1d c0       	rjmp	.+58     	; 0x2544 <prvAddCurrentTaskToDelayedList+0xe0>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    250a:	80 91 a7 06 	lds	r24, 0x06A7	; 0x8006a7 <pxCurrentTCB>
    250e:	90 91 a8 06 	lds	r25, 0x06A8	; 0x8006a8 <pxCurrentTCB+0x1>
    2512:	9c 01       	movw	r18, r24
    2514:	2e 5f       	subi	r18, 0xFE	; 254
    2516:	3f 4f       	sbci	r19, 0xFF	; 255
    2518:	80 91 f1 06 	lds	r24, 0x06F1	; 0x8006f1 <pxDelayedTaskList>
    251c:	90 91 f2 06 	lds	r25, 0x06F2	; 0x8006f2 <pxDelayedTaskList+0x1>
    2520:	b9 01       	movw	r22, r18
    2522:	0e 94 b2 07 	call	0xf64	; 0xf64 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
    2526:	80 91 1a 07 	lds	r24, 0x071A	; 0x80071a <xNextTaskUnblockTime>
    252a:	90 91 1b 07 	lds	r25, 0x071B	; 0x80071b <xNextTaskUnblockTime+0x1>
    252e:	2b 81       	ldd	r18, Y+3	; 0x03
    2530:	3c 81       	ldd	r19, Y+4	; 0x04
    2532:	28 17       	cp	r18, r24
    2534:	39 07       	cpc	r19, r25
    2536:	30 f4       	brcc	.+12     	; 0x2544 <prvAddCurrentTaskToDelayedList+0xe0>
				{
					xNextTaskUnblockTime = xTimeToWake;
    2538:	8b 81       	ldd	r24, Y+3	; 0x03
    253a:	9c 81       	ldd	r25, Y+4	; 0x04
    253c:	90 93 1b 07 	sts	0x071B, r25	; 0x80071b <xNextTaskUnblockTime+0x1>
    2540:	80 93 1a 07 	sts	0x071A, r24	; 0x80071a <xNextTaskUnblockTime>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    2544:	00 00       	nop
    2546:	27 96       	adiw	r28, 0x07	; 7
    2548:	0f b6       	in	r0, 0x3f	; 63
    254a:	f8 94       	cli
    254c:	de bf       	out	0x3e, r29	; 62
    254e:	0f be       	out	0x3f, r0	; 63
    2550:	cd bf       	out	0x3d, r28	; 61
    2552:	df 91       	pop	r29
    2554:	cf 91       	pop	r28
    2556:	08 95       	ret

00002558 <Gpio_PortDirection>:
		case MYPORTD :
		result = (PIN_D >> 4);
		break;
	}
	return result;
}
    2558:	cf 93       	push	r28
    255a:	df 93       	push	r29
    255c:	00 d0       	rcall	.+0      	; 0x255e <Gpio_PortDirection+0x6>
    255e:	cd b7       	in	r28, 0x3d	; 61
    2560:	de b7       	in	r29, 0x3e	; 62
    2562:	89 83       	std	Y+1, r24	; 0x01
    2564:	6a 83       	std	Y+2, r22	; 0x02
    2566:	89 81       	ldd	r24, Y+1	; 0x01
    2568:	88 2f       	mov	r24, r24
    256a:	90 e0       	ldi	r25, 0x00	; 0
    256c:	81 30       	cpi	r24, 0x01	; 1
    256e:	91 05       	cpc	r25, r1
    2570:	91 f0       	breq	.+36     	; 0x2596 <Gpio_PortDirection+0x3e>
    2572:	82 30       	cpi	r24, 0x02	; 2
    2574:	91 05       	cpc	r25, r1
    2576:	1c f4       	brge	.+6      	; 0x257e <Gpio_PortDirection+0x26>
    2578:	89 2b       	or	r24, r25
    257a:	39 f0       	breq	.+14     	; 0x258a <Gpio_PortDirection+0x32>
    257c:	1e c0       	rjmp	.+60     	; 0x25ba <Gpio_PortDirection+0x62>
    257e:	82 30       	cpi	r24, 0x02	; 2
    2580:	91 05       	cpc	r25, r1
    2582:	79 f0       	breq	.+30     	; 0x25a2 <Gpio_PortDirection+0x4a>
    2584:	03 97       	sbiw	r24, 0x03	; 3
    2586:	99 f0       	breq	.+38     	; 0x25ae <Gpio_PortDirection+0x56>
    2588:	18 c0       	rjmp	.+48     	; 0x25ba <Gpio_PortDirection+0x62>
    258a:	8a e3       	ldi	r24, 0x3A	; 58
    258c:	90 e0       	ldi	r25, 0x00	; 0
    258e:	2a 81       	ldd	r18, Y+2	; 0x02
    2590:	fc 01       	movw	r30, r24
    2592:	20 83       	st	Z, r18
    2594:	12 c0       	rjmp	.+36     	; 0x25ba <Gpio_PortDirection+0x62>
    2596:	87 e3       	ldi	r24, 0x37	; 55
    2598:	90 e0       	ldi	r25, 0x00	; 0
    259a:	2a 81       	ldd	r18, Y+2	; 0x02
    259c:	fc 01       	movw	r30, r24
    259e:	20 83       	st	Z, r18
    25a0:	0c c0       	rjmp	.+24     	; 0x25ba <Gpio_PortDirection+0x62>
    25a2:	84 e3       	ldi	r24, 0x34	; 52
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	2a 81       	ldd	r18, Y+2	; 0x02
    25a8:	fc 01       	movw	r30, r24
    25aa:	20 83       	st	Z, r18
    25ac:	06 c0       	rjmp	.+12     	; 0x25ba <Gpio_PortDirection+0x62>
    25ae:	81 e3       	ldi	r24, 0x31	; 49
    25b0:	90 e0       	ldi	r25, 0x00	; 0
    25b2:	2a 81       	ldd	r18, Y+2	; 0x02
    25b4:	fc 01       	movw	r30, r24
    25b6:	20 83       	st	Z, r18
    25b8:	00 00       	nop
    25ba:	00 00       	nop
    25bc:	0f 90       	pop	r0
    25be:	0f 90       	pop	r0
    25c0:	df 91       	pop	r29
    25c2:	cf 91       	pop	r28
    25c4:	08 95       	ret

000025c6 <Gpio_PinDirection>:
    25c6:	cf 93       	push	r28
    25c8:	df 93       	push	r29
    25ca:	00 d0       	rcall	.+0      	; 0x25cc <Gpio_PinDirection+0x6>
    25cc:	1f 92       	push	r1
    25ce:	cd b7       	in	r28, 0x3d	; 61
    25d0:	de b7       	in	r29, 0x3e	; 62
    25d2:	89 83       	std	Y+1, r24	; 0x01
    25d4:	6a 83       	std	Y+2, r22	; 0x02
    25d6:	4b 83       	std	Y+3, r20	; 0x03
    25d8:	89 81       	ldd	r24, Y+1	; 0x01
    25da:	88 2f       	mov	r24, r24
    25dc:	90 e0       	ldi	r25, 0x00	; 0
    25de:	81 30       	cpi	r24, 0x01	; 1
    25e0:	91 05       	cpc	r25, r1
    25e2:	81 f1       	breq	.+96     	; 0x2644 <Gpio_PinDirection+0x7e>
    25e4:	82 30       	cpi	r24, 0x02	; 2
    25e6:	91 05       	cpc	r25, r1
    25e8:	1c f4       	brge	.+6      	; 0x25f0 <Gpio_PinDirection+0x2a>
    25ea:	89 2b       	or	r24, r25
    25ec:	49 f0       	breq	.+18     	; 0x2600 <Gpio_PinDirection+0x3a>
    25ee:	90 c0       	rjmp	.+288    	; 0x2710 <Gpio_PinDirection+0x14a>
    25f0:	82 30       	cpi	r24, 0x02	; 2
    25f2:	91 05       	cpc	r25, r1
    25f4:	09 f4       	brne	.+2      	; 0x25f8 <Gpio_PinDirection+0x32>
    25f6:	48 c0       	rjmp	.+144    	; 0x2688 <Gpio_PinDirection+0xc2>
    25f8:	03 97       	sbiw	r24, 0x03	; 3
    25fa:	09 f4       	brne	.+2      	; 0x25fe <Gpio_PinDirection+0x38>
    25fc:	67 c0       	rjmp	.+206    	; 0x26cc <Gpio_PinDirection+0x106>
    25fe:	88 c0       	rjmp	.+272    	; 0x2710 <Gpio_PinDirection+0x14a>
    2600:	8b 81       	ldd	r24, Y+3	; 0x03
    2602:	88 2f       	mov	r24, r24
    2604:	90 e0       	ldi	r25, 0x00	; 0
    2606:	00 97       	sbiw	r24, 0x00	; 0
    2608:	21 f0       	breq	.+8      	; 0x2612 <Gpio_PinDirection+0x4c>
    260a:	8f 3f       	cpi	r24, 0xFF	; 255
    260c:	91 05       	cpc	r25, r1
    260e:	71 f0       	breq	.+28     	; 0x262c <Gpio_PinDirection+0x66>
    2610:	7f c0       	rjmp	.+254    	; 0x2710 <Gpio_PinDirection+0x14a>
    2612:	8a e3       	ldi	r24, 0x3A	; 58
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	2a e3       	ldi	r18, 0x3A	; 58
    2618:	30 e0       	ldi	r19, 0x00	; 0
    261a:	f9 01       	movw	r30, r18
    261c:	20 81       	ld	r18, Z
    261e:	32 2f       	mov	r19, r18
    2620:	2a 81       	ldd	r18, Y+2	; 0x02
    2622:	20 95       	com	r18
    2624:	23 23       	and	r18, r19
    2626:	fc 01       	movw	r30, r24
    2628:	20 83       	st	Z, r18
    262a:	0b c0       	rjmp	.+22     	; 0x2642 <Gpio_PinDirection+0x7c>
    262c:	8a e3       	ldi	r24, 0x3A	; 58
    262e:	90 e0       	ldi	r25, 0x00	; 0
    2630:	2a e3       	ldi	r18, 0x3A	; 58
    2632:	30 e0       	ldi	r19, 0x00	; 0
    2634:	f9 01       	movw	r30, r18
    2636:	30 81       	ld	r19, Z
    2638:	2a 81       	ldd	r18, Y+2	; 0x02
    263a:	23 2b       	or	r18, r19
    263c:	fc 01       	movw	r30, r24
    263e:	20 83       	st	Z, r18
    2640:	00 00       	nop
    2642:	66 c0       	rjmp	.+204    	; 0x2710 <Gpio_PinDirection+0x14a>
    2644:	8b 81       	ldd	r24, Y+3	; 0x03
    2646:	88 2f       	mov	r24, r24
    2648:	90 e0       	ldi	r25, 0x00	; 0
    264a:	00 97       	sbiw	r24, 0x00	; 0
    264c:	21 f0       	breq	.+8      	; 0x2656 <Gpio_PinDirection+0x90>
    264e:	8f 3f       	cpi	r24, 0xFF	; 255
    2650:	91 05       	cpc	r25, r1
    2652:	71 f0       	breq	.+28     	; 0x2670 <Gpio_PinDirection+0xaa>
    2654:	5d c0       	rjmp	.+186    	; 0x2710 <Gpio_PinDirection+0x14a>
    2656:	87 e3       	ldi	r24, 0x37	; 55
    2658:	90 e0       	ldi	r25, 0x00	; 0
    265a:	27 e3       	ldi	r18, 0x37	; 55
    265c:	30 e0       	ldi	r19, 0x00	; 0
    265e:	f9 01       	movw	r30, r18
    2660:	20 81       	ld	r18, Z
    2662:	32 2f       	mov	r19, r18
    2664:	2a 81       	ldd	r18, Y+2	; 0x02
    2666:	20 95       	com	r18
    2668:	23 23       	and	r18, r19
    266a:	fc 01       	movw	r30, r24
    266c:	20 83       	st	Z, r18
    266e:	0b c0       	rjmp	.+22     	; 0x2686 <Gpio_PinDirection+0xc0>
    2670:	87 e3       	ldi	r24, 0x37	; 55
    2672:	90 e0       	ldi	r25, 0x00	; 0
    2674:	27 e3       	ldi	r18, 0x37	; 55
    2676:	30 e0       	ldi	r19, 0x00	; 0
    2678:	f9 01       	movw	r30, r18
    267a:	30 81       	ld	r19, Z
    267c:	2a 81       	ldd	r18, Y+2	; 0x02
    267e:	23 2b       	or	r18, r19
    2680:	fc 01       	movw	r30, r24
    2682:	20 83       	st	Z, r18
    2684:	00 00       	nop
    2686:	44 c0       	rjmp	.+136    	; 0x2710 <Gpio_PinDirection+0x14a>
    2688:	8b 81       	ldd	r24, Y+3	; 0x03
    268a:	88 2f       	mov	r24, r24
    268c:	90 e0       	ldi	r25, 0x00	; 0
    268e:	00 97       	sbiw	r24, 0x00	; 0
    2690:	21 f0       	breq	.+8      	; 0x269a <Gpio_PinDirection+0xd4>
    2692:	8f 3f       	cpi	r24, 0xFF	; 255
    2694:	91 05       	cpc	r25, r1
    2696:	71 f0       	breq	.+28     	; 0x26b4 <Gpio_PinDirection+0xee>
    2698:	3b c0       	rjmp	.+118    	; 0x2710 <Gpio_PinDirection+0x14a>
    269a:	84 e3       	ldi	r24, 0x34	; 52
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	24 e3       	ldi	r18, 0x34	; 52
    26a0:	30 e0       	ldi	r19, 0x00	; 0
    26a2:	f9 01       	movw	r30, r18
    26a4:	20 81       	ld	r18, Z
    26a6:	32 2f       	mov	r19, r18
    26a8:	2a 81       	ldd	r18, Y+2	; 0x02
    26aa:	20 95       	com	r18
    26ac:	23 23       	and	r18, r19
    26ae:	fc 01       	movw	r30, r24
    26b0:	20 83       	st	Z, r18
    26b2:	0b c0       	rjmp	.+22     	; 0x26ca <Gpio_PinDirection+0x104>
    26b4:	84 e3       	ldi	r24, 0x34	; 52
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	24 e3       	ldi	r18, 0x34	; 52
    26ba:	30 e0       	ldi	r19, 0x00	; 0
    26bc:	f9 01       	movw	r30, r18
    26be:	30 81       	ld	r19, Z
    26c0:	2a 81       	ldd	r18, Y+2	; 0x02
    26c2:	23 2b       	or	r18, r19
    26c4:	fc 01       	movw	r30, r24
    26c6:	20 83       	st	Z, r18
    26c8:	00 00       	nop
    26ca:	22 c0       	rjmp	.+68     	; 0x2710 <Gpio_PinDirection+0x14a>
    26cc:	8b 81       	ldd	r24, Y+3	; 0x03
    26ce:	88 2f       	mov	r24, r24
    26d0:	90 e0       	ldi	r25, 0x00	; 0
    26d2:	00 97       	sbiw	r24, 0x00	; 0
    26d4:	21 f0       	breq	.+8      	; 0x26de <Gpio_PinDirection+0x118>
    26d6:	8f 3f       	cpi	r24, 0xFF	; 255
    26d8:	91 05       	cpc	r25, r1
    26da:	71 f0       	breq	.+28     	; 0x26f8 <Gpio_PinDirection+0x132>
    26dc:	18 c0       	rjmp	.+48     	; 0x270e <Gpio_PinDirection+0x148>
    26de:	81 e3       	ldi	r24, 0x31	; 49
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	21 e3       	ldi	r18, 0x31	; 49
    26e4:	30 e0       	ldi	r19, 0x00	; 0
    26e6:	f9 01       	movw	r30, r18
    26e8:	20 81       	ld	r18, Z
    26ea:	32 2f       	mov	r19, r18
    26ec:	2a 81       	ldd	r18, Y+2	; 0x02
    26ee:	20 95       	com	r18
    26f0:	23 23       	and	r18, r19
    26f2:	fc 01       	movw	r30, r24
    26f4:	20 83       	st	Z, r18
    26f6:	0b c0       	rjmp	.+22     	; 0x270e <Gpio_PinDirection+0x148>
    26f8:	81 e3       	ldi	r24, 0x31	; 49
    26fa:	90 e0       	ldi	r25, 0x00	; 0
    26fc:	21 e3       	ldi	r18, 0x31	; 49
    26fe:	30 e0       	ldi	r19, 0x00	; 0
    2700:	f9 01       	movw	r30, r18
    2702:	30 81       	ld	r19, Z
    2704:	2a 81       	ldd	r18, Y+2	; 0x02
    2706:	23 2b       	or	r18, r19
    2708:	fc 01       	movw	r30, r24
    270a:	20 83       	st	Z, r18
    270c:	00 00       	nop
    270e:	00 00       	nop
    2710:	00 00       	nop
    2712:	0f 90       	pop	r0
    2714:	0f 90       	pop	r0
    2716:	0f 90       	pop	r0
    2718:	df 91       	pop	r29
    271a:	cf 91       	pop	r28
    271c:	08 95       	ret

0000271e <Gpio_PinWrite>:
    271e:	cf 93       	push	r28
    2720:	df 93       	push	r29
    2722:	00 d0       	rcall	.+0      	; 0x2724 <Gpio_PinWrite+0x6>
    2724:	1f 92       	push	r1
    2726:	cd b7       	in	r28, 0x3d	; 61
    2728:	de b7       	in	r29, 0x3e	; 62
    272a:	89 83       	std	Y+1, r24	; 0x01
    272c:	6a 83       	std	Y+2, r22	; 0x02
    272e:	4b 83       	std	Y+3, r20	; 0x03
    2730:	8b 81       	ldd	r24, Y+3	; 0x03
    2732:	88 2f       	mov	r24, r24
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	00 97       	sbiw	r24, 0x00	; 0
    2738:	09 f4       	brne	.+2      	; 0x273c <Gpio_PinWrite+0x1e>
    273a:	42 c0       	rjmp	.+132    	; 0x27c0 <Gpio_PinWrite+0xa2>
    273c:	01 97       	sbiw	r24, 0x01	; 1
    273e:	09 f0       	breq	.+2      	; 0x2742 <Gpio_PinWrite+0x24>
    2740:	86 c0       	rjmp	.+268    	; 0x284e <Gpio_PinWrite+0x130>
    2742:	89 81       	ldd	r24, Y+1	; 0x01
    2744:	88 2f       	mov	r24, r24
    2746:	90 e0       	ldi	r25, 0x00	; 0
    2748:	81 30       	cpi	r24, 0x01	; 1
    274a:	91 05       	cpc	r25, r1
    274c:	b9 f0       	breq	.+46     	; 0x277c <Gpio_PinWrite+0x5e>
    274e:	82 30       	cpi	r24, 0x02	; 2
    2750:	91 05       	cpc	r25, r1
    2752:	1c f4       	brge	.+6      	; 0x275a <Gpio_PinWrite+0x3c>
    2754:	89 2b       	or	r24, r25
    2756:	39 f0       	breq	.+14     	; 0x2766 <Gpio_PinWrite+0x48>
    2758:	7a c0       	rjmp	.+244    	; 0x284e <Gpio_PinWrite+0x130>
    275a:	82 30       	cpi	r24, 0x02	; 2
    275c:	91 05       	cpc	r25, r1
    275e:	c9 f0       	breq	.+50     	; 0x2792 <Gpio_PinWrite+0x74>
    2760:	03 97       	sbiw	r24, 0x03	; 3
    2762:	11 f1       	breq	.+68     	; 0x27a8 <Gpio_PinWrite+0x8a>
    2764:	74 c0       	rjmp	.+232    	; 0x284e <Gpio_PinWrite+0x130>
    2766:	8b e3       	ldi	r24, 0x3B	; 59
    2768:	90 e0       	ldi	r25, 0x00	; 0
    276a:	2b e3       	ldi	r18, 0x3B	; 59
    276c:	30 e0       	ldi	r19, 0x00	; 0
    276e:	f9 01       	movw	r30, r18
    2770:	30 81       	ld	r19, Z
    2772:	2a 81       	ldd	r18, Y+2	; 0x02
    2774:	23 2b       	or	r18, r19
    2776:	fc 01       	movw	r30, r24
    2778:	20 83       	st	Z, r18
    277a:	21 c0       	rjmp	.+66     	; 0x27be <Gpio_PinWrite+0xa0>
    277c:	88 e3       	ldi	r24, 0x38	; 56
    277e:	90 e0       	ldi	r25, 0x00	; 0
    2780:	28 e3       	ldi	r18, 0x38	; 56
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	f9 01       	movw	r30, r18
    2786:	30 81       	ld	r19, Z
    2788:	2a 81       	ldd	r18, Y+2	; 0x02
    278a:	23 2b       	or	r18, r19
    278c:	fc 01       	movw	r30, r24
    278e:	20 83       	st	Z, r18
    2790:	16 c0       	rjmp	.+44     	; 0x27be <Gpio_PinWrite+0xa0>
    2792:	85 e3       	ldi	r24, 0x35	; 53
    2794:	90 e0       	ldi	r25, 0x00	; 0
    2796:	25 e3       	ldi	r18, 0x35	; 53
    2798:	30 e0       	ldi	r19, 0x00	; 0
    279a:	f9 01       	movw	r30, r18
    279c:	30 81       	ld	r19, Z
    279e:	2a 81       	ldd	r18, Y+2	; 0x02
    27a0:	23 2b       	or	r18, r19
    27a2:	fc 01       	movw	r30, r24
    27a4:	20 83       	st	Z, r18
    27a6:	0b c0       	rjmp	.+22     	; 0x27be <Gpio_PinWrite+0xa0>
    27a8:	82 e3       	ldi	r24, 0x32	; 50
    27aa:	90 e0       	ldi	r25, 0x00	; 0
    27ac:	22 e3       	ldi	r18, 0x32	; 50
    27ae:	30 e0       	ldi	r19, 0x00	; 0
    27b0:	f9 01       	movw	r30, r18
    27b2:	30 81       	ld	r19, Z
    27b4:	2a 81       	ldd	r18, Y+2	; 0x02
    27b6:	23 2b       	or	r18, r19
    27b8:	fc 01       	movw	r30, r24
    27ba:	20 83       	st	Z, r18
    27bc:	00 00       	nop
    27be:	47 c0       	rjmp	.+142    	; 0x284e <Gpio_PinWrite+0x130>
    27c0:	89 81       	ldd	r24, Y+1	; 0x01
    27c2:	88 2f       	mov	r24, r24
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	81 30       	cpi	r24, 0x01	; 1
    27c8:	91 05       	cpc	r25, r1
    27ca:	c9 f0       	breq	.+50     	; 0x27fe <Gpio_PinWrite+0xe0>
    27cc:	82 30       	cpi	r24, 0x02	; 2
    27ce:	91 05       	cpc	r25, r1
    27d0:	1c f4       	brge	.+6      	; 0x27d8 <Gpio_PinWrite+0xba>
    27d2:	89 2b       	or	r24, r25
    27d4:	39 f0       	breq	.+14     	; 0x27e4 <Gpio_PinWrite+0xc6>
    27d6:	3a c0       	rjmp	.+116    	; 0x284c <Gpio_PinWrite+0x12e>
    27d8:	82 30       	cpi	r24, 0x02	; 2
    27da:	91 05       	cpc	r25, r1
    27dc:	e9 f0       	breq	.+58     	; 0x2818 <Gpio_PinWrite+0xfa>
    27de:	03 97       	sbiw	r24, 0x03	; 3
    27e0:	41 f1       	breq	.+80     	; 0x2832 <Gpio_PinWrite+0x114>
    27e2:	34 c0       	rjmp	.+104    	; 0x284c <Gpio_PinWrite+0x12e>
    27e4:	8b e3       	ldi	r24, 0x3B	; 59
    27e6:	90 e0       	ldi	r25, 0x00	; 0
    27e8:	2b e3       	ldi	r18, 0x3B	; 59
    27ea:	30 e0       	ldi	r19, 0x00	; 0
    27ec:	f9 01       	movw	r30, r18
    27ee:	20 81       	ld	r18, Z
    27f0:	32 2f       	mov	r19, r18
    27f2:	2a 81       	ldd	r18, Y+2	; 0x02
    27f4:	20 95       	com	r18
    27f6:	23 23       	and	r18, r19
    27f8:	fc 01       	movw	r30, r24
    27fa:	20 83       	st	Z, r18
    27fc:	27 c0       	rjmp	.+78     	; 0x284c <Gpio_PinWrite+0x12e>
    27fe:	88 e3       	ldi	r24, 0x38	; 56
    2800:	90 e0       	ldi	r25, 0x00	; 0
    2802:	28 e3       	ldi	r18, 0x38	; 56
    2804:	30 e0       	ldi	r19, 0x00	; 0
    2806:	f9 01       	movw	r30, r18
    2808:	20 81       	ld	r18, Z
    280a:	32 2f       	mov	r19, r18
    280c:	2a 81       	ldd	r18, Y+2	; 0x02
    280e:	20 95       	com	r18
    2810:	23 23       	and	r18, r19
    2812:	fc 01       	movw	r30, r24
    2814:	20 83       	st	Z, r18
    2816:	1a c0       	rjmp	.+52     	; 0x284c <Gpio_PinWrite+0x12e>
    2818:	85 e3       	ldi	r24, 0x35	; 53
    281a:	90 e0       	ldi	r25, 0x00	; 0
    281c:	25 e3       	ldi	r18, 0x35	; 53
    281e:	30 e0       	ldi	r19, 0x00	; 0
    2820:	f9 01       	movw	r30, r18
    2822:	20 81       	ld	r18, Z
    2824:	32 2f       	mov	r19, r18
    2826:	2a 81       	ldd	r18, Y+2	; 0x02
    2828:	20 95       	com	r18
    282a:	23 23       	and	r18, r19
    282c:	fc 01       	movw	r30, r24
    282e:	20 83       	st	Z, r18
    2830:	0d c0       	rjmp	.+26     	; 0x284c <Gpio_PinWrite+0x12e>
    2832:	82 e3       	ldi	r24, 0x32	; 50
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	22 e3       	ldi	r18, 0x32	; 50
    2838:	30 e0       	ldi	r19, 0x00	; 0
    283a:	f9 01       	movw	r30, r18
    283c:	20 81       	ld	r18, Z
    283e:	32 2f       	mov	r19, r18
    2840:	2a 81       	ldd	r18, Y+2	; 0x02
    2842:	20 95       	com	r18
    2844:	23 23       	and	r18, r19
    2846:	fc 01       	movw	r30, r24
    2848:	20 83       	st	Z, r18
    284a:	00 00       	nop
    284c:	00 00       	nop
    284e:	00 00       	nop
    2850:	0f 90       	pop	r0
    2852:	0f 90       	pop	r0
    2854:	0f 90       	pop	r0
    2856:	df 91       	pop	r29
    2858:	cf 91       	pop	r28
    285a:	08 95       	ret

0000285c <Gpio_PinRead>:
    285c:	cf 93       	push	r28
    285e:	df 93       	push	r29
    2860:	00 d0       	rcall	.+0      	; 0x2862 <Gpio_PinRead+0x6>
    2862:	1f 92       	push	r1
    2864:	cd b7       	in	r28, 0x3d	; 61
    2866:	de b7       	in	r29, 0x3e	; 62
    2868:	8a 83       	std	Y+2, r24	; 0x02
    286a:	6b 83       	std	Y+3, r22	; 0x03
    286c:	19 82       	std	Y+1, r1	; 0x01
    286e:	8a 81       	ldd	r24, Y+2	; 0x02
    2870:	88 2f       	mov	r24, r24
    2872:	90 e0       	ldi	r25, 0x00	; 0
    2874:	81 30       	cpi	r24, 0x01	; 1
    2876:	91 05       	cpc	r25, r1
    2878:	e9 f0       	breq	.+58     	; 0x28b4 <Gpio_PinRead+0x58>
    287a:	82 30       	cpi	r24, 0x02	; 2
    287c:	91 05       	cpc	r25, r1
    287e:	1c f4       	brge	.+6      	; 0x2886 <Gpio_PinRead+0x2a>
    2880:	89 2b       	or	r24, r25
    2882:	39 f0       	breq	.+14     	; 0x2892 <Gpio_PinRead+0x36>
    2884:	4a c0       	rjmp	.+148    	; 0x291a <Gpio_PinRead+0xbe>
    2886:	82 30       	cpi	r24, 0x02	; 2
    2888:	91 05       	cpc	r25, r1
    288a:	29 f1       	breq	.+74     	; 0x28d6 <Gpio_PinRead+0x7a>
    288c:	03 97       	sbiw	r24, 0x03	; 3
    288e:	a1 f1       	breq	.+104    	; 0x28f8 <Gpio_PinRead+0x9c>
    2890:	44 c0       	rjmp	.+136    	; 0x291a <Gpio_PinRead+0xbe>
    2892:	89 e3       	ldi	r24, 0x39	; 57
    2894:	90 e0       	ldi	r25, 0x00	; 0
    2896:	fc 01       	movw	r30, r24
    2898:	80 81       	ld	r24, Z
    289a:	88 2f       	mov	r24, r24
    289c:	90 e0       	ldi	r25, 0x00	; 0
    289e:	2b 81       	ldd	r18, Y+3	; 0x03
    28a0:	22 2f       	mov	r18, r18
    28a2:	30 e0       	ldi	r19, 0x00	; 0
    28a4:	02 c0       	rjmp	.+4      	; 0x28aa <Gpio_PinRead+0x4e>
    28a6:	95 95       	asr	r25
    28a8:	87 95       	ror	r24
    28aa:	2a 95       	dec	r18
    28ac:	e2 f7       	brpl	.-8      	; 0x28a6 <Gpio_PinRead+0x4a>
    28ae:	81 70       	andi	r24, 0x01	; 1
    28b0:	89 83       	std	Y+1, r24	; 0x01
    28b2:	33 c0       	rjmp	.+102    	; 0x291a <Gpio_PinRead+0xbe>
    28b4:	86 e3       	ldi	r24, 0x36	; 54
    28b6:	90 e0       	ldi	r25, 0x00	; 0
    28b8:	fc 01       	movw	r30, r24
    28ba:	80 81       	ld	r24, Z
    28bc:	88 2f       	mov	r24, r24
    28be:	90 e0       	ldi	r25, 0x00	; 0
    28c0:	2b 81       	ldd	r18, Y+3	; 0x03
    28c2:	22 2f       	mov	r18, r18
    28c4:	30 e0       	ldi	r19, 0x00	; 0
    28c6:	02 c0       	rjmp	.+4      	; 0x28cc <Gpio_PinRead+0x70>
    28c8:	95 95       	asr	r25
    28ca:	87 95       	ror	r24
    28cc:	2a 95       	dec	r18
    28ce:	e2 f7       	brpl	.-8      	; 0x28c8 <Gpio_PinRead+0x6c>
    28d0:	81 70       	andi	r24, 0x01	; 1
    28d2:	89 83       	std	Y+1, r24	; 0x01
    28d4:	22 c0       	rjmp	.+68     	; 0x291a <Gpio_PinRead+0xbe>
    28d6:	83 e3       	ldi	r24, 0x33	; 51
    28d8:	90 e0       	ldi	r25, 0x00	; 0
    28da:	fc 01       	movw	r30, r24
    28dc:	80 81       	ld	r24, Z
    28de:	88 2f       	mov	r24, r24
    28e0:	90 e0       	ldi	r25, 0x00	; 0
    28e2:	2b 81       	ldd	r18, Y+3	; 0x03
    28e4:	22 2f       	mov	r18, r18
    28e6:	30 e0       	ldi	r19, 0x00	; 0
    28e8:	02 c0       	rjmp	.+4      	; 0x28ee <Gpio_PinRead+0x92>
    28ea:	95 95       	asr	r25
    28ec:	87 95       	ror	r24
    28ee:	2a 95       	dec	r18
    28f0:	e2 f7       	brpl	.-8      	; 0x28ea <Gpio_PinRead+0x8e>
    28f2:	81 70       	andi	r24, 0x01	; 1
    28f4:	89 83       	std	Y+1, r24	; 0x01
    28f6:	11 c0       	rjmp	.+34     	; 0x291a <Gpio_PinRead+0xbe>
    28f8:	80 e3       	ldi	r24, 0x30	; 48
    28fa:	90 e0       	ldi	r25, 0x00	; 0
    28fc:	fc 01       	movw	r30, r24
    28fe:	80 81       	ld	r24, Z
    2900:	88 2f       	mov	r24, r24
    2902:	90 e0       	ldi	r25, 0x00	; 0
    2904:	2b 81       	ldd	r18, Y+3	; 0x03
    2906:	22 2f       	mov	r18, r18
    2908:	30 e0       	ldi	r19, 0x00	; 0
    290a:	02 c0       	rjmp	.+4      	; 0x2910 <Gpio_PinRead+0xb4>
    290c:	95 95       	asr	r25
    290e:	87 95       	ror	r24
    2910:	2a 95       	dec	r18
    2912:	e2 f7       	brpl	.-8      	; 0x290c <Gpio_PinRead+0xb0>
    2914:	81 70       	andi	r24, 0x01	; 1
    2916:	89 83       	std	Y+1, r24	; 0x01
    2918:	00 00       	nop
    291a:	89 81       	ldd	r24, Y+1	; 0x01
    291c:	0f 90       	pop	r0
    291e:	0f 90       	pop	r0
    2920:	0f 90       	pop	r0
    2922:	df 91       	pop	r29
    2924:	cf 91       	pop	r28
    2926:	08 95       	ret

00002928 <Gpio_LowerNibbleDirection>:
 * @param port : the port that includes the LowerNibble {MYPORTA,MYPORTB,MYPORTC,MYPORTD}
 * @param direction : The Direction of the LowerNibble >> {SET_IN , SET_OUT}
 * Return : void
 */
void Gpio_LowerNibbleDirection(uint8 port, uint8 direction)
{
    2928:	cf 93       	push	r28
    292a:	df 93       	push	r29
    292c:	00 d0       	rcall	.+0      	; 0x292e <Gpio_LowerNibbleDirection+0x6>
    292e:	cd b7       	in	r28, 0x3d	; 61
    2930:	de b7       	in	r29, 0x3e	; 62
    2932:	89 83       	std	Y+1, r24	; 0x01
    2934:	6a 83       	std	Y+2, r22	; 0x02
	switch(port)
    2936:	89 81       	ldd	r24, Y+1	; 0x01
    2938:	88 2f       	mov	r24, r24
    293a:	90 e0       	ldi	r25, 0x00	; 0
    293c:	81 30       	cpi	r24, 0x01	; 1
    293e:	91 05       	cpc	r25, r1
    2940:	61 f1       	breq	.+88     	; 0x299a <Gpio_LowerNibbleDirection+0x72>
    2942:	82 30       	cpi	r24, 0x02	; 2
    2944:	91 05       	cpc	r25, r1
    2946:	1c f4       	brge	.+6      	; 0x294e <Gpio_LowerNibbleDirection+0x26>
    2948:	89 2b       	or	r24, r25
    294a:	49 f0       	breq	.+18     	; 0x295e <Gpio_LowerNibbleDirection+0x36>
				break;
			}
		}
		break;
	}
}
    294c:	80 c0       	rjmp	.+256    	; 0x2a4e <Gpio_LowerNibbleDirection+0x126>
 * @param direction : The Direction of the LowerNibble >> {SET_IN , SET_OUT}
 * Return : void
 */
void Gpio_LowerNibbleDirection(uint8 port, uint8 direction)
{
	switch(port)
    294e:	82 30       	cpi	r24, 0x02	; 2
    2950:	91 05       	cpc	r25, r1
    2952:	09 f4       	brne	.+2      	; 0x2956 <Gpio_LowerNibbleDirection+0x2e>
    2954:	40 c0       	rjmp	.+128    	; 0x29d6 <Gpio_LowerNibbleDirection+0xae>
    2956:	03 97       	sbiw	r24, 0x03	; 3
    2958:	09 f4       	brne	.+2      	; 0x295c <Gpio_LowerNibbleDirection+0x34>
    295a:	5b c0       	rjmp	.+182    	; 0x2a12 <Gpio_LowerNibbleDirection+0xea>
				break;
			}
		}
		break;
	}
}
    295c:	78 c0       	rjmp	.+240    	; 0x2a4e <Gpio_LowerNibbleDirection+0x126>
{
	switch(port)
	{
		case MYPORTA :
		{
			switch(direction)
    295e:	8a 81       	ldd	r24, Y+2	; 0x02
    2960:	88 2f       	mov	r24, r24
    2962:	90 e0       	ldi	r25, 0x00	; 0
    2964:	00 97       	sbiw	r24, 0x00	; 0
    2966:	21 f0       	breq	.+8      	; 0x2970 <Gpio_LowerNibbleDirection+0x48>
    2968:	8f 3f       	cpi	r24, 0xFF	; 255
    296a:	91 05       	cpc	r25, r1
    296c:	59 f0       	breq	.+22     	; 0x2984 <Gpio_LowerNibbleDirection+0x5c>
				case SET_OUT :
				DDR_A |= 0x0f;
				break;
			}
		}
		break;
    296e:	6f c0       	rjmp	.+222    	; 0x2a4e <Gpio_LowerNibbleDirection+0x126>
		case MYPORTA :
		{
			switch(direction)
			{
				case SET_IN :
				DDR_A &= 0xf0;
    2970:	8a e3       	ldi	r24, 0x3A	; 58
    2972:	90 e0       	ldi	r25, 0x00	; 0
    2974:	2a e3       	ldi	r18, 0x3A	; 58
    2976:	30 e0       	ldi	r19, 0x00	; 0
    2978:	f9 01       	movw	r30, r18
    297a:	20 81       	ld	r18, Z
    297c:	20 7f       	andi	r18, 0xF0	; 240
    297e:	fc 01       	movw	r30, r24
    2980:	20 83       	st	Z, r18
				break;
    2982:	0a c0       	rjmp	.+20     	; 0x2998 <Gpio_LowerNibbleDirection+0x70>
				case SET_OUT :
				DDR_A |= 0x0f;
    2984:	8a e3       	ldi	r24, 0x3A	; 58
    2986:	90 e0       	ldi	r25, 0x00	; 0
    2988:	2a e3       	ldi	r18, 0x3A	; 58
    298a:	30 e0       	ldi	r19, 0x00	; 0
    298c:	f9 01       	movw	r30, r18
    298e:	20 81       	ld	r18, Z
    2990:	2f 60       	ori	r18, 0x0F	; 15
    2992:	fc 01       	movw	r30, r24
    2994:	20 83       	st	Z, r18
				break;
    2996:	00 00       	nop
			}
		}
		break;
    2998:	5a c0       	rjmp	.+180    	; 0x2a4e <Gpio_LowerNibbleDirection+0x126>
		case MYPORTB :
		{
			switch(direction)
    299a:	8a 81       	ldd	r24, Y+2	; 0x02
    299c:	88 2f       	mov	r24, r24
    299e:	90 e0       	ldi	r25, 0x00	; 0
    29a0:	00 97       	sbiw	r24, 0x00	; 0
    29a2:	21 f0       	breq	.+8      	; 0x29ac <Gpio_LowerNibbleDirection+0x84>
    29a4:	8f 3f       	cpi	r24, 0xFF	; 255
    29a6:	91 05       	cpc	r25, r1
    29a8:	59 f0       	breq	.+22     	; 0x29c0 <Gpio_LowerNibbleDirection+0x98>
				case SET_OUT :
				DDR_B |= 0x0f;
				break;
			}
		}
		break;
    29aa:	51 c0       	rjmp	.+162    	; 0x2a4e <Gpio_LowerNibbleDirection+0x126>
		case MYPORTB :
		{
			switch(direction)
			{
				case SET_IN :
				DDR_B &= 0xf0;
    29ac:	87 e3       	ldi	r24, 0x37	; 55
    29ae:	90 e0       	ldi	r25, 0x00	; 0
    29b0:	27 e3       	ldi	r18, 0x37	; 55
    29b2:	30 e0       	ldi	r19, 0x00	; 0
    29b4:	f9 01       	movw	r30, r18
    29b6:	20 81       	ld	r18, Z
    29b8:	20 7f       	andi	r18, 0xF0	; 240
    29ba:	fc 01       	movw	r30, r24
    29bc:	20 83       	st	Z, r18
				break;
    29be:	0a c0       	rjmp	.+20     	; 0x29d4 <Gpio_LowerNibbleDirection+0xac>
				case SET_OUT :
				DDR_B |= 0x0f;
    29c0:	87 e3       	ldi	r24, 0x37	; 55
    29c2:	90 e0       	ldi	r25, 0x00	; 0
    29c4:	27 e3       	ldi	r18, 0x37	; 55
    29c6:	30 e0       	ldi	r19, 0x00	; 0
    29c8:	f9 01       	movw	r30, r18
    29ca:	20 81       	ld	r18, Z
    29cc:	2f 60       	ori	r18, 0x0F	; 15
    29ce:	fc 01       	movw	r30, r24
    29d0:	20 83       	st	Z, r18
				break;
    29d2:	00 00       	nop
			}
		}
		break;
    29d4:	3c c0       	rjmp	.+120    	; 0x2a4e <Gpio_LowerNibbleDirection+0x126>
		case MYPORTC :
		{
			switch(direction)
    29d6:	8a 81       	ldd	r24, Y+2	; 0x02
    29d8:	88 2f       	mov	r24, r24
    29da:	90 e0       	ldi	r25, 0x00	; 0
    29dc:	00 97       	sbiw	r24, 0x00	; 0
    29de:	21 f0       	breq	.+8      	; 0x29e8 <Gpio_LowerNibbleDirection+0xc0>
    29e0:	8f 3f       	cpi	r24, 0xFF	; 255
    29e2:	91 05       	cpc	r25, r1
    29e4:	59 f0       	breq	.+22     	; 0x29fc <Gpio_LowerNibbleDirection+0xd4>
				case SET_OUT :
				DDR_C |= 0x0f;
				break;
			}
		}
		break;
    29e6:	33 c0       	rjmp	.+102    	; 0x2a4e <Gpio_LowerNibbleDirection+0x126>
		case MYPORTC :
		{
			switch(direction)
			{
				case SET_IN :
				DDR_C &= 0xf0;
    29e8:	84 e3       	ldi	r24, 0x34	; 52
    29ea:	90 e0       	ldi	r25, 0x00	; 0
    29ec:	24 e3       	ldi	r18, 0x34	; 52
    29ee:	30 e0       	ldi	r19, 0x00	; 0
    29f0:	f9 01       	movw	r30, r18
    29f2:	20 81       	ld	r18, Z
    29f4:	20 7f       	andi	r18, 0xF0	; 240
    29f6:	fc 01       	movw	r30, r24
    29f8:	20 83       	st	Z, r18
				break;
    29fa:	0a c0       	rjmp	.+20     	; 0x2a10 <Gpio_LowerNibbleDirection+0xe8>
				case SET_OUT :
				DDR_C |= 0x0f;
    29fc:	84 e3       	ldi	r24, 0x34	; 52
    29fe:	90 e0       	ldi	r25, 0x00	; 0
    2a00:	24 e3       	ldi	r18, 0x34	; 52
    2a02:	30 e0       	ldi	r19, 0x00	; 0
    2a04:	f9 01       	movw	r30, r18
    2a06:	20 81       	ld	r18, Z
    2a08:	2f 60       	ori	r18, 0x0F	; 15
    2a0a:	fc 01       	movw	r30, r24
    2a0c:	20 83       	st	Z, r18
				break;
    2a0e:	00 00       	nop
			}
		}
		break;
    2a10:	1e c0       	rjmp	.+60     	; 0x2a4e <Gpio_LowerNibbleDirection+0x126>
		case MYPORTD :
		{
			switch(direction)
    2a12:	8a 81       	ldd	r24, Y+2	; 0x02
    2a14:	88 2f       	mov	r24, r24
    2a16:	90 e0       	ldi	r25, 0x00	; 0
    2a18:	00 97       	sbiw	r24, 0x00	; 0
    2a1a:	21 f0       	breq	.+8      	; 0x2a24 <Gpio_LowerNibbleDirection+0xfc>
    2a1c:	8f 3f       	cpi	r24, 0xFF	; 255
    2a1e:	91 05       	cpc	r25, r1
    2a20:	59 f0       	breq	.+22     	; 0x2a38 <Gpio_LowerNibbleDirection+0x110>
				case SET_OUT :
				DDR_D |= 0x0f;
				break;
			}
		}
		break;
    2a22:	14 c0       	rjmp	.+40     	; 0x2a4c <Gpio_LowerNibbleDirection+0x124>
		case MYPORTD :
		{
			switch(direction)
			{
				case SET_IN :
				DDR_D &= 0xf0;
    2a24:	81 e3       	ldi	r24, 0x31	; 49
    2a26:	90 e0       	ldi	r25, 0x00	; 0
    2a28:	21 e3       	ldi	r18, 0x31	; 49
    2a2a:	30 e0       	ldi	r19, 0x00	; 0
    2a2c:	f9 01       	movw	r30, r18
    2a2e:	20 81       	ld	r18, Z
    2a30:	20 7f       	andi	r18, 0xF0	; 240
    2a32:	fc 01       	movw	r30, r24
    2a34:	20 83       	st	Z, r18
				break;
    2a36:	0a c0       	rjmp	.+20     	; 0x2a4c <Gpio_LowerNibbleDirection+0x124>
				case SET_OUT :
				DDR_D |= 0x0f;
    2a38:	81 e3       	ldi	r24, 0x31	; 49
    2a3a:	90 e0       	ldi	r25, 0x00	; 0
    2a3c:	21 e3       	ldi	r18, 0x31	; 49
    2a3e:	30 e0       	ldi	r19, 0x00	; 0
    2a40:	f9 01       	movw	r30, r18
    2a42:	20 81       	ld	r18, Z
    2a44:	2f 60       	ori	r18, 0x0F	; 15
    2a46:	fc 01       	movw	r30, r24
    2a48:	20 83       	st	Z, r18
				break;
    2a4a:	00 00       	nop
			}
		}
		break;
    2a4c:	00 00       	nop
	}
}
    2a4e:	00 00       	nop
    2a50:	0f 90       	pop	r0
    2a52:	0f 90       	pop	r0
    2a54:	df 91       	pop	r29
    2a56:	cf 91       	pop	r28
    2a58:	08 95       	ret

00002a5a <Gpio_LowerNibbleWrite>:
 * @param port : the port that includes the LowerNibble {MYPORTA,MYPORTB,MYPORTC,MYPORTD}
 * @param value : The value of the LowerNibble
 * Return : void
 */
void Gpio_LowerNibbleWrite(uint8 port, uint8 value)
{
    2a5a:	cf 93       	push	r28
    2a5c:	df 93       	push	r29
    2a5e:	00 d0       	rcall	.+0      	; 0x2a60 <Gpio_LowerNibbleWrite+0x6>
    2a60:	cd b7       	in	r28, 0x3d	; 61
    2a62:	de b7       	in	r29, 0x3e	; 62
    2a64:	89 83       	std	Y+1, r24	; 0x01
    2a66:	6a 83       	std	Y+2, r22	; 0x02
	switch(port)
    2a68:	89 81       	ldd	r24, Y+1	; 0x01
    2a6a:	88 2f       	mov	r24, r24
    2a6c:	90 e0       	ldi	r25, 0x00	; 0
    2a6e:	81 30       	cpi	r24, 0x01	; 1
    2a70:	91 05       	cpc	r25, r1
    2a72:	d1 f0       	breq	.+52     	; 0x2aa8 <Gpio_LowerNibbleWrite+0x4e>
    2a74:	82 30       	cpi	r24, 0x02	; 2
    2a76:	91 05       	cpc	r25, r1
    2a78:	1c f4       	brge	.+6      	; 0x2a80 <Gpio_LowerNibbleWrite+0x26>
    2a7a:	89 2b       	or	r24, r25
    2a7c:	39 f0       	breq	.+14     	; 0x2a8c <Gpio_LowerNibbleWrite+0x32>
		break;
		case MYPORTD :
		PORT_D = (PORT_D & 0xf0) | (value & 0x0f);
		break;
	}
}
    2a7e:	3e c0       	rjmp	.+124    	; 0x2afc <Gpio_LowerNibbleWrite+0xa2>
 * @param value : The value of the LowerNibble
 * Return : void
 */
void Gpio_LowerNibbleWrite(uint8 port, uint8 value)
{
	switch(port)
    2a80:	82 30       	cpi	r24, 0x02	; 2
    2a82:	91 05       	cpc	r25, r1
    2a84:	f9 f0       	breq	.+62     	; 0x2ac4 <Gpio_LowerNibbleWrite+0x6a>
    2a86:	03 97       	sbiw	r24, 0x03	; 3
    2a88:	59 f1       	breq	.+86     	; 0x2ae0 <Gpio_LowerNibbleWrite+0x86>
		break;
		case MYPORTD :
		PORT_D = (PORT_D & 0xf0) | (value & 0x0f);
		break;
	}
}
    2a8a:	38 c0       	rjmp	.+112    	; 0x2afc <Gpio_LowerNibbleWrite+0xa2>
void Gpio_LowerNibbleWrite(uint8 port, uint8 value)
{
	switch(port)
	{
		case MYPORTA :
		PORT_A = (PORT_A & 0xf0) | (value & 0x0f);
    2a8c:	8b e3       	ldi	r24, 0x3B	; 59
    2a8e:	90 e0       	ldi	r25, 0x00	; 0
    2a90:	2b e3       	ldi	r18, 0x3B	; 59
    2a92:	30 e0       	ldi	r19, 0x00	; 0
    2a94:	f9 01       	movw	r30, r18
    2a96:	20 81       	ld	r18, Z
    2a98:	32 2f       	mov	r19, r18
    2a9a:	30 7f       	andi	r19, 0xF0	; 240
    2a9c:	2a 81       	ldd	r18, Y+2	; 0x02
    2a9e:	2f 70       	andi	r18, 0x0F	; 15
    2aa0:	23 2b       	or	r18, r19
    2aa2:	fc 01       	movw	r30, r24
    2aa4:	20 83       	st	Z, r18
		break;
    2aa6:	2a c0       	rjmp	.+84     	; 0x2afc <Gpio_LowerNibbleWrite+0xa2>
		case MYPORTB :
		PORT_B = (PORT_B & 0xf0) | (value & 0x0f);
    2aa8:	88 e3       	ldi	r24, 0x38	; 56
    2aaa:	90 e0       	ldi	r25, 0x00	; 0
    2aac:	28 e3       	ldi	r18, 0x38	; 56
    2aae:	30 e0       	ldi	r19, 0x00	; 0
    2ab0:	f9 01       	movw	r30, r18
    2ab2:	20 81       	ld	r18, Z
    2ab4:	32 2f       	mov	r19, r18
    2ab6:	30 7f       	andi	r19, 0xF0	; 240
    2ab8:	2a 81       	ldd	r18, Y+2	; 0x02
    2aba:	2f 70       	andi	r18, 0x0F	; 15
    2abc:	23 2b       	or	r18, r19
    2abe:	fc 01       	movw	r30, r24
    2ac0:	20 83       	st	Z, r18
		break;
    2ac2:	1c c0       	rjmp	.+56     	; 0x2afc <Gpio_LowerNibbleWrite+0xa2>
		case MYPORTC :
		PORT_C = (PORT_C & 0xf0) | (value & 0x0f);
    2ac4:	85 e3       	ldi	r24, 0x35	; 53
    2ac6:	90 e0       	ldi	r25, 0x00	; 0
    2ac8:	25 e3       	ldi	r18, 0x35	; 53
    2aca:	30 e0       	ldi	r19, 0x00	; 0
    2acc:	f9 01       	movw	r30, r18
    2ace:	20 81       	ld	r18, Z
    2ad0:	32 2f       	mov	r19, r18
    2ad2:	30 7f       	andi	r19, 0xF0	; 240
    2ad4:	2a 81       	ldd	r18, Y+2	; 0x02
    2ad6:	2f 70       	andi	r18, 0x0F	; 15
    2ad8:	23 2b       	or	r18, r19
    2ada:	fc 01       	movw	r30, r24
    2adc:	20 83       	st	Z, r18
		break;
    2ade:	0e c0       	rjmp	.+28     	; 0x2afc <Gpio_LowerNibbleWrite+0xa2>
		case MYPORTD :
		PORT_D = (PORT_D & 0xf0) | (value & 0x0f);
    2ae0:	82 e3       	ldi	r24, 0x32	; 50
    2ae2:	90 e0       	ldi	r25, 0x00	; 0
    2ae4:	22 e3       	ldi	r18, 0x32	; 50
    2ae6:	30 e0       	ldi	r19, 0x00	; 0
    2ae8:	f9 01       	movw	r30, r18
    2aea:	20 81       	ld	r18, Z
    2aec:	32 2f       	mov	r19, r18
    2aee:	30 7f       	andi	r19, 0xF0	; 240
    2af0:	2a 81       	ldd	r18, Y+2	; 0x02
    2af2:	2f 70       	andi	r18, 0x0F	; 15
    2af4:	23 2b       	or	r18, r19
    2af6:	fc 01       	movw	r30, r24
    2af8:	20 83       	st	Z, r18
		break;
    2afa:	00 00       	nop
	}
}
    2afc:	00 00       	nop
    2afe:	0f 90       	pop	r0
    2b00:	0f 90       	pop	r0
    2b02:	df 91       	pop	r29
    2b04:	cf 91       	pop	r28
    2b06:	08 95       	ret

00002b08 <_exit>:
    2b08:	f8 94       	cli

00002b0a <__stop_program>:
    2b0a:	ff cf       	rjmp	.-2      	; 0x2b0a <__stop_program>
