
Sprint1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003154  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e6  00800060  00003154  000031e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000661  00800146  00800146  000032ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000032ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003300  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000498  00000000  00000000  0000333c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000366c  00000000  00000000  000037d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f57  00000000  00000000  00006e40  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000037ac  00000000  00000000  00007d97  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001008  00000000  00000000  0000b544  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001816  00000000  00000000  0000c54c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002171  00000000  00000000  0000dd62  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003f8  00000000  00000000  0000fed3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 0f 09 	jmp	0x121e	; 0x121e <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e5       	ldi	r30, 0x54	; 84
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 34       	cpi	r26, 0x46	; 70
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	27 e0       	ldi	r18, 0x07	; 7
      78:	a6 e4       	ldi	r26, 0x46	; 70
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 3a       	cpi	r26, 0xA7	; 167
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <main>
      8a:	0c 94 a8 18 	jmp	0x3150	; 0x3150 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Init_Task>:
 * Description: This Task is used to Init the System
 * @param port : input parameter to the Task
 * Return : void
 */
void Init_Task(void* pvParameters)
{
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	00 d0       	rcall	.+0      	; 0x98 <Init_Task+0x6>
      98:	cd b7       	in	r28, 0x3d	; 61
      9a:	de b7       	in	r29, 0x3e	; 62
      9c:	9a 83       	std	Y+2, r25	; 0x02
      9e:	89 83       	std	Y+1, r24	; 0x01
	vTaskSuspend(TaskA_Handle);
      a0:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <TaskA_Handle>
      a4:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <TaskA_Handle+0x1>
      a8:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <vTaskSuspend>
	vTaskSuspend(TaskB_Handle);
      ac:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <TaskB_Handle>
      b0:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <TaskB_Handle+0x1>
      b4:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <vTaskSuspend>
	/* Create a mutex type semaphore. */
   Semaphore_Handler = xSemaphoreCreateMutex();
      b8:	81 e0       	ldi	r24, 0x01	; 1
      ba:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <xQueueCreateMutex>
      be:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <Semaphore_Handler+0x1>
      c2:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <Semaphore_Handler>
       /* The semaphore wasn't created successfully Error handling should by executed. */
   }
   
	while(TRUE)
	{
	Led_Init(LED0);
      c6:	80 e1       	ldi	r24, 0x10	; 16
      c8:	0e 94 99 03 	call	0x732	; 0x732 <Led_Init>
	Led_Init(LED1);
      cc:	80 e2       	ldi	r24, 0x20	; 32
      ce:	0e 94 99 03 	call	0x732	; 0x732 <Led_Init>
	LCD_Init();
      d2:	0e 94 ad 02 	call	0x55a	; 0x55a <LCD_Init>
	vTaskResume(TaskA_Handle);
      d6:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <TaskA_Handle>
      da:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <TaskA_Handle+0x1>
      de:	0e 94 30 10 	call	0x2060	; 0x2060 <vTaskResume>
	vTaskResume(TaskB_Handle);
      e2:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <TaskB_Handle>
      e6:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <TaskB_Handle+0x1>
      ea:	0e 94 30 10 	call	0x2060	; 0x2060 <vTaskResume>
	vTaskSuspend(Init_Task_Handle);
      ee:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <__data_end>
      f2:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <__data_end+0x1>
      f6:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <vTaskSuspend>
	}
      fa:	e5 cf       	rjmp	.-54     	; 0xc6 <Init_Task+0x34>

000000fc <TaskA>:
 * Description: This Task is used to Display String of Characters on the LCD
 * @param port : input parameter to the Task
 * Return : void
 */
void TaskA(void* pvParameters)
{	
      fc:	cf 93       	push	r28
      fe:	df 93       	push	r29
     100:	cd b7       	in	r28, 0x3d	; 61
     102:	de b7       	in	r29, 0x3e	; 62
     104:	c8 56       	subi	r28, 0x68	; 104
     106:	d1 09       	sbc	r29, r1
     108:	0f b6       	in	r0, 0x3f	; 63
     10a:	f8 94       	cli
     10c:	de bf       	out	0x3e, r29	; 62
     10e:	0f be       	out	0x3f, r0	; 63
     110:	cd bf       	out	0x3d, r28	; 61
     112:	9e 01       	movw	r18, r28
     114:	29 59       	subi	r18, 0x99	; 153
     116:	3f 4f       	sbci	r19, 0xFF	; 255
     118:	f9 01       	movw	r30, r18
     11a:	91 83       	std	Z+1, r25	; 0x01
     11c:	80 83       	st	Z, r24
	uint8 RandomStringindex = INITIAL_ZERO,SemFlag = FALSE;
     11e:	19 82       	std	Y+1, r1	; 0x01
     120:	1a 82       	std	Y+2, r1	; 0x02
	char arrRandomStrings[MAX_RandomStringindex_VALUE][MAX_RandomStringindex_VALUE] = {
     122:	84 e6       	ldi	r24, 0x64	; 100
     124:	e0 e6       	ldi	r30, 0x60	; 96
     126:	f0 e0       	ldi	r31, 0x00	; 0
     128:	de 01       	movw	r26, r28
     12a:	13 96       	adiw	r26, 0x03	; 3
     12c:	01 90       	ld	r0, Z+
     12e:	0d 92       	st	X+, r0
     130:	8a 95       	dec	r24
     132:	e1 f7       	brne	.-8      	; 0x12c <TaskA+0x30>
		"Mostafa",
		"Diana  ",
	};
	while(TRUE)
	{	
		if( Semaphore_Handler != NULL )
     134:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <Semaphore_Handler>
     138:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <Semaphore_Handler+0x1>
     13c:	89 2b       	or	r24, r25
     13e:	d1 f3       	breq	.-12     	; 0x134 <TaskA+0x38>
		{
			/* See if we can obtain the semaphore.  If the semaphore is not
			available wait 10 ticks to see if it becomes free. */
			if( SemFlag || (xSemaphoreTake( Semaphore_Handler, TIME_OUT ) == pdTRUE) )
     140:	8a 81       	ldd	r24, Y+2	; 0x02
     142:	88 23       	and	r24, r24
     144:	51 f4       	brne	.+20     	; 0x15a <TaskA+0x5e>
     146:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <Semaphore_Handler>
     14a:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <Semaphore_Handler+0x1>
     14e:	60 e0       	ldi	r22, 0x00	; 0
     150:	70 e0       	ldi	r23, 0x00	; 0
     152:	0e 94 2f 0b 	call	0x165e	; 0x165e <xQueueSemaphoreTake>
     156:	81 30       	cpi	r24, 0x01	; 1
     158:	c1 f5       	brne	.+112    	; 0x1ca <TaskA+0xce>
			{
				Led_On(LED0);
     15a:	80 e1       	ldi	r24, 0x10	; 16
     15c:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <Led_On>
				/* We were able to obtain the semaphore and can now access the
				shared resource. */
				SemFlag = pdTRUE;
     160:	81 e0       	ldi	r24, 0x01	; 1
     162:	8a 83       	std	Y+2, r24	; 0x02
				LCD_GotoRowColumn(FIRST_ROW,FIRST_COLUMN);
     164:	60 e0       	ldi	r22, 0x00	; 0
     166:	80 e0       	ldi	r24, 0x00	; 0
     168:	0e 94 82 03 	call	0x704	; 0x704 <LCD_GotoRowColumn>
				LCD_DisplayString(arrRandomStrings[RandomStringindex]);
     16c:	89 81       	ldd	r24, Y+1	; 0x01
     16e:	88 2f       	mov	r24, r24
     170:	90 e0       	ldi	r25, 0x00	; 0
     172:	9e 01       	movw	r18, r28
     174:	2d 5f       	subi	r18, 0xFD	; 253
     176:	3f 4f       	sbci	r19, 0xFF	; 255
     178:	88 0f       	add	r24, r24
     17a:	99 1f       	adc	r25, r25
     17c:	ac 01       	movw	r20, r24
     17e:	44 0f       	add	r20, r20
     180:	55 1f       	adc	r21, r21
     182:	44 0f       	add	r20, r20
     184:	55 1f       	adc	r21, r21
     186:	84 0f       	add	r24, r20
     188:	95 1f       	adc	r25, r21
     18a:	82 0f       	add	r24, r18
     18c:	93 1f       	adc	r25, r19
     18e:	0e 94 49 03 	call	0x692	; 0x692 <LCD_DisplayString>
				RandomStringindex++;
     192:	89 81       	ldd	r24, Y+1	; 0x01
     194:	8f 5f       	subi	r24, 0xFF	; 255
     196:	89 83       	std	Y+1, r24	; 0x01
	
				if (RandomStringindex > MAX_RandomStringindex_VALUE)
     198:	89 81       	ldd	r24, Y+1	; 0x01
     19a:	8b 30       	cpi	r24, 0x0B	; 11
     19c:	b0 f0       	brcs	.+44     	; 0x1ca <TaskA+0xce>
				{
					RandomStringindex = FALSE;
     19e:	19 82       	std	Y+1, r1	; 0x01
					SemFlag = pdFALSE;
     1a0:	1a 82       	std	Y+2, r1	; 0x02
					LCD_Clear();
     1a2:	0e 94 77 03 	call	0x6ee	; 0x6ee <LCD_Clear>
					Led_Off(LED0);
     1a6:	80 e1       	ldi	r24, 0x10	; 16
     1a8:	0e 94 19 04 	call	0x832	; 0x832 <Led_Off>
					/* We have finished accessing the shared resource.  Release the
					semaphore. */
					xSemaphoreGive( Semaphore_Handler );
     1ac:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <Semaphore_Handler>
     1b0:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <Semaphore_Handler+0x1>
     1b4:	20 e0       	ldi	r18, 0x00	; 0
     1b6:	40 e0       	ldi	r20, 0x00	; 0
     1b8:	50 e0       	ldi	r21, 0x00	; 0
     1ba:	60 e0       	ldi	r22, 0x00	; 0
     1bc:	70 e0       	ldi	r23, 0x00	; 0
     1be:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <xQueueGenericSend>
					vTaskDelay(TASK_DELAY_TASKA_VALUE);
     1c2:	84 ef       	ldi	r24, 0xF4	; 244
     1c4:	91 e0       	ldi	r25, 0x01	; 1
     1c6:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <vTaskDelay>
				else
				{
					// Do Nothing
				}
			}
			vTaskDelay(TASK_DELAY_TASKA_VALUE);
     1ca:	84 ef       	ldi	r24, 0xF4	; 244
     1cc:	91 e0       	ldi	r25, 0x01	; 1
     1ce:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <vTaskDelay>
		}
	}
     1d2:	b0 cf       	rjmp	.-160    	; 0x134 <TaskA+0x38>

000001d4 <TaskB>:
 * Description: This Task is used to Display String of numbers on the LCD
 * @param port : input parameter to the Task
 * Return : void
 */
void TaskB(void* pvParameters)
{	
     1d4:	cf 93       	push	r28
     1d6:	df 93       	push	r29
     1d8:	cd b7       	in	r28, 0x3d	; 61
     1da:	de b7       	in	r29, 0x3e	; 62
     1dc:	c8 56       	subi	r28, 0x68	; 104
     1de:	d1 09       	sbc	r29, r1
     1e0:	0f b6       	in	r0, 0x3f	; 63
     1e2:	f8 94       	cli
     1e4:	de bf       	out	0x3e, r29	; 62
     1e6:	0f be       	out	0x3f, r0	; 63
     1e8:	cd bf       	out	0x3d, r28	; 61
     1ea:	9e 01       	movw	r18, r28
     1ec:	29 59       	subi	r18, 0x99	; 153
     1ee:	3f 4f       	sbci	r19, 0xFF	; 255
     1f0:	f9 01       	movw	r30, r18
     1f2:	91 83       	std	Z+1, r25	; 0x01
     1f4:	80 83       	st	Z, r24
	uint8 RandomStringindex = INITIAL_ZERO,SemFlag = FALSE;
     1f6:	19 82       	std	Y+1, r1	; 0x01
     1f8:	1a 82       	std	Y+2, r1	; 0x02
	char arrRandomStrings[MAX_RandomStringindex_VALUE][MAX_RandomStringindex_VALUE] = {
     1fa:	24 e6       	ldi	r18, 0x64	; 100
     1fc:	ce 01       	movw	r24, r28
     1fe:	03 96       	adiw	r24, 0x03	; 3
     200:	fc 01       	movw	r30, r24
     202:	32 2f       	mov	r19, r18
     204:	11 92       	st	Z+, r1
     206:	3a 95       	dec	r19
     208:	e9 f7       	brne	.-6      	; 0x204 <TaskB+0x30>
     20a:	86 e0       	ldi	r24, 0x06	; 6
     20c:	e4 ec       	ldi	r30, 0xC4	; 196
     20e:	f0 e0       	ldi	r31, 0x00	; 0
     210:	de 01       	movw	r26, r28
     212:	13 96       	adiw	r26, 0x03	; 3
     214:	01 90       	ld	r0, Z+
     216:	0d 92       	st	X+, r0
     218:	8a 95       	dec	r24
     21a:	e1 f7       	brne	.-8      	; 0x214 <TaskB+0x40>
     21c:	24 e0       	ldi	r18, 0x04	; 4
     21e:	ce 01       	movw	r24, r28
     220:	09 96       	adiw	r24, 0x09	; 9
     222:	fc 01       	movw	r30, r24
     224:	32 2f       	mov	r19, r18
     226:	11 92       	st	Z+, r1
     228:	3a 95       	dec	r19
     22a:	e9 f7       	brne	.-6      	; 0x226 <TaskB+0x52>
     22c:	86 e0       	ldi	r24, 0x06	; 6
     22e:	ee ec       	ldi	r30, 0xCE	; 206
     230:	f0 e0       	ldi	r31, 0x00	; 0
     232:	de 01       	movw	r26, r28
     234:	1d 96       	adiw	r26, 0x0d	; 13
     236:	01 90       	ld	r0, Z+
     238:	0d 92       	st	X+, r0
     23a:	8a 95       	dec	r24
     23c:	e1 f7       	brne	.-8      	; 0x236 <TaskB+0x62>
     23e:	24 e0       	ldi	r18, 0x04	; 4
     240:	ce 01       	movw	r24, r28
     242:	43 96       	adiw	r24, 0x13	; 19
     244:	fc 01       	movw	r30, r24
     246:	32 2f       	mov	r19, r18
     248:	11 92       	st	Z+, r1
     24a:	3a 95       	dec	r19
     24c:	e9 f7       	brne	.-6      	; 0x248 <TaskB+0x74>
     24e:	86 e0       	ldi	r24, 0x06	; 6
     250:	e8 ed       	ldi	r30, 0xD8	; 216
     252:	f0 e0       	ldi	r31, 0x00	; 0
     254:	de 01       	movw	r26, r28
     256:	57 96       	adiw	r26, 0x17	; 23
     258:	01 90       	ld	r0, Z+
     25a:	0d 92       	st	X+, r0
     25c:	8a 95       	dec	r24
     25e:	e1 f7       	brne	.-8      	; 0x258 <TaskB+0x84>
     260:	24 e0       	ldi	r18, 0x04	; 4
     262:	ce 01       	movw	r24, r28
     264:	4d 96       	adiw	r24, 0x1d	; 29
     266:	fc 01       	movw	r30, r24
     268:	32 2f       	mov	r19, r18
     26a:	11 92       	st	Z+, r1
     26c:	3a 95       	dec	r19
     26e:	e9 f7       	brne	.-6      	; 0x26a <TaskB+0x96>
     270:	86 e0       	ldi	r24, 0x06	; 6
     272:	e2 ee       	ldi	r30, 0xE2	; 226
     274:	f0 e0       	ldi	r31, 0x00	; 0
     276:	de 01       	movw	r26, r28
     278:	91 96       	adiw	r26, 0x21	; 33
     27a:	01 90       	ld	r0, Z+
     27c:	0d 92       	st	X+, r0
     27e:	8a 95       	dec	r24
     280:	e1 f7       	brne	.-8      	; 0x27a <TaskB+0xa6>
     282:	24 e0       	ldi	r18, 0x04	; 4
     284:	ce 01       	movw	r24, r28
     286:	87 96       	adiw	r24, 0x27	; 39
     288:	fc 01       	movw	r30, r24
     28a:	32 2f       	mov	r19, r18
     28c:	11 92       	st	Z+, r1
     28e:	3a 95       	dec	r19
     290:	e9 f7       	brne	.-6      	; 0x28c <TaskB+0xb8>
     292:	86 e0       	ldi	r24, 0x06	; 6
     294:	ec ee       	ldi	r30, 0xEC	; 236
     296:	f0 e0       	ldi	r31, 0x00	; 0
     298:	de 01       	movw	r26, r28
     29a:	9b 96       	adiw	r26, 0x2b	; 43
     29c:	01 90       	ld	r0, Z+
     29e:	0d 92       	st	X+, r0
     2a0:	8a 95       	dec	r24
     2a2:	e1 f7       	brne	.-8      	; 0x29c <TaskB+0xc8>
     2a4:	24 e0       	ldi	r18, 0x04	; 4
     2a6:	ce 01       	movw	r24, r28
     2a8:	c1 96       	adiw	r24, 0x31	; 49
     2aa:	fc 01       	movw	r30, r24
     2ac:	32 2f       	mov	r19, r18
     2ae:	11 92       	st	Z+, r1
     2b0:	3a 95       	dec	r19
     2b2:	e9 f7       	brne	.-6      	; 0x2ae <TaskB+0xda>
     2b4:	86 e0       	ldi	r24, 0x06	; 6
     2b6:	e6 ef       	ldi	r30, 0xF6	; 246
     2b8:	f0 e0       	ldi	r31, 0x00	; 0
     2ba:	de 01       	movw	r26, r28
     2bc:	d5 96       	adiw	r26, 0x35	; 53
     2be:	01 90       	ld	r0, Z+
     2c0:	0d 92       	st	X+, r0
     2c2:	8a 95       	dec	r24
     2c4:	e1 f7       	brne	.-8      	; 0x2be <TaskB+0xea>
     2c6:	24 e0       	ldi	r18, 0x04	; 4
     2c8:	ce 01       	movw	r24, r28
     2ca:	cb 96       	adiw	r24, 0x3b	; 59
     2cc:	fc 01       	movw	r30, r24
     2ce:	32 2f       	mov	r19, r18
     2d0:	11 92       	st	Z+, r1
     2d2:	3a 95       	dec	r19
     2d4:	e9 f7       	brne	.-6      	; 0x2d0 <TaskB+0xfc>
     2d6:	86 e0       	ldi	r24, 0x06	; 6
     2d8:	e0 e0       	ldi	r30, 0x00	; 0
     2da:	f1 e0       	ldi	r31, 0x01	; 1
     2dc:	de 01       	movw	r26, r28
     2de:	df 96       	adiw	r26, 0x3f	; 63
     2e0:	01 90       	ld	r0, Z+
     2e2:	0d 92       	st	X+, r0
     2e4:	8a 95       	dec	r24
     2e6:	e1 f7       	brne	.-8      	; 0x2e0 <TaskB+0x10c>
     2e8:	ce 01       	movw	r24, r28
     2ea:	8b 5b       	subi	r24, 0xBB	; 187
     2ec:	9f 4f       	sbci	r25, 0xFF	; 255
     2ee:	24 e0       	ldi	r18, 0x04	; 4
     2f0:	fc 01       	movw	r30, r24
     2f2:	32 2f       	mov	r19, r18
     2f4:	11 92       	st	Z+, r1
     2f6:	3a 95       	dec	r19
     2f8:	e9 f7       	brne	.-6      	; 0x2f4 <TaskB+0x120>
     2fa:	ce 01       	movw	r24, r28
     2fc:	87 5b       	subi	r24, 0xB7	; 183
     2fe:	9f 4f       	sbci	r25, 0xFF	; 255
     300:	26 e0       	ldi	r18, 0x06	; 6
     302:	ea e0       	ldi	r30, 0x0A	; 10
     304:	f1 e0       	ldi	r31, 0x01	; 1
     306:	dc 01       	movw	r26, r24
     308:	01 90       	ld	r0, Z+
     30a:	0d 92       	st	X+, r0
     30c:	2a 95       	dec	r18
     30e:	e1 f7       	brne	.-8      	; 0x308 <TaskB+0x134>
     310:	24 e0       	ldi	r18, 0x04	; 4
     312:	06 96       	adiw	r24, 0x06	; 6
     314:	fc 01       	movw	r30, r24
     316:	32 2f       	mov	r19, r18
     318:	11 92       	st	Z+, r1
     31a:	3a 95       	dec	r19
     31c:	e9 f7       	brne	.-6      	; 0x318 <TaskB+0x144>
     31e:	ce 01       	movw	r24, r28
     320:	8d 5a       	subi	r24, 0xAD	; 173
     322:	9f 4f       	sbci	r25, 0xFF	; 255
     324:	26 e0       	ldi	r18, 0x06	; 6
     326:	e4 e1       	ldi	r30, 0x14	; 20
     328:	f1 e0       	ldi	r31, 0x01	; 1
     32a:	dc 01       	movw	r26, r24
     32c:	01 90       	ld	r0, Z+
     32e:	0d 92       	st	X+, r0
     330:	2a 95       	dec	r18
     332:	e1 f7       	brne	.-8      	; 0x32c <TaskB+0x158>
     334:	24 e0       	ldi	r18, 0x04	; 4
     336:	06 96       	adiw	r24, 0x06	; 6
     338:	fc 01       	movw	r30, r24
     33a:	32 2f       	mov	r19, r18
     33c:	11 92       	st	Z+, r1
     33e:	3a 95       	dec	r19
     340:	e9 f7       	brne	.-6      	; 0x33c <TaskB+0x168>
		"TEN  ",
	};
	
	while(TRUE)
	{	
		if( Semaphore_Handler != NULL )
     342:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <Semaphore_Handler>
     346:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <Semaphore_Handler+0x1>
     34a:	89 2b       	or	r24, r25
     34c:	d1 f3       	breq	.-12     	; 0x342 <TaskB+0x16e>
		{
			/* See if we can obtain the semaphore.  If the semaphore is not
			available wait 10 ticks to see if it becomes free. */
			if( SemFlag || (xSemaphoreTake( Semaphore_Handler, TIME_OUT ) == pdTRUE) )
     34e:	8a 81       	ldd	r24, Y+2	; 0x02
     350:	88 23       	and	r24, r24
     352:	51 f4       	brne	.+20     	; 0x368 <TaskB+0x194>
     354:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <Semaphore_Handler>
     358:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <Semaphore_Handler+0x1>
     35c:	60 e0       	ldi	r22, 0x00	; 0
     35e:	70 e0       	ldi	r23, 0x00	; 0
     360:	0e 94 2f 0b 	call	0x165e	; 0x165e <xQueueSemaphoreTake>
     364:	81 30       	cpi	r24, 0x01	; 1
     366:	c1 f5       	brne	.+112    	; 0x3d8 <TaskB+0x204>
			{
				Led_On(LED1);
     368:	80 e2       	ldi	r24, 0x20	; 32
     36a:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <Led_On>
				/* We were able to obtain the semaphore and can now access the
				shared resource. */
				SemFlag = pdTRUE;
     36e:	81 e0       	ldi	r24, 0x01	; 1
     370:	8a 83       	std	Y+2, r24	; 0x02
				LCD_GotoRowColumn(FIRST_ROW,FIRST_COLUMN);
     372:	60 e0       	ldi	r22, 0x00	; 0
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	0e 94 82 03 	call	0x704	; 0x704 <LCD_GotoRowColumn>
				LCD_DisplayString(arrRandomStrings[RandomStringindex]);
     37a:	89 81       	ldd	r24, Y+1	; 0x01
     37c:	88 2f       	mov	r24, r24
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	9e 01       	movw	r18, r28
     382:	2d 5f       	subi	r18, 0xFD	; 253
     384:	3f 4f       	sbci	r19, 0xFF	; 255
     386:	88 0f       	add	r24, r24
     388:	99 1f       	adc	r25, r25
     38a:	ac 01       	movw	r20, r24
     38c:	44 0f       	add	r20, r20
     38e:	55 1f       	adc	r21, r21
     390:	44 0f       	add	r20, r20
     392:	55 1f       	adc	r21, r21
     394:	84 0f       	add	r24, r20
     396:	95 1f       	adc	r25, r21
     398:	82 0f       	add	r24, r18
     39a:	93 1f       	adc	r25, r19
     39c:	0e 94 49 03 	call	0x692	; 0x692 <LCD_DisplayString>
				RandomStringindex++;
     3a0:	89 81       	ldd	r24, Y+1	; 0x01
     3a2:	8f 5f       	subi	r24, 0xFF	; 255
     3a4:	89 83       	std	Y+1, r24	; 0x01
	
				if (RandomStringindex > MAX_RandomStringindex_VALUE)
     3a6:	89 81       	ldd	r24, Y+1	; 0x01
     3a8:	8b 30       	cpi	r24, 0x0B	; 11
     3aa:	b0 f0       	brcs	.+44     	; 0x3d8 <TaskB+0x204>
				{
					RandomStringindex = FALSE;
     3ac:	19 82       	std	Y+1, r1	; 0x01
					SemFlag = pdFALSE;
     3ae:	1a 82       	std	Y+2, r1	; 0x02
					LCD_Clear();
     3b0:	0e 94 77 03 	call	0x6ee	; 0x6ee <LCD_Clear>
					Led_Off(LED1);
     3b4:	80 e2       	ldi	r24, 0x20	; 32
     3b6:	0e 94 19 04 	call	0x832	; 0x832 <Led_Off>
					/* We have finished accessing the shared resource.  Release the
					semaphore. */
					xSemaphoreGive( Semaphore_Handler );
     3ba:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <Semaphore_Handler>
     3be:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <Semaphore_Handler+0x1>
     3c2:	20 e0       	ldi	r18, 0x00	; 0
     3c4:	40 e0       	ldi	r20, 0x00	; 0
     3c6:	50 e0       	ldi	r21, 0x00	; 0
     3c8:	60 e0       	ldi	r22, 0x00	; 0
     3ca:	70 e0       	ldi	r23, 0x00	; 0
     3cc:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <xQueueGenericSend>
					vTaskDelay(TASK_DELAY_TASKB_VALUE);
     3d0:	88 ee       	ldi	r24, 0xE8	; 232
     3d2:	93 e0       	ldi	r25, 0x03	; 3
     3d4:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <vTaskDelay>
			}
			else
			{
				// Do Nothing
			}
			vTaskDelay(TASK_DELAY_TASKB_VALUE);
     3d8:	88 ee       	ldi	r24, 0xE8	; 232
     3da:	93 e0       	ldi	r25, 0x03	; 3
     3dc:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <vTaskDelay>
		}
	}
     3e0:	b0 cf       	rjmp	.-160    	; 0x342 <TaskB+0x16e>

000003e2 <main>:

/************************************************************************/
/*				      Main Function Implementation			            */
/************************************************************************/
int main(void)
{
     3e2:	ef 92       	push	r14
     3e4:	ff 92       	push	r15
     3e6:	0f 93       	push	r16
     3e8:	cf 93       	push	r28
     3ea:	df 93       	push	r29
     3ec:	1f 92       	push	r1
     3ee:	cd b7       	in	r28, 0x3d	; 61
     3f0:	de b7       	in	r29, 0x3e	; 62
	BaseType_t xReturned = FALSE;
     3f2:	19 82       	std	Y+1, r1	; 0x01

/******** Init Task ******************/
	xReturned = xTaskCreate(Init_Task, 
     3f4:	0f 2e       	mov	r0, r31
     3f6:	f6 e4       	ldi	r31, 0x46	; 70
     3f8:	ef 2e       	mov	r14, r31
     3fa:	f1 e0       	ldi	r31, 0x01	; 1
     3fc:	ff 2e       	mov	r15, r31
     3fe:	f0 2d       	mov	r31, r0
     400:	04 e0       	ldi	r16, 0x04	; 4
     402:	20 e0       	ldi	r18, 0x00	; 0
     404:	30 e0       	ldi	r19, 0x00	; 0
     406:	44 e6       	ldi	r20, 0x64	; 100
     408:	50 e0       	ldi	r21, 0x00	; 0
     40a:	6e e1       	ldi	r22, 0x1E	; 30
     40c:	71 e0       	ldi	r23, 0x01	; 1
     40e:	89 e4       	ldi	r24, 0x49	; 73
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <xTaskCreate>
     416:	89 83       	std	Y+1, r24	; 0x01
	{
		 // Error Handling Code
	}

/******** TaskA ******************/
	xReturned = xTaskCreate(TaskA,
     418:	0f 2e       	mov	r0, r31
     41a:	f8 e4       	ldi	r31, 0x48	; 72
     41c:	ef 2e       	mov	r14, r31
     41e:	f1 e0       	ldi	r31, 0x01	; 1
     420:	ff 2e       	mov	r15, r31
     422:	f0 2d       	mov	r31, r0
     424:	02 e0       	ldi	r16, 0x02	; 2
     426:	20 e0       	ldi	r18, 0x00	; 0
     428:	30 e0       	ldi	r19, 0x00	; 0
     42a:	40 e9       	ldi	r20, 0x90	; 144
     42c:	51 e0       	ldi	r21, 0x01	; 1
     42e:	62 e3       	ldi	r22, 0x32	; 50
     430:	71 e0       	ldi	r23, 0x01	; 1
     432:	8e e7       	ldi	r24, 0x7E	; 126
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <xTaskCreate>
     43a:	89 83       	std	Y+1, r24	; 0x01
	{
		// Error Handling Code
	}
	
/******** TaskB ******************/
	xReturned = xTaskCreate(TaskB,
     43c:	0f 2e       	mov	r0, r31
     43e:	fa e4       	ldi	r31, 0x4A	; 74
     440:	ef 2e       	mov	r14, r31
     442:	f1 e0       	ldi	r31, 0x01	; 1
     444:	ff 2e       	mov	r15, r31
     446:	f0 2d       	mov	r31, r0
     448:	01 e0       	ldi	r16, 0x01	; 1
     44a:	20 e0       	ldi	r18, 0x00	; 0
     44c:	30 e0       	ldi	r19, 0x00	; 0
     44e:	40 e9       	ldi	r20, 0x90	; 144
     450:	51 e0       	ldi	r21, 0x01	; 1
     452:	69 e3       	ldi	r22, 0x39	; 57
     454:	71 e0       	ldi	r23, 0x01	; 1
     456:	8a ee       	ldi	r24, 0xEA	; 234
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <xTaskCreate>
     45e:	89 83       	std	Y+1, r24	; 0x01
	{
		// Error Handling Code
	}
	
/******* Start Scheduler *********/
	vTaskStartScheduler();
     460:	0e 94 98 10 	call	0x2130	; 0x2130 <vTaskStartScheduler>
     464:	80 e0       	ldi	r24, 0x00	; 0
     466:	90 e0       	ldi	r25, 0x00	; 0
}
     468:	0f 90       	pop	r0
     46a:	df 91       	pop	r29
     46c:	cf 91       	pop	r28
     46e:	0f 91       	pop	r16
     470:	ff 90       	pop	r15
     472:	ef 90       	pop	r14
     474:	08 95       	ret

00000476 <LCD_SendCommand>:
		}
		else
		{
			LCD_DisplayChar(Number+NUMBER_TO_CHAR_FACTOR);
		}
}
     476:	cf 93       	push	r28
     478:	df 93       	push	r29
     47a:	1f 92       	push	r1
     47c:	cd b7       	in	r28, 0x3d	; 61
     47e:	de b7       	in	r29, 0x3e	; 62
     480:	89 83       	std	Y+1, r24	; 0x01
     482:	40 e0       	ldi	r20, 0x00	; 0
     484:	62 e0       	ldi	r22, 0x02	; 2
     486:	80 e0       	ldi	r24, 0x00	; 0
     488:	0e 94 00 18 	call	0x3000	; 0x3000 <Gpio_PinWrite>
     48c:	40 e0       	ldi	r20, 0x00	; 0
     48e:	64 e0       	ldi	r22, 0x04	; 4
     490:	80 e0       	ldi	r24, 0x00	; 0
     492:	0e 94 00 18 	call	0x3000	; 0x3000 <Gpio_PinWrite>
     496:	89 81       	ldd	r24, Y+1	; 0x01
     498:	88 1f       	adc	r24, r24
     49a:	88 27       	eor	r24, r24
     49c:	88 1f       	adc	r24, r24
     49e:	48 2f       	mov	r20, r24
     4a0:	60 e8       	ldi	r22, 0x80	; 128
     4a2:	80 e0       	ldi	r24, 0x00	; 0
     4a4:	0e 94 00 18 	call	0x3000	; 0x3000 <Gpio_PinWrite>
     4a8:	89 81       	ldd	r24, Y+1	; 0x01
     4aa:	82 95       	swap	r24
     4ac:	86 95       	lsr	r24
     4ae:	86 95       	lsr	r24
     4b0:	83 70       	andi	r24, 0x03	; 3
     4b2:	81 70       	andi	r24, 0x01	; 1
     4b4:	48 2f       	mov	r20, r24
     4b6:	60 e4       	ldi	r22, 0x40	; 64
     4b8:	80 e0       	ldi	r24, 0x00	; 0
     4ba:	0e 94 00 18 	call	0x3000	; 0x3000 <Gpio_PinWrite>
     4be:	89 81       	ldd	r24, Y+1	; 0x01
     4c0:	82 95       	swap	r24
     4c2:	86 95       	lsr	r24
     4c4:	87 70       	andi	r24, 0x07	; 7
     4c6:	81 70       	andi	r24, 0x01	; 1
     4c8:	48 2f       	mov	r20, r24
     4ca:	60 e2       	ldi	r22, 0x20	; 32
     4cc:	80 e0       	ldi	r24, 0x00	; 0
     4ce:	0e 94 00 18 	call	0x3000	; 0x3000 <Gpio_PinWrite>
     4d2:	89 81       	ldd	r24, Y+1	; 0x01
     4d4:	82 95       	swap	r24
     4d6:	8f 70       	andi	r24, 0x0F	; 15
     4d8:	81 70       	andi	r24, 0x01	; 1
     4da:	48 2f       	mov	r20, r24
     4dc:	60 e1       	ldi	r22, 0x10	; 16
     4de:	80 e0       	ldi	r24, 0x00	; 0
     4e0:	0e 94 00 18 	call	0x3000	; 0x3000 <Gpio_PinWrite>
     4e4:	41 e0       	ldi	r20, 0x01	; 1
     4e6:	68 e0       	ldi	r22, 0x08	; 8
     4e8:	80 e0       	ldi	r24, 0x00	; 0
     4ea:	0e 94 00 18 	call	0x3000	; 0x3000 <Gpio_PinWrite>
     4ee:	40 e0       	ldi	r20, 0x00	; 0
     4f0:	68 e0       	ldi	r22, 0x08	; 8
     4f2:	80 e0       	ldi	r24, 0x00	; 0
     4f4:	0e 94 00 18 	call	0x3000	; 0x3000 <Gpio_PinWrite>
     4f8:	89 81       	ldd	r24, Y+1	; 0x01
     4fa:	86 95       	lsr	r24
     4fc:	86 95       	lsr	r24
     4fe:	86 95       	lsr	r24
     500:	81 70       	andi	r24, 0x01	; 1
     502:	48 2f       	mov	r20, r24
     504:	60 e8       	ldi	r22, 0x80	; 128
     506:	80 e0       	ldi	r24, 0x00	; 0
     508:	0e 94 00 18 	call	0x3000	; 0x3000 <Gpio_PinWrite>
     50c:	89 81       	ldd	r24, Y+1	; 0x01
     50e:	86 95       	lsr	r24
     510:	86 95       	lsr	r24
     512:	81 70       	andi	r24, 0x01	; 1
     514:	48 2f       	mov	r20, r24
     516:	60 e4       	ldi	r22, 0x40	; 64
     518:	80 e0       	ldi	r24, 0x00	; 0
     51a:	0e 94 00 18 	call	0x3000	; 0x3000 <Gpio_PinWrite>
     51e:	89 81       	ldd	r24, Y+1	; 0x01
     520:	86 95       	lsr	r24
     522:	81 70       	andi	r24, 0x01	; 1
     524:	48 2f       	mov	r20, r24
     526:	60 e2       	ldi	r22, 0x20	; 32
     528:	80 e0       	ldi	r24, 0x00	; 0
     52a:	0e 94 00 18 	call	0x3000	; 0x3000 <Gpio_PinWrite>
     52e:	89 81       	ldd	r24, Y+1	; 0x01
     530:	81 70       	andi	r24, 0x01	; 1
     532:	48 2f       	mov	r20, r24
     534:	60 e1       	ldi	r22, 0x10	; 16
     536:	80 e0       	ldi	r24, 0x00	; 0
     538:	0e 94 00 18 	call	0x3000	; 0x3000 <Gpio_PinWrite>
     53c:	41 e0       	ldi	r20, 0x01	; 1
     53e:	68 e0       	ldi	r22, 0x08	; 8
     540:	80 e0       	ldi	r24, 0x00	; 0
     542:	0e 94 00 18 	call	0x3000	; 0x3000 <Gpio_PinWrite>
     546:	40 e0       	ldi	r20, 0x00	; 0
     548:	68 e0       	ldi	r22, 0x08	; 8
     54a:	80 e0       	ldi	r24, 0x00	; 0
     54c:	0e 94 00 18 	call	0x3000	; 0x3000 <Gpio_PinWrite>
     550:	00 00       	nop
     552:	0f 90       	pop	r0
     554:	df 91       	pop	r29
     556:	cf 91       	pop	r28
     558:	08 95       	ret

0000055a <LCD_Init>:
     55a:	cf 93       	push	r28
     55c:	df 93       	push	r29
     55e:	1f 92       	push	r1
     560:	cd b7       	in	r28, 0x3d	; 61
     562:	de b7       	in	r29, 0x3e	; 62
     564:	19 82       	std	Y+1, r1	; 0x01
     566:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <InitState>
     56a:	88 23       	and	r24, r24
     56c:	a1 f4       	brne	.+40     	; 0x596 <LCD_Init+0x3c>
     56e:	6f ef       	ldi	r22, 0xFF	; 255
     570:	80 e0       	ldi	r24, 0x00	; 0
     572:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <Gpio_PortDirection>
     576:	82 e0       	ldi	r24, 0x02	; 2
     578:	0e 94 3b 02 	call	0x476	; 0x476 <LCD_SendCommand>
     57c:	88 e2       	ldi	r24, 0x28	; 40
     57e:	0e 94 3b 02 	call	0x476	; 0x476 <LCD_SendCommand>
     582:	8e e0       	ldi	r24, 0x0E	; 14
     584:	0e 94 3b 02 	call	0x476	; 0x476 <LCD_SendCommand>
     588:	86 e0       	ldi	r24, 0x06	; 6
     58a:	0e 94 3b 02 	call	0x476	; 0x476 <LCD_SendCommand>
     58e:	81 e0       	ldi	r24, 0x01	; 1
     590:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <InitState>
     594:	02 c0       	rjmp	.+4      	; 0x59a <LCD_Init+0x40>
     596:	83 e0       	ldi	r24, 0x03	; 3
     598:	89 83       	std	Y+1, r24	; 0x01
     59a:	89 81       	ldd	r24, Y+1	; 0x01
     59c:	0f 90       	pop	r0
     59e:	df 91       	pop	r29
     5a0:	cf 91       	pop	r28
     5a2:	08 95       	ret

000005a4 <LCD_DisplayChar>:
     5a4:	cf 93       	push	r28
     5a6:	df 93       	push	r29
     5a8:	1f 92       	push	r1
     5aa:	cd b7       	in	r28, 0x3d	; 61
     5ac:	de b7       	in	r29, 0x3e	; 62
     5ae:	89 83       	std	Y+1, r24	; 0x01
     5b0:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <InitState>
     5b4:	81 30       	cpi	r24, 0x01	; 1
     5b6:	09 f0       	breq	.+2      	; 0x5ba <LCD_DisplayChar+0x16>
     5b8:	67 c0       	rjmp	.+206    	; 0x688 <LCD_DisplayChar+0xe4>
     5ba:	41 e0       	ldi	r20, 0x01	; 1
     5bc:	62 e0       	ldi	r22, 0x02	; 2
     5be:	80 e0       	ldi	r24, 0x00	; 0
     5c0:	0e 94 00 18 	call	0x3000	; 0x3000 <Gpio_PinWrite>
     5c4:	40 e0       	ldi	r20, 0x00	; 0
     5c6:	64 e0       	ldi	r22, 0x04	; 4
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	0e 94 00 18 	call	0x3000	; 0x3000 <Gpio_PinWrite>
     5ce:	89 81       	ldd	r24, Y+1	; 0x01
     5d0:	88 1f       	adc	r24, r24
     5d2:	88 27       	eor	r24, r24
     5d4:	88 1f       	adc	r24, r24
     5d6:	48 2f       	mov	r20, r24
     5d8:	60 e8       	ldi	r22, 0x80	; 128
     5da:	80 e0       	ldi	r24, 0x00	; 0
     5dc:	0e 94 00 18 	call	0x3000	; 0x3000 <Gpio_PinWrite>
     5e0:	89 81       	ldd	r24, Y+1	; 0x01
     5e2:	82 95       	swap	r24
     5e4:	86 95       	lsr	r24
     5e6:	86 95       	lsr	r24
     5e8:	83 70       	andi	r24, 0x03	; 3
     5ea:	81 70       	andi	r24, 0x01	; 1
     5ec:	48 2f       	mov	r20, r24
     5ee:	60 e4       	ldi	r22, 0x40	; 64
     5f0:	80 e0       	ldi	r24, 0x00	; 0
     5f2:	0e 94 00 18 	call	0x3000	; 0x3000 <Gpio_PinWrite>
     5f6:	89 81       	ldd	r24, Y+1	; 0x01
     5f8:	82 95       	swap	r24
     5fa:	86 95       	lsr	r24
     5fc:	87 70       	andi	r24, 0x07	; 7
     5fe:	81 70       	andi	r24, 0x01	; 1
     600:	48 2f       	mov	r20, r24
     602:	60 e2       	ldi	r22, 0x20	; 32
     604:	80 e0       	ldi	r24, 0x00	; 0
     606:	0e 94 00 18 	call	0x3000	; 0x3000 <Gpio_PinWrite>
     60a:	89 81       	ldd	r24, Y+1	; 0x01
     60c:	82 95       	swap	r24
     60e:	8f 70       	andi	r24, 0x0F	; 15
     610:	81 70       	andi	r24, 0x01	; 1
     612:	48 2f       	mov	r20, r24
     614:	60 e1       	ldi	r22, 0x10	; 16
     616:	80 e0       	ldi	r24, 0x00	; 0
     618:	0e 94 00 18 	call	0x3000	; 0x3000 <Gpio_PinWrite>
     61c:	41 e0       	ldi	r20, 0x01	; 1
     61e:	68 e0       	ldi	r22, 0x08	; 8
     620:	80 e0       	ldi	r24, 0x00	; 0
     622:	0e 94 00 18 	call	0x3000	; 0x3000 <Gpio_PinWrite>
     626:	40 e0       	ldi	r20, 0x00	; 0
     628:	68 e0       	ldi	r22, 0x08	; 8
     62a:	80 e0       	ldi	r24, 0x00	; 0
     62c:	0e 94 00 18 	call	0x3000	; 0x3000 <Gpio_PinWrite>
     630:	89 81       	ldd	r24, Y+1	; 0x01
     632:	86 95       	lsr	r24
     634:	86 95       	lsr	r24
     636:	86 95       	lsr	r24
     638:	81 70       	andi	r24, 0x01	; 1
     63a:	48 2f       	mov	r20, r24
     63c:	60 e8       	ldi	r22, 0x80	; 128
     63e:	80 e0       	ldi	r24, 0x00	; 0
     640:	0e 94 00 18 	call	0x3000	; 0x3000 <Gpio_PinWrite>
     644:	89 81       	ldd	r24, Y+1	; 0x01
     646:	86 95       	lsr	r24
     648:	86 95       	lsr	r24
     64a:	81 70       	andi	r24, 0x01	; 1
     64c:	48 2f       	mov	r20, r24
     64e:	60 e4       	ldi	r22, 0x40	; 64
     650:	80 e0       	ldi	r24, 0x00	; 0
     652:	0e 94 00 18 	call	0x3000	; 0x3000 <Gpio_PinWrite>
     656:	89 81       	ldd	r24, Y+1	; 0x01
     658:	86 95       	lsr	r24
     65a:	81 70       	andi	r24, 0x01	; 1
     65c:	48 2f       	mov	r20, r24
     65e:	60 e2       	ldi	r22, 0x20	; 32
     660:	80 e0       	ldi	r24, 0x00	; 0
     662:	0e 94 00 18 	call	0x3000	; 0x3000 <Gpio_PinWrite>
     666:	89 81       	ldd	r24, Y+1	; 0x01
     668:	81 70       	andi	r24, 0x01	; 1
     66a:	48 2f       	mov	r20, r24
     66c:	60 e1       	ldi	r22, 0x10	; 16
     66e:	80 e0       	ldi	r24, 0x00	; 0
     670:	0e 94 00 18 	call	0x3000	; 0x3000 <Gpio_PinWrite>
     674:	41 e0       	ldi	r20, 0x01	; 1
     676:	68 e0       	ldi	r22, 0x08	; 8
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	0e 94 00 18 	call	0x3000	; 0x3000 <Gpio_PinWrite>
     67e:	40 e0       	ldi	r20, 0x00	; 0
     680:	68 e0       	ldi	r22, 0x08	; 8
     682:	80 e0       	ldi	r24, 0x00	; 0
     684:	0e 94 00 18 	call	0x3000	; 0x3000 <Gpio_PinWrite>
     688:	00 00       	nop
     68a:	0f 90       	pop	r0
     68c:	df 91       	pop	r29
     68e:	cf 91       	pop	r28
     690:	08 95       	ret

00000692 <LCD_DisplayString>:
     692:	cf 93       	push	r28
     694:	df 93       	push	r29
     696:	00 d0       	rcall	.+0      	; 0x698 <LCD_DisplayString+0x6>
     698:	1f 92       	push	r1
     69a:	cd b7       	in	r28, 0x3d	; 61
     69c:	de b7       	in	r29, 0x3e	; 62
     69e:	9b 83       	std	Y+3, r25	; 0x03
     6a0:	8a 83       	std	Y+2, r24	; 0x02
     6a2:	19 82       	std	Y+1, r1	; 0x01
     6a4:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <InitState>
     6a8:	81 30       	cpi	r24, 0x01	; 1
     6aa:	d1 f4       	brne	.+52     	; 0x6e0 <LCD_DisplayString+0x4e>
     6ac:	0e c0       	rjmp	.+28     	; 0x6ca <LCD_DisplayString+0x38>
     6ae:	89 81       	ldd	r24, Y+1	; 0x01
     6b0:	88 2f       	mov	r24, r24
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	2a 81       	ldd	r18, Y+2	; 0x02
     6b6:	3b 81       	ldd	r19, Y+3	; 0x03
     6b8:	82 0f       	add	r24, r18
     6ba:	93 1f       	adc	r25, r19
     6bc:	fc 01       	movw	r30, r24
     6be:	80 81       	ld	r24, Z
     6c0:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <LCD_DisplayChar>
     6c4:	89 81       	ldd	r24, Y+1	; 0x01
     6c6:	8f 5f       	subi	r24, 0xFF	; 255
     6c8:	89 83       	std	Y+1, r24	; 0x01
     6ca:	89 81       	ldd	r24, Y+1	; 0x01
     6cc:	88 2f       	mov	r24, r24
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	2a 81       	ldd	r18, Y+2	; 0x02
     6d2:	3b 81       	ldd	r19, Y+3	; 0x03
     6d4:	82 0f       	add	r24, r18
     6d6:	93 1f       	adc	r25, r19
     6d8:	fc 01       	movw	r30, r24
     6da:	80 81       	ld	r24, Z
     6dc:	88 23       	and	r24, r24
     6de:	39 f7       	brne	.-50     	; 0x6ae <LCD_DisplayString+0x1c>
     6e0:	00 00       	nop
     6e2:	0f 90       	pop	r0
     6e4:	0f 90       	pop	r0
     6e6:	0f 90       	pop	r0
     6e8:	df 91       	pop	r29
     6ea:	cf 91       	pop	r28
     6ec:	08 95       	ret

000006ee <LCD_Clear>:
 * Function : LCD_GotoRowColumn
 * Description: this function is to Clear the LCD
 * @return void                        
 */
void LCD_Clear(void)
{
     6ee:	cf 93       	push	r28
     6f0:	df 93       	push	r29
     6f2:	cd b7       	in	r28, 0x3d	; 61
     6f4:	de b7       	in	r29, 0x3e	; 62
	LCD_SendCommand(LCD_ClearScreen);
     6f6:	81 e0       	ldi	r24, 0x01	; 1
     6f8:	0e 94 3b 02 	call	0x476	; 0x476 <LCD_SendCommand>
}
     6fc:	00 00       	nop
     6fe:	df 91       	pop	r29
     700:	cf 91       	pop	r28
     702:	08 95       	ret

00000704 <LCD_GotoRowColumn>:
 * param row: the row of the cursor should range is [0 to 1]
 * param col: the column of the cursor should range is [0 to 15]
 * @return void                                                          
 */
void LCD_GotoRowColumn(uint8 row , uint8 col)
{
     704:	cf 93       	push	r28
     706:	df 93       	push	r29
     708:	00 d0       	rcall	.+0      	; 0x70a <LCD_GotoRowColumn+0x6>
     70a:	cd b7       	in	r28, 0x3d	; 61
     70c:	de b7       	in	r29, 0x3e	; 62
     70e:	89 83       	std	Y+1, r24	; 0x01
     710:	6a 83       	std	Y+2, r22	; 0x02
	LCD_SendCommand( (GOTO_ROW_COL_MASK1) | ( col + (GOTO_ROW_COL_MASK2 * row ) ) );
     712:	99 81       	ldd	r25, Y+1	; 0x01
     714:	89 2f       	mov	r24, r25
     716:	88 0f       	add	r24, r24
     718:	88 0f       	add	r24, r24
     71a:	98 0f       	add	r25, r24
     71c:	8a 81       	ldd	r24, Y+2	; 0x02
     71e:	89 0f       	add	r24, r25
     720:	80 68       	ori	r24, 0x80	; 128
     722:	0e 94 3b 02 	call	0x476	; 0x476 <LCD_SendCommand>
     726:	00 00       	nop
     728:	0f 90       	pop	r0
     72a:	0f 90       	pop	r0
     72c:	df 91       	pop	r29
     72e:	cf 91       	pop	r28
     730:	08 95       	ret

00000732 <Led_Init>:
/**
 * Description: Initializing Function to the Led
 * @param led_Num the number of the Led [LED0,LED1,LED2,LED3]
 */
void Led_Init(led led_Num)
{
     732:	cf 93       	push	r28
     734:	df 93       	push	r29
     736:	1f 92       	push	r1
     738:	cd b7       	in	r28, 0x3d	; 61
     73a:	de b7       	in	r29, 0x3e	; 62
     73c:	89 83       	std	Y+1, r24	; 0x01
	switch(led_Num)
     73e:	89 81       	ldd	r24, Y+1	; 0x01
     740:	88 2f       	mov	r24, r24
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	80 32       	cpi	r24, 0x20	; 32
     746:	91 05       	cpc	r25, r1
     748:	c1 f0       	breq	.+48     	; 0x77a <Led_Init+0x48>
     74a:	81 32       	cpi	r24, 0x21	; 33
     74c:	91 05       	cpc	r25, r1
     74e:	1c f4       	brge	.+6      	; 0x756 <Led_Init+0x24>
     750:	40 97       	sbiw	r24, 0x10	; 16
     752:	41 f0       	breq	.+16     	; 0x764 <Led_Init+0x32>
		case LED3 :
		Gpio_PinDirection(LED_PORT,LED3,SET_OUT);
		Gpio_PinWrite(LED_PORT,LED3,FALSE);
		break;
		default:
		break;
     754:	33 c0       	rjmp	.+102    	; 0x7bc <Led_Init+0x8a>
 * Description: Initializing Function to the Led
 * @param led_Num the number of the Led [LED0,LED1,LED2,LED3]
 */
void Led_Init(led led_Num)
{
	switch(led_Num)
     756:	80 34       	cpi	r24, 0x40	; 64
     758:	91 05       	cpc	r25, r1
     75a:	d1 f0       	breq	.+52     	; 0x790 <Led_Init+0x5e>
     75c:	80 38       	cpi	r24, 0x80	; 128
     75e:	91 05       	cpc	r25, r1
     760:	11 f1       	breq	.+68     	; 0x7a6 <Led_Init+0x74>
		case LED3 :
		Gpio_PinDirection(LED_PORT,LED3,SET_OUT);
		Gpio_PinWrite(LED_PORT,LED3,FALSE);
		break;
		default:
		break;
     762:	2c c0       	rjmp	.+88     	; 0x7bc <Led_Init+0x8a>
void Led_Init(led led_Num)
{
	switch(led_Num)
	{
		case LED0 :
		Gpio_PinDirection(LED_PORT,LED0,SET_OUT);
     764:	4f ef       	ldi	r20, 0xFF	; 255
     766:	60 e1       	ldi	r22, 0x10	; 16
     768:	81 e0       	ldi	r24, 0x01	; 1
     76a:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <Gpio_PinDirection>
		Gpio_PinWrite(LED_PORT,LED0,FALSE);
     76e:	40 e0       	ldi	r20, 0x00	; 0
     770:	60 e1       	ldi	r22, 0x10	; 16
     772:	81 e0       	ldi	r24, 0x01	; 1
     774:	0e 94 00 18 	call	0x3000	; 0x3000 <Gpio_PinWrite>
		break;
     778:	21 c0       	rjmp	.+66     	; 0x7bc <Led_Init+0x8a>
		case LED1 :
		Gpio_PinDirection(LED_PORT,LED1,SET_OUT);
     77a:	4f ef       	ldi	r20, 0xFF	; 255
     77c:	60 e2       	ldi	r22, 0x20	; 32
     77e:	81 e0       	ldi	r24, 0x01	; 1
     780:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <Gpio_PinDirection>
		Gpio_PinWrite(LED_PORT,LED1,FALSE);
     784:	40 e0       	ldi	r20, 0x00	; 0
     786:	60 e2       	ldi	r22, 0x20	; 32
     788:	81 e0       	ldi	r24, 0x01	; 1
     78a:	0e 94 00 18 	call	0x3000	; 0x3000 <Gpio_PinWrite>
		break;
     78e:	16 c0       	rjmp	.+44     	; 0x7bc <Led_Init+0x8a>
		case LED2 :
		Gpio_PinDirection(LED_PORT,LED2,SET_OUT);
     790:	4f ef       	ldi	r20, 0xFF	; 255
     792:	60 e4       	ldi	r22, 0x40	; 64
     794:	81 e0       	ldi	r24, 0x01	; 1
     796:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <Gpio_PinDirection>
		Gpio_PinWrite(LED_PORT,LED2,FALSE);
     79a:	40 e0       	ldi	r20, 0x00	; 0
     79c:	60 e4       	ldi	r22, 0x40	; 64
     79e:	81 e0       	ldi	r24, 0x01	; 1
     7a0:	0e 94 00 18 	call	0x3000	; 0x3000 <Gpio_PinWrite>
		break;
     7a4:	0b c0       	rjmp	.+22     	; 0x7bc <Led_Init+0x8a>
		case LED3 :
		Gpio_PinDirection(LED_PORT,LED3,SET_OUT);
     7a6:	4f ef       	ldi	r20, 0xFF	; 255
     7a8:	60 e8       	ldi	r22, 0x80	; 128
     7aa:	81 e0       	ldi	r24, 0x01	; 1
     7ac:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <Gpio_PinDirection>
		Gpio_PinWrite(LED_PORT,LED3,FALSE);
     7b0:	40 e0       	ldi	r20, 0x00	; 0
     7b2:	60 e8       	ldi	r22, 0x80	; 128
     7b4:	81 e0       	ldi	r24, 0x01	; 1
     7b6:	0e 94 00 18 	call	0x3000	; 0x3000 <Gpio_PinWrite>
		break;
     7ba:	00 00       	nop
		default:
		break;
	}
}
     7bc:	00 00       	nop
     7be:	0f 90       	pop	r0
     7c0:	df 91       	pop	r29
     7c2:	cf 91       	pop	r28
     7c4:	08 95       	ret

000007c6 <Led_On>:
/**
 * Description: Function to set the Led to On
 * @param led_Num the number of the Led [LED0,LED1,LED2,LED3]
 */
void Led_On(led led_Num)
{
     7c6:	cf 93       	push	r28
     7c8:	df 93       	push	r29
     7ca:	1f 92       	push	r1
     7cc:	cd b7       	in	r28, 0x3d	; 61
     7ce:	de b7       	in	r29, 0x3e	; 62
     7d0:	89 83       	std	Y+1, r24	; 0x01
	switch(led_Num)
     7d2:	89 81       	ldd	r24, Y+1	; 0x01
     7d4:	88 2f       	mov	r24, r24
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	80 32       	cpi	r24, 0x20	; 32
     7da:	91 05       	cpc	r25, r1
     7dc:	99 f0       	breq	.+38     	; 0x804 <Led_On+0x3e>
     7de:	81 32       	cpi	r24, 0x21	; 33
     7e0:	91 05       	cpc	r25, r1
     7e2:	1c f4       	brge	.+6      	; 0x7ea <Led_On+0x24>
     7e4:	40 97       	sbiw	r24, 0x10	; 16
     7e6:	41 f0       	breq	.+16     	; 0x7f8 <Led_On+0x32>
		break;
		case LED3 :
		Gpio_PinWrite(LED_PORT,LED3,HIGH);
		break;
		default:
		break;
     7e8:	1f c0       	rjmp	.+62     	; 0x828 <Led_On+0x62>
 * Description: Function to set the Led to On
 * @param led_Num the number of the Led [LED0,LED1,LED2,LED3]
 */
void Led_On(led led_Num)
{
	switch(led_Num)
     7ea:	80 34       	cpi	r24, 0x40	; 64
     7ec:	91 05       	cpc	r25, r1
     7ee:	81 f0       	breq	.+32     	; 0x810 <Led_On+0x4a>
     7f0:	80 38       	cpi	r24, 0x80	; 128
     7f2:	91 05       	cpc	r25, r1
     7f4:	99 f0       	breq	.+38     	; 0x81c <Led_On+0x56>
		break;
		case LED3 :
		Gpio_PinWrite(LED_PORT,LED3,HIGH);
		break;
		default:
		break;
     7f6:	18 c0       	rjmp	.+48     	; 0x828 <Led_On+0x62>
void Led_On(led led_Num)
{
	switch(led_Num)
	{
		case LED0 :
		Gpio_PinWrite(LED_PORT,LED0,HIGH);
     7f8:	41 e0       	ldi	r20, 0x01	; 1
     7fa:	60 e1       	ldi	r22, 0x10	; 16
     7fc:	81 e0       	ldi	r24, 0x01	; 1
     7fe:	0e 94 00 18 	call	0x3000	; 0x3000 <Gpio_PinWrite>
		break;
     802:	12 c0       	rjmp	.+36     	; 0x828 <Led_On+0x62>
		case LED1 :
		Gpio_PinWrite(LED_PORT,LED1,HIGH);
     804:	41 e0       	ldi	r20, 0x01	; 1
     806:	60 e2       	ldi	r22, 0x20	; 32
     808:	81 e0       	ldi	r24, 0x01	; 1
     80a:	0e 94 00 18 	call	0x3000	; 0x3000 <Gpio_PinWrite>
		break;
     80e:	0c c0       	rjmp	.+24     	; 0x828 <Led_On+0x62>
		case LED2 :
		Gpio_PinWrite(LED_PORT,LED2,HIGH);
     810:	41 e0       	ldi	r20, 0x01	; 1
     812:	60 e4       	ldi	r22, 0x40	; 64
     814:	81 e0       	ldi	r24, 0x01	; 1
     816:	0e 94 00 18 	call	0x3000	; 0x3000 <Gpio_PinWrite>
		break;
     81a:	06 c0       	rjmp	.+12     	; 0x828 <Led_On+0x62>
		case LED3 :
		Gpio_PinWrite(LED_PORT,LED3,HIGH);
     81c:	41 e0       	ldi	r20, 0x01	; 1
     81e:	60 e8       	ldi	r22, 0x80	; 128
     820:	81 e0       	ldi	r24, 0x01	; 1
     822:	0e 94 00 18 	call	0x3000	; 0x3000 <Gpio_PinWrite>
		break;
     826:	00 00       	nop
		default:
		break;
	}
}
     828:	00 00       	nop
     82a:	0f 90       	pop	r0
     82c:	df 91       	pop	r29
     82e:	cf 91       	pop	r28
     830:	08 95       	ret

00000832 <Led_Off>:
/**
 * Description: Function to set the Led to Off.
 * @param led_Num the number of the Led [LED0,LED1,LED2,LED3].
 */
void Led_Off(led led_Num)
{
     832:	cf 93       	push	r28
     834:	df 93       	push	r29
     836:	1f 92       	push	r1
     838:	cd b7       	in	r28, 0x3d	; 61
     83a:	de b7       	in	r29, 0x3e	; 62
     83c:	89 83       	std	Y+1, r24	; 0x01
	switch(led_Num)
     83e:	89 81       	ldd	r24, Y+1	; 0x01
     840:	88 2f       	mov	r24, r24
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	80 32       	cpi	r24, 0x20	; 32
     846:	91 05       	cpc	r25, r1
     848:	99 f0       	breq	.+38     	; 0x870 <__stack+0x11>
     84a:	81 32       	cpi	r24, 0x21	; 33
     84c:	91 05       	cpc	r25, r1
     84e:	1c f4       	brge	.+6      	; 0x856 <Led_Off+0x24>
     850:	40 97       	sbiw	r24, 0x10	; 16
     852:	41 f0       	breq	.+16     	; 0x864 <__stack+0x5>
		break;
		case LED3 :
		Gpio_PinWrite(LED_PORT,LED3,FALSE);
		break;
		default:
		break;
     854:	1f c0       	rjmp	.+62     	; 0x894 <__stack+0x35>
 * Description: Function to set the Led to Off.
 * @param led_Num the number of the Led [LED0,LED1,LED2,LED3].
 */
void Led_Off(led led_Num)
{
	switch(led_Num)
     856:	80 34       	cpi	r24, 0x40	; 64
     858:	91 05       	cpc	r25, r1
     85a:	81 f0       	breq	.+32     	; 0x87c <__stack+0x1d>
     85c:	80 38       	cpi	r24, 0x80	; 128
     85e:	91 05       	cpc	r25, r1
     860:	99 f0       	breq	.+38     	; 0x888 <__stack+0x29>
		break;
		case LED3 :
		Gpio_PinWrite(LED_PORT,LED3,FALSE);
		break;
		default:
		break;
     862:	18 c0       	rjmp	.+48     	; 0x894 <__stack+0x35>
void Led_Off(led led_Num)
{
	switch(led_Num)
	{
		case LED0 :
		Gpio_PinWrite(LED_PORT,LED0,FALSE);
     864:	40 e0       	ldi	r20, 0x00	; 0
     866:	60 e1       	ldi	r22, 0x10	; 16
     868:	81 e0       	ldi	r24, 0x01	; 1
     86a:	0e 94 00 18 	call	0x3000	; 0x3000 <Gpio_PinWrite>
		break;
     86e:	12 c0       	rjmp	.+36     	; 0x894 <__stack+0x35>
		case LED1 :
		Gpio_PinWrite(LED_PORT,LED1,FALSE);
     870:	40 e0       	ldi	r20, 0x00	; 0
     872:	60 e2       	ldi	r22, 0x20	; 32
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	0e 94 00 18 	call	0x3000	; 0x3000 <Gpio_PinWrite>
		break;
     87a:	0c c0       	rjmp	.+24     	; 0x894 <__stack+0x35>
		case LED2 :
		Gpio_PinWrite(LED_PORT,LED2,FALSE);
     87c:	40 e0       	ldi	r20, 0x00	; 0
     87e:	60 e4       	ldi	r22, 0x40	; 64
     880:	81 e0       	ldi	r24, 0x01	; 1
     882:	0e 94 00 18 	call	0x3000	; 0x3000 <Gpio_PinWrite>
		break;
     886:	06 c0       	rjmp	.+12     	; 0x894 <__stack+0x35>
		case LED3 :
		Gpio_PinWrite(LED_PORT,LED3,FALSE);
     888:	40 e0       	ldi	r20, 0x00	; 0
     88a:	60 e8       	ldi	r22, 0x80	; 128
     88c:	81 e0       	ldi	r24, 0x01	; 1
     88e:	0e 94 00 18 	call	0x3000	; 0x3000 <Gpio_PinWrite>
		break;
     892:	00 00       	nop
		default:
		break;
	}
}
     894:	00 00       	nop
     896:	0f 90       	pop	r0
     898:	df 91       	pop	r29
     89a:	cf 91       	pop	r28
     89c:	08 95       	ret

0000089e <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     89e:	cf 93       	push	r28
     8a0:	df 93       	push	r29
     8a2:	00 d0       	rcall	.+0      	; 0x8a4 <pvPortMalloc+0x6>
     8a4:	00 d0       	rcall	.+0      	; 0x8a6 <pvPortMalloc+0x8>
     8a6:	cd b7       	in	r28, 0x3d	; 61
     8a8:	de b7       	in	r29, 0x3e	; 62
     8aa:	9c 83       	std	Y+4, r25	; 0x04
     8ac:	8b 83       	std	Y+3, r24	; 0x03
void *pvReturn = NULL;
     8ae:	1a 82       	std	Y+2, r1	; 0x02
     8b0:	19 82       	std	Y+1, r1	; 0x01
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	}
	#endif

	vTaskSuspendAll();
     8b2:	0e 94 cd 10 	call	0x219a	; 0x219a <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
     8b6:	80 91 2d 07 	lds	r24, 0x072D	; 0x80072d <pucAlignedHeap.2085>
     8ba:	90 91 2e 07 	lds	r25, 0x072E	; 0x80072e <pucAlignedHeap.2085+0x1>
     8be:	89 2b       	or	r24, r25
     8c0:	31 f4       	brne	.+12     	; 0x8ce <pvPortMalloc+0x30>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
     8c2:	80 e5       	ldi	r24, 0x50	; 80
     8c4:	91 e0       	ldi	r25, 0x01	; 1
     8c6:	90 93 2e 07 	sts	0x072E, r25	; 0x80072e <pucAlignedHeap.2085+0x1>
     8ca:	80 93 2d 07 	sts	0x072D, r24	; 0x80072d <pucAlignedHeap.2085>
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     8ce:	20 91 2b 07 	lds	r18, 0x072B	; 0x80072b <xNextFreeByte>
     8d2:	30 91 2c 07 	lds	r19, 0x072C	; 0x80072c <xNextFreeByte+0x1>
     8d6:	8b 81       	ldd	r24, Y+3	; 0x03
     8d8:	9c 81       	ldd	r25, Y+4	; 0x04
     8da:	82 0f       	add	r24, r18
     8dc:	93 1f       	adc	r25, r19
     8de:	8b 3d       	cpi	r24, 0xDB	; 219
     8e0:	95 40       	sbci	r25, 0x05	; 5
     8e2:	38 f5       	brcc	.+78     	; 0x932 <pvPortMalloc+0x94>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
     8e4:	20 91 2b 07 	lds	r18, 0x072B	; 0x80072b <xNextFreeByte>
     8e8:	30 91 2c 07 	lds	r19, 0x072C	; 0x80072c <xNextFreeByte+0x1>
     8ec:	8b 81       	ldd	r24, Y+3	; 0x03
     8ee:	9c 81       	ldd	r25, Y+4	; 0x04
     8f0:	28 0f       	add	r18, r24
     8f2:	39 1f       	adc	r19, r25
     8f4:	80 91 2b 07 	lds	r24, 0x072B	; 0x80072b <xNextFreeByte>
     8f8:	90 91 2c 07 	lds	r25, 0x072C	; 0x80072c <xNextFreeByte+0x1>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     8fc:	82 17       	cp	r24, r18
     8fe:	93 07       	cpc	r25, r19
     900:	c0 f4       	brcc	.+48     	; 0x932 <pvPortMalloc+0x94>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
     902:	20 91 2d 07 	lds	r18, 0x072D	; 0x80072d <pucAlignedHeap.2085>
     906:	30 91 2e 07 	lds	r19, 0x072E	; 0x80072e <pucAlignedHeap.2085+0x1>
     90a:	80 91 2b 07 	lds	r24, 0x072B	; 0x80072b <xNextFreeByte>
     90e:	90 91 2c 07 	lds	r25, 0x072C	; 0x80072c <xNextFreeByte+0x1>
     912:	82 0f       	add	r24, r18
     914:	93 1f       	adc	r25, r19
     916:	9a 83       	std	Y+2, r25	; 0x02
     918:	89 83       	std	Y+1, r24	; 0x01
			xNextFreeByte += xWantedSize;
     91a:	20 91 2b 07 	lds	r18, 0x072B	; 0x80072b <xNextFreeByte>
     91e:	30 91 2c 07 	lds	r19, 0x072C	; 0x80072c <xNextFreeByte+0x1>
     922:	8b 81       	ldd	r24, Y+3	; 0x03
     924:	9c 81       	ldd	r25, Y+4	; 0x04
     926:	82 0f       	add	r24, r18
     928:	93 1f       	adc	r25, r19
     92a:	90 93 2c 07 	sts	0x072C, r25	; 0x80072c <xNextFreeByte+0x1>
     92e:	80 93 2b 07 	sts	0x072B, r24	; 0x80072b <xNextFreeByte>
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     932:	0e 94 da 10 	call	0x21b4	; 0x21b4 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
     936:	89 81       	ldd	r24, Y+1	; 0x01
     938:	9a 81       	ldd	r25, Y+2	; 0x02
}
     93a:	0f 90       	pop	r0
     93c:	0f 90       	pop	r0
     93e:	0f 90       	pop	r0
     940:	0f 90       	pop	r0
     942:	df 91       	pop	r29
     944:	cf 91       	pop	r28
     946:	08 95       	ret

00000948 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     948:	cf 93       	push	r28
     94a:	df 93       	push	r29
     94c:	00 d0       	rcall	.+0      	; 0x94e <vPortFree+0x6>
     94e:	cd b7       	in	r28, 0x3d	; 61
     950:	de b7       	in	r29, 0x3e	; 62
     952:	9a 83       	std	Y+2, r25	; 0x02
     954:	89 83       	std	Y+1, r24	; 0x01
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
}
     956:	00 00       	nop
     958:	0f 90       	pop	r0
     95a:	0f 90       	pop	r0
     95c:	df 91       	pop	r29
     95e:	cf 91       	pop	r28
     960:	08 95       	ret

00000962 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     962:	cf 93       	push	r28
     964:	df 93       	push	r29
     966:	00 d0       	rcall	.+0      	; 0x968 <vListInitialise+0x6>
     968:	cd b7       	in	r28, 0x3d	; 61
     96a:	de b7       	in	r29, 0x3e	; 62
     96c:	9a 83       	std	Y+2, r25	; 0x02
     96e:	89 83       	std	Y+1, r24	; 0x01
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     970:	89 81       	ldd	r24, Y+1	; 0x01
     972:	9a 81       	ldd	r25, Y+2	; 0x02
     974:	9c 01       	movw	r18, r24
     976:	2d 5f       	subi	r18, 0xFD	; 253
     978:	3f 4f       	sbci	r19, 0xFF	; 255
     97a:	89 81       	ldd	r24, Y+1	; 0x01
     97c:	9a 81       	ldd	r25, Y+2	; 0x02
     97e:	fc 01       	movw	r30, r24
     980:	32 83       	std	Z+2, r19	; 0x02
     982:	21 83       	std	Z+1, r18	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     984:	89 81       	ldd	r24, Y+1	; 0x01
     986:	9a 81       	ldd	r25, Y+2	; 0x02
     988:	2f ef       	ldi	r18, 0xFF	; 255
     98a:	3f ef       	ldi	r19, 0xFF	; 255
     98c:	fc 01       	movw	r30, r24
     98e:	34 83       	std	Z+4, r19	; 0x04
     990:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     992:	89 81       	ldd	r24, Y+1	; 0x01
     994:	9a 81       	ldd	r25, Y+2	; 0x02
     996:	9c 01       	movw	r18, r24
     998:	2d 5f       	subi	r18, 0xFD	; 253
     99a:	3f 4f       	sbci	r19, 0xFF	; 255
     99c:	89 81       	ldd	r24, Y+1	; 0x01
     99e:	9a 81       	ldd	r25, Y+2	; 0x02
     9a0:	fc 01       	movw	r30, r24
     9a2:	36 83       	std	Z+6, r19	; 0x06
     9a4:	25 83       	std	Z+5, r18	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     9a6:	89 81       	ldd	r24, Y+1	; 0x01
     9a8:	9a 81       	ldd	r25, Y+2	; 0x02
     9aa:	9c 01       	movw	r18, r24
     9ac:	2d 5f       	subi	r18, 0xFD	; 253
     9ae:	3f 4f       	sbci	r19, 0xFF	; 255
     9b0:	89 81       	ldd	r24, Y+1	; 0x01
     9b2:	9a 81       	ldd	r25, Y+2	; 0x02
     9b4:	fc 01       	movw	r30, r24
     9b6:	30 87       	std	Z+8, r19	; 0x08
     9b8:	27 83       	std	Z+7, r18	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     9ba:	89 81       	ldd	r24, Y+1	; 0x01
     9bc:	9a 81       	ldd	r25, Y+2	; 0x02
     9be:	fc 01       	movw	r30, r24
     9c0:	10 82       	st	Z, r1

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
     9c2:	00 00       	nop
     9c4:	0f 90       	pop	r0
     9c6:	0f 90       	pop	r0
     9c8:	df 91       	pop	r29
     9ca:	cf 91       	pop	r28
     9cc:	08 95       	ret

000009ce <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
     9ce:	cf 93       	push	r28
     9d0:	df 93       	push	r29
     9d2:	00 d0       	rcall	.+0      	; 0x9d4 <vListInitialiseItem+0x6>
     9d4:	cd b7       	in	r28, 0x3d	; 61
     9d6:	de b7       	in	r29, 0x3e	; 62
     9d8:	9a 83       	std	Y+2, r25	; 0x02
     9da:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
     9dc:	89 81       	ldd	r24, Y+1	; 0x01
     9de:	9a 81       	ldd	r25, Y+2	; 0x02
     9e0:	fc 01       	movw	r30, r24
     9e2:	11 86       	std	Z+9, r1	; 0x09
     9e4:	10 86       	std	Z+8, r1	; 0x08

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
     9e6:	00 00       	nop
     9e8:	0f 90       	pop	r0
     9ea:	0f 90       	pop	r0
     9ec:	df 91       	pop	r29
     9ee:	cf 91       	pop	r28
     9f0:	08 95       	ret

000009f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     9f2:	cf 93       	push	r28
     9f4:	df 93       	push	r29
     9f6:	00 d0       	rcall	.+0      	; 0x9f8 <vListInsertEnd+0x6>
     9f8:	00 d0       	rcall	.+0      	; 0x9fa <vListInsertEnd+0x8>
     9fa:	00 d0       	rcall	.+0      	; 0x9fc <vListInsertEnd+0xa>
     9fc:	cd b7       	in	r28, 0x3d	; 61
     9fe:	de b7       	in	r29, 0x3e	; 62
     a00:	9c 83       	std	Y+4, r25	; 0x04
     a02:	8b 83       	std	Y+3, r24	; 0x03
     a04:	7e 83       	std	Y+6, r23	; 0x06
     a06:	6d 83       	std	Y+5, r22	; 0x05
ListItem_t * const pxIndex = pxList->pxIndex;
     a08:	8b 81       	ldd	r24, Y+3	; 0x03
     a0a:	9c 81       	ldd	r25, Y+4	; 0x04
     a0c:	fc 01       	movw	r30, r24
     a0e:	81 81       	ldd	r24, Z+1	; 0x01
     a10:	92 81       	ldd	r25, Z+2	; 0x02
     a12:	9a 83       	std	Y+2, r25	; 0x02
     a14:	89 83       	std	Y+1, r24	; 0x01
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     a16:	8d 81       	ldd	r24, Y+5	; 0x05
     a18:	9e 81       	ldd	r25, Y+6	; 0x06
     a1a:	29 81       	ldd	r18, Y+1	; 0x01
     a1c:	3a 81       	ldd	r19, Y+2	; 0x02
     a1e:	fc 01       	movw	r30, r24
     a20:	33 83       	std	Z+3, r19	; 0x03
     a22:	22 83       	std	Z+2, r18	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     a24:	89 81       	ldd	r24, Y+1	; 0x01
     a26:	9a 81       	ldd	r25, Y+2	; 0x02
     a28:	fc 01       	movw	r30, r24
     a2a:	24 81       	ldd	r18, Z+4	; 0x04
     a2c:	35 81       	ldd	r19, Z+5	; 0x05
     a2e:	8d 81       	ldd	r24, Y+5	; 0x05
     a30:	9e 81       	ldd	r25, Y+6	; 0x06
     a32:	fc 01       	movw	r30, r24
     a34:	35 83       	std	Z+5, r19	; 0x05
     a36:	24 83       	std	Z+4, r18	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     a38:	89 81       	ldd	r24, Y+1	; 0x01
     a3a:	9a 81       	ldd	r25, Y+2	; 0x02
     a3c:	fc 01       	movw	r30, r24
     a3e:	84 81       	ldd	r24, Z+4	; 0x04
     a40:	95 81       	ldd	r25, Z+5	; 0x05
     a42:	2d 81       	ldd	r18, Y+5	; 0x05
     a44:	3e 81       	ldd	r19, Y+6	; 0x06
     a46:	fc 01       	movw	r30, r24
     a48:	33 83       	std	Z+3, r19	; 0x03
     a4a:	22 83       	std	Z+2, r18	; 0x02
	pxIndex->pxPrevious = pxNewListItem;
     a4c:	89 81       	ldd	r24, Y+1	; 0x01
     a4e:	9a 81       	ldd	r25, Y+2	; 0x02
     a50:	2d 81       	ldd	r18, Y+5	; 0x05
     a52:	3e 81       	ldd	r19, Y+6	; 0x06
     a54:	fc 01       	movw	r30, r24
     a56:	35 83       	std	Z+5, r19	; 0x05
     a58:	24 83       	std	Z+4, r18	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
     a5a:	8d 81       	ldd	r24, Y+5	; 0x05
     a5c:	9e 81       	ldd	r25, Y+6	; 0x06
     a5e:	2b 81       	ldd	r18, Y+3	; 0x03
     a60:	3c 81       	ldd	r19, Y+4	; 0x04
     a62:	fc 01       	movw	r30, r24
     a64:	31 87       	std	Z+9, r19	; 0x09
     a66:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
     a68:	8b 81       	ldd	r24, Y+3	; 0x03
     a6a:	9c 81       	ldd	r25, Y+4	; 0x04
     a6c:	fc 01       	movw	r30, r24
     a6e:	80 81       	ld	r24, Z
     a70:	21 e0       	ldi	r18, 0x01	; 1
     a72:	28 0f       	add	r18, r24
     a74:	8b 81       	ldd	r24, Y+3	; 0x03
     a76:	9c 81       	ldd	r25, Y+4	; 0x04
     a78:	fc 01       	movw	r30, r24
     a7a:	20 83       	st	Z, r18
}
     a7c:	00 00       	nop
     a7e:	26 96       	adiw	r28, 0x06	; 6
     a80:	0f b6       	in	r0, 0x3f	; 63
     a82:	f8 94       	cli
     a84:	de bf       	out	0x3e, r29	; 62
     a86:	0f be       	out	0x3f, r0	; 63
     a88:	cd bf       	out	0x3d, r28	; 61
     a8a:	df 91       	pop	r29
     a8c:	cf 91       	pop	r28
     a8e:	08 95       	ret

00000a90 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     a90:	cf 93       	push	r28
     a92:	df 93       	push	r29
     a94:	cd b7       	in	r28, 0x3d	; 61
     a96:	de b7       	in	r29, 0x3e	; 62
     a98:	28 97       	sbiw	r28, 0x08	; 8
     a9a:	0f b6       	in	r0, 0x3f	; 63
     a9c:	f8 94       	cli
     a9e:	de bf       	out	0x3e, r29	; 62
     aa0:	0f be       	out	0x3f, r0	; 63
     aa2:	cd bf       	out	0x3d, r28	; 61
     aa4:	9e 83       	std	Y+6, r25	; 0x06
     aa6:	8d 83       	std	Y+5, r24	; 0x05
     aa8:	78 87       	std	Y+8, r23	; 0x08
     aaa:	6f 83       	std	Y+7, r22	; 0x07
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     aac:	8f 81       	ldd	r24, Y+7	; 0x07
     aae:	98 85       	ldd	r25, Y+8	; 0x08
     ab0:	fc 01       	movw	r30, r24
     ab2:	80 81       	ld	r24, Z
     ab4:	91 81       	ldd	r25, Z+1	; 0x01
     ab6:	9c 83       	std	Y+4, r25	; 0x04
     ab8:	8b 83       	std	Y+3, r24	; 0x03
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     aba:	8b 81       	ldd	r24, Y+3	; 0x03
     abc:	9c 81       	ldd	r25, Y+4	; 0x04
     abe:	01 96       	adiw	r24, 0x01	; 1
     ac0:	41 f4       	brne	.+16     	; 0xad2 <vListInsert+0x42>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     ac2:	8d 81       	ldd	r24, Y+5	; 0x05
     ac4:	9e 81       	ldd	r25, Y+6	; 0x06
     ac6:	fc 01       	movw	r30, r24
     ac8:	87 81       	ldd	r24, Z+7	; 0x07
     aca:	90 85       	ldd	r25, Z+8	; 0x08
     acc:	9a 83       	std	Y+2, r25	; 0x02
     ace:	89 83       	std	Y+1, r24	; 0x01
     ad0:	1a c0       	rjmp	.+52     	; 0xb06 <vListInsert+0x76>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     ad2:	8d 81       	ldd	r24, Y+5	; 0x05
     ad4:	9e 81       	ldd	r25, Y+6	; 0x06
     ad6:	03 96       	adiw	r24, 0x03	; 3
     ad8:	9a 83       	std	Y+2, r25	; 0x02
     ada:	89 83       	std	Y+1, r24	; 0x01
     adc:	07 c0       	rjmp	.+14     	; 0xaec <vListInsert+0x5c>
     ade:	89 81       	ldd	r24, Y+1	; 0x01
     ae0:	9a 81       	ldd	r25, Y+2	; 0x02
     ae2:	fc 01       	movw	r30, r24
     ae4:	82 81       	ldd	r24, Z+2	; 0x02
     ae6:	93 81       	ldd	r25, Z+3	; 0x03
     ae8:	9a 83       	std	Y+2, r25	; 0x02
     aea:	89 83       	std	Y+1, r24	; 0x01
     aec:	89 81       	ldd	r24, Y+1	; 0x01
     aee:	9a 81       	ldd	r25, Y+2	; 0x02
     af0:	fc 01       	movw	r30, r24
     af2:	82 81       	ldd	r24, Z+2	; 0x02
     af4:	93 81       	ldd	r25, Z+3	; 0x03
     af6:	fc 01       	movw	r30, r24
     af8:	20 81       	ld	r18, Z
     afa:	31 81       	ldd	r19, Z+1	; 0x01
     afc:	8b 81       	ldd	r24, Y+3	; 0x03
     afe:	9c 81       	ldd	r25, Y+4	; 0x04
     b00:	82 17       	cp	r24, r18
     b02:	93 07       	cpc	r25, r19
     b04:	60 f7       	brcc	.-40     	; 0xade <vListInsert+0x4e>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     b06:	89 81       	ldd	r24, Y+1	; 0x01
     b08:	9a 81       	ldd	r25, Y+2	; 0x02
     b0a:	fc 01       	movw	r30, r24
     b0c:	22 81       	ldd	r18, Z+2	; 0x02
     b0e:	33 81       	ldd	r19, Z+3	; 0x03
     b10:	8f 81       	ldd	r24, Y+7	; 0x07
     b12:	98 85       	ldd	r25, Y+8	; 0x08
     b14:	fc 01       	movw	r30, r24
     b16:	33 83       	std	Z+3, r19	; 0x03
     b18:	22 83       	std	Z+2, r18	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     b1a:	8f 81       	ldd	r24, Y+7	; 0x07
     b1c:	98 85       	ldd	r25, Y+8	; 0x08
     b1e:	fc 01       	movw	r30, r24
     b20:	82 81       	ldd	r24, Z+2	; 0x02
     b22:	93 81       	ldd	r25, Z+3	; 0x03
     b24:	2f 81       	ldd	r18, Y+7	; 0x07
     b26:	38 85       	ldd	r19, Y+8	; 0x08
     b28:	fc 01       	movw	r30, r24
     b2a:	35 83       	std	Z+5, r19	; 0x05
     b2c:	24 83       	std	Z+4, r18	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
     b2e:	8f 81       	ldd	r24, Y+7	; 0x07
     b30:	98 85       	ldd	r25, Y+8	; 0x08
     b32:	29 81       	ldd	r18, Y+1	; 0x01
     b34:	3a 81       	ldd	r19, Y+2	; 0x02
     b36:	fc 01       	movw	r30, r24
     b38:	35 83       	std	Z+5, r19	; 0x05
     b3a:	24 83       	std	Z+4, r18	; 0x04
	pxIterator->pxNext = pxNewListItem;
     b3c:	89 81       	ldd	r24, Y+1	; 0x01
     b3e:	9a 81       	ldd	r25, Y+2	; 0x02
     b40:	2f 81       	ldd	r18, Y+7	; 0x07
     b42:	38 85       	ldd	r19, Y+8	; 0x08
     b44:	fc 01       	movw	r30, r24
     b46:	33 83       	std	Z+3, r19	; 0x03
     b48:	22 83       	std	Z+2, r18	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
     b4a:	8f 81       	ldd	r24, Y+7	; 0x07
     b4c:	98 85       	ldd	r25, Y+8	; 0x08
     b4e:	2d 81       	ldd	r18, Y+5	; 0x05
     b50:	3e 81       	ldd	r19, Y+6	; 0x06
     b52:	fc 01       	movw	r30, r24
     b54:	31 87       	std	Z+9, r19	; 0x09
     b56:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
     b58:	8d 81       	ldd	r24, Y+5	; 0x05
     b5a:	9e 81       	ldd	r25, Y+6	; 0x06
     b5c:	fc 01       	movw	r30, r24
     b5e:	80 81       	ld	r24, Z
     b60:	21 e0       	ldi	r18, 0x01	; 1
     b62:	28 0f       	add	r18, r24
     b64:	8d 81       	ldd	r24, Y+5	; 0x05
     b66:	9e 81       	ldd	r25, Y+6	; 0x06
     b68:	fc 01       	movw	r30, r24
     b6a:	20 83       	st	Z, r18
}
     b6c:	00 00       	nop
     b6e:	28 96       	adiw	r28, 0x08	; 8
     b70:	0f b6       	in	r0, 0x3f	; 63
     b72:	f8 94       	cli
     b74:	de bf       	out	0x3e, r29	; 62
     b76:	0f be       	out	0x3f, r0	; 63
     b78:	cd bf       	out	0x3d, r28	; 61
     b7a:	df 91       	pop	r29
     b7c:	cf 91       	pop	r28
     b7e:	08 95       	ret

00000b80 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     b80:	cf 93       	push	r28
     b82:	df 93       	push	r29
     b84:	00 d0       	rcall	.+0      	; 0xb86 <uxListRemove+0x6>
     b86:	00 d0       	rcall	.+0      	; 0xb88 <uxListRemove+0x8>
     b88:	cd b7       	in	r28, 0x3d	; 61
     b8a:	de b7       	in	r29, 0x3e	; 62
     b8c:	9c 83       	std	Y+4, r25	; 0x04
     b8e:	8b 83       	std	Y+3, r24	; 0x03
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
     b90:	8b 81       	ldd	r24, Y+3	; 0x03
     b92:	9c 81       	ldd	r25, Y+4	; 0x04
     b94:	fc 01       	movw	r30, r24
     b96:	80 85       	ldd	r24, Z+8	; 0x08
     b98:	91 85       	ldd	r25, Z+9	; 0x09
     b9a:	9a 83       	std	Y+2, r25	; 0x02
     b9c:	89 83       	std	Y+1, r24	; 0x01

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     b9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ba0:	9c 81       	ldd	r25, Y+4	; 0x04
     ba2:	fc 01       	movw	r30, r24
     ba4:	82 81       	ldd	r24, Z+2	; 0x02
     ba6:	93 81       	ldd	r25, Z+3	; 0x03
     ba8:	2b 81       	ldd	r18, Y+3	; 0x03
     baa:	3c 81       	ldd	r19, Y+4	; 0x04
     bac:	f9 01       	movw	r30, r18
     bae:	24 81       	ldd	r18, Z+4	; 0x04
     bb0:	35 81       	ldd	r19, Z+5	; 0x05
     bb2:	fc 01       	movw	r30, r24
     bb4:	35 83       	std	Z+5, r19	; 0x05
     bb6:	24 83       	std	Z+4, r18	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     bb8:	8b 81       	ldd	r24, Y+3	; 0x03
     bba:	9c 81       	ldd	r25, Y+4	; 0x04
     bbc:	fc 01       	movw	r30, r24
     bbe:	84 81       	ldd	r24, Z+4	; 0x04
     bc0:	95 81       	ldd	r25, Z+5	; 0x05
     bc2:	2b 81       	ldd	r18, Y+3	; 0x03
     bc4:	3c 81       	ldd	r19, Y+4	; 0x04
     bc6:	f9 01       	movw	r30, r18
     bc8:	22 81       	ldd	r18, Z+2	; 0x02
     bca:	33 81       	ldd	r19, Z+3	; 0x03
     bcc:	fc 01       	movw	r30, r24
     bce:	33 83       	std	Z+3, r19	; 0x03
     bd0:	22 83       	std	Z+2, r18	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     bd2:	89 81       	ldd	r24, Y+1	; 0x01
     bd4:	9a 81       	ldd	r25, Y+2	; 0x02
     bd6:	fc 01       	movw	r30, r24
     bd8:	21 81       	ldd	r18, Z+1	; 0x01
     bda:	32 81       	ldd	r19, Z+2	; 0x02
     bdc:	8b 81       	ldd	r24, Y+3	; 0x03
     bde:	9c 81       	ldd	r25, Y+4	; 0x04
     be0:	28 17       	cp	r18, r24
     be2:	39 07       	cpc	r19, r25
     be4:	51 f4       	brne	.+20     	; 0xbfa <uxListRemove+0x7a>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     be6:	8b 81       	ldd	r24, Y+3	; 0x03
     be8:	9c 81       	ldd	r25, Y+4	; 0x04
     bea:	fc 01       	movw	r30, r24
     bec:	24 81       	ldd	r18, Z+4	; 0x04
     bee:	35 81       	ldd	r19, Z+5	; 0x05
     bf0:	89 81       	ldd	r24, Y+1	; 0x01
     bf2:	9a 81       	ldd	r25, Y+2	; 0x02
     bf4:	fc 01       	movw	r30, r24
     bf6:	32 83       	std	Z+2, r19	; 0x02
     bf8:	21 83       	std	Z+1, r18	; 0x01
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
     bfa:	8b 81       	ldd	r24, Y+3	; 0x03
     bfc:	9c 81       	ldd	r25, Y+4	; 0x04
     bfe:	fc 01       	movw	r30, r24
     c00:	11 86       	std	Z+9, r1	; 0x09
     c02:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     c04:	89 81       	ldd	r24, Y+1	; 0x01
     c06:	9a 81       	ldd	r25, Y+2	; 0x02
     c08:	fc 01       	movw	r30, r24
     c0a:	80 81       	ld	r24, Z
     c0c:	2f ef       	ldi	r18, 0xFF	; 255
     c0e:	28 0f       	add	r18, r24
     c10:	89 81       	ldd	r24, Y+1	; 0x01
     c12:	9a 81       	ldd	r25, Y+2	; 0x02
     c14:	fc 01       	movw	r30, r24
     c16:	20 83       	st	Z, r18

	return pxList->uxNumberOfItems;
     c18:	89 81       	ldd	r24, Y+1	; 0x01
     c1a:	9a 81       	ldd	r25, Y+2	; 0x02
     c1c:	fc 01       	movw	r30, r24
     c1e:	80 81       	ld	r24, Z
}
     c20:	0f 90       	pop	r0
     c22:	0f 90       	pop	r0
     c24:	0f 90       	pop	r0
     c26:	0f 90       	pop	r0
     c28:	df 91       	pop	r29
     c2a:	cf 91       	pop	r28
     c2c:	08 95       	ret

00000c2e <pxPortInitialiseStack>:

void vPortEndScheduler( void )
{
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
     c2e:	cf 93       	push	r28
     c30:	df 93       	push	r29
     c32:	cd b7       	in	r28, 0x3d	; 61
     c34:	de b7       	in	r29, 0x3e	; 62
     c36:	28 97       	sbiw	r28, 0x08	; 8
     c38:	0f b6       	in	r0, 0x3f	; 63
     c3a:	f8 94       	cli
     c3c:	de bf       	out	0x3e, r29	; 62
     c3e:	0f be       	out	0x3f, r0	; 63
     c40:	cd bf       	out	0x3d, r28	; 61
     c42:	9c 83       	std	Y+4, r25	; 0x04
     c44:	8b 83       	std	Y+3, r24	; 0x03
     c46:	7e 83       	std	Y+6, r23	; 0x06
     c48:	6d 83       	std	Y+5, r22	; 0x05
     c4a:	58 87       	std	Y+8, r21	; 0x08
     c4c:	4f 83       	std	Y+7, r20	; 0x07
     c4e:	8b 81       	ldd	r24, Y+3	; 0x03
     c50:	9c 81       	ldd	r25, Y+4	; 0x04
     c52:	21 e1       	ldi	r18, 0x11	; 17
     c54:	fc 01       	movw	r30, r24
     c56:	20 83       	st	Z, r18
     c58:	8b 81       	ldd	r24, Y+3	; 0x03
     c5a:	9c 81       	ldd	r25, Y+4	; 0x04
     c5c:	01 97       	sbiw	r24, 0x01	; 1
     c5e:	9c 83       	std	Y+4, r25	; 0x04
     c60:	8b 83       	std	Y+3, r24	; 0x03
     c62:	8b 81       	ldd	r24, Y+3	; 0x03
     c64:	9c 81       	ldd	r25, Y+4	; 0x04
     c66:	22 e2       	ldi	r18, 0x22	; 34
     c68:	fc 01       	movw	r30, r24
     c6a:	20 83       	st	Z, r18
     c6c:	8b 81       	ldd	r24, Y+3	; 0x03
     c6e:	9c 81       	ldd	r25, Y+4	; 0x04
     c70:	01 97       	sbiw	r24, 0x01	; 1
     c72:	9c 83       	std	Y+4, r25	; 0x04
     c74:	8b 83       	std	Y+3, r24	; 0x03
     c76:	8b 81       	ldd	r24, Y+3	; 0x03
     c78:	9c 81       	ldd	r25, Y+4	; 0x04
     c7a:	23 e3       	ldi	r18, 0x33	; 51
     c7c:	fc 01       	movw	r30, r24
     c7e:	20 83       	st	Z, r18
     c80:	8b 81       	ldd	r24, Y+3	; 0x03
     c82:	9c 81       	ldd	r25, Y+4	; 0x04
     c84:	01 97       	sbiw	r24, 0x01	; 1
     c86:	9c 83       	std	Y+4, r25	; 0x04
     c88:	8b 83       	std	Y+3, r24	; 0x03
     c8a:	8d 81       	ldd	r24, Y+5	; 0x05
     c8c:	9e 81       	ldd	r25, Y+6	; 0x06
     c8e:	9a 83       	std	Y+2, r25	; 0x02
     c90:	89 83       	std	Y+1, r24	; 0x01
     c92:	29 81       	ldd	r18, Y+1	; 0x01
     c94:	8b 81       	ldd	r24, Y+3	; 0x03
     c96:	9c 81       	ldd	r25, Y+4	; 0x04
     c98:	fc 01       	movw	r30, r24
     c9a:	20 83       	st	Z, r18
     c9c:	8b 81       	ldd	r24, Y+3	; 0x03
     c9e:	9c 81       	ldd	r25, Y+4	; 0x04
     ca0:	01 97       	sbiw	r24, 0x01	; 1
     ca2:	9c 83       	std	Y+4, r25	; 0x04
     ca4:	8b 83       	std	Y+3, r24	; 0x03
     ca6:	89 81       	ldd	r24, Y+1	; 0x01
     ca8:	9a 81       	ldd	r25, Y+2	; 0x02
     caa:	89 2f       	mov	r24, r25
     cac:	99 27       	eor	r25, r25
     cae:	9a 83       	std	Y+2, r25	; 0x02
     cb0:	89 83       	std	Y+1, r24	; 0x01
     cb2:	29 81       	ldd	r18, Y+1	; 0x01
     cb4:	8b 81       	ldd	r24, Y+3	; 0x03
     cb6:	9c 81       	ldd	r25, Y+4	; 0x04
     cb8:	fc 01       	movw	r30, r24
     cba:	20 83       	st	Z, r18
     cbc:	8b 81       	ldd	r24, Y+3	; 0x03
     cbe:	9c 81       	ldd	r25, Y+4	; 0x04
     cc0:	01 97       	sbiw	r24, 0x01	; 1
     cc2:	9c 83       	std	Y+4, r25	; 0x04
     cc4:	8b 83       	std	Y+3, r24	; 0x03
     cc6:	8b 81       	ldd	r24, Y+3	; 0x03
     cc8:	9c 81       	ldd	r25, Y+4	; 0x04
     cca:	fc 01       	movw	r30, r24
     ccc:	10 82       	st	Z, r1
     cce:	8b 81       	ldd	r24, Y+3	; 0x03
     cd0:	9c 81       	ldd	r25, Y+4	; 0x04
     cd2:	01 97       	sbiw	r24, 0x01	; 1
     cd4:	9c 83       	std	Y+4, r25	; 0x04
     cd6:	8b 83       	std	Y+3, r24	; 0x03
     cd8:	8b 81       	ldd	r24, Y+3	; 0x03
     cda:	9c 81       	ldd	r25, Y+4	; 0x04
     cdc:	20 e8       	ldi	r18, 0x80	; 128
     cde:	fc 01       	movw	r30, r24
     ce0:	20 83       	st	Z, r18
     ce2:	8b 81       	ldd	r24, Y+3	; 0x03
     ce4:	9c 81       	ldd	r25, Y+4	; 0x04
     ce6:	01 97       	sbiw	r24, 0x01	; 1
     ce8:	9c 83       	std	Y+4, r25	; 0x04
     cea:	8b 83       	std	Y+3, r24	; 0x03
     cec:	8b 81       	ldd	r24, Y+3	; 0x03
     cee:	9c 81       	ldd	r25, Y+4	; 0x04
     cf0:	fc 01       	movw	r30, r24
     cf2:	10 82       	st	Z, r1
     cf4:	8b 81       	ldd	r24, Y+3	; 0x03
     cf6:	9c 81       	ldd	r25, Y+4	; 0x04
     cf8:	01 97       	sbiw	r24, 0x01	; 1
     cfa:	9c 83       	std	Y+4, r25	; 0x04
     cfc:	8b 83       	std	Y+3, r24	; 0x03
     cfe:	8b 81       	ldd	r24, Y+3	; 0x03
     d00:	9c 81       	ldd	r25, Y+4	; 0x04
     d02:	22 e0       	ldi	r18, 0x02	; 2
     d04:	fc 01       	movw	r30, r24
     d06:	20 83       	st	Z, r18
     d08:	8b 81       	ldd	r24, Y+3	; 0x03
     d0a:	9c 81       	ldd	r25, Y+4	; 0x04
     d0c:	01 97       	sbiw	r24, 0x01	; 1
     d0e:	9c 83       	std	Y+4, r25	; 0x04
     d10:	8b 83       	std	Y+3, r24	; 0x03
     d12:	8b 81       	ldd	r24, Y+3	; 0x03
     d14:	9c 81       	ldd	r25, Y+4	; 0x04
     d16:	23 e0       	ldi	r18, 0x03	; 3
     d18:	fc 01       	movw	r30, r24
     d1a:	20 83       	st	Z, r18
     d1c:	8b 81       	ldd	r24, Y+3	; 0x03
     d1e:	9c 81       	ldd	r25, Y+4	; 0x04
     d20:	01 97       	sbiw	r24, 0x01	; 1
     d22:	9c 83       	std	Y+4, r25	; 0x04
     d24:	8b 83       	std	Y+3, r24	; 0x03
     d26:	8b 81       	ldd	r24, Y+3	; 0x03
     d28:	9c 81       	ldd	r25, Y+4	; 0x04
     d2a:	24 e0       	ldi	r18, 0x04	; 4
     d2c:	fc 01       	movw	r30, r24
     d2e:	20 83       	st	Z, r18
     d30:	8b 81       	ldd	r24, Y+3	; 0x03
     d32:	9c 81       	ldd	r25, Y+4	; 0x04
     d34:	01 97       	sbiw	r24, 0x01	; 1
     d36:	9c 83       	std	Y+4, r25	; 0x04
     d38:	8b 83       	std	Y+3, r24	; 0x03
     d3a:	8b 81       	ldd	r24, Y+3	; 0x03
     d3c:	9c 81       	ldd	r25, Y+4	; 0x04
     d3e:	25 e0       	ldi	r18, 0x05	; 5
     d40:	fc 01       	movw	r30, r24
     d42:	20 83       	st	Z, r18
     d44:	8b 81       	ldd	r24, Y+3	; 0x03
     d46:	9c 81       	ldd	r25, Y+4	; 0x04
     d48:	01 97       	sbiw	r24, 0x01	; 1
     d4a:	9c 83       	std	Y+4, r25	; 0x04
     d4c:	8b 83       	std	Y+3, r24	; 0x03
     d4e:	8b 81       	ldd	r24, Y+3	; 0x03
     d50:	9c 81       	ldd	r25, Y+4	; 0x04
     d52:	26 e0       	ldi	r18, 0x06	; 6
     d54:	fc 01       	movw	r30, r24
     d56:	20 83       	st	Z, r18
     d58:	8b 81       	ldd	r24, Y+3	; 0x03
     d5a:	9c 81       	ldd	r25, Y+4	; 0x04
     d5c:	01 97       	sbiw	r24, 0x01	; 1
     d5e:	9c 83       	std	Y+4, r25	; 0x04
     d60:	8b 83       	std	Y+3, r24	; 0x03
     d62:	8b 81       	ldd	r24, Y+3	; 0x03
     d64:	9c 81       	ldd	r25, Y+4	; 0x04
     d66:	27 e0       	ldi	r18, 0x07	; 7
     d68:	fc 01       	movw	r30, r24
     d6a:	20 83       	st	Z, r18
     d6c:	8b 81       	ldd	r24, Y+3	; 0x03
     d6e:	9c 81       	ldd	r25, Y+4	; 0x04
     d70:	01 97       	sbiw	r24, 0x01	; 1
     d72:	9c 83       	std	Y+4, r25	; 0x04
     d74:	8b 83       	std	Y+3, r24	; 0x03
     d76:	8b 81       	ldd	r24, Y+3	; 0x03
     d78:	9c 81       	ldd	r25, Y+4	; 0x04
     d7a:	28 e0       	ldi	r18, 0x08	; 8
     d7c:	fc 01       	movw	r30, r24
     d7e:	20 83       	st	Z, r18
     d80:	8b 81       	ldd	r24, Y+3	; 0x03
     d82:	9c 81       	ldd	r25, Y+4	; 0x04
     d84:	01 97       	sbiw	r24, 0x01	; 1
     d86:	9c 83       	std	Y+4, r25	; 0x04
     d88:	8b 83       	std	Y+3, r24	; 0x03
     d8a:	8b 81       	ldd	r24, Y+3	; 0x03
     d8c:	9c 81       	ldd	r25, Y+4	; 0x04
     d8e:	29 e0       	ldi	r18, 0x09	; 9
     d90:	fc 01       	movw	r30, r24
     d92:	20 83       	st	Z, r18
     d94:	8b 81       	ldd	r24, Y+3	; 0x03
     d96:	9c 81       	ldd	r25, Y+4	; 0x04
     d98:	01 97       	sbiw	r24, 0x01	; 1
     d9a:	9c 83       	std	Y+4, r25	; 0x04
     d9c:	8b 83       	std	Y+3, r24	; 0x03
     d9e:	8b 81       	ldd	r24, Y+3	; 0x03
     da0:	9c 81       	ldd	r25, Y+4	; 0x04
     da2:	20 e1       	ldi	r18, 0x10	; 16
     da4:	fc 01       	movw	r30, r24
     da6:	20 83       	st	Z, r18
     da8:	8b 81       	ldd	r24, Y+3	; 0x03
     daa:	9c 81       	ldd	r25, Y+4	; 0x04
     dac:	01 97       	sbiw	r24, 0x01	; 1
     dae:	9c 83       	std	Y+4, r25	; 0x04
     db0:	8b 83       	std	Y+3, r24	; 0x03
     db2:	8b 81       	ldd	r24, Y+3	; 0x03
     db4:	9c 81       	ldd	r25, Y+4	; 0x04
     db6:	21 e1       	ldi	r18, 0x11	; 17
     db8:	fc 01       	movw	r30, r24
     dba:	20 83       	st	Z, r18
     dbc:	8b 81       	ldd	r24, Y+3	; 0x03
     dbe:	9c 81       	ldd	r25, Y+4	; 0x04
     dc0:	01 97       	sbiw	r24, 0x01	; 1
     dc2:	9c 83       	std	Y+4, r25	; 0x04
     dc4:	8b 83       	std	Y+3, r24	; 0x03
     dc6:	8b 81       	ldd	r24, Y+3	; 0x03
     dc8:	9c 81       	ldd	r25, Y+4	; 0x04
     dca:	22 e1       	ldi	r18, 0x12	; 18
     dcc:	fc 01       	movw	r30, r24
     dce:	20 83       	st	Z, r18
     dd0:	8b 81       	ldd	r24, Y+3	; 0x03
     dd2:	9c 81       	ldd	r25, Y+4	; 0x04
     dd4:	01 97       	sbiw	r24, 0x01	; 1
     dd6:	9c 83       	std	Y+4, r25	; 0x04
     dd8:	8b 83       	std	Y+3, r24	; 0x03
     dda:	8b 81       	ldd	r24, Y+3	; 0x03
     ddc:	9c 81       	ldd	r25, Y+4	; 0x04
     dde:	23 e1       	ldi	r18, 0x13	; 19
     de0:	fc 01       	movw	r30, r24
     de2:	20 83       	st	Z, r18
     de4:	8b 81       	ldd	r24, Y+3	; 0x03
     de6:	9c 81       	ldd	r25, Y+4	; 0x04
     de8:	01 97       	sbiw	r24, 0x01	; 1
     dea:	9c 83       	std	Y+4, r25	; 0x04
     dec:	8b 83       	std	Y+3, r24	; 0x03
     dee:	8b 81       	ldd	r24, Y+3	; 0x03
     df0:	9c 81       	ldd	r25, Y+4	; 0x04
     df2:	24 e1       	ldi	r18, 0x14	; 20
     df4:	fc 01       	movw	r30, r24
     df6:	20 83       	st	Z, r18
     df8:	8b 81       	ldd	r24, Y+3	; 0x03
     dfa:	9c 81       	ldd	r25, Y+4	; 0x04
     dfc:	01 97       	sbiw	r24, 0x01	; 1
     dfe:	9c 83       	std	Y+4, r25	; 0x04
     e00:	8b 83       	std	Y+3, r24	; 0x03
     e02:	8b 81       	ldd	r24, Y+3	; 0x03
     e04:	9c 81       	ldd	r25, Y+4	; 0x04
     e06:	25 e1       	ldi	r18, 0x15	; 21
     e08:	fc 01       	movw	r30, r24
     e0a:	20 83       	st	Z, r18
     e0c:	8b 81       	ldd	r24, Y+3	; 0x03
     e0e:	9c 81       	ldd	r25, Y+4	; 0x04
     e10:	01 97       	sbiw	r24, 0x01	; 1
     e12:	9c 83       	std	Y+4, r25	; 0x04
     e14:	8b 83       	std	Y+3, r24	; 0x03
     e16:	8b 81       	ldd	r24, Y+3	; 0x03
     e18:	9c 81       	ldd	r25, Y+4	; 0x04
     e1a:	26 e1       	ldi	r18, 0x16	; 22
     e1c:	fc 01       	movw	r30, r24
     e1e:	20 83       	st	Z, r18
     e20:	8b 81       	ldd	r24, Y+3	; 0x03
     e22:	9c 81       	ldd	r25, Y+4	; 0x04
     e24:	01 97       	sbiw	r24, 0x01	; 1
     e26:	9c 83       	std	Y+4, r25	; 0x04
     e28:	8b 83       	std	Y+3, r24	; 0x03
     e2a:	8b 81       	ldd	r24, Y+3	; 0x03
     e2c:	9c 81       	ldd	r25, Y+4	; 0x04
     e2e:	27 e1       	ldi	r18, 0x17	; 23
     e30:	fc 01       	movw	r30, r24
     e32:	20 83       	st	Z, r18
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	9c 81       	ldd	r25, Y+4	; 0x04
     e38:	01 97       	sbiw	r24, 0x01	; 1
     e3a:	9c 83       	std	Y+4, r25	; 0x04
     e3c:	8b 83       	std	Y+3, r24	; 0x03
     e3e:	8b 81       	ldd	r24, Y+3	; 0x03
     e40:	9c 81       	ldd	r25, Y+4	; 0x04
     e42:	28 e1       	ldi	r18, 0x18	; 24
     e44:	fc 01       	movw	r30, r24
     e46:	20 83       	st	Z, r18
     e48:	8b 81       	ldd	r24, Y+3	; 0x03
     e4a:	9c 81       	ldd	r25, Y+4	; 0x04
     e4c:	01 97       	sbiw	r24, 0x01	; 1
     e4e:	9c 83       	std	Y+4, r25	; 0x04
     e50:	8b 83       	std	Y+3, r24	; 0x03
     e52:	8b 81       	ldd	r24, Y+3	; 0x03
     e54:	9c 81       	ldd	r25, Y+4	; 0x04
     e56:	29 e1       	ldi	r18, 0x19	; 25
     e58:	fc 01       	movw	r30, r24
     e5a:	20 83       	st	Z, r18
     e5c:	8b 81       	ldd	r24, Y+3	; 0x03
     e5e:	9c 81       	ldd	r25, Y+4	; 0x04
     e60:	01 97       	sbiw	r24, 0x01	; 1
     e62:	9c 83       	std	Y+4, r25	; 0x04
     e64:	8b 83       	std	Y+3, r24	; 0x03
     e66:	8b 81       	ldd	r24, Y+3	; 0x03
     e68:	9c 81       	ldd	r25, Y+4	; 0x04
     e6a:	20 e2       	ldi	r18, 0x20	; 32
     e6c:	fc 01       	movw	r30, r24
     e6e:	20 83       	st	Z, r18
     e70:	8b 81       	ldd	r24, Y+3	; 0x03
     e72:	9c 81       	ldd	r25, Y+4	; 0x04
     e74:	01 97       	sbiw	r24, 0x01	; 1
     e76:	9c 83       	std	Y+4, r25	; 0x04
     e78:	8b 83       	std	Y+3, r24	; 0x03
     e7a:	8b 81       	ldd	r24, Y+3	; 0x03
     e7c:	9c 81       	ldd	r25, Y+4	; 0x04
     e7e:	21 e2       	ldi	r18, 0x21	; 33
     e80:	fc 01       	movw	r30, r24
     e82:	20 83       	st	Z, r18
     e84:	8b 81       	ldd	r24, Y+3	; 0x03
     e86:	9c 81       	ldd	r25, Y+4	; 0x04
     e88:	01 97       	sbiw	r24, 0x01	; 1
     e8a:	9c 83       	std	Y+4, r25	; 0x04
     e8c:	8b 83       	std	Y+3, r24	; 0x03
     e8e:	8b 81       	ldd	r24, Y+3	; 0x03
     e90:	9c 81       	ldd	r25, Y+4	; 0x04
     e92:	22 e2       	ldi	r18, 0x22	; 34
     e94:	fc 01       	movw	r30, r24
     e96:	20 83       	st	Z, r18
     e98:	8b 81       	ldd	r24, Y+3	; 0x03
     e9a:	9c 81       	ldd	r25, Y+4	; 0x04
     e9c:	01 97       	sbiw	r24, 0x01	; 1
     e9e:	9c 83       	std	Y+4, r25	; 0x04
     ea0:	8b 83       	std	Y+3, r24	; 0x03
     ea2:	8b 81       	ldd	r24, Y+3	; 0x03
     ea4:	9c 81       	ldd	r25, Y+4	; 0x04
     ea6:	23 e2       	ldi	r18, 0x23	; 35
     ea8:	fc 01       	movw	r30, r24
     eaa:	20 83       	st	Z, r18
     eac:	8b 81       	ldd	r24, Y+3	; 0x03
     eae:	9c 81       	ldd	r25, Y+4	; 0x04
     eb0:	01 97       	sbiw	r24, 0x01	; 1
     eb2:	9c 83       	std	Y+4, r25	; 0x04
     eb4:	8b 83       	std	Y+3, r24	; 0x03
     eb6:	8f 81       	ldd	r24, Y+7	; 0x07
     eb8:	98 85       	ldd	r25, Y+8	; 0x08
     eba:	9a 83       	std	Y+2, r25	; 0x02
     ebc:	89 83       	std	Y+1, r24	; 0x01
     ebe:	29 81       	ldd	r18, Y+1	; 0x01
     ec0:	8b 81       	ldd	r24, Y+3	; 0x03
     ec2:	9c 81       	ldd	r25, Y+4	; 0x04
     ec4:	fc 01       	movw	r30, r24
     ec6:	20 83       	st	Z, r18
     ec8:	8b 81       	ldd	r24, Y+3	; 0x03
     eca:	9c 81       	ldd	r25, Y+4	; 0x04
     ecc:	01 97       	sbiw	r24, 0x01	; 1
     ece:	9c 83       	std	Y+4, r25	; 0x04
     ed0:	8b 83       	std	Y+3, r24	; 0x03
     ed2:	89 81       	ldd	r24, Y+1	; 0x01
     ed4:	9a 81       	ldd	r25, Y+2	; 0x02
     ed6:	89 2f       	mov	r24, r25
     ed8:	99 27       	eor	r25, r25
     eda:	9a 83       	std	Y+2, r25	; 0x02
     edc:	89 83       	std	Y+1, r24	; 0x01
     ede:	29 81       	ldd	r18, Y+1	; 0x01
     ee0:	8b 81       	ldd	r24, Y+3	; 0x03
     ee2:	9c 81       	ldd	r25, Y+4	; 0x04
     ee4:	fc 01       	movw	r30, r24
     ee6:	20 83       	st	Z, r18
     ee8:	8b 81       	ldd	r24, Y+3	; 0x03
     eea:	9c 81       	ldd	r25, Y+4	; 0x04
     eec:	01 97       	sbiw	r24, 0x01	; 1
     eee:	9c 83       	std	Y+4, r25	; 0x04
     ef0:	8b 83       	std	Y+3, r24	; 0x03
     ef2:	8b 81       	ldd	r24, Y+3	; 0x03
     ef4:	9c 81       	ldd	r25, Y+4	; 0x04
     ef6:	26 e2       	ldi	r18, 0x26	; 38
     ef8:	fc 01       	movw	r30, r24
     efa:	20 83       	st	Z, r18
     efc:	8b 81       	ldd	r24, Y+3	; 0x03
     efe:	9c 81       	ldd	r25, Y+4	; 0x04
     f00:	01 97       	sbiw	r24, 0x01	; 1
     f02:	9c 83       	std	Y+4, r25	; 0x04
     f04:	8b 83       	std	Y+3, r24	; 0x03
     f06:	8b 81       	ldd	r24, Y+3	; 0x03
     f08:	9c 81       	ldd	r25, Y+4	; 0x04
     f0a:	27 e2       	ldi	r18, 0x27	; 39
     f0c:	fc 01       	movw	r30, r24
     f0e:	20 83       	st	Z, r18
     f10:	8b 81       	ldd	r24, Y+3	; 0x03
     f12:	9c 81       	ldd	r25, Y+4	; 0x04
     f14:	01 97       	sbiw	r24, 0x01	; 1
     f16:	9c 83       	std	Y+4, r25	; 0x04
     f18:	8b 83       	std	Y+3, r24	; 0x03
     f1a:	8b 81       	ldd	r24, Y+3	; 0x03
     f1c:	9c 81       	ldd	r25, Y+4	; 0x04
     f1e:	28 e2       	ldi	r18, 0x28	; 40
     f20:	fc 01       	movw	r30, r24
     f22:	20 83       	st	Z, r18
     f24:	8b 81       	ldd	r24, Y+3	; 0x03
     f26:	9c 81       	ldd	r25, Y+4	; 0x04
     f28:	01 97       	sbiw	r24, 0x01	; 1
     f2a:	9c 83       	std	Y+4, r25	; 0x04
     f2c:	8b 83       	std	Y+3, r24	; 0x03
     f2e:	8b 81       	ldd	r24, Y+3	; 0x03
     f30:	9c 81       	ldd	r25, Y+4	; 0x04
     f32:	29 e2       	ldi	r18, 0x29	; 41
     f34:	fc 01       	movw	r30, r24
     f36:	20 83       	st	Z, r18
     f38:	8b 81       	ldd	r24, Y+3	; 0x03
     f3a:	9c 81       	ldd	r25, Y+4	; 0x04
     f3c:	01 97       	sbiw	r24, 0x01	; 1
     f3e:	9c 83       	std	Y+4, r25	; 0x04
     f40:	8b 83       	std	Y+3, r24	; 0x03
     f42:	8b 81       	ldd	r24, Y+3	; 0x03
     f44:	9c 81       	ldd	r25, Y+4	; 0x04
     f46:	20 e3       	ldi	r18, 0x30	; 48
     f48:	fc 01       	movw	r30, r24
     f4a:	20 83       	st	Z, r18
     f4c:	8b 81       	ldd	r24, Y+3	; 0x03
     f4e:	9c 81       	ldd	r25, Y+4	; 0x04
     f50:	01 97       	sbiw	r24, 0x01	; 1
     f52:	9c 83       	std	Y+4, r25	; 0x04
     f54:	8b 83       	std	Y+3, r24	; 0x03
     f56:	8b 81       	ldd	r24, Y+3	; 0x03
     f58:	9c 81       	ldd	r25, Y+4	; 0x04
     f5a:	21 e3       	ldi	r18, 0x31	; 49
     f5c:	fc 01       	movw	r30, r24
     f5e:	20 83       	st	Z, r18
     f60:	8b 81       	ldd	r24, Y+3	; 0x03
     f62:	9c 81       	ldd	r25, Y+4	; 0x04
     f64:	01 97       	sbiw	r24, 0x01	; 1
     f66:	9c 83       	std	Y+4, r25	; 0x04
     f68:	8b 83       	std	Y+3, r24	; 0x03
     f6a:	8b 81       	ldd	r24, Y+3	; 0x03
     f6c:	9c 81       	ldd	r25, Y+4	; 0x04
     f6e:	28 96       	adiw	r28, 0x08	; 8
     f70:	0f b6       	in	r0, 0x3f	; 63
     f72:	f8 94       	cli
     f74:	de bf       	out	0x3e, r29	; 62
     f76:	0f be       	out	0x3f, r0	; 63
     f78:	cd bf       	out	0x3d, r28	; 61
     f7a:	df 91       	pop	r29
     f7c:	cf 91       	pop	r28
     f7e:	08 95       	ret

00000f80 <xPortStartScheduler>:
     f80:	cf 93       	push	r28
     f82:	df 93       	push	r29
     f84:	cd b7       	in	r28, 0x3d	; 61
     f86:	de b7       	in	r29, 0x3e	; 62
     f88:	0e 94 ad 08 	call	0x115a	; 0x115a <prvSetupTimerInterrupt>
     f8c:	a0 91 2f 07 	lds	r26, 0x072F	; 0x80072f <pxCurrentTCB>
     f90:	b0 91 30 07 	lds	r27, 0x0730	; 0x800730 <pxCurrentTCB+0x1>
     f94:	cd 91       	ld	r28, X+
     f96:	cd bf       	out	0x3d, r28	; 61
     f98:	dd 91       	ld	r29, X+
     f9a:	de bf       	out	0x3e, r29	; 62
     f9c:	ff 91       	pop	r31
     f9e:	ef 91       	pop	r30
     fa0:	df 91       	pop	r29
     fa2:	cf 91       	pop	r28
     fa4:	bf 91       	pop	r27
     fa6:	af 91       	pop	r26
     fa8:	9f 91       	pop	r25
     faa:	8f 91       	pop	r24
     fac:	7f 91       	pop	r23
     fae:	6f 91       	pop	r22
     fb0:	5f 91       	pop	r21
     fb2:	4f 91       	pop	r20
     fb4:	3f 91       	pop	r19
     fb6:	2f 91       	pop	r18
     fb8:	1f 91       	pop	r17
     fba:	0f 91       	pop	r16
     fbc:	ff 90       	pop	r15
     fbe:	ef 90       	pop	r14
     fc0:	df 90       	pop	r13
     fc2:	cf 90       	pop	r12
     fc4:	bf 90       	pop	r11
     fc6:	af 90       	pop	r10
     fc8:	9f 90       	pop	r9
     fca:	8f 90       	pop	r8
     fcc:	7f 90       	pop	r7
     fce:	6f 90       	pop	r6
     fd0:	5f 90       	pop	r5
     fd2:	4f 90       	pop	r4
     fd4:	3f 90       	pop	r3
     fd6:	2f 90       	pop	r2
     fd8:	1f 90       	pop	r1
     fda:	0f 90       	pop	r0
     fdc:	0f be       	out	0x3f, r0	; 63
     fde:	0f 90       	pop	r0
     fe0:	08 95       	ret
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	df 91       	pop	r29
     fe6:	cf 91       	pop	r28
     fe8:	08 95       	ret

00000fea <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     fea:	0f 92       	push	r0
     fec:	0f b6       	in	r0, 0x3f	; 63
     fee:	f8 94       	cli
     ff0:	0f 92       	push	r0
     ff2:	1f 92       	push	r1
     ff4:	11 24       	eor	r1, r1
     ff6:	2f 92       	push	r2
     ff8:	3f 92       	push	r3
     ffa:	4f 92       	push	r4
     ffc:	5f 92       	push	r5
     ffe:	6f 92       	push	r6
    1000:	7f 92       	push	r7
    1002:	8f 92       	push	r8
    1004:	9f 92       	push	r9
    1006:	af 92       	push	r10
    1008:	bf 92       	push	r11
    100a:	cf 92       	push	r12
    100c:	df 92       	push	r13
    100e:	ef 92       	push	r14
    1010:	ff 92       	push	r15
    1012:	0f 93       	push	r16
    1014:	1f 93       	push	r17
    1016:	2f 93       	push	r18
    1018:	3f 93       	push	r19
    101a:	4f 93       	push	r20
    101c:	5f 93       	push	r21
    101e:	6f 93       	push	r22
    1020:	7f 93       	push	r23
    1022:	8f 93       	push	r24
    1024:	9f 93       	push	r25
    1026:	af 93       	push	r26
    1028:	bf 93       	push	r27
    102a:	cf 93       	push	r28
    102c:	df 93       	push	r29
    102e:	ef 93       	push	r30
    1030:	ff 93       	push	r31
    1032:	a0 91 2f 07 	lds	r26, 0x072F	; 0x80072f <pxCurrentTCB>
    1036:	b0 91 30 07 	lds	r27, 0x0730	; 0x800730 <pxCurrentTCB+0x1>
    103a:	0d b6       	in	r0, 0x3d	; 61
    103c:	0d 92       	st	X+, r0
    103e:	0e b6       	in	r0, 0x3e	; 62
    1040:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    1042:	0e 94 5e 12 	call	0x24bc	; 0x24bc <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    1046:	a0 91 2f 07 	lds	r26, 0x072F	; 0x80072f <pxCurrentTCB>
    104a:	b0 91 30 07 	lds	r27, 0x0730	; 0x800730 <pxCurrentTCB+0x1>
    104e:	cd 91       	ld	r28, X+
    1050:	cd bf       	out	0x3d, r28	; 61
    1052:	dd 91       	ld	r29, X+
    1054:	de bf       	out	0x3e, r29	; 62
    1056:	ff 91       	pop	r31
    1058:	ef 91       	pop	r30
    105a:	df 91       	pop	r29
    105c:	cf 91       	pop	r28
    105e:	bf 91       	pop	r27
    1060:	af 91       	pop	r26
    1062:	9f 91       	pop	r25
    1064:	8f 91       	pop	r24
    1066:	7f 91       	pop	r23
    1068:	6f 91       	pop	r22
    106a:	5f 91       	pop	r21
    106c:	4f 91       	pop	r20
    106e:	3f 91       	pop	r19
    1070:	2f 91       	pop	r18
    1072:	1f 91       	pop	r17
    1074:	0f 91       	pop	r16
    1076:	ff 90       	pop	r15
    1078:	ef 90       	pop	r14
    107a:	df 90       	pop	r13
    107c:	cf 90       	pop	r12
    107e:	bf 90       	pop	r11
    1080:	af 90       	pop	r10
    1082:	9f 90       	pop	r9
    1084:	8f 90       	pop	r8
    1086:	7f 90       	pop	r7
    1088:	6f 90       	pop	r6
    108a:	5f 90       	pop	r5
    108c:	4f 90       	pop	r4
    108e:	3f 90       	pop	r3
    1090:	2f 90       	pop	r2
    1092:	1f 90       	pop	r1
    1094:	0f 90       	pop	r0
    1096:	0f be       	out	0x3f, r0	; 63
    1098:	0f 90       	pop	r0

	asm volatile ( "ret" );
    109a:	08 95       	ret
	...

0000109e <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    109e:	0f 92       	push	r0
    10a0:	0f b6       	in	r0, 0x3f	; 63
    10a2:	f8 94       	cli
    10a4:	0f 92       	push	r0
    10a6:	1f 92       	push	r1
    10a8:	11 24       	eor	r1, r1
    10aa:	2f 92       	push	r2
    10ac:	3f 92       	push	r3
    10ae:	4f 92       	push	r4
    10b0:	5f 92       	push	r5
    10b2:	6f 92       	push	r6
    10b4:	7f 92       	push	r7
    10b6:	8f 92       	push	r8
    10b8:	9f 92       	push	r9
    10ba:	af 92       	push	r10
    10bc:	bf 92       	push	r11
    10be:	cf 92       	push	r12
    10c0:	df 92       	push	r13
    10c2:	ef 92       	push	r14
    10c4:	ff 92       	push	r15
    10c6:	0f 93       	push	r16
    10c8:	1f 93       	push	r17
    10ca:	2f 93       	push	r18
    10cc:	3f 93       	push	r19
    10ce:	4f 93       	push	r20
    10d0:	5f 93       	push	r21
    10d2:	6f 93       	push	r22
    10d4:	7f 93       	push	r23
    10d6:	8f 93       	push	r24
    10d8:	9f 93       	push	r25
    10da:	af 93       	push	r26
    10dc:	bf 93       	push	r27
    10de:	cf 93       	push	r28
    10e0:	df 93       	push	r29
    10e2:	ef 93       	push	r30
    10e4:	ff 93       	push	r31
    10e6:	a0 91 2f 07 	lds	r26, 0x072F	; 0x80072f <pxCurrentTCB>
    10ea:	b0 91 30 07 	lds	r27, 0x0730	; 0x800730 <pxCurrentTCB+0x1>
    10ee:	0d b6       	in	r0, 0x3d	; 61
    10f0:	0d 92       	st	X+, r0
    10f2:	0e b6       	in	r0, 0x3e	; 62
    10f4:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
    10f6:	0e 94 71 11 	call	0x22e2	; 0x22e2 <xTaskIncrementTick>
    10fa:	88 23       	and	r24, r24
    10fc:	11 f0       	breq	.+4      	; 0x1102 <vPortYieldFromTick+0x64>
	{
		vTaskSwitchContext();
    10fe:	0e 94 5e 12 	call	0x24bc	; 0x24bc <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
    1102:	a0 91 2f 07 	lds	r26, 0x072F	; 0x80072f <pxCurrentTCB>
    1106:	b0 91 30 07 	lds	r27, 0x0730	; 0x800730 <pxCurrentTCB+0x1>
    110a:	cd 91       	ld	r28, X+
    110c:	cd bf       	out	0x3d, r28	; 61
    110e:	dd 91       	ld	r29, X+
    1110:	de bf       	out	0x3e, r29	; 62
    1112:	ff 91       	pop	r31
    1114:	ef 91       	pop	r30
    1116:	df 91       	pop	r29
    1118:	cf 91       	pop	r28
    111a:	bf 91       	pop	r27
    111c:	af 91       	pop	r26
    111e:	9f 91       	pop	r25
    1120:	8f 91       	pop	r24
    1122:	7f 91       	pop	r23
    1124:	6f 91       	pop	r22
    1126:	5f 91       	pop	r21
    1128:	4f 91       	pop	r20
    112a:	3f 91       	pop	r19
    112c:	2f 91       	pop	r18
    112e:	1f 91       	pop	r17
    1130:	0f 91       	pop	r16
    1132:	ff 90       	pop	r15
    1134:	ef 90       	pop	r14
    1136:	df 90       	pop	r13
    1138:	cf 90       	pop	r12
    113a:	bf 90       	pop	r11
    113c:	af 90       	pop	r10
    113e:	9f 90       	pop	r9
    1140:	8f 90       	pop	r8
    1142:	7f 90       	pop	r7
    1144:	6f 90       	pop	r6
    1146:	5f 90       	pop	r5
    1148:	4f 90       	pop	r4
    114a:	3f 90       	pop	r3
    114c:	2f 90       	pop	r2
    114e:	1f 90       	pop	r1
    1150:	0f 90       	pop	r0
    1152:	0f be       	out	0x3f, r0	; 63
    1154:	0f 90       	pop	r0

	asm volatile ( "ret" );
    1156:	08 95       	ret
	...

0000115a <prvSetupTimerInterrupt>:

/*
 * Setup timer 1 compare match A to generate a tick interrupt.
 */
static void prvSetupTimerInterrupt( void )
{
    115a:	cf 93       	push	r28
    115c:	df 93       	push	r29
    115e:	00 d0       	rcall	.+0      	; 0x1160 <prvSetupTimerInterrupt+0x6>
    1160:	00 d0       	rcall	.+0      	; 0x1162 <prvSetupTimerInterrupt+0x8>
    1162:	00 d0       	rcall	.+0      	; 0x1164 <prvSetupTimerInterrupt+0xa>
    1164:	cd b7       	in	r28, 0x3d	; 61
    1166:	de b7       	in	r29, 0x3e	; 62
uint8_t ucHighByte, ucLowByte;

	/* Using 16bit timer 1 to generate the tick.  Correct fuses must be
	selected for the configCPU_CLOCK_HZ clock. */

	ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    1168:	80 e8       	ldi	r24, 0x80	; 128
    116a:	9e e3       	ldi	r25, 0x3E	; 62
    116c:	a0 e0       	ldi	r26, 0x00	; 0
    116e:	b0 e0       	ldi	r27, 0x00	; 0
    1170:	89 83       	std	Y+1, r24	; 0x01
    1172:	9a 83       	std	Y+2, r25	; 0x02
    1174:	ab 83       	std	Y+3, r26	; 0x03
    1176:	bc 83       	std	Y+4, r27	; 0x04

	/* We only have 16 bits so have to scale to get our required tick rate. */
	ulCompareMatch /= portCLOCK_PRESCALER;
    1178:	89 81       	ldd	r24, Y+1	; 0x01
    117a:	9a 81       	ldd	r25, Y+2	; 0x02
    117c:	ab 81       	ldd	r26, Y+3	; 0x03
    117e:	bc 81       	ldd	r27, Y+4	; 0x04
    1180:	68 94       	set
    1182:	15 f8       	bld	r1, 5
    1184:	b6 95       	lsr	r27
    1186:	a7 95       	ror	r26
    1188:	97 95       	ror	r25
    118a:	87 95       	ror	r24
    118c:	16 94       	lsr	r1
    118e:	d1 f7       	brne	.-12     	; 0x1184 <prvSetupTimerInterrupt+0x2a>
    1190:	89 83       	std	Y+1, r24	; 0x01
    1192:	9a 83       	std	Y+2, r25	; 0x02
    1194:	ab 83       	std	Y+3, r26	; 0x03
    1196:	bc 83       	std	Y+4, r27	; 0x04

	/* Adjust for correct value. */
	ulCompareMatch -= ( uint32_t ) 1;
    1198:	89 81       	ldd	r24, Y+1	; 0x01
    119a:	9a 81       	ldd	r25, Y+2	; 0x02
    119c:	ab 81       	ldd	r26, Y+3	; 0x03
    119e:	bc 81       	ldd	r27, Y+4	; 0x04
    11a0:	01 97       	sbiw	r24, 0x01	; 1
    11a2:	a1 09       	sbc	r26, r1
    11a4:	b1 09       	sbc	r27, r1
    11a6:	89 83       	std	Y+1, r24	; 0x01
    11a8:	9a 83       	std	Y+2, r25	; 0x02
    11aa:	ab 83       	std	Y+3, r26	; 0x03
    11ac:	bc 83       	std	Y+4, r27	; 0x04

	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    11ae:	89 81       	ldd	r24, Y+1	; 0x01
    11b0:	8d 83       	std	Y+5, r24	; 0x05
	ulCompareMatch >>= 8;
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
    11b4:	9a 81       	ldd	r25, Y+2	; 0x02
    11b6:	ab 81       	ldd	r26, Y+3	; 0x03
    11b8:	bc 81       	ldd	r27, Y+4	; 0x04
    11ba:	89 2f       	mov	r24, r25
    11bc:	9a 2f       	mov	r25, r26
    11be:	ab 2f       	mov	r26, r27
    11c0:	bb 27       	eor	r27, r27
    11c2:	89 83       	std	Y+1, r24	; 0x01
    11c4:	9a 83       	std	Y+2, r25	; 0x02
    11c6:	ab 83       	std	Y+3, r26	; 0x03
    11c8:	bc 83       	std	Y+4, r27	; 0x04
	ucHighByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    11ca:	89 81       	ldd	r24, Y+1	; 0x01
    11cc:	8e 83       	std	Y+6, r24	; 0x06
	OCR1AH = ucHighByte;
    11ce:	8b e4       	ldi	r24, 0x4B	; 75
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	2e 81       	ldd	r18, Y+6	; 0x06
    11d4:	fc 01       	movw	r30, r24
    11d6:	20 83       	st	Z, r18
	OCR1AL = ucLowByte;
    11d8:	8a e4       	ldi	r24, 0x4A	; 74
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	2d 81       	ldd	r18, Y+5	; 0x05
    11de:	fc 01       	movw	r30, r24
    11e0:	20 83       	st	Z, r18

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
    11e2:	8b e0       	ldi	r24, 0x0B	; 11
    11e4:	8d 83       	std	Y+5, r24	; 0x05
	TCCR1B = ucLowByte;
    11e6:	8e e4       	ldi	r24, 0x4E	; 78
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	2d 81       	ldd	r18, Y+5	; 0x05
    11ec:	fc 01       	movw	r30, r24
    11ee:	20 83       	st	Z, r18

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK;
    11f0:	89 e5       	ldi	r24, 0x59	; 89
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	fc 01       	movw	r30, r24
    11f6:	80 81       	ld	r24, Z
    11f8:	8d 83       	std	Y+5, r24	; 0x05
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    11fa:	8d 81       	ldd	r24, Y+5	; 0x05
    11fc:	80 61       	ori	r24, 0x10	; 16
    11fe:	8d 83       	std	Y+5, r24	; 0x05
	TIMSK = ucLowByte;
    1200:	89 e5       	ldi	r24, 0x59	; 89
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	2d 81       	ldd	r18, Y+5	; 0x05
    1206:	fc 01       	movw	r30, r24
    1208:	20 83       	st	Z, r18
}
    120a:	00 00       	nop
    120c:	26 96       	adiw	r28, 0x06	; 6
    120e:	0f b6       	in	r0, 0x3f	; 63
    1210:	f8 94       	cli
    1212:	de bf       	out	0x3e, r29	; 62
    1214:	0f be       	out	0x3f, r0	; 63
    1216:	cd bf       	out	0x3d, r28	; 61
    1218:	df 91       	pop	r29
    121a:	cf 91       	pop	r28
    121c:	08 95       	ret

0000121e <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
    121e:	0e 94 4f 08 	call	0x109e	; 0x109e <vPortYieldFromTick>
		asm volatile ( "reti" );
    1222:	18 95       	reti
	...

00001226 <xQueueGenericReset>:
	{
		xReturn = pdFALSE;
	}

	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    1226:	cf 93       	push	r28
    1228:	df 93       	push	r29
    122a:	00 d0       	rcall	.+0      	; 0x122c <xQueueGenericReset+0x6>
    122c:	00 d0       	rcall	.+0      	; 0x122e <xQueueGenericReset+0x8>
    122e:	1f 92       	push	r1
    1230:	cd b7       	in	r28, 0x3d	; 61
    1232:	de b7       	in	r29, 0x3e	; 62
    1234:	9c 83       	std	Y+4, r25	; 0x04
    1236:	8b 83       	std	Y+3, r24	; 0x03
    1238:	6d 83       	std	Y+5, r22	; 0x05
    123a:	8b 81       	ldd	r24, Y+3	; 0x03
    123c:	9c 81       	ldd	r25, Y+4	; 0x04
    123e:	9a 83       	std	Y+2, r25	; 0x02
    1240:	89 83       	std	Y+1, r24	; 0x01
    1242:	0f b6       	in	r0, 0x3f	; 63
    1244:	f8 94       	cli
    1246:	0f 92       	push	r0
    1248:	89 81       	ldd	r24, Y+1	; 0x01
    124a:	9a 81       	ldd	r25, Y+2	; 0x02
    124c:	fc 01       	movw	r30, r24
    124e:	80 81       	ld	r24, Z
    1250:	91 81       	ldd	r25, Z+1	; 0x01
    1252:	29 81       	ldd	r18, Y+1	; 0x01
    1254:	3a 81       	ldd	r19, Y+2	; 0x02
    1256:	f9 01       	movw	r30, r18
    1258:	23 8d       	ldd	r18, Z+27	; 0x1b
    125a:	42 2f       	mov	r20, r18
    125c:	50 e0       	ldi	r21, 0x00	; 0
    125e:	29 81       	ldd	r18, Y+1	; 0x01
    1260:	3a 81       	ldd	r19, Y+2	; 0x02
    1262:	f9 01       	movw	r30, r18
    1264:	24 8d       	ldd	r18, Z+28	; 0x1c
    1266:	22 2f       	mov	r18, r18
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	42 9f       	mul	r20, r18
    126c:	b0 01       	movw	r22, r0
    126e:	43 9f       	mul	r20, r19
    1270:	70 0d       	add	r23, r0
    1272:	52 9f       	mul	r21, r18
    1274:	70 0d       	add	r23, r0
    1276:	11 24       	eor	r1, r1
    1278:	9b 01       	movw	r18, r22
    127a:	28 0f       	add	r18, r24
    127c:	39 1f       	adc	r19, r25
    127e:	89 81       	ldd	r24, Y+1	; 0x01
    1280:	9a 81       	ldd	r25, Y+2	; 0x02
    1282:	fc 01       	movw	r30, r24
    1284:	35 83       	std	Z+5, r19	; 0x05
    1286:	24 83       	std	Z+4, r18	; 0x04
    1288:	89 81       	ldd	r24, Y+1	; 0x01
    128a:	9a 81       	ldd	r25, Y+2	; 0x02
    128c:	fc 01       	movw	r30, r24
    128e:	12 8e       	std	Z+26, r1	; 0x1a
    1290:	89 81       	ldd	r24, Y+1	; 0x01
    1292:	9a 81       	ldd	r25, Y+2	; 0x02
    1294:	fc 01       	movw	r30, r24
    1296:	20 81       	ld	r18, Z
    1298:	31 81       	ldd	r19, Z+1	; 0x01
    129a:	89 81       	ldd	r24, Y+1	; 0x01
    129c:	9a 81       	ldd	r25, Y+2	; 0x02
    129e:	fc 01       	movw	r30, r24
    12a0:	33 83       	std	Z+3, r19	; 0x03
    12a2:	22 83       	std	Z+2, r18	; 0x02
    12a4:	89 81       	ldd	r24, Y+1	; 0x01
    12a6:	9a 81       	ldd	r25, Y+2	; 0x02
    12a8:	fc 01       	movw	r30, r24
    12aa:	20 81       	ld	r18, Z
    12ac:	31 81       	ldd	r19, Z+1	; 0x01
    12ae:	89 81       	ldd	r24, Y+1	; 0x01
    12b0:	9a 81       	ldd	r25, Y+2	; 0x02
    12b2:	fc 01       	movw	r30, r24
    12b4:	83 8d       	ldd	r24, Z+27	; 0x1b
    12b6:	88 2f       	mov	r24, r24
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	bc 01       	movw	r22, r24
    12bc:	61 50       	subi	r22, 0x01	; 1
    12be:	71 09       	sbc	r23, r1
    12c0:	89 81       	ldd	r24, Y+1	; 0x01
    12c2:	9a 81       	ldd	r25, Y+2	; 0x02
    12c4:	fc 01       	movw	r30, r24
    12c6:	84 8d       	ldd	r24, Z+28	; 0x1c
    12c8:	48 2f       	mov	r20, r24
    12ca:	50 e0       	ldi	r21, 0x00	; 0
    12cc:	64 9f       	mul	r22, r20
    12ce:	c0 01       	movw	r24, r0
    12d0:	65 9f       	mul	r22, r21
    12d2:	90 0d       	add	r25, r0
    12d4:	74 9f       	mul	r23, r20
    12d6:	90 0d       	add	r25, r0
    12d8:	11 24       	eor	r1, r1
    12da:	28 0f       	add	r18, r24
    12dc:	39 1f       	adc	r19, r25
    12de:	89 81       	ldd	r24, Y+1	; 0x01
    12e0:	9a 81       	ldd	r25, Y+2	; 0x02
    12e2:	fc 01       	movw	r30, r24
    12e4:	37 83       	std	Z+7, r19	; 0x07
    12e6:	26 83       	std	Z+6, r18	; 0x06
    12e8:	89 81       	ldd	r24, Y+1	; 0x01
    12ea:	9a 81       	ldd	r25, Y+2	; 0x02
    12ec:	2f ef       	ldi	r18, 0xFF	; 255
    12ee:	fc 01       	movw	r30, r24
    12f0:	25 8f       	std	Z+29, r18	; 0x1d
    12f2:	89 81       	ldd	r24, Y+1	; 0x01
    12f4:	9a 81       	ldd	r25, Y+2	; 0x02
    12f6:	2f ef       	ldi	r18, 0xFF	; 255
    12f8:	fc 01       	movw	r30, r24
    12fa:	26 8f       	std	Z+30, r18	; 0x1e
    12fc:	8d 81       	ldd	r24, Y+5	; 0x05
    12fe:	88 23       	and	r24, r24
    1300:	81 f4       	brne	.+32     	; 0x1322 <xQueueGenericReset+0xfc>
    1302:	89 81       	ldd	r24, Y+1	; 0x01
    1304:	9a 81       	ldd	r25, Y+2	; 0x02
    1306:	fc 01       	movw	r30, r24
    1308:	80 85       	ldd	r24, Z+8	; 0x08
    130a:	88 23       	and	r24, r24
    130c:	a1 f0       	breq	.+40     	; 0x1336 <xQueueGenericReset+0x110>
    130e:	89 81       	ldd	r24, Y+1	; 0x01
    1310:	9a 81       	ldd	r25, Y+2	; 0x02
    1312:	08 96       	adiw	r24, 0x08	; 8
    1314:	0e 94 f5 12 	call	0x25ea	; 0x25ea <xTaskRemoveFromEventList>
    1318:	88 23       	and	r24, r24
    131a:	69 f0       	breq	.+26     	; 0x1336 <xQueueGenericReset+0x110>
    131c:	0e 94 f5 07 	call	0xfea	; 0xfea <vPortYield>
    1320:	0a c0       	rjmp	.+20     	; 0x1336 <xQueueGenericReset+0x110>
    1322:	89 81       	ldd	r24, Y+1	; 0x01
    1324:	9a 81       	ldd	r25, Y+2	; 0x02
    1326:	08 96       	adiw	r24, 0x08	; 8
    1328:	0e 94 b1 04 	call	0x962	; 0x962 <vListInitialise>
    132c:	89 81       	ldd	r24, Y+1	; 0x01
    132e:	9a 81       	ldd	r25, Y+2	; 0x02
    1330:	41 96       	adiw	r24, 0x11	; 17
    1332:	0e 94 b1 04 	call	0x962	; 0x962 <vListInitialise>
    1336:	0f 90       	pop	r0
    1338:	0f be       	out	0x3f, r0	; 63
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	0f 90       	pop	r0
    133e:	0f 90       	pop	r0
    1340:	0f 90       	pop	r0
    1342:	0f 90       	pop	r0
    1344:	0f 90       	pop	r0
    1346:	df 91       	pop	r29
    1348:	cf 91       	pop	r28
    134a:	08 95       	ret

0000134c <xQueueGenericCreate>:
    134c:	0f 93       	push	r16
    134e:	1f 93       	push	r17
    1350:	cf 93       	push	r28
    1352:	df 93       	push	r29
    1354:	cd b7       	in	r28, 0x3d	; 61
    1356:	de b7       	in	r29, 0x3e	; 62
    1358:	29 97       	sbiw	r28, 0x09	; 9
    135a:	0f b6       	in	r0, 0x3f	; 63
    135c:	f8 94       	cli
    135e:	de bf       	out	0x3e, r29	; 62
    1360:	0f be       	out	0x3f, r0	; 63
    1362:	cd bf       	out	0x3d, r28	; 61
    1364:	8f 83       	std	Y+7, r24	; 0x07
    1366:	68 87       	std	Y+8, r22	; 0x08
    1368:	49 87       	std	Y+9, r20	; 0x09
    136a:	88 85       	ldd	r24, Y+8	; 0x08
    136c:	88 23       	and	r24, r24
    136e:	19 f4       	brne	.+6      	; 0x1376 <xQueueGenericCreate+0x2a>
    1370:	1a 82       	std	Y+2, r1	; 0x02
    1372:	19 82       	std	Y+1, r1	; 0x01
    1374:	0f c0       	rjmp	.+30     	; 0x1394 <xQueueGenericCreate+0x48>
    1376:	8f 81       	ldd	r24, Y+7	; 0x07
    1378:	48 2f       	mov	r20, r24
    137a:	50 e0       	ldi	r21, 0x00	; 0
    137c:	88 85       	ldd	r24, Y+8	; 0x08
    137e:	28 2f       	mov	r18, r24
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	42 9f       	mul	r20, r18
    1384:	c0 01       	movw	r24, r0
    1386:	43 9f       	mul	r20, r19
    1388:	90 0d       	add	r25, r0
    138a:	52 9f       	mul	r21, r18
    138c:	90 0d       	add	r25, r0
    138e:	11 24       	eor	r1, r1
    1390:	9a 83       	std	Y+2, r25	; 0x02
    1392:	89 83       	std	Y+1, r24	; 0x01
    1394:	89 81       	ldd	r24, Y+1	; 0x01
    1396:	9a 81       	ldd	r25, Y+2	; 0x02
    1398:	4f 96       	adiw	r24, 0x1f	; 31
    139a:	0e 94 4f 04 	call	0x89e	; 0x89e <pvPortMalloc>
    139e:	9c 83       	std	Y+4, r25	; 0x04
    13a0:	8b 83       	std	Y+3, r24	; 0x03
    13a2:	8b 81       	ldd	r24, Y+3	; 0x03
    13a4:	9c 81       	ldd	r25, Y+4	; 0x04
    13a6:	89 2b       	or	r24, r25
    13a8:	a1 f0       	breq	.+40     	; 0x13d2 <xQueueGenericCreate+0x86>
    13aa:	8b 81       	ldd	r24, Y+3	; 0x03
    13ac:	9c 81       	ldd	r25, Y+4	; 0x04
    13ae:	9e 83       	std	Y+6, r25	; 0x06
    13b0:	8d 83       	std	Y+5, r24	; 0x05
    13b2:	8d 81       	ldd	r24, Y+5	; 0x05
    13b4:	9e 81       	ldd	r25, Y+6	; 0x06
    13b6:	4f 96       	adiw	r24, 0x1f	; 31
    13b8:	9e 83       	std	Y+6, r25	; 0x06
    13ba:	8d 83       	std	Y+5, r24	; 0x05
    13bc:	2b 81       	ldd	r18, Y+3	; 0x03
    13be:	3c 81       	ldd	r19, Y+4	; 0x04
    13c0:	8d 81       	ldd	r24, Y+5	; 0x05
    13c2:	9e 81       	ldd	r25, Y+6	; 0x06
    13c4:	89 01       	movw	r16, r18
    13c6:	29 85       	ldd	r18, Y+9	; 0x09
    13c8:	ac 01       	movw	r20, r24
    13ca:	68 85       	ldd	r22, Y+8	; 0x08
    13cc:	8f 81       	ldd	r24, Y+7	; 0x07
    13ce:	0e 94 f6 09 	call	0x13ec	; 0x13ec <prvInitialiseNewQueue>
    13d2:	8b 81       	ldd	r24, Y+3	; 0x03
    13d4:	9c 81       	ldd	r25, Y+4	; 0x04
    13d6:	29 96       	adiw	r28, 0x09	; 9
    13d8:	0f b6       	in	r0, 0x3f	; 63
    13da:	f8 94       	cli
    13dc:	de bf       	out	0x3e, r29	; 62
    13de:	0f be       	out	0x3f, r0	; 63
    13e0:	cd bf       	out	0x3d, r28	; 61
    13e2:	df 91       	pop	r29
    13e4:	cf 91       	pop	r28
    13e6:	1f 91       	pop	r17
    13e8:	0f 91       	pop	r16
    13ea:	08 95       	ret

000013ec <prvInitialiseNewQueue>:
    13ec:	0f 93       	push	r16
    13ee:	1f 93       	push	r17
    13f0:	cf 93       	push	r28
    13f2:	df 93       	push	r29
    13f4:	cd b7       	in	r28, 0x3d	; 61
    13f6:	de b7       	in	r29, 0x3e	; 62
    13f8:	27 97       	sbiw	r28, 0x07	; 7
    13fa:	0f b6       	in	r0, 0x3f	; 63
    13fc:	f8 94       	cli
    13fe:	de bf       	out	0x3e, r29	; 62
    1400:	0f be       	out	0x3f, r0	; 63
    1402:	cd bf       	out	0x3d, r28	; 61
    1404:	89 83       	std	Y+1, r24	; 0x01
    1406:	6a 83       	std	Y+2, r22	; 0x02
    1408:	5c 83       	std	Y+4, r21	; 0x04
    140a:	4b 83       	std	Y+3, r20	; 0x03
    140c:	2d 83       	std	Y+5, r18	; 0x05
    140e:	1f 83       	std	Y+7, r17	; 0x07
    1410:	0e 83       	std	Y+6, r16	; 0x06
    1412:	8a 81       	ldd	r24, Y+2	; 0x02
    1414:	88 23       	and	r24, r24
    1416:	41 f4       	brne	.+16     	; 0x1428 <prvInitialiseNewQueue+0x3c>
    1418:	8e 81       	ldd	r24, Y+6	; 0x06
    141a:	9f 81       	ldd	r25, Y+7	; 0x07
    141c:	2e 81       	ldd	r18, Y+6	; 0x06
    141e:	3f 81       	ldd	r19, Y+7	; 0x07
    1420:	fc 01       	movw	r30, r24
    1422:	31 83       	std	Z+1, r19	; 0x01
    1424:	20 83       	st	Z, r18
    1426:	07 c0       	rjmp	.+14     	; 0x1436 <prvInitialiseNewQueue+0x4a>
    1428:	8e 81       	ldd	r24, Y+6	; 0x06
    142a:	9f 81       	ldd	r25, Y+7	; 0x07
    142c:	2b 81       	ldd	r18, Y+3	; 0x03
    142e:	3c 81       	ldd	r19, Y+4	; 0x04
    1430:	fc 01       	movw	r30, r24
    1432:	31 83       	std	Z+1, r19	; 0x01
    1434:	20 83       	st	Z, r18
    1436:	8e 81       	ldd	r24, Y+6	; 0x06
    1438:	9f 81       	ldd	r25, Y+7	; 0x07
    143a:	29 81       	ldd	r18, Y+1	; 0x01
    143c:	fc 01       	movw	r30, r24
    143e:	23 8f       	std	Z+27, r18	; 0x1b
    1440:	8e 81       	ldd	r24, Y+6	; 0x06
    1442:	9f 81       	ldd	r25, Y+7	; 0x07
    1444:	2a 81       	ldd	r18, Y+2	; 0x02
    1446:	fc 01       	movw	r30, r24
    1448:	24 8f       	std	Z+28, r18	; 0x1c
    144a:	8e 81       	ldd	r24, Y+6	; 0x06
    144c:	9f 81       	ldd	r25, Y+7	; 0x07
    144e:	61 e0       	ldi	r22, 0x01	; 1
    1450:	0e 94 13 09 	call	0x1226	; 0x1226 <xQueueGenericReset>
    1454:	00 00       	nop
    1456:	27 96       	adiw	r28, 0x07	; 7
    1458:	0f b6       	in	r0, 0x3f	; 63
    145a:	f8 94       	cli
    145c:	de bf       	out	0x3e, r29	; 62
    145e:	0f be       	out	0x3f, r0	; 63
    1460:	cd bf       	out	0x3d, r28	; 61
    1462:	df 91       	pop	r29
    1464:	cf 91       	pop	r28
    1466:	1f 91       	pop	r17
    1468:	0f 91       	pop	r16
    146a:	08 95       	ret

0000146c <prvInitialiseMutex>:
    146c:	cf 93       	push	r28
    146e:	df 93       	push	r29
    1470:	00 d0       	rcall	.+0      	; 0x1472 <prvInitialiseMutex+0x6>
    1472:	cd b7       	in	r28, 0x3d	; 61
    1474:	de b7       	in	r29, 0x3e	; 62
    1476:	9a 83       	std	Y+2, r25	; 0x02
    1478:	89 83       	std	Y+1, r24	; 0x01
    147a:	89 81       	ldd	r24, Y+1	; 0x01
    147c:	9a 81       	ldd	r25, Y+2	; 0x02
    147e:	89 2b       	or	r24, r25
    1480:	b9 f0       	breq	.+46     	; 0x14b0 <prvInitialiseMutex+0x44>
    1482:	89 81       	ldd	r24, Y+1	; 0x01
    1484:	9a 81       	ldd	r25, Y+2	; 0x02
    1486:	fc 01       	movw	r30, r24
    1488:	15 82       	std	Z+5, r1	; 0x05
    148a:	14 82       	std	Z+4, r1	; 0x04
    148c:	89 81       	ldd	r24, Y+1	; 0x01
    148e:	9a 81       	ldd	r25, Y+2	; 0x02
    1490:	fc 01       	movw	r30, r24
    1492:	11 82       	std	Z+1, r1	; 0x01
    1494:	10 82       	st	Z, r1
    1496:	89 81       	ldd	r24, Y+1	; 0x01
    1498:	9a 81       	ldd	r25, Y+2	; 0x02
    149a:	fc 01       	movw	r30, r24
    149c:	16 82       	std	Z+6, r1	; 0x06
    149e:	89 81       	ldd	r24, Y+1	; 0x01
    14a0:	9a 81       	ldd	r25, Y+2	; 0x02
    14a2:	20 e0       	ldi	r18, 0x00	; 0
    14a4:	40 e0       	ldi	r20, 0x00	; 0
    14a6:	50 e0       	ldi	r21, 0x00	; 0
    14a8:	60 e0       	ldi	r22, 0x00	; 0
    14aa:	70 e0       	ldi	r23, 0x00	; 0
    14ac:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <xQueueGenericSend>
    14b0:	00 00       	nop
    14b2:	0f 90       	pop	r0
    14b4:	0f 90       	pop	r0
    14b6:	df 91       	pop	r29
    14b8:	cf 91       	pop	r28
    14ba:	08 95       	ret

000014bc <xQueueCreateMutex>:
    14bc:	cf 93       	push	r28
    14be:	df 93       	push	r29
    14c0:	00 d0       	rcall	.+0      	; 0x14c2 <xQueueCreateMutex+0x6>
    14c2:	00 d0       	rcall	.+0      	; 0x14c4 <xQueueCreateMutex+0x8>
    14c4:	1f 92       	push	r1
    14c6:	cd b7       	in	r28, 0x3d	; 61
    14c8:	de b7       	in	r29, 0x3e	; 62
    14ca:	8d 83       	std	Y+5, r24	; 0x05
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	89 83       	std	Y+1, r24	; 0x01
    14d0:	1a 82       	std	Y+2, r1	; 0x02
    14d2:	4d 81       	ldd	r20, Y+5	; 0x05
    14d4:	6a 81       	ldd	r22, Y+2	; 0x02
    14d6:	89 81       	ldd	r24, Y+1	; 0x01
    14d8:	0e 94 a6 09 	call	0x134c	; 0x134c <xQueueGenericCreate>
    14dc:	9c 83       	std	Y+4, r25	; 0x04
    14de:	8b 83       	std	Y+3, r24	; 0x03
    14e0:	8b 81       	ldd	r24, Y+3	; 0x03
    14e2:	9c 81       	ldd	r25, Y+4	; 0x04
    14e4:	0e 94 36 0a 	call	0x146c	; 0x146c <prvInitialiseMutex>
    14e8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ea:	9c 81       	ldd	r25, Y+4	; 0x04
    14ec:	0f 90       	pop	r0
    14ee:	0f 90       	pop	r0
    14f0:	0f 90       	pop	r0
    14f2:	0f 90       	pop	r0
    14f4:	0f 90       	pop	r0
    14f6:	df 91       	pop	r29
    14f8:	cf 91       	pop	r28
    14fa:	08 95       	ret

000014fc <xQueueGenericSend>:
    14fc:	cf 93       	push	r28
    14fe:	df 93       	push	r29
    1500:	cd b7       	in	r28, 0x3d	; 61
    1502:	de b7       	in	r29, 0x3e	; 62
    1504:	2e 97       	sbiw	r28, 0x0e	; 14
    1506:	0f b6       	in	r0, 0x3f	; 63
    1508:	f8 94       	cli
    150a:	de bf       	out	0x3e, r29	; 62
    150c:	0f be       	out	0x3f, r0	; 63
    150e:	cd bf       	out	0x3d, r28	; 61
    1510:	99 87       	std	Y+9, r25	; 0x09
    1512:	88 87       	std	Y+8, r24	; 0x08
    1514:	7b 87       	std	Y+11, r23	; 0x0b
    1516:	6a 87       	std	Y+10, r22	; 0x0a
    1518:	5d 87       	std	Y+13, r21	; 0x0d
    151a:	4c 87       	std	Y+12, r20	; 0x0c
    151c:	2e 87       	std	Y+14, r18	; 0x0e
    151e:	19 82       	std	Y+1, r1	; 0x01
    1520:	88 85       	ldd	r24, Y+8	; 0x08
    1522:	99 85       	ldd	r25, Y+9	; 0x09
    1524:	9b 83       	std	Y+3, r25	; 0x03
    1526:	8a 83       	std	Y+2, r24	; 0x02
    1528:	0f b6       	in	r0, 0x3f	; 63
    152a:	f8 94       	cli
    152c:	0f 92       	push	r0
    152e:	8a 81       	ldd	r24, Y+2	; 0x02
    1530:	9b 81       	ldd	r25, Y+3	; 0x03
    1532:	fc 01       	movw	r30, r24
    1534:	22 8d       	ldd	r18, Z+26	; 0x1a
    1536:	8a 81       	ldd	r24, Y+2	; 0x02
    1538:	9b 81       	ldd	r25, Y+3	; 0x03
    153a:	fc 01       	movw	r30, r24
    153c:	83 8d       	ldd	r24, Z+27	; 0x1b
    153e:	28 17       	cp	r18, r24
    1540:	18 f0       	brcs	.+6      	; 0x1548 <xQueueGenericSend+0x4c>
    1542:	8e 85       	ldd	r24, Y+14	; 0x0e
    1544:	82 30       	cpi	r24, 0x02	; 2
    1546:	11 f5       	brne	.+68     	; 0x158c <xQueueGenericSend+0x90>
    1548:	2a 85       	ldd	r18, Y+10	; 0x0a
    154a:	3b 85       	ldd	r19, Y+11	; 0x0b
    154c:	8a 81       	ldd	r24, Y+2	; 0x02
    154e:	9b 81       	ldd	r25, Y+3	; 0x03
    1550:	4e 85       	ldd	r20, Y+14	; 0x0e
    1552:	b9 01       	movw	r22, r18
    1554:	0e 94 33 0c 	call	0x1866	; 0x1866 <prvCopyDataToQueue>
    1558:	8c 83       	std	Y+4, r24	; 0x04
    155a:	8a 81       	ldd	r24, Y+2	; 0x02
    155c:	9b 81       	ldd	r25, Y+3	; 0x03
    155e:	fc 01       	movw	r30, r24
    1560:	81 89       	ldd	r24, Z+17	; 0x11
    1562:	88 23       	and	r24, r24
    1564:	51 f0       	breq	.+20     	; 0x157a <xQueueGenericSend+0x7e>
    1566:	8a 81       	ldd	r24, Y+2	; 0x02
    1568:	9b 81       	ldd	r25, Y+3	; 0x03
    156a:	41 96       	adiw	r24, 0x11	; 17
    156c:	0e 94 f5 12 	call	0x25ea	; 0x25ea <xTaskRemoveFromEventList>
    1570:	88 23       	and	r24, r24
    1572:	41 f0       	breq	.+16     	; 0x1584 <xQueueGenericSend+0x88>
    1574:	0e 94 f5 07 	call	0xfea	; 0xfea <vPortYield>
    1578:	05 c0       	rjmp	.+10     	; 0x1584 <xQueueGenericSend+0x88>
    157a:	8c 81       	ldd	r24, Y+4	; 0x04
    157c:	88 23       	and	r24, r24
    157e:	11 f0       	breq	.+4      	; 0x1584 <xQueueGenericSend+0x88>
    1580:	0e 94 f5 07 	call	0xfea	; 0xfea <vPortYield>
    1584:	0f 90       	pop	r0
    1586:	0f be       	out	0x3f, r0	; 63
    1588:	81 e0       	ldi	r24, 0x01	; 1
    158a:	60 c0       	rjmp	.+192    	; 0x164c <xQueueGenericSend+0x150>
    158c:	8c 85       	ldd	r24, Y+12	; 0x0c
    158e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1590:	89 2b       	or	r24, r25
    1592:	21 f4       	brne	.+8      	; 0x159c <xQueueGenericSend+0xa0>
    1594:	0f 90       	pop	r0
    1596:	0f be       	out	0x3f, r0	; 63
    1598:	80 e0       	ldi	r24, 0x00	; 0
    159a:	58 c0       	rjmp	.+176    	; 0x164c <xQueueGenericSend+0x150>
    159c:	89 81       	ldd	r24, Y+1	; 0x01
    159e:	88 23       	and	r24, r24
    15a0:	31 f4       	brne	.+12     	; 0x15ae <xQueueGenericSend+0xb2>
    15a2:	ce 01       	movw	r24, r28
    15a4:	05 96       	adiw	r24, 0x05	; 5
    15a6:	0e 94 62 13 	call	0x26c4	; 0x26c4 <vTaskInternalSetTimeOutState>
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	89 83       	std	Y+1, r24	; 0x01
    15ae:	0f 90       	pop	r0
    15b0:	0f be       	out	0x3f, r0	; 63
    15b2:	0e 94 cd 10 	call	0x219a	; 0x219a <vTaskSuspendAll>
    15b6:	0f b6       	in	r0, 0x3f	; 63
    15b8:	f8 94       	cli
    15ba:	0f 92       	push	r0
    15bc:	8a 81       	ldd	r24, Y+2	; 0x02
    15be:	9b 81       	ldd	r25, Y+3	; 0x03
    15c0:	fc 01       	movw	r30, r24
    15c2:	85 8d       	ldd	r24, Z+29	; 0x1d
    15c4:	8f 3f       	cpi	r24, 0xFF	; 255
    15c6:	21 f4       	brne	.+8      	; 0x15d0 <xQueueGenericSend+0xd4>
    15c8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ca:	9b 81       	ldd	r25, Y+3	; 0x03
    15cc:	fc 01       	movw	r30, r24
    15ce:	15 8e       	std	Z+29, r1	; 0x1d
    15d0:	8a 81       	ldd	r24, Y+2	; 0x02
    15d2:	9b 81       	ldd	r25, Y+3	; 0x03
    15d4:	fc 01       	movw	r30, r24
    15d6:	86 8d       	ldd	r24, Z+30	; 0x1e
    15d8:	8f 3f       	cpi	r24, 0xFF	; 255
    15da:	21 f4       	brne	.+8      	; 0x15e4 <xQueueGenericSend+0xe8>
    15dc:	8a 81       	ldd	r24, Y+2	; 0x02
    15de:	9b 81       	ldd	r25, Y+3	; 0x03
    15e0:	fc 01       	movw	r30, r24
    15e2:	16 8e       	std	Z+30, r1	; 0x1e
    15e4:	0f 90       	pop	r0
    15e6:	0f be       	out	0x3f, r0	; 63
    15e8:	9e 01       	movw	r18, r28
    15ea:	24 5f       	subi	r18, 0xF4	; 244
    15ec:	3f 4f       	sbci	r19, 0xFF	; 255
    15ee:	ce 01       	movw	r24, r28
    15f0:	05 96       	adiw	r24, 0x05	; 5
    15f2:	b9 01       	movw	r22, r18
    15f4:	0e 94 7e 13 	call	0x26fc	; 0x26fc <xTaskCheckForTimeOut>
    15f8:	88 23       	and	r24, r24
    15fa:	09 f5       	brne	.+66     	; 0x163e <xQueueGenericSend+0x142>
    15fc:	8a 81       	ldd	r24, Y+2	; 0x02
    15fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1600:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <prvIsQueueFull>
    1604:	88 23       	and	r24, r24
    1606:	a1 f0       	breq	.+40     	; 0x1630 <xQueueGenericSend+0x134>
    1608:	2c 85       	ldd	r18, Y+12	; 0x0c
    160a:	3d 85       	ldd	r19, Y+13	; 0x0d
    160c:	8a 81       	ldd	r24, Y+2	; 0x02
    160e:	9b 81       	ldd	r25, Y+3	; 0x03
    1610:	08 96       	adiw	r24, 0x08	; 8
    1612:	b9 01       	movw	r22, r18
    1614:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <vTaskPlaceOnEventList>
    1618:	8a 81       	ldd	r24, Y+2	; 0x02
    161a:	9b 81       	ldd	r25, Y+3	; 0x03
    161c:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <prvUnlockQueue>
    1620:	0e 94 da 10 	call	0x21b4	; 0x21b4 <xTaskResumeAll>
    1624:	88 23       	and	r24, r24
    1626:	09 f0       	breq	.+2      	; 0x162a <xQueueGenericSend+0x12e>
    1628:	7f cf       	rjmp	.-258    	; 0x1528 <xQueueGenericSend+0x2c>
    162a:	0e 94 f5 07 	call	0xfea	; 0xfea <vPortYield>
    162e:	7c cf       	rjmp	.-264    	; 0x1528 <xQueueGenericSend+0x2c>
    1630:	8a 81       	ldd	r24, Y+2	; 0x02
    1632:	9b 81       	ldd	r25, Y+3	; 0x03
    1634:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <prvUnlockQueue>
    1638:	0e 94 da 10 	call	0x21b4	; 0x21b4 <xTaskResumeAll>
    163c:	75 cf       	rjmp	.-278    	; 0x1528 <xQueueGenericSend+0x2c>
    163e:	8a 81       	ldd	r24, Y+2	; 0x02
    1640:	9b 81       	ldd	r25, Y+3	; 0x03
    1642:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <prvUnlockQueue>
    1646:	0e 94 da 10 	call	0x21b4	; 0x21b4 <xTaskResumeAll>
    164a:	80 e0       	ldi	r24, 0x00	; 0
    164c:	2e 96       	adiw	r28, 0x0e	; 14
    164e:	0f b6       	in	r0, 0x3f	; 63
    1650:	f8 94       	cli
    1652:	de bf       	out	0x3e, r29	; 62
    1654:	0f be       	out	0x3f, r0	; 63
    1656:	cd bf       	out	0x3d, r28	; 61
    1658:	df 91       	pop	r29
    165a:	cf 91       	pop	r28
    165c:	08 95       	ret

0000165e <xQueueSemaphoreTake>:
    165e:	cf 93       	push	r28
    1660:	df 93       	push	r29
    1662:	cd b7       	in	r28, 0x3d	; 61
    1664:	de b7       	in	r29, 0x3e	; 62
    1666:	2d 97       	sbiw	r28, 0x0d	; 13
    1668:	0f b6       	in	r0, 0x3f	; 63
    166a:	f8 94       	cli
    166c:	de bf       	out	0x3e, r29	; 62
    166e:	0f be       	out	0x3f, r0	; 63
    1670:	cd bf       	out	0x3d, r28	; 61
    1672:	9b 87       	std	Y+11, r25	; 0x0b
    1674:	8a 87       	std	Y+10, r24	; 0x0a
    1676:	7d 87       	std	Y+13, r23	; 0x0d
    1678:	6c 87       	std	Y+12, r22	; 0x0c
    167a:	19 82       	std	Y+1, r1	; 0x01
    167c:	8a 85       	ldd	r24, Y+10	; 0x0a
    167e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1680:	9c 83       	std	Y+4, r25	; 0x04
    1682:	8b 83       	std	Y+3, r24	; 0x03
    1684:	1a 82       	std	Y+2, r1	; 0x02
    1686:	0f b6       	in	r0, 0x3f	; 63
    1688:	f8 94       	cli
    168a:	0f 92       	push	r0
    168c:	8b 81       	ldd	r24, Y+3	; 0x03
    168e:	9c 81       	ldd	r25, Y+4	; 0x04
    1690:	fc 01       	movw	r30, r24
    1692:	82 8d       	ldd	r24, Z+26	; 0x1a
    1694:	8d 83       	std	Y+5, r24	; 0x05
    1696:	8d 81       	ldd	r24, Y+5	; 0x05
    1698:	88 23       	and	r24, r24
    169a:	49 f1       	breq	.+82     	; 0x16ee <xQueueSemaphoreTake+0x90>
    169c:	8d 81       	ldd	r24, Y+5	; 0x05
    169e:	2f ef       	ldi	r18, 0xFF	; 255
    16a0:	28 0f       	add	r18, r24
    16a2:	8b 81       	ldd	r24, Y+3	; 0x03
    16a4:	9c 81       	ldd	r25, Y+4	; 0x04
    16a6:	fc 01       	movw	r30, r24
    16a8:	22 8f       	std	Z+26, r18	; 0x1a
    16aa:	8b 81       	ldd	r24, Y+3	; 0x03
    16ac:	9c 81       	ldd	r25, Y+4	; 0x04
    16ae:	fc 01       	movw	r30, r24
    16b0:	80 81       	ld	r24, Z
    16b2:	91 81       	ldd	r25, Z+1	; 0x01
    16b4:	89 2b       	or	r24, r25
    16b6:	41 f4       	brne	.+16     	; 0x16c8 <xQueueSemaphoreTake+0x6a>
    16b8:	0e 94 89 16 	call	0x2d12	; 0x2d12 <pvTaskIncrementMutexHeldCount>
    16bc:	9c 01       	movw	r18, r24
    16be:	8b 81       	ldd	r24, Y+3	; 0x03
    16c0:	9c 81       	ldd	r25, Y+4	; 0x04
    16c2:	fc 01       	movw	r30, r24
    16c4:	35 83       	std	Z+5, r19	; 0x05
    16c6:	24 83       	std	Z+4, r18	; 0x04
    16c8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ca:	9c 81       	ldd	r25, Y+4	; 0x04
    16cc:	fc 01       	movw	r30, r24
    16ce:	80 85       	ldd	r24, Z+8	; 0x08
    16d0:	88 23       	and	r24, r24
    16d2:	49 f0       	breq	.+18     	; 0x16e6 <xQueueSemaphoreTake+0x88>
    16d4:	8b 81       	ldd	r24, Y+3	; 0x03
    16d6:	9c 81       	ldd	r25, Y+4	; 0x04
    16d8:	08 96       	adiw	r24, 0x08	; 8
    16da:	0e 94 f5 12 	call	0x25ea	; 0x25ea <xTaskRemoveFromEventList>
    16de:	88 23       	and	r24, r24
    16e0:	11 f0       	breq	.+4      	; 0x16e6 <xQueueSemaphoreTake+0x88>
    16e2:	0e 94 f5 07 	call	0xfea	; 0xfea <vPortYield>
    16e6:	0f 90       	pop	r0
    16e8:	0f be       	out	0x3f, r0	; 63
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	90 c0       	rjmp	.+288    	; 0x180e <xQueueSemaphoreTake+0x1b0>
    16ee:	8c 85       	ldd	r24, Y+12	; 0x0c
    16f0:	9d 85       	ldd	r25, Y+13	; 0x0d
    16f2:	89 2b       	or	r24, r25
    16f4:	21 f4       	brne	.+8      	; 0x16fe <xQueueSemaphoreTake+0xa0>
    16f6:	0f 90       	pop	r0
    16f8:	0f be       	out	0x3f, r0	; 63
    16fa:	80 e0       	ldi	r24, 0x00	; 0
    16fc:	88 c0       	rjmp	.+272    	; 0x180e <xQueueSemaphoreTake+0x1b0>
    16fe:	89 81       	ldd	r24, Y+1	; 0x01
    1700:	88 23       	and	r24, r24
    1702:	31 f4       	brne	.+12     	; 0x1710 <xQueueSemaphoreTake+0xb2>
    1704:	ce 01       	movw	r24, r28
    1706:	07 96       	adiw	r24, 0x07	; 7
    1708:	0e 94 62 13 	call	0x26c4	; 0x26c4 <vTaskInternalSetTimeOutState>
    170c:	81 e0       	ldi	r24, 0x01	; 1
    170e:	89 83       	std	Y+1, r24	; 0x01
    1710:	0f 90       	pop	r0
    1712:	0f be       	out	0x3f, r0	; 63
    1714:	0e 94 cd 10 	call	0x219a	; 0x219a <vTaskSuspendAll>
    1718:	0f b6       	in	r0, 0x3f	; 63
    171a:	f8 94       	cli
    171c:	0f 92       	push	r0
    171e:	8b 81       	ldd	r24, Y+3	; 0x03
    1720:	9c 81       	ldd	r25, Y+4	; 0x04
    1722:	fc 01       	movw	r30, r24
    1724:	85 8d       	ldd	r24, Z+29	; 0x1d
    1726:	8f 3f       	cpi	r24, 0xFF	; 255
    1728:	21 f4       	brne	.+8      	; 0x1732 <xQueueSemaphoreTake+0xd4>
    172a:	8b 81       	ldd	r24, Y+3	; 0x03
    172c:	9c 81       	ldd	r25, Y+4	; 0x04
    172e:	fc 01       	movw	r30, r24
    1730:	15 8e       	std	Z+29, r1	; 0x1d
    1732:	8b 81       	ldd	r24, Y+3	; 0x03
    1734:	9c 81       	ldd	r25, Y+4	; 0x04
    1736:	fc 01       	movw	r30, r24
    1738:	86 8d       	ldd	r24, Z+30	; 0x1e
    173a:	8f 3f       	cpi	r24, 0xFF	; 255
    173c:	21 f4       	brne	.+8      	; 0x1746 <xQueueSemaphoreTake+0xe8>
    173e:	8b 81       	ldd	r24, Y+3	; 0x03
    1740:	9c 81       	ldd	r25, Y+4	; 0x04
    1742:	fc 01       	movw	r30, r24
    1744:	16 8e       	std	Z+30, r1	; 0x1e
    1746:	0f 90       	pop	r0
    1748:	0f be       	out	0x3f, r0	; 63
    174a:	9e 01       	movw	r18, r28
    174c:	24 5f       	subi	r18, 0xF4	; 244
    174e:	3f 4f       	sbci	r19, 0xFF	; 255
    1750:	ce 01       	movw	r24, r28
    1752:	07 96       	adiw	r24, 0x07	; 7
    1754:	b9 01       	movw	r22, r18
    1756:	0e 94 7e 13 	call	0x26fc	; 0x26fc <xTaskCheckForTimeOut>
    175a:	88 23       	and	r24, r24
    175c:	a9 f5       	brne	.+106    	; 0x17c8 <xQueueSemaphoreTake+0x16a>
    175e:	8b 81       	ldd	r24, Y+3	; 0x03
    1760:	9c 81       	ldd	r25, Y+4	; 0x04
    1762:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <prvIsQueueEmpty>
    1766:	88 23       	and	r24, r24
    1768:	41 f1       	breq	.+80     	; 0x17ba <xQueueSemaphoreTake+0x15c>
    176a:	8b 81       	ldd	r24, Y+3	; 0x03
    176c:	9c 81       	ldd	r25, Y+4	; 0x04
    176e:	fc 01       	movw	r30, r24
    1770:	80 81       	ld	r24, Z
    1772:	91 81       	ldd	r25, Z+1	; 0x01
    1774:	89 2b       	or	r24, r25
    1776:	69 f4       	brne	.+26     	; 0x1792 <xQueueSemaphoreTake+0x134>
    1778:	0f b6       	in	r0, 0x3f	; 63
    177a:	f8 94       	cli
    177c:	0f 92       	push	r0
    177e:	8b 81       	ldd	r24, Y+3	; 0x03
    1780:	9c 81       	ldd	r25, Y+4	; 0x04
    1782:	fc 01       	movw	r30, r24
    1784:	84 81       	ldd	r24, Z+4	; 0x04
    1786:	95 81       	ldd	r25, Z+5	; 0x05
    1788:	0e 94 c0 14 	call	0x2980	; 0x2980 <xTaskPriorityInherit>
    178c:	8a 83       	std	Y+2, r24	; 0x02
    178e:	0f 90       	pop	r0
    1790:	0f be       	out	0x3f, r0	; 63
    1792:	2c 85       	ldd	r18, Y+12	; 0x0c
    1794:	3d 85       	ldd	r19, Y+13	; 0x0d
    1796:	8b 81       	ldd	r24, Y+3	; 0x03
    1798:	9c 81       	ldd	r25, Y+4	; 0x04
    179a:	41 96       	adiw	r24, 0x11	; 17
    179c:	b9 01       	movw	r22, r18
    179e:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <vTaskPlaceOnEventList>
    17a2:	8b 81       	ldd	r24, Y+3	; 0x03
    17a4:	9c 81       	ldd	r25, Y+4	; 0x04
    17a6:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <prvUnlockQueue>
    17aa:	0e 94 da 10 	call	0x21b4	; 0x21b4 <xTaskResumeAll>
    17ae:	88 23       	and	r24, r24
    17b0:	09 f0       	breq	.+2      	; 0x17b4 <xQueueSemaphoreTake+0x156>
    17b2:	69 cf       	rjmp	.-302    	; 0x1686 <xQueueSemaphoreTake+0x28>
    17b4:	0e 94 f5 07 	call	0xfea	; 0xfea <vPortYield>
    17b8:	66 cf       	rjmp	.-308    	; 0x1686 <xQueueSemaphoreTake+0x28>
    17ba:	8b 81       	ldd	r24, Y+3	; 0x03
    17bc:	9c 81       	ldd	r25, Y+4	; 0x04
    17be:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <prvUnlockQueue>
    17c2:	0e 94 da 10 	call	0x21b4	; 0x21b4 <xTaskResumeAll>
    17c6:	5f cf       	rjmp	.-322    	; 0x1686 <xQueueSemaphoreTake+0x28>
    17c8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ca:	9c 81       	ldd	r25, Y+4	; 0x04
    17cc:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <prvUnlockQueue>
    17d0:	0e 94 da 10 	call	0x21b4	; 0x21b4 <xTaskResumeAll>
    17d4:	8b 81       	ldd	r24, Y+3	; 0x03
    17d6:	9c 81       	ldd	r25, Y+4	; 0x04
    17d8:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <prvIsQueueEmpty>
    17dc:	88 23       	and	r24, r24
    17de:	09 f4       	brne	.+2      	; 0x17e2 <xQueueSemaphoreTake+0x184>
    17e0:	52 cf       	rjmp	.-348    	; 0x1686 <xQueueSemaphoreTake+0x28>
    17e2:	8a 81       	ldd	r24, Y+2	; 0x02
    17e4:	88 23       	and	r24, r24
    17e6:	91 f0       	breq	.+36     	; 0x180c <xQueueSemaphoreTake+0x1ae>
    17e8:	0f b6       	in	r0, 0x3f	; 63
    17ea:	f8 94       	cli
    17ec:	0f 92       	push	r0
    17ee:	8b 81       	ldd	r24, Y+3	; 0x03
    17f0:	9c 81       	ldd	r25, Y+4	; 0x04
    17f2:	0e 94 10 0c 	call	0x1820	; 0x1820 <prvGetDisinheritPriorityAfterTimeout>
    17f6:	8e 83       	std	Y+6, r24	; 0x06
    17f8:	8b 81       	ldd	r24, Y+3	; 0x03
    17fa:	9c 81       	ldd	r25, Y+4	; 0x04
    17fc:	fc 01       	movw	r30, r24
    17fe:	84 81       	ldd	r24, Z+4	; 0x04
    1800:	95 81       	ldd	r25, Z+5	; 0x05
    1802:	6e 81       	ldd	r22, Y+6	; 0x06
    1804:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <vTaskPriorityDisinheritAfterTimeout>
    1808:	0f 90       	pop	r0
    180a:	0f be       	out	0x3f, r0	; 63
    180c:	80 e0       	ldi	r24, 0x00	; 0
    180e:	2d 96       	adiw	r28, 0x0d	; 13
    1810:	0f b6       	in	r0, 0x3f	; 63
    1812:	f8 94       	cli
    1814:	de bf       	out	0x3e, r29	; 62
    1816:	0f be       	out	0x3f, r0	; 63
    1818:	cd bf       	out	0x3d, r28	; 61
    181a:	df 91       	pop	r29
    181c:	cf 91       	pop	r28
    181e:	08 95       	ret

00001820 <prvGetDisinheritPriorityAfterTimeout>:
    1820:	cf 93       	push	r28
    1822:	df 93       	push	r29
    1824:	00 d0       	rcall	.+0      	; 0x1826 <prvGetDisinheritPriorityAfterTimeout+0x6>
    1826:	1f 92       	push	r1
    1828:	cd b7       	in	r28, 0x3d	; 61
    182a:	de b7       	in	r29, 0x3e	; 62
    182c:	9b 83       	std	Y+3, r25	; 0x03
    182e:	8a 83       	std	Y+2, r24	; 0x02
    1830:	8a 81       	ldd	r24, Y+2	; 0x02
    1832:	9b 81       	ldd	r25, Y+3	; 0x03
    1834:	fc 01       	movw	r30, r24
    1836:	81 89       	ldd	r24, Z+17	; 0x11
    1838:	88 23       	and	r24, r24
    183a:	69 f0       	breq	.+26     	; 0x1856 <prvGetDisinheritPriorityAfterTimeout+0x36>
    183c:	8a 81       	ldd	r24, Y+2	; 0x02
    183e:	9b 81       	ldd	r25, Y+3	; 0x03
    1840:	fc 01       	movw	r30, r24
    1842:	86 89       	ldd	r24, Z+22	; 0x16
    1844:	97 89       	ldd	r25, Z+23	; 0x17
    1846:	fc 01       	movw	r30, r24
    1848:	80 81       	ld	r24, Z
    184a:	91 81       	ldd	r25, Z+1	; 0x01
    184c:	98 2f       	mov	r25, r24
    184e:	86 e0       	ldi	r24, 0x06	; 6
    1850:	89 1b       	sub	r24, r25
    1852:	89 83       	std	Y+1, r24	; 0x01
    1854:	01 c0       	rjmp	.+2      	; 0x1858 <prvGetDisinheritPriorityAfterTimeout+0x38>
    1856:	19 82       	std	Y+1, r1	; 0x01
    1858:	89 81       	ldd	r24, Y+1	; 0x01
    185a:	0f 90       	pop	r0
    185c:	0f 90       	pop	r0
    185e:	0f 90       	pop	r0
    1860:	df 91       	pop	r29
    1862:	cf 91       	pop	r28
    1864:	08 95       	ret

00001866 <prvCopyDataToQueue>:
    1866:	cf 93       	push	r28
    1868:	df 93       	push	r29
    186a:	cd b7       	in	r28, 0x3d	; 61
    186c:	de b7       	in	r29, 0x3e	; 62
    186e:	27 97       	sbiw	r28, 0x07	; 7
    1870:	0f b6       	in	r0, 0x3f	; 63
    1872:	f8 94       	cli
    1874:	de bf       	out	0x3e, r29	; 62
    1876:	0f be       	out	0x3f, r0	; 63
    1878:	cd bf       	out	0x3d, r28	; 61
    187a:	9c 83       	std	Y+4, r25	; 0x04
    187c:	8b 83       	std	Y+3, r24	; 0x03
    187e:	7e 83       	std	Y+6, r23	; 0x06
    1880:	6d 83       	std	Y+5, r22	; 0x05
    1882:	4f 83       	std	Y+7, r20	; 0x07
    1884:	19 82       	std	Y+1, r1	; 0x01
    1886:	8b 81       	ldd	r24, Y+3	; 0x03
    1888:	9c 81       	ldd	r25, Y+4	; 0x04
    188a:	fc 01       	movw	r30, r24
    188c:	82 8d       	ldd	r24, Z+26	; 0x1a
    188e:	8a 83       	std	Y+2, r24	; 0x02
    1890:	8b 81       	ldd	r24, Y+3	; 0x03
    1892:	9c 81       	ldd	r25, Y+4	; 0x04
    1894:	fc 01       	movw	r30, r24
    1896:	84 8d       	ldd	r24, Z+28	; 0x1c
    1898:	88 23       	and	r24, r24
    189a:	b1 f4       	brne	.+44     	; 0x18c8 <prvCopyDataToQueue+0x62>
    189c:	8b 81       	ldd	r24, Y+3	; 0x03
    189e:	9c 81       	ldd	r25, Y+4	; 0x04
    18a0:	fc 01       	movw	r30, r24
    18a2:	80 81       	ld	r24, Z
    18a4:	91 81       	ldd	r25, Z+1	; 0x01
    18a6:	89 2b       	or	r24, r25
    18a8:	09 f0       	breq	.+2      	; 0x18ac <prvCopyDataToQueue+0x46>
    18aa:	9c c0       	rjmp	.+312    	; 0x19e4 <prvCopyDataToQueue+0x17e>
    18ac:	8b 81       	ldd	r24, Y+3	; 0x03
    18ae:	9c 81       	ldd	r25, Y+4	; 0x04
    18b0:	fc 01       	movw	r30, r24
    18b2:	84 81       	ldd	r24, Z+4	; 0x04
    18b4:	95 81       	ldd	r25, Z+5	; 0x05
    18b6:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <xTaskPriorityDisinherit>
    18ba:	89 83       	std	Y+1, r24	; 0x01
    18bc:	8b 81       	ldd	r24, Y+3	; 0x03
    18be:	9c 81       	ldd	r25, Y+4	; 0x04
    18c0:	fc 01       	movw	r30, r24
    18c2:	15 82       	std	Z+5, r1	; 0x05
    18c4:	14 82       	std	Z+4, r1	; 0x04
    18c6:	8e c0       	rjmp	.+284    	; 0x19e4 <prvCopyDataToQueue+0x17e>
    18c8:	8f 81       	ldd	r24, Y+7	; 0x07
    18ca:	88 23       	and	r24, r24
    18cc:	d9 f5       	brne	.+118    	; 0x1944 <prvCopyDataToQueue+0xde>
    18ce:	8b 81       	ldd	r24, Y+3	; 0x03
    18d0:	9c 81       	ldd	r25, Y+4	; 0x04
    18d2:	fc 01       	movw	r30, r24
    18d4:	84 8d       	ldd	r24, Z+28	; 0x1c
    18d6:	48 2f       	mov	r20, r24
    18d8:	50 e0       	ldi	r21, 0x00	; 0
    18da:	8b 81       	ldd	r24, Y+3	; 0x03
    18dc:	9c 81       	ldd	r25, Y+4	; 0x04
    18de:	fc 01       	movw	r30, r24
    18e0:	82 81       	ldd	r24, Z+2	; 0x02
    18e2:	93 81       	ldd	r25, Z+3	; 0x03
    18e4:	2d 81       	ldd	r18, Y+5	; 0x05
    18e6:	3e 81       	ldd	r19, Y+6	; 0x06
    18e8:	b9 01       	movw	r22, r18
    18ea:	0e 94 9f 18 	call	0x313e	; 0x313e <memcpy>
    18ee:	8b 81       	ldd	r24, Y+3	; 0x03
    18f0:	9c 81       	ldd	r25, Y+4	; 0x04
    18f2:	fc 01       	movw	r30, r24
    18f4:	22 81       	ldd	r18, Z+2	; 0x02
    18f6:	33 81       	ldd	r19, Z+3	; 0x03
    18f8:	8b 81       	ldd	r24, Y+3	; 0x03
    18fa:	9c 81       	ldd	r25, Y+4	; 0x04
    18fc:	fc 01       	movw	r30, r24
    18fe:	84 8d       	ldd	r24, Z+28	; 0x1c
    1900:	88 2f       	mov	r24, r24
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	28 0f       	add	r18, r24
    1906:	39 1f       	adc	r19, r25
    1908:	8b 81       	ldd	r24, Y+3	; 0x03
    190a:	9c 81       	ldd	r25, Y+4	; 0x04
    190c:	fc 01       	movw	r30, r24
    190e:	33 83       	std	Z+3, r19	; 0x03
    1910:	22 83       	std	Z+2, r18	; 0x02
    1912:	8b 81       	ldd	r24, Y+3	; 0x03
    1914:	9c 81       	ldd	r25, Y+4	; 0x04
    1916:	fc 01       	movw	r30, r24
    1918:	22 81       	ldd	r18, Z+2	; 0x02
    191a:	33 81       	ldd	r19, Z+3	; 0x03
    191c:	8b 81       	ldd	r24, Y+3	; 0x03
    191e:	9c 81       	ldd	r25, Y+4	; 0x04
    1920:	fc 01       	movw	r30, r24
    1922:	84 81       	ldd	r24, Z+4	; 0x04
    1924:	95 81       	ldd	r25, Z+5	; 0x05
    1926:	28 17       	cp	r18, r24
    1928:	39 07       	cpc	r19, r25
    192a:	08 f4       	brcc	.+2      	; 0x192e <prvCopyDataToQueue+0xc8>
    192c:	5b c0       	rjmp	.+182    	; 0x19e4 <prvCopyDataToQueue+0x17e>
    192e:	8b 81       	ldd	r24, Y+3	; 0x03
    1930:	9c 81       	ldd	r25, Y+4	; 0x04
    1932:	fc 01       	movw	r30, r24
    1934:	20 81       	ld	r18, Z
    1936:	31 81       	ldd	r19, Z+1	; 0x01
    1938:	8b 81       	ldd	r24, Y+3	; 0x03
    193a:	9c 81       	ldd	r25, Y+4	; 0x04
    193c:	fc 01       	movw	r30, r24
    193e:	33 83       	std	Z+3, r19	; 0x03
    1940:	22 83       	std	Z+2, r18	; 0x02
    1942:	50 c0       	rjmp	.+160    	; 0x19e4 <prvCopyDataToQueue+0x17e>
    1944:	8b 81       	ldd	r24, Y+3	; 0x03
    1946:	9c 81       	ldd	r25, Y+4	; 0x04
    1948:	fc 01       	movw	r30, r24
    194a:	84 8d       	ldd	r24, Z+28	; 0x1c
    194c:	48 2f       	mov	r20, r24
    194e:	50 e0       	ldi	r21, 0x00	; 0
    1950:	8b 81       	ldd	r24, Y+3	; 0x03
    1952:	9c 81       	ldd	r25, Y+4	; 0x04
    1954:	fc 01       	movw	r30, r24
    1956:	86 81       	ldd	r24, Z+6	; 0x06
    1958:	97 81       	ldd	r25, Z+7	; 0x07
    195a:	2d 81       	ldd	r18, Y+5	; 0x05
    195c:	3e 81       	ldd	r19, Y+6	; 0x06
    195e:	b9 01       	movw	r22, r18
    1960:	0e 94 9f 18 	call	0x313e	; 0x313e <memcpy>
    1964:	8b 81       	ldd	r24, Y+3	; 0x03
    1966:	9c 81       	ldd	r25, Y+4	; 0x04
    1968:	fc 01       	movw	r30, r24
    196a:	26 81       	ldd	r18, Z+6	; 0x06
    196c:	37 81       	ldd	r19, Z+7	; 0x07
    196e:	8b 81       	ldd	r24, Y+3	; 0x03
    1970:	9c 81       	ldd	r25, Y+4	; 0x04
    1972:	fc 01       	movw	r30, r24
    1974:	84 8d       	ldd	r24, Z+28	; 0x1c
    1976:	88 2f       	mov	r24, r24
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	91 95       	neg	r25
    197c:	81 95       	neg	r24
    197e:	91 09       	sbc	r25, r1
    1980:	28 0f       	add	r18, r24
    1982:	39 1f       	adc	r19, r25
    1984:	8b 81       	ldd	r24, Y+3	; 0x03
    1986:	9c 81       	ldd	r25, Y+4	; 0x04
    1988:	fc 01       	movw	r30, r24
    198a:	37 83       	std	Z+7, r19	; 0x07
    198c:	26 83       	std	Z+6, r18	; 0x06
    198e:	8b 81       	ldd	r24, Y+3	; 0x03
    1990:	9c 81       	ldd	r25, Y+4	; 0x04
    1992:	fc 01       	movw	r30, r24
    1994:	26 81       	ldd	r18, Z+6	; 0x06
    1996:	37 81       	ldd	r19, Z+7	; 0x07
    1998:	8b 81       	ldd	r24, Y+3	; 0x03
    199a:	9c 81       	ldd	r25, Y+4	; 0x04
    199c:	fc 01       	movw	r30, r24
    199e:	80 81       	ld	r24, Z
    19a0:	91 81       	ldd	r25, Z+1	; 0x01
    19a2:	28 17       	cp	r18, r24
    19a4:	39 07       	cpc	r19, r25
    19a6:	a8 f4       	brcc	.+42     	; 0x19d2 <prvCopyDataToQueue+0x16c>
    19a8:	8b 81       	ldd	r24, Y+3	; 0x03
    19aa:	9c 81       	ldd	r25, Y+4	; 0x04
    19ac:	fc 01       	movw	r30, r24
    19ae:	24 81       	ldd	r18, Z+4	; 0x04
    19b0:	35 81       	ldd	r19, Z+5	; 0x05
    19b2:	8b 81       	ldd	r24, Y+3	; 0x03
    19b4:	9c 81       	ldd	r25, Y+4	; 0x04
    19b6:	fc 01       	movw	r30, r24
    19b8:	84 8d       	ldd	r24, Z+28	; 0x1c
    19ba:	88 2f       	mov	r24, r24
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	91 95       	neg	r25
    19c0:	81 95       	neg	r24
    19c2:	91 09       	sbc	r25, r1
    19c4:	28 0f       	add	r18, r24
    19c6:	39 1f       	adc	r19, r25
    19c8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ca:	9c 81       	ldd	r25, Y+4	; 0x04
    19cc:	fc 01       	movw	r30, r24
    19ce:	37 83       	std	Z+7, r19	; 0x07
    19d0:	26 83       	std	Z+6, r18	; 0x06
    19d2:	8f 81       	ldd	r24, Y+7	; 0x07
    19d4:	82 30       	cpi	r24, 0x02	; 2
    19d6:	31 f4       	brne	.+12     	; 0x19e4 <prvCopyDataToQueue+0x17e>
    19d8:	8a 81       	ldd	r24, Y+2	; 0x02
    19da:	88 23       	and	r24, r24
    19dc:	19 f0       	breq	.+6      	; 0x19e4 <prvCopyDataToQueue+0x17e>
    19de:	8a 81       	ldd	r24, Y+2	; 0x02
    19e0:	81 50       	subi	r24, 0x01	; 1
    19e2:	8a 83       	std	Y+2, r24	; 0x02
    19e4:	8a 81       	ldd	r24, Y+2	; 0x02
    19e6:	21 e0       	ldi	r18, 0x01	; 1
    19e8:	28 0f       	add	r18, r24
    19ea:	8b 81       	ldd	r24, Y+3	; 0x03
    19ec:	9c 81       	ldd	r25, Y+4	; 0x04
    19ee:	fc 01       	movw	r30, r24
    19f0:	22 8f       	std	Z+26, r18	; 0x1a
    19f2:	89 81       	ldd	r24, Y+1	; 0x01
    19f4:	27 96       	adiw	r28, 0x07	; 7
    19f6:	0f b6       	in	r0, 0x3f	; 63
    19f8:	f8 94       	cli
    19fa:	de bf       	out	0x3e, r29	; 62
    19fc:	0f be       	out	0x3f, r0	; 63
    19fe:	cd bf       	out	0x3d, r28	; 61
    1a00:	df 91       	pop	r29
    1a02:	cf 91       	pop	r28
    1a04:	08 95       	ret

00001a06 <prvUnlockQueue>:
    1a06:	cf 93       	push	r28
    1a08:	df 93       	push	r29
    1a0a:	00 d0       	rcall	.+0      	; 0x1a0c <prvUnlockQueue+0x6>
    1a0c:	00 d0       	rcall	.+0      	; 0x1a0e <prvUnlockQueue+0x8>
    1a0e:	cd b7       	in	r28, 0x3d	; 61
    1a10:	de b7       	in	r29, 0x3e	; 62
    1a12:	9c 83       	std	Y+4, r25	; 0x04
    1a14:	8b 83       	std	Y+3, r24	; 0x03
    1a16:	0f b6       	in	r0, 0x3f	; 63
    1a18:	f8 94       	cli
    1a1a:	0f 92       	push	r0
    1a1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a20:	fc 01       	movw	r30, r24
    1a22:	86 8d       	ldd	r24, Z+30	; 0x1e
    1a24:	89 83       	std	Y+1, r24	; 0x01
    1a26:	12 c0       	rjmp	.+36     	; 0x1a4c <prvUnlockQueue+0x46>
    1a28:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a2c:	fc 01       	movw	r30, r24
    1a2e:	81 89       	ldd	r24, Z+17	; 0x11
    1a30:	88 23       	and	r24, r24
    1a32:	81 f0       	breq	.+32     	; 0x1a54 <prvUnlockQueue+0x4e>
    1a34:	8b 81       	ldd	r24, Y+3	; 0x03
    1a36:	9c 81       	ldd	r25, Y+4	; 0x04
    1a38:	41 96       	adiw	r24, 0x11	; 17
    1a3a:	0e 94 f5 12 	call	0x25ea	; 0x25ea <xTaskRemoveFromEventList>
    1a3e:	88 23       	and	r24, r24
    1a40:	11 f0       	breq	.+4      	; 0x1a46 <prvUnlockQueue+0x40>
    1a42:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <vTaskMissedYield>
    1a46:	89 81       	ldd	r24, Y+1	; 0x01
    1a48:	81 50       	subi	r24, 0x01	; 1
    1a4a:	89 83       	std	Y+1, r24	; 0x01
    1a4c:	89 81       	ldd	r24, Y+1	; 0x01
    1a4e:	18 16       	cp	r1, r24
    1a50:	5c f3       	brlt	.-42     	; 0x1a28 <prvUnlockQueue+0x22>
    1a52:	01 c0       	rjmp	.+2      	; 0x1a56 <prvUnlockQueue+0x50>
    1a54:	00 00       	nop
    1a56:	8b 81       	ldd	r24, Y+3	; 0x03
    1a58:	9c 81       	ldd	r25, Y+4	; 0x04
    1a5a:	2f ef       	ldi	r18, 0xFF	; 255
    1a5c:	fc 01       	movw	r30, r24
    1a5e:	26 8f       	std	Z+30, r18	; 0x1e
    1a60:	0f 90       	pop	r0
    1a62:	0f be       	out	0x3f, r0	; 63
    1a64:	0f b6       	in	r0, 0x3f	; 63
    1a66:	f8 94       	cli
    1a68:	0f 92       	push	r0
    1a6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a6e:	fc 01       	movw	r30, r24
    1a70:	85 8d       	ldd	r24, Z+29	; 0x1d
    1a72:	8a 83       	std	Y+2, r24	; 0x02
    1a74:	12 c0       	rjmp	.+36     	; 0x1a9a <prvUnlockQueue+0x94>
    1a76:	8b 81       	ldd	r24, Y+3	; 0x03
    1a78:	9c 81       	ldd	r25, Y+4	; 0x04
    1a7a:	fc 01       	movw	r30, r24
    1a7c:	80 85       	ldd	r24, Z+8	; 0x08
    1a7e:	88 23       	and	r24, r24
    1a80:	81 f0       	breq	.+32     	; 0x1aa2 <prvUnlockQueue+0x9c>
    1a82:	8b 81       	ldd	r24, Y+3	; 0x03
    1a84:	9c 81       	ldd	r25, Y+4	; 0x04
    1a86:	08 96       	adiw	r24, 0x08	; 8
    1a88:	0e 94 f5 12 	call	0x25ea	; 0x25ea <xTaskRemoveFromEventList>
    1a8c:	88 23       	and	r24, r24
    1a8e:	11 f0       	breq	.+4      	; 0x1a94 <prvUnlockQueue+0x8e>
    1a90:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <vTaskMissedYield>
    1a94:	8a 81       	ldd	r24, Y+2	; 0x02
    1a96:	81 50       	subi	r24, 0x01	; 1
    1a98:	8a 83       	std	Y+2, r24	; 0x02
    1a9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9c:	18 16       	cp	r1, r24
    1a9e:	5c f3       	brlt	.-42     	; 0x1a76 <prvUnlockQueue+0x70>
    1aa0:	01 c0       	rjmp	.+2      	; 0x1aa4 <prvUnlockQueue+0x9e>
    1aa2:	00 00       	nop
    1aa4:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa6:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa8:	2f ef       	ldi	r18, 0xFF	; 255
    1aaa:	fc 01       	movw	r30, r24
    1aac:	25 8f       	std	Z+29, r18	; 0x1d
    1aae:	0f 90       	pop	r0
    1ab0:	0f be       	out	0x3f, r0	; 63
    1ab2:	00 00       	nop
    1ab4:	0f 90       	pop	r0
    1ab6:	0f 90       	pop	r0
    1ab8:	0f 90       	pop	r0
    1aba:	0f 90       	pop	r0
    1abc:	df 91       	pop	r29
    1abe:	cf 91       	pop	r28
    1ac0:	08 95       	ret

00001ac2 <prvIsQueueEmpty>:
    1ac2:	cf 93       	push	r28
    1ac4:	df 93       	push	r29
    1ac6:	00 d0       	rcall	.+0      	; 0x1ac8 <prvIsQueueEmpty+0x6>
    1ac8:	1f 92       	push	r1
    1aca:	cd b7       	in	r28, 0x3d	; 61
    1acc:	de b7       	in	r29, 0x3e	; 62
    1ace:	9b 83       	std	Y+3, r25	; 0x03
    1ad0:	8a 83       	std	Y+2, r24	; 0x02
    1ad2:	0f b6       	in	r0, 0x3f	; 63
    1ad4:	f8 94       	cli
    1ad6:	0f 92       	push	r0
    1ad8:	8a 81       	ldd	r24, Y+2	; 0x02
    1ada:	9b 81       	ldd	r25, Y+3	; 0x03
    1adc:	fc 01       	movw	r30, r24
    1ade:	82 8d       	ldd	r24, Z+26	; 0x1a
    1ae0:	88 23       	and	r24, r24
    1ae2:	19 f4       	brne	.+6      	; 0x1aea <prvIsQueueEmpty+0x28>
    1ae4:	81 e0       	ldi	r24, 0x01	; 1
    1ae6:	89 83       	std	Y+1, r24	; 0x01
    1ae8:	01 c0       	rjmp	.+2      	; 0x1aec <prvIsQueueEmpty+0x2a>
    1aea:	19 82       	std	Y+1, r1	; 0x01
    1aec:	0f 90       	pop	r0
    1aee:	0f be       	out	0x3f, r0	; 63
    1af0:	89 81       	ldd	r24, Y+1	; 0x01
    1af2:	0f 90       	pop	r0
    1af4:	0f 90       	pop	r0
    1af6:	0f 90       	pop	r0
    1af8:	df 91       	pop	r29
    1afa:	cf 91       	pop	r28
    1afc:	08 95       	ret

00001afe <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    1afe:	cf 93       	push	r28
    1b00:	df 93       	push	r29
    1b02:	00 d0       	rcall	.+0      	; 0x1b04 <prvIsQueueFull+0x6>
    1b04:	1f 92       	push	r1
    1b06:	cd b7       	in	r28, 0x3d	; 61
    1b08:	de b7       	in	r29, 0x3e	; 62
    1b0a:	9b 83       	std	Y+3, r25	; 0x03
    1b0c:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	taskENTER_CRITICAL();
    1b0e:	0f b6       	in	r0, 0x3f	; 63
    1b10:	f8 94       	cli
    1b12:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    1b14:	8a 81       	ldd	r24, Y+2	; 0x02
    1b16:	9b 81       	ldd	r25, Y+3	; 0x03
    1b18:	fc 01       	movw	r30, r24
    1b1a:	22 8d       	ldd	r18, Z+26	; 0x1a
    1b1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1e:	9b 81       	ldd	r25, Y+3	; 0x03
    1b20:	fc 01       	movw	r30, r24
    1b22:	83 8d       	ldd	r24, Z+27	; 0x1b
    1b24:	28 17       	cp	r18, r24
    1b26:	19 f4       	brne	.+6      	; 0x1b2e <prvIsQueueFull+0x30>
		{
			xReturn = pdTRUE;
    1b28:	81 e0       	ldi	r24, 0x01	; 1
    1b2a:	89 83       	std	Y+1, r24	; 0x01
    1b2c:	01 c0       	rjmp	.+2      	; 0x1b30 <prvIsQueueFull+0x32>
		}
		else
		{
			xReturn = pdFALSE;
    1b2e:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    1b30:	0f 90       	pop	r0
    1b32:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    1b34:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b36:	0f 90       	pop	r0
    1b38:	0f 90       	pop	r0
    1b3a:	0f 90       	pop	r0
    1b3c:	df 91       	pop	r29
    1b3e:	cf 91       	pop	r28
    1b40:	08 95       	ret

00001b42 <xTaskCreate>:
			}
		}
		taskEXIT_CRITICAL();

		return xReturn;
	}
    1b42:	8f 92       	push	r8
    1b44:	9f 92       	push	r9
    1b46:	af 92       	push	r10
    1b48:	bf 92       	push	r11
    1b4a:	cf 92       	push	r12
    1b4c:	df 92       	push	r13
    1b4e:	ef 92       	push	r14
    1b50:	ff 92       	push	r15
    1b52:	0f 93       	push	r16
    1b54:	1f 93       	push	r17
    1b56:	cf 93       	push	r28
    1b58:	df 93       	push	r29
    1b5a:	cd b7       	in	r28, 0x3d	; 61
    1b5c:	de b7       	in	r29, 0x3e	; 62
    1b5e:	60 97       	sbiw	r28, 0x10	; 16
    1b60:	0f b6       	in	r0, 0x3f	; 63
    1b62:	f8 94       	cli
    1b64:	de bf       	out	0x3e, r29	; 62
    1b66:	0f be       	out	0x3f, r0	; 63
    1b68:	cd bf       	out	0x3d, r28	; 61
    1b6a:	9f 83       	std	Y+7, r25	; 0x07
    1b6c:	8e 83       	std	Y+6, r24	; 0x06
    1b6e:	79 87       	std	Y+9, r23	; 0x09
    1b70:	68 87       	std	Y+8, r22	; 0x08
    1b72:	5b 87       	std	Y+11, r21	; 0x0b
    1b74:	4a 87       	std	Y+10, r20	; 0x0a
    1b76:	3d 87       	std	Y+13, r19	; 0x0d
    1b78:	2c 87       	std	Y+12, r18	; 0x0c
    1b7a:	0e 87       	std	Y+14, r16	; 0x0e
    1b7c:	f8 8a       	std	Y+16, r15	; 0x10
    1b7e:	ef 86       	std	Y+15, r14	; 0x0f
    1b80:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b82:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b84:	0e 94 4f 04 	call	0x89e	; 0x89e <pvPortMalloc>
    1b88:	9d 83       	std	Y+5, r25	; 0x05
    1b8a:	8c 83       	std	Y+4, r24	; 0x04
    1b8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b8e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b90:	89 2b       	or	r24, r25
    1b92:	b9 f0       	breq	.+46     	; 0x1bc2 <xTaskCreate+0x80>
    1b94:	88 e2       	ldi	r24, 0x28	; 40
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	0e 94 4f 04 	call	0x89e	; 0x89e <pvPortMalloc>
    1b9c:	9a 83       	std	Y+2, r25	; 0x02
    1b9e:	89 83       	std	Y+1, r24	; 0x01
    1ba0:	89 81       	ldd	r24, Y+1	; 0x01
    1ba2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ba4:	89 2b       	or	r24, r25
    1ba6:	41 f0       	breq	.+16     	; 0x1bb8 <xTaskCreate+0x76>
    1ba8:	89 81       	ldd	r24, Y+1	; 0x01
    1baa:	9a 81       	ldd	r25, Y+2	; 0x02
    1bac:	2c 81       	ldd	r18, Y+4	; 0x04
    1bae:	3d 81       	ldd	r19, Y+5	; 0x05
    1bb0:	fc 01       	movw	r30, r24
    1bb2:	30 8f       	std	Z+24, r19	; 0x18
    1bb4:	27 8b       	std	Z+23, r18	; 0x17
    1bb6:	07 c0       	rjmp	.+14     	; 0x1bc6 <xTaskCreate+0x84>
    1bb8:	8c 81       	ldd	r24, Y+4	; 0x04
    1bba:	9d 81       	ldd	r25, Y+5	; 0x05
    1bbc:	0e 94 a4 04 	call	0x948	; 0x948 <vPortFree>
    1bc0:	02 c0       	rjmp	.+4      	; 0x1bc6 <xTaskCreate+0x84>
    1bc2:	1a 82       	std	Y+2, r1	; 0x02
    1bc4:	19 82       	std	Y+1, r1	; 0x01
    1bc6:	89 81       	ldd	r24, Y+1	; 0x01
    1bc8:	9a 81       	ldd	r25, Y+2	; 0x02
    1bca:	89 2b       	or	r24, r25
    1bcc:	09 f1       	breq	.+66     	; 0x1c10 <xTaskCreate+0xce>
    1bce:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bd0:	9b 85       	ldd	r25, Y+11	; 0x0b
    1bd2:	cc 01       	movw	r24, r24
    1bd4:	a0 e0       	ldi	r26, 0x00	; 0
    1bd6:	b0 e0       	ldi	r27, 0x00	; 0
    1bd8:	09 81       	ldd	r16, Y+1	; 0x01
    1bda:	1a 81       	ldd	r17, Y+2	; 0x02
    1bdc:	4f 85       	ldd	r20, Y+15	; 0x0f
    1bde:	58 89       	ldd	r21, Y+16	; 0x10
    1be0:	2c 85       	ldd	r18, Y+12	; 0x0c
    1be2:	3d 85       	ldd	r19, Y+13	; 0x0d
    1be4:	68 85       	ldd	r22, Y+8	; 0x08
    1be6:	79 85       	ldd	r23, Y+9	; 0x09
    1be8:	ee 81       	ldd	r30, Y+6	; 0x06
    1bea:	ff 81       	ldd	r31, Y+7	; 0x07
    1bec:	81 2c       	mov	r8, r1
    1bee:	91 2c       	mov	r9, r1
    1bf0:	58 01       	movw	r10, r16
    1bf2:	6a 01       	movw	r12, r20
    1bf4:	ee 84       	ldd	r14, Y+14	; 0x0e
    1bf6:	89 01       	movw	r16, r18
    1bf8:	9c 01       	movw	r18, r24
    1bfa:	ad 01       	movw	r20, r26
    1bfc:	cf 01       	movw	r24, r30
    1bfe:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <prvInitialiseNewTask>
    1c02:	89 81       	ldd	r24, Y+1	; 0x01
    1c04:	9a 81       	ldd	r25, Y+2	; 0x02
    1c06:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <prvAddNewTaskToReadyList>
    1c0a:	81 e0       	ldi	r24, 0x01	; 1
    1c0c:	8b 83       	std	Y+3, r24	; 0x03
    1c0e:	02 c0       	rjmp	.+4      	; 0x1c14 <xTaskCreate+0xd2>
    1c10:	8f ef       	ldi	r24, 0xFF	; 255
    1c12:	8b 83       	std	Y+3, r24	; 0x03
    1c14:	8b 81       	ldd	r24, Y+3	; 0x03
    1c16:	60 96       	adiw	r28, 0x10	; 16
    1c18:	0f b6       	in	r0, 0x3f	; 63
    1c1a:	f8 94       	cli
    1c1c:	de bf       	out	0x3e, r29	; 62
    1c1e:	0f be       	out	0x3f, r0	; 63
    1c20:	cd bf       	out	0x3d, r28	; 61
    1c22:	df 91       	pop	r29
    1c24:	cf 91       	pop	r28
    1c26:	1f 91       	pop	r17
    1c28:	0f 91       	pop	r16
    1c2a:	ff 90       	pop	r15
    1c2c:	ef 90       	pop	r14
    1c2e:	df 90       	pop	r13
    1c30:	cf 90       	pop	r12
    1c32:	bf 90       	pop	r11
    1c34:	af 90       	pop	r10
    1c36:	9f 90       	pop	r9
    1c38:	8f 90       	pop	r8
    1c3a:	08 95       	ret

00001c3c <prvInitialiseNewTask>:
    1c3c:	8f 92       	push	r8
    1c3e:	9f 92       	push	r9
    1c40:	af 92       	push	r10
    1c42:	bf 92       	push	r11
    1c44:	cf 92       	push	r12
    1c46:	df 92       	push	r13
    1c48:	ef 92       	push	r14
    1c4a:	0f 93       	push	r16
    1c4c:	1f 93       	push	r17
    1c4e:	cf 93       	push	r28
    1c50:	df 93       	push	r29
    1c52:	cd b7       	in	r28, 0x3d	; 61
    1c54:	de b7       	in	r29, 0x3e	; 62
    1c56:	64 97       	sbiw	r28, 0x14	; 20
    1c58:	0f b6       	in	r0, 0x3f	; 63
    1c5a:	f8 94       	cli
    1c5c:	de bf       	out	0x3e, r29	; 62
    1c5e:	0f be       	out	0x3f, r0	; 63
    1c60:	cd bf       	out	0x3d, r28	; 61
    1c62:	9d 83       	std	Y+5, r25	; 0x05
    1c64:	8c 83       	std	Y+4, r24	; 0x04
    1c66:	7f 83       	std	Y+7, r23	; 0x07
    1c68:	6e 83       	std	Y+6, r22	; 0x06
    1c6a:	28 87       	std	Y+8, r18	; 0x08
    1c6c:	39 87       	std	Y+9, r19	; 0x09
    1c6e:	4a 87       	std	Y+10, r20	; 0x0a
    1c70:	5b 87       	std	Y+11, r21	; 0x0b
    1c72:	1d 87       	std	Y+13, r17	; 0x0d
    1c74:	0c 87       	std	Y+12, r16	; 0x0c
    1c76:	ee 86       	std	Y+14, r14	; 0x0e
    1c78:	d8 8a       	std	Y+16, r13	; 0x10
    1c7a:	cf 86       	std	Y+15, r12	; 0x0f
    1c7c:	ba 8a       	std	Y+18, r11	; 0x12
    1c7e:	a9 8a       	std	Y+17, r10	; 0x11
    1c80:	9c 8a       	std	Y+20, r9	; 0x14
    1c82:	8b 8a       	std	Y+19, r8	; 0x13
    1c84:	89 89       	ldd	r24, Y+17	; 0x11
    1c86:	9a 89       	ldd	r25, Y+18	; 0x12
    1c88:	fc 01       	movw	r30, r24
    1c8a:	27 89       	ldd	r18, Z+23	; 0x17
    1c8c:	30 8d       	ldd	r19, Z+24	; 0x18
    1c8e:	88 85       	ldd	r24, Y+8	; 0x08
    1c90:	99 85       	ldd	r25, Y+9	; 0x09
    1c92:	01 97       	sbiw	r24, 0x01	; 1
    1c94:	82 0f       	add	r24, r18
    1c96:	93 1f       	adc	r25, r19
    1c98:	9b 83       	std	Y+3, r25	; 0x03
    1c9a:	8a 83       	std	Y+2, r24	; 0x02
    1c9c:	8e 81       	ldd	r24, Y+6	; 0x06
    1c9e:	9f 81       	ldd	r25, Y+7	; 0x07
    1ca0:	89 2b       	or	r24, r25
    1ca2:	69 f1       	breq	.+90     	; 0x1cfe <prvInitialiseNewTask+0xc2>
    1ca4:	19 82       	std	Y+1, r1	; 0x01
    1ca6:	21 c0       	rjmp	.+66     	; 0x1cea <prvInitialiseNewTask+0xae>
    1ca8:	89 81       	ldd	r24, Y+1	; 0x01
    1caa:	88 2f       	mov	r24, r24
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	29 81       	ldd	r18, Y+1	; 0x01
    1cb0:	22 2f       	mov	r18, r18
    1cb2:	30 e0       	ldi	r19, 0x00	; 0
    1cb4:	4e 81       	ldd	r20, Y+6	; 0x06
    1cb6:	5f 81       	ldd	r21, Y+7	; 0x07
    1cb8:	24 0f       	add	r18, r20
    1cba:	35 1f       	adc	r19, r21
    1cbc:	f9 01       	movw	r30, r18
    1cbe:	40 81       	ld	r20, Z
    1cc0:	29 89       	ldd	r18, Y+17	; 0x11
    1cc2:	3a 89       	ldd	r19, Y+18	; 0x12
    1cc4:	82 0f       	add	r24, r18
    1cc6:	93 1f       	adc	r25, r19
    1cc8:	49 96       	adiw	r24, 0x19	; 25
    1cca:	fc 01       	movw	r30, r24
    1ccc:	40 83       	st	Z, r20
    1cce:	89 81       	ldd	r24, Y+1	; 0x01
    1cd0:	88 2f       	mov	r24, r24
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	2e 81       	ldd	r18, Y+6	; 0x06
    1cd6:	3f 81       	ldd	r19, Y+7	; 0x07
    1cd8:	82 0f       	add	r24, r18
    1cda:	93 1f       	adc	r25, r19
    1cdc:	fc 01       	movw	r30, r24
    1cde:	80 81       	ld	r24, Z
    1ce0:	88 23       	and	r24, r24
    1ce2:	39 f0       	breq	.+14     	; 0x1cf2 <prvInitialiseNewTask+0xb6>
    1ce4:	89 81       	ldd	r24, Y+1	; 0x01
    1ce6:	8f 5f       	subi	r24, 0xFF	; 255
    1ce8:	89 83       	std	Y+1, r24	; 0x01
    1cea:	89 81       	ldd	r24, Y+1	; 0x01
    1cec:	88 30       	cpi	r24, 0x08	; 8
    1cee:	e0 f2       	brcs	.-72     	; 0x1ca8 <prvInitialiseNewTask+0x6c>
    1cf0:	01 c0       	rjmp	.+2      	; 0x1cf4 <prvInitialiseNewTask+0xb8>
    1cf2:	00 00       	nop
    1cf4:	89 89       	ldd	r24, Y+17	; 0x11
    1cf6:	9a 89       	ldd	r25, Y+18	; 0x12
    1cf8:	fc 01       	movw	r30, r24
    1cfa:	10 a2       	std	Z+32, r1	; 0x20
    1cfc:	04 c0       	rjmp	.+8      	; 0x1d06 <prvInitialiseNewTask+0xca>
    1cfe:	89 89       	ldd	r24, Y+17	; 0x11
    1d00:	9a 89       	ldd	r25, Y+18	; 0x12
    1d02:	fc 01       	movw	r30, r24
    1d04:	11 8e       	std	Z+25, r1	; 0x19
    1d06:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d08:	86 30       	cpi	r24, 0x06	; 6
    1d0a:	10 f0       	brcs	.+4      	; 0x1d10 <prvInitialiseNewTask+0xd4>
    1d0c:	85 e0       	ldi	r24, 0x05	; 5
    1d0e:	8e 87       	std	Y+14, r24	; 0x0e
    1d10:	89 89       	ldd	r24, Y+17	; 0x11
    1d12:	9a 89       	ldd	r25, Y+18	; 0x12
    1d14:	2e 85       	ldd	r18, Y+14	; 0x0e
    1d16:	fc 01       	movw	r30, r24
    1d18:	26 8b       	std	Z+22, r18	; 0x16
    1d1a:	89 89       	ldd	r24, Y+17	; 0x11
    1d1c:	9a 89       	ldd	r25, Y+18	; 0x12
    1d1e:	2e 85       	ldd	r18, Y+14	; 0x0e
    1d20:	fc 01       	movw	r30, r24
    1d22:	21 a3       	std	Z+33, r18	; 0x21
    1d24:	89 89       	ldd	r24, Y+17	; 0x11
    1d26:	9a 89       	ldd	r25, Y+18	; 0x12
    1d28:	fc 01       	movw	r30, r24
    1d2a:	12 a2       	std	Z+34, r1	; 0x22
    1d2c:	89 89       	ldd	r24, Y+17	; 0x11
    1d2e:	9a 89       	ldd	r25, Y+18	; 0x12
    1d30:	02 96       	adiw	r24, 0x02	; 2
    1d32:	0e 94 e7 04 	call	0x9ce	; 0x9ce <vListInitialiseItem>
    1d36:	89 89       	ldd	r24, Y+17	; 0x11
    1d38:	9a 89       	ldd	r25, Y+18	; 0x12
    1d3a:	0c 96       	adiw	r24, 0x0c	; 12
    1d3c:	0e 94 e7 04 	call	0x9ce	; 0x9ce <vListInitialiseItem>
    1d40:	89 89       	ldd	r24, Y+17	; 0x11
    1d42:	9a 89       	ldd	r25, Y+18	; 0x12
    1d44:	29 89       	ldd	r18, Y+17	; 0x11
    1d46:	3a 89       	ldd	r19, Y+18	; 0x12
    1d48:	fc 01       	movw	r30, r24
    1d4a:	31 87       	std	Z+9, r19	; 0x09
    1d4c:	20 87       	std	Z+8, r18	; 0x08
    1d4e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d50:	88 2f       	mov	r24, r24
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	26 e0       	ldi	r18, 0x06	; 6
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	28 1b       	sub	r18, r24
    1d5a:	39 0b       	sbc	r19, r25
    1d5c:	89 89       	ldd	r24, Y+17	; 0x11
    1d5e:	9a 89       	ldd	r25, Y+18	; 0x12
    1d60:	fc 01       	movw	r30, r24
    1d62:	35 87       	std	Z+13, r19	; 0x0d
    1d64:	24 87       	std	Z+12, r18	; 0x0c
    1d66:	89 89       	ldd	r24, Y+17	; 0x11
    1d68:	9a 89       	ldd	r25, Y+18	; 0x12
    1d6a:	29 89       	ldd	r18, Y+17	; 0x11
    1d6c:	3a 89       	ldd	r19, Y+18	; 0x12
    1d6e:	fc 01       	movw	r30, r24
    1d70:	33 8b       	std	Z+19, r19	; 0x13
    1d72:	22 8b       	std	Z+18, r18	; 0x12
    1d74:	89 89       	ldd	r24, Y+17	; 0x11
    1d76:	9a 89       	ldd	r25, Y+18	; 0x12
    1d78:	fc 01       	movw	r30, r24
    1d7a:	13 a2       	std	Z+35, r1	; 0x23
    1d7c:	14 a2       	std	Z+36, r1	; 0x24
    1d7e:	15 a2       	std	Z+37, r1	; 0x25
    1d80:	16 a2       	std	Z+38, r1	; 0x26
    1d82:	89 89       	ldd	r24, Y+17	; 0x11
    1d84:	9a 89       	ldd	r25, Y+18	; 0x12
    1d86:	fc 01       	movw	r30, r24
    1d88:	17 a2       	std	Z+39, r1	; 0x27
    1d8a:	4c 85       	ldd	r20, Y+12	; 0x0c
    1d8c:	5d 85       	ldd	r21, Y+13	; 0x0d
    1d8e:	2c 81       	ldd	r18, Y+4	; 0x04
    1d90:	3d 81       	ldd	r19, Y+5	; 0x05
    1d92:	8a 81       	ldd	r24, Y+2	; 0x02
    1d94:	9b 81       	ldd	r25, Y+3	; 0x03
    1d96:	b9 01       	movw	r22, r18
    1d98:	0e 94 17 06 	call	0xc2e	; 0xc2e <pxPortInitialiseStack>
    1d9c:	9c 01       	movw	r18, r24
    1d9e:	89 89       	ldd	r24, Y+17	; 0x11
    1da0:	9a 89       	ldd	r25, Y+18	; 0x12
    1da2:	fc 01       	movw	r30, r24
    1da4:	31 83       	std	Z+1, r19	; 0x01
    1da6:	20 83       	st	Z, r18
    1da8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1daa:	98 89       	ldd	r25, Y+16	; 0x10
    1dac:	89 2b       	or	r24, r25
    1dae:	39 f0       	breq	.+14     	; 0x1dbe <prvInitialiseNewTask+0x182>
    1db0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1db2:	98 89       	ldd	r25, Y+16	; 0x10
    1db4:	29 89       	ldd	r18, Y+17	; 0x11
    1db6:	3a 89       	ldd	r19, Y+18	; 0x12
    1db8:	fc 01       	movw	r30, r24
    1dba:	31 83       	std	Z+1, r19	; 0x01
    1dbc:	20 83       	st	Z, r18
    1dbe:	00 00       	nop
    1dc0:	64 96       	adiw	r28, 0x14	; 20
    1dc2:	0f b6       	in	r0, 0x3f	; 63
    1dc4:	f8 94       	cli
    1dc6:	de bf       	out	0x3e, r29	; 62
    1dc8:	0f be       	out	0x3f, r0	; 63
    1dca:	cd bf       	out	0x3d, r28	; 61
    1dcc:	df 91       	pop	r29
    1dce:	cf 91       	pop	r28
    1dd0:	1f 91       	pop	r17
    1dd2:	0f 91       	pop	r16
    1dd4:	ef 90       	pop	r14
    1dd6:	df 90       	pop	r13
    1dd8:	cf 90       	pop	r12
    1dda:	bf 90       	pop	r11
    1ddc:	af 90       	pop	r10
    1dde:	9f 90       	pop	r9
    1de0:	8f 90       	pop	r8
    1de2:	08 95       	ret

00001de4 <prvAddNewTaskToReadyList>:
    1de4:	cf 93       	push	r28
    1de6:	df 93       	push	r29
    1de8:	00 d0       	rcall	.+0      	; 0x1dea <prvAddNewTaskToReadyList+0x6>
    1dea:	cd b7       	in	r28, 0x3d	; 61
    1dec:	de b7       	in	r29, 0x3e	; 62
    1dee:	9a 83       	std	Y+2, r25	; 0x02
    1df0:	89 83       	std	Y+1, r24	; 0x01
    1df2:	0f b6       	in	r0, 0x3f	; 63
    1df4:	f8 94       	cli
    1df6:	0f 92       	push	r0
    1df8:	80 91 99 07 	lds	r24, 0x0799	; 0x800799 <uxCurrentNumberOfTasks>
    1dfc:	8f 5f       	subi	r24, 0xFF	; 255
    1dfe:	80 93 99 07 	sts	0x0799, r24	; 0x800799 <uxCurrentNumberOfTasks>
    1e02:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <pxCurrentTCB>
    1e06:	90 91 30 07 	lds	r25, 0x0730	; 0x800730 <pxCurrentTCB+0x1>
    1e0a:	89 2b       	or	r24, r25
    1e0c:	69 f4       	brne	.+26     	; 0x1e28 <prvAddNewTaskToReadyList+0x44>
    1e0e:	89 81       	ldd	r24, Y+1	; 0x01
    1e10:	9a 81       	ldd	r25, Y+2	; 0x02
    1e12:	90 93 30 07 	sts	0x0730, r25	; 0x800730 <pxCurrentTCB+0x1>
    1e16:	80 93 2f 07 	sts	0x072F, r24	; 0x80072f <pxCurrentTCB>
    1e1a:	80 91 99 07 	lds	r24, 0x0799	; 0x800799 <uxCurrentNumberOfTasks>
    1e1e:	81 30       	cpi	r24, 0x01	; 1
    1e20:	c9 f4       	brne	.+50     	; 0x1e54 <prvAddNewTaskToReadyList+0x70>
    1e22:	0e 94 06 14 	call	0x280c	; 0x280c <prvInitialiseTaskLists>
    1e26:	16 c0       	rjmp	.+44     	; 0x1e54 <prvAddNewTaskToReadyList+0x70>
    1e28:	80 91 9d 07 	lds	r24, 0x079D	; 0x80079d <xSchedulerRunning>
    1e2c:	88 23       	and	r24, r24
    1e2e:	91 f4       	brne	.+36     	; 0x1e54 <prvAddNewTaskToReadyList+0x70>
    1e30:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <pxCurrentTCB>
    1e34:	90 91 30 07 	lds	r25, 0x0730	; 0x800730 <pxCurrentTCB+0x1>
    1e38:	fc 01       	movw	r30, r24
    1e3a:	26 89       	ldd	r18, Z+22	; 0x16
    1e3c:	89 81       	ldd	r24, Y+1	; 0x01
    1e3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e40:	fc 01       	movw	r30, r24
    1e42:	86 89       	ldd	r24, Z+22	; 0x16
    1e44:	82 17       	cp	r24, r18
    1e46:	30 f0       	brcs	.+12     	; 0x1e54 <prvAddNewTaskToReadyList+0x70>
    1e48:	89 81       	ldd	r24, Y+1	; 0x01
    1e4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e4c:	90 93 30 07 	sts	0x0730, r25	; 0x800730 <pxCurrentTCB+0x1>
    1e50:	80 93 2f 07 	sts	0x072F, r24	; 0x80072f <pxCurrentTCB>
    1e54:	80 91 a1 07 	lds	r24, 0x07A1	; 0x8007a1 <uxTaskNumber>
    1e58:	8f 5f       	subi	r24, 0xFF	; 255
    1e5a:	80 93 a1 07 	sts	0x07A1, r24	; 0x8007a1 <uxTaskNumber>
    1e5e:	89 81       	ldd	r24, Y+1	; 0x01
    1e60:	9a 81       	ldd	r25, Y+2	; 0x02
    1e62:	fc 01       	movw	r30, r24
    1e64:	96 89       	ldd	r25, Z+22	; 0x16
    1e66:	80 91 9c 07 	lds	r24, 0x079C	; 0x80079c <uxTopReadyPriority>
    1e6a:	89 17       	cp	r24, r25
    1e6c:	30 f4       	brcc	.+12     	; 0x1e7a <prvAddNewTaskToReadyList+0x96>
    1e6e:	89 81       	ldd	r24, Y+1	; 0x01
    1e70:	9a 81       	ldd	r25, Y+2	; 0x02
    1e72:	fc 01       	movw	r30, r24
    1e74:	86 89       	ldd	r24, Z+22	; 0x16
    1e76:	80 93 9c 07 	sts	0x079C, r24	; 0x80079c <uxTopReadyPriority>
    1e7a:	89 81       	ldd	r24, Y+1	; 0x01
    1e7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e7e:	ac 01       	movw	r20, r24
    1e80:	4e 5f       	subi	r20, 0xFE	; 254
    1e82:	5f 4f       	sbci	r21, 0xFF	; 255
    1e84:	89 81       	ldd	r24, Y+1	; 0x01
    1e86:	9a 81       	ldd	r25, Y+2	; 0x02
    1e88:	fc 01       	movw	r30, r24
    1e8a:	86 89       	ldd	r24, Z+22	; 0x16
    1e8c:	28 2f       	mov	r18, r24
    1e8e:	30 e0       	ldi	r19, 0x00	; 0
    1e90:	c9 01       	movw	r24, r18
    1e92:	88 0f       	add	r24, r24
    1e94:	99 1f       	adc	r25, r25
    1e96:	88 0f       	add	r24, r24
    1e98:	99 1f       	adc	r25, r25
    1e9a:	88 0f       	add	r24, r24
    1e9c:	99 1f       	adc	r25, r25
    1e9e:	82 0f       	add	r24, r18
    1ea0:	93 1f       	adc	r25, r19
    1ea2:	8f 5c       	subi	r24, 0xCF	; 207
    1ea4:	98 4f       	sbci	r25, 0xF8	; 248
    1ea6:	ba 01       	movw	r22, r20
    1ea8:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <vListInsertEnd>
    1eac:	0f 90       	pop	r0
    1eae:	0f be       	out	0x3f, r0	; 63
    1eb0:	80 91 9d 07 	lds	r24, 0x079D	; 0x80079d <xSchedulerRunning>
    1eb4:	88 23       	and	r24, r24
    1eb6:	71 f0       	breq	.+28     	; 0x1ed4 <prvAddNewTaskToReadyList+0xf0>
    1eb8:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <pxCurrentTCB>
    1ebc:	90 91 30 07 	lds	r25, 0x0730	; 0x800730 <pxCurrentTCB+0x1>
    1ec0:	fc 01       	movw	r30, r24
    1ec2:	26 89       	ldd	r18, Z+22	; 0x16
    1ec4:	89 81       	ldd	r24, Y+1	; 0x01
    1ec6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ec8:	fc 01       	movw	r30, r24
    1eca:	86 89       	ldd	r24, Z+22	; 0x16
    1ecc:	28 17       	cp	r18, r24
    1ece:	10 f4       	brcc	.+4      	; 0x1ed4 <prvAddNewTaskToReadyList+0xf0>
    1ed0:	0e 94 f5 07 	call	0xfea	; 0xfea <vPortYield>
    1ed4:	00 00       	nop
    1ed6:	0f 90       	pop	r0
    1ed8:	0f 90       	pop	r0
    1eda:	df 91       	pop	r29
    1edc:	cf 91       	pop	r28
    1ede:	08 95       	ret

00001ee0 <vTaskDelay>:
    1ee0:	cf 93       	push	r28
    1ee2:	df 93       	push	r29
    1ee4:	00 d0       	rcall	.+0      	; 0x1ee6 <vTaskDelay+0x6>
    1ee6:	1f 92       	push	r1
    1ee8:	cd b7       	in	r28, 0x3d	; 61
    1eea:	de b7       	in	r29, 0x3e	; 62
    1eec:	9b 83       	std	Y+3, r25	; 0x03
    1eee:	8a 83       	std	Y+2, r24	; 0x02
    1ef0:	19 82       	std	Y+1, r1	; 0x01
    1ef2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ef6:	89 2b       	or	r24, r25
    1ef8:	51 f0       	breq	.+20     	; 0x1f0e <vTaskDelay+0x2e>
    1efa:	0e 94 cd 10 	call	0x219a	; 0x219a <vTaskSuspendAll>
    1efe:	8a 81       	ldd	r24, Y+2	; 0x02
    1f00:	9b 81       	ldd	r25, Y+3	; 0x03
    1f02:	60 e0       	ldi	r22, 0x00	; 0
    1f04:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <prvAddCurrentTaskToDelayedList>
    1f08:	0e 94 da 10 	call	0x21b4	; 0x21b4 <xTaskResumeAll>
    1f0c:	89 83       	std	Y+1, r24	; 0x01
    1f0e:	89 81       	ldd	r24, Y+1	; 0x01
    1f10:	88 23       	and	r24, r24
    1f12:	11 f4       	brne	.+4      	; 0x1f18 <vTaskDelay+0x38>
    1f14:	0e 94 f5 07 	call	0xfea	; 0xfea <vPortYield>
    1f18:	00 00       	nop
    1f1a:	0f 90       	pop	r0
    1f1c:	0f 90       	pop	r0
    1f1e:	0f 90       	pop	r0
    1f20:	df 91       	pop	r29
    1f22:	cf 91       	pop	r28
    1f24:	08 95       	ret

00001f26 <vTaskSuspend>:
    1f26:	cf 93       	push	r28
    1f28:	df 93       	push	r29
    1f2a:	00 d0       	rcall	.+0      	; 0x1f2c <vTaskSuspend+0x6>
    1f2c:	00 d0       	rcall	.+0      	; 0x1f2e <vTaskSuspend+0x8>
    1f2e:	cd b7       	in	r28, 0x3d	; 61
    1f30:	de b7       	in	r29, 0x3e	; 62
    1f32:	9c 83       	std	Y+4, r25	; 0x04
    1f34:	8b 83       	std	Y+3, r24	; 0x03
    1f36:	0f b6       	in	r0, 0x3f	; 63
    1f38:	f8 94       	cli
    1f3a:	0f 92       	push	r0
    1f3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f40:	89 2b       	or	r24, r25
    1f42:	29 f4       	brne	.+10     	; 0x1f4e <vTaskSuspend+0x28>
    1f44:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <pxCurrentTCB>
    1f48:	90 91 30 07 	lds	r25, 0x0730	; 0x800730 <pxCurrentTCB+0x1>
    1f4c:	02 c0       	rjmp	.+4      	; 0x1f52 <vTaskSuspend+0x2c>
    1f4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f50:	9c 81       	ldd	r25, Y+4	; 0x04
    1f52:	9a 83       	std	Y+2, r25	; 0x02
    1f54:	89 83       	std	Y+1, r24	; 0x01
    1f56:	89 81       	ldd	r24, Y+1	; 0x01
    1f58:	9a 81       	ldd	r25, Y+2	; 0x02
    1f5a:	02 96       	adiw	r24, 0x02	; 2
    1f5c:	0e 94 c0 05 	call	0xb80	; 0xb80 <uxListRemove>
    1f60:	89 81       	ldd	r24, Y+1	; 0x01
    1f62:	9a 81       	ldd	r25, Y+2	; 0x02
    1f64:	fc 01       	movw	r30, r24
    1f66:	84 89       	ldd	r24, Z+20	; 0x14
    1f68:	95 89       	ldd	r25, Z+21	; 0x15
    1f6a:	89 2b       	or	r24, r25
    1f6c:	29 f0       	breq	.+10     	; 0x1f78 <vTaskSuspend+0x52>
    1f6e:	89 81       	ldd	r24, Y+1	; 0x01
    1f70:	9a 81       	ldd	r25, Y+2	; 0x02
    1f72:	0c 96       	adiw	r24, 0x0c	; 12
    1f74:	0e 94 c0 05 	call	0xb80	; 0xb80 <uxListRemove>
    1f78:	89 81       	ldd	r24, Y+1	; 0x01
    1f7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f7c:	02 96       	adiw	r24, 0x02	; 2
    1f7e:	bc 01       	movw	r22, r24
    1f80:	80 e9       	ldi	r24, 0x90	; 144
    1f82:	97 e0       	ldi	r25, 0x07	; 7
    1f84:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <vListInsertEnd>
    1f88:	89 81       	ldd	r24, Y+1	; 0x01
    1f8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f8c:	fc 01       	movw	r30, r24
    1f8e:	87 a1       	ldd	r24, Z+39	; 0x27
    1f90:	81 30       	cpi	r24, 0x01	; 1
    1f92:	21 f4       	brne	.+8      	; 0x1f9c <vTaskSuspend+0x76>
    1f94:	89 81       	ldd	r24, Y+1	; 0x01
    1f96:	9a 81       	ldd	r25, Y+2	; 0x02
    1f98:	fc 01       	movw	r30, r24
    1f9a:	17 a2       	std	Z+39, r1	; 0x27
    1f9c:	0f 90       	pop	r0
    1f9e:	0f be       	out	0x3f, r0	; 63
    1fa0:	80 91 9d 07 	lds	r24, 0x079D	; 0x80079d <xSchedulerRunning>
    1fa4:	88 23       	and	r24, r24
    1fa6:	39 f0       	breq	.+14     	; 0x1fb6 <vTaskSuspend+0x90>
    1fa8:	0f b6       	in	r0, 0x3f	; 63
    1faa:	f8 94       	cli
    1fac:	0f 92       	push	r0
    1fae:	0e 94 91 14 	call	0x2922	; 0x2922 <prvResetNextTaskUnblockTime>
    1fb2:	0f 90       	pop	r0
    1fb4:	0f be       	out	0x3f, r0	; 63
    1fb6:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <pxCurrentTCB>
    1fba:	90 91 30 07 	lds	r25, 0x0730	; 0x800730 <pxCurrentTCB+0x1>
    1fbe:	29 81       	ldd	r18, Y+1	; 0x01
    1fc0:	3a 81       	ldd	r19, Y+2	; 0x02
    1fc2:	28 17       	cp	r18, r24
    1fc4:	39 07       	cpc	r19, r25
    1fc6:	a1 f4       	brne	.+40     	; 0x1ff0 <vTaskSuspend+0xca>
    1fc8:	80 91 9d 07 	lds	r24, 0x079D	; 0x80079d <xSchedulerRunning>
    1fcc:	88 23       	and	r24, r24
    1fce:	19 f0       	breq	.+6      	; 0x1fd6 <vTaskSuspend+0xb0>
    1fd0:	0e 94 f5 07 	call	0xfea	; 0xfea <vPortYield>
    1fd4:	0d c0       	rjmp	.+26     	; 0x1ff0 <vTaskSuspend+0xca>
    1fd6:	90 91 90 07 	lds	r25, 0x0790	; 0x800790 <xSuspendedTaskList>
    1fda:	80 91 99 07 	lds	r24, 0x0799	; 0x800799 <uxCurrentNumberOfTasks>
    1fde:	98 17       	cp	r25, r24
    1fe0:	29 f4       	brne	.+10     	; 0x1fec <vTaskSuspend+0xc6>
    1fe2:	10 92 30 07 	sts	0x0730, r1	; 0x800730 <pxCurrentTCB+0x1>
    1fe6:	10 92 2f 07 	sts	0x072F, r1	; 0x80072f <pxCurrentTCB>
    1fea:	02 c0       	rjmp	.+4      	; 0x1ff0 <vTaskSuspend+0xca>
    1fec:	0e 94 5e 12 	call	0x24bc	; 0x24bc <vTaskSwitchContext>
    1ff0:	00 00       	nop
    1ff2:	0f 90       	pop	r0
    1ff4:	0f 90       	pop	r0
    1ff6:	0f 90       	pop	r0
    1ff8:	0f 90       	pop	r0
    1ffa:	df 91       	pop	r29
    1ffc:	cf 91       	pop	r28
    1ffe:	08 95       	ret

00002000 <prvTaskIsTaskSuspended>:
    2000:	cf 93       	push	r28
    2002:	df 93       	push	r29
    2004:	00 d0       	rcall	.+0      	; 0x2006 <prvTaskIsTaskSuspended+0x6>
    2006:	00 d0       	rcall	.+0      	; 0x2008 <prvTaskIsTaskSuspended+0x8>
    2008:	1f 92       	push	r1
    200a:	cd b7       	in	r28, 0x3d	; 61
    200c:	de b7       	in	r29, 0x3e	; 62
    200e:	9d 83       	std	Y+5, r25	; 0x05
    2010:	8c 83       	std	Y+4, r24	; 0x04
    2012:	19 82       	std	Y+1, r1	; 0x01
    2014:	8c 81       	ldd	r24, Y+4	; 0x04
    2016:	9d 81       	ldd	r25, Y+5	; 0x05
    2018:	9b 83       	std	Y+3, r25	; 0x03
    201a:	8a 83       	std	Y+2, r24	; 0x02
    201c:	8a 81       	ldd	r24, Y+2	; 0x02
    201e:	9b 81       	ldd	r25, Y+3	; 0x03
    2020:	fc 01       	movw	r30, r24
    2022:	82 85       	ldd	r24, Z+10	; 0x0a
    2024:	93 85       	ldd	r25, Z+11	; 0x0b
    2026:	80 59       	subi	r24, 0x90	; 144
    2028:	97 40       	sbci	r25, 0x07	; 7
    202a:	89 f4       	brne	.+34     	; 0x204e <prvTaskIsTaskSuspended+0x4e>
    202c:	8a 81       	ldd	r24, Y+2	; 0x02
    202e:	9b 81       	ldd	r25, Y+3	; 0x03
    2030:	fc 01       	movw	r30, r24
    2032:	84 89       	ldd	r24, Z+20	; 0x14
    2034:	95 89       	ldd	r25, Z+21	; 0x15
    2036:	8d 57       	subi	r24, 0x7D	; 125
    2038:	97 40       	sbci	r25, 0x07	; 7
    203a:	49 f0       	breq	.+18     	; 0x204e <prvTaskIsTaskSuspended+0x4e>
    203c:	8a 81       	ldd	r24, Y+2	; 0x02
    203e:	9b 81       	ldd	r25, Y+3	; 0x03
    2040:	fc 01       	movw	r30, r24
    2042:	84 89       	ldd	r24, Z+20	; 0x14
    2044:	95 89       	ldd	r25, Z+21	; 0x15
    2046:	89 2b       	or	r24, r25
    2048:	11 f4       	brne	.+4      	; 0x204e <prvTaskIsTaskSuspended+0x4e>
    204a:	81 e0       	ldi	r24, 0x01	; 1
    204c:	89 83       	std	Y+1, r24	; 0x01
    204e:	89 81       	ldd	r24, Y+1	; 0x01
    2050:	0f 90       	pop	r0
    2052:	0f 90       	pop	r0
    2054:	0f 90       	pop	r0
    2056:	0f 90       	pop	r0
    2058:	0f 90       	pop	r0
    205a:	df 91       	pop	r29
    205c:	cf 91       	pop	r28
    205e:	08 95       	ret

00002060 <vTaskResume>:
    2060:	cf 93       	push	r28
    2062:	df 93       	push	r29
    2064:	00 d0       	rcall	.+0      	; 0x2066 <vTaskResume+0x6>
    2066:	00 d0       	rcall	.+0      	; 0x2068 <vTaskResume+0x8>
    2068:	cd b7       	in	r28, 0x3d	; 61
    206a:	de b7       	in	r29, 0x3e	; 62
    206c:	9c 83       	std	Y+4, r25	; 0x04
    206e:	8b 83       	std	Y+3, r24	; 0x03
    2070:	8b 81       	ldd	r24, Y+3	; 0x03
    2072:	9c 81       	ldd	r25, Y+4	; 0x04
    2074:	9a 83       	std	Y+2, r25	; 0x02
    2076:	89 83       	std	Y+1, r24	; 0x01
    2078:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <pxCurrentTCB>
    207c:	90 91 30 07 	lds	r25, 0x0730	; 0x800730 <pxCurrentTCB+0x1>
    2080:	29 81       	ldd	r18, Y+1	; 0x01
    2082:	3a 81       	ldd	r19, Y+2	; 0x02
    2084:	28 17       	cp	r18, r24
    2086:	39 07       	cpc	r19, r25
    2088:	09 f4       	brne	.+2      	; 0x208c <vTaskResume+0x2c>
    208a:	4a c0       	rjmp	.+148    	; 0x2120 <vTaskResume+0xc0>
    208c:	89 81       	ldd	r24, Y+1	; 0x01
    208e:	9a 81       	ldd	r25, Y+2	; 0x02
    2090:	89 2b       	or	r24, r25
    2092:	09 f4       	brne	.+2      	; 0x2096 <vTaskResume+0x36>
    2094:	45 c0       	rjmp	.+138    	; 0x2120 <vTaskResume+0xc0>
    2096:	0f b6       	in	r0, 0x3f	; 63
    2098:	f8 94       	cli
    209a:	0f 92       	push	r0
    209c:	89 81       	ldd	r24, Y+1	; 0x01
    209e:	9a 81       	ldd	r25, Y+2	; 0x02
    20a0:	0e 94 00 10 	call	0x2000	; 0x2000 <prvTaskIsTaskSuspended>
    20a4:	88 23       	and	r24, r24
    20a6:	d1 f1       	breq	.+116    	; 0x211c <vTaskResume+0xbc>
    20a8:	89 81       	ldd	r24, Y+1	; 0x01
    20aa:	9a 81       	ldd	r25, Y+2	; 0x02
    20ac:	02 96       	adiw	r24, 0x02	; 2
    20ae:	0e 94 c0 05 	call	0xb80	; 0xb80 <uxListRemove>
    20b2:	89 81       	ldd	r24, Y+1	; 0x01
    20b4:	9a 81       	ldd	r25, Y+2	; 0x02
    20b6:	fc 01       	movw	r30, r24
    20b8:	96 89       	ldd	r25, Z+22	; 0x16
    20ba:	80 91 9c 07 	lds	r24, 0x079C	; 0x80079c <uxTopReadyPriority>
    20be:	89 17       	cp	r24, r25
    20c0:	30 f4       	brcc	.+12     	; 0x20ce <vTaskResume+0x6e>
    20c2:	89 81       	ldd	r24, Y+1	; 0x01
    20c4:	9a 81       	ldd	r25, Y+2	; 0x02
    20c6:	fc 01       	movw	r30, r24
    20c8:	86 89       	ldd	r24, Z+22	; 0x16
    20ca:	80 93 9c 07 	sts	0x079C, r24	; 0x80079c <uxTopReadyPriority>
    20ce:	89 81       	ldd	r24, Y+1	; 0x01
    20d0:	9a 81       	ldd	r25, Y+2	; 0x02
    20d2:	ac 01       	movw	r20, r24
    20d4:	4e 5f       	subi	r20, 0xFE	; 254
    20d6:	5f 4f       	sbci	r21, 0xFF	; 255
    20d8:	89 81       	ldd	r24, Y+1	; 0x01
    20da:	9a 81       	ldd	r25, Y+2	; 0x02
    20dc:	fc 01       	movw	r30, r24
    20de:	86 89       	ldd	r24, Z+22	; 0x16
    20e0:	28 2f       	mov	r18, r24
    20e2:	30 e0       	ldi	r19, 0x00	; 0
    20e4:	c9 01       	movw	r24, r18
    20e6:	88 0f       	add	r24, r24
    20e8:	99 1f       	adc	r25, r25
    20ea:	88 0f       	add	r24, r24
    20ec:	99 1f       	adc	r25, r25
    20ee:	88 0f       	add	r24, r24
    20f0:	99 1f       	adc	r25, r25
    20f2:	82 0f       	add	r24, r18
    20f4:	93 1f       	adc	r25, r19
    20f6:	8f 5c       	subi	r24, 0xCF	; 207
    20f8:	98 4f       	sbci	r25, 0xF8	; 248
    20fa:	ba 01       	movw	r22, r20
    20fc:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <vListInsertEnd>
    2100:	89 81       	ldd	r24, Y+1	; 0x01
    2102:	9a 81       	ldd	r25, Y+2	; 0x02
    2104:	fc 01       	movw	r30, r24
    2106:	26 89       	ldd	r18, Z+22	; 0x16
    2108:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <pxCurrentTCB>
    210c:	90 91 30 07 	lds	r25, 0x0730	; 0x800730 <pxCurrentTCB+0x1>
    2110:	fc 01       	movw	r30, r24
    2112:	86 89       	ldd	r24, Z+22	; 0x16
    2114:	28 17       	cp	r18, r24
    2116:	10 f0       	brcs	.+4      	; 0x211c <vTaskResume+0xbc>
    2118:	0e 94 f5 07 	call	0xfea	; 0xfea <vPortYield>
    211c:	0f 90       	pop	r0
    211e:	0f be       	out	0x3f, r0	; 63
    2120:	00 00       	nop
    2122:	0f 90       	pop	r0
    2124:	0f 90       	pop	r0
    2126:	0f 90       	pop	r0
    2128:	0f 90       	pop	r0
    212a:	df 91       	pop	r29
    212c:	cf 91       	pop	r28
    212e:	08 95       	ret

00002130 <vTaskStartScheduler>:
    2130:	ef 92       	push	r14
    2132:	ff 92       	push	r15
    2134:	0f 93       	push	r16
    2136:	cf 93       	push	r28
    2138:	df 93       	push	r29
    213a:	1f 92       	push	r1
    213c:	cd b7       	in	r28, 0x3d	; 61
    213e:	de b7       	in	r29, 0x3e	; 62
    2140:	0f 2e       	mov	r0, r31
    2142:	f4 ea       	ldi	r31, 0xA4	; 164
    2144:	ef 2e       	mov	r14, r31
    2146:	f7 e0       	ldi	r31, 0x07	; 7
    2148:	ff 2e       	mov	r15, r31
    214a:	f0 2d       	mov	r31, r0
    214c:	00 e0       	ldi	r16, 0x00	; 0
    214e:	20 e0       	ldi	r18, 0x00	; 0
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	45 e5       	ldi	r20, 0x55	; 85
    2154:	50 e0       	ldi	r21, 0x00	; 0
    2156:	60 e4       	ldi	r22, 0x40	; 64
    2158:	71 e0       	ldi	r23, 0x01	; 1
    215a:	8c ef       	ldi	r24, 0xFC	; 252
    215c:	93 e1       	ldi	r25, 0x13	; 19
    215e:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <xTaskCreate>
    2162:	89 83       	std	Y+1, r24	; 0x01
    2164:	89 81       	ldd	r24, Y+1	; 0x01
    2166:	81 30       	cpi	r24, 0x01	; 1
    2168:	81 f4       	brne	.+32     	; 0x218a <vTaskStartScheduler+0x5a>
    216a:	f8 94       	cli
    216c:	8f ef       	ldi	r24, 0xFF	; 255
    216e:	9f ef       	ldi	r25, 0xFF	; 255
    2170:	90 93 a3 07 	sts	0x07A3, r25	; 0x8007a3 <xNextTaskUnblockTime+0x1>
    2174:	80 93 a2 07 	sts	0x07A2, r24	; 0x8007a2 <xNextTaskUnblockTime>
    2178:	81 e0       	ldi	r24, 0x01	; 1
    217a:	80 93 9d 07 	sts	0x079D, r24	; 0x80079d <xSchedulerRunning>
    217e:	10 92 9b 07 	sts	0x079B, r1	; 0x80079b <xTickCount+0x1>
    2182:	10 92 9a 07 	sts	0x079A, r1	; 0x80079a <xTickCount>
    2186:	0e 94 c0 07 	call	0xf80	; 0xf80 <xPortStartScheduler>
    218a:	00 00       	nop
    218c:	0f 90       	pop	r0
    218e:	df 91       	pop	r29
    2190:	cf 91       	pop	r28
    2192:	0f 91       	pop	r16
    2194:	ff 90       	pop	r15
    2196:	ef 90       	pop	r14
    2198:	08 95       	ret

0000219a <vTaskSuspendAll>:
    219a:	cf 93       	push	r28
    219c:	df 93       	push	r29
    219e:	cd b7       	in	r28, 0x3d	; 61
    21a0:	de b7       	in	r29, 0x3e	; 62
    21a2:	80 91 a6 07 	lds	r24, 0x07A6	; 0x8007a6 <uxSchedulerSuspended>
    21a6:	8f 5f       	subi	r24, 0xFF	; 255
    21a8:	80 93 a6 07 	sts	0x07A6, r24	; 0x8007a6 <uxSchedulerSuspended>
    21ac:	00 00       	nop
    21ae:	df 91       	pop	r29
    21b0:	cf 91       	pop	r28
    21b2:	08 95       	ret

000021b4 <xTaskResumeAll>:
    21b4:	cf 93       	push	r28
    21b6:	df 93       	push	r29
    21b8:	00 d0       	rcall	.+0      	; 0x21ba <xTaskResumeAll+0x6>
    21ba:	00 d0       	rcall	.+0      	; 0x21bc <xTaskResumeAll+0x8>
    21bc:	cd b7       	in	r28, 0x3d	; 61
    21be:	de b7       	in	r29, 0x3e	; 62
    21c0:	1a 82       	std	Y+2, r1	; 0x02
    21c2:	19 82       	std	Y+1, r1	; 0x01
    21c4:	1b 82       	std	Y+3, r1	; 0x03
    21c6:	0f b6       	in	r0, 0x3f	; 63
    21c8:	f8 94       	cli
    21ca:	0f 92       	push	r0
    21cc:	80 91 a6 07 	lds	r24, 0x07A6	; 0x8007a6 <uxSchedulerSuspended>
    21d0:	81 50       	subi	r24, 0x01	; 1
    21d2:	80 93 a6 07 	sts	0x07A6, r24	; 0x8007a6 <uxSchedulerSuspended>
    21d6:	80 91 a6 07 	lds	r24, 0x07A6	; 0x8007a6 <uxSchedulerSuspended>
    21da:	88 23       	and	r24, r24
    21dc:	09 f0       	breq	.+2      	; 0x21e0 <xTaskResumeAll+0x2c>
    21de:	77 c0       	rjmp	.+238    	; 0x22ce <xTaskResumeAll+0x11a>
    21e0:	80 91 99 07 	lds	r24, 0x0799	; 0x800799 <uxCurrentNumberOfTasks>
    21e4:	88 23       	and	r24, r24
    21e6:	09 f4       	brne	.+2      	; 0x21ea <xTaskResumeAll+0x36>
    21e8:	72 c0       	rjmp	.+228    	; 0x22ce <xTaskResumeAll+0x11a>
    21ea:	49 c0       	rjmp	.+146    	; 0x227e <xTaskResumeAll+0xca>
    21ec:	80 91 82 07 	lds	r24, 0x0782	; 0x800782 <xPendingReadyList+0x5>
    21f0:	90 91 83 07 	lds	r25, 0x0783	; 0x800783 <xPendingReadyList+0x6>
    21f4:	fc 01       	movw	r30, r24
    21f6:	86 81       	ldd	r24, Z+6	; 0x06
    21f8:	97 81       	ldd	r25, Z+7	; 0x07
    21fa:	9a 83       	std	Y+2, r25	; 0x02
    21fc:	89 83       	std	Y+1, r24	; 0x01
    21fe:	89 81       	ldd	r24, Y+1	; 0x01
    2200:	9a 81       	ldd	r25, Y+2	; 0x02
    2202:	0c 96       	adiw	r24, 0x0c	; 12
    2204:	0e 94 c0 05 	call	0xb80	; 0xb80 <uxListRemove>
    2208:	89 81       	ldd	r24, Y+1	; 0x01
    220a:	9a 81       	ldd	r25, Y+2	; 0x02
    220c:	02 96       	adiw	r24, 0x02	; 2
    220e:	0e 94 c0 05 	call	0xb80	; 0xb80 <uxListRemove>
    2212:	89 81       	ldd	r24, Y+1	; 0x01
    2214:	9a 81       	ldd	r25, Y+2	; 0x02
    2216:	fc 01       	movw	r30, r24
    2218:	96 89       	ldd	r25, Z+22	; 0x16
    221a:	80 91 9c 07 	lds	r24, 0x079C	; 0x80079c <uxTopReadyPriority>
    221e:	89 17       	cp	r24, r25
    2220:	30 f4       	brcc	.+12     	; 0x222e <xTaskResumeAll+0x7a>
    2222:	89 81       	ldd	r24, Y+1	; 0x01
    2224:	9a 81       	ldd	r25, Y+2	; 0x02
    2226:	fc 01       	movw	r30, r24
    2228:	86 89       	ldd	r24, Z+22	; 0x16
    222a:	80 93 9c 07 	sts	0x079C, r24	; 0x80079c <uxTopReadyPriority>
    222e:	89 81       	ldd	r24, Y+1	; 0x01
    2230:	9a 81       	ldd	r25, Y+2	; 0x02
    2232:	ac 01       	movw	r20, r24
    2234:	4e 5f       	subi	r20, 0xFE	; 254
    2236:	5f 4f       	sbci	r21, 0xFF	; 255
    2238:	89 81       	ldd	r24, Y+1	; 0x01
    223a:	9a 81       	ldd	r25, Y+2	; 0x02
    223c:	fc 01       	movw	r30, r24
    223e:	86 89       	ldd	r24, Z+22	; 0x16
    2240:	28 2f       	mov	r18, r24
    2242:	30 e0       	ldi	r19, 0x00	; 0
    2244:	c9 01       	movw	r24, r18
    2246:	88 0f       	add	r24, r24
    2248:	99 1f       	adc	r25, r25
    224a:	88 0f       	add	r24, r24
    224c:	99 1f       	adc	r25, r25
    224e:	88 0f       	add	r24, r24
    2250:	99 1f       	adc	r25, r25
    2252:	82 0f       	add	r24, r18
    2254:	93 1f       	adc	r25, r19
    2256:	8f 5c       	subi	r24, 0xCF	; 207
    2258:	98 4f       	sbci	r25, 0xF8	; 248
    225a:	ba 01       	movw	r22, r20
    225c:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <vListInsertEnd>
    2260:	89 81       	ldd	r24, Y+1	; 0x01
    2262:	9a 81       	ldd	r25, Y+2	; 0x02
    2264:	fc 01       	movw	r30, r24
    2266:	26 89       	ldd	r18, Z+22	; 0x16
    2268:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <pxCurrentTCB>
    226c:	90 91 30 07 	lds	r25, 0x0730	; 0x800730 <pxCurrentTCB+0x1>
    2270:	fc 01       	movw	r30, r24
    2272:	86 89       	ldd	r24, Z+22	; 0x16
    2274:	28 17       	cp	r18, r24
    2276:	18 f0       	brcs	.+6      	; 0x227e <xTaskResumeAll+0xca>
    2278:	81 e0       	ldi	r24, 0x01	; 1
    227a:	80 93 9f 07 	sts	0x079F, r24	; 0x80079f <xYieldPending>
    227e:	80 91 7d 07 	lds	r24, 0x077D	; 0x80077d <xPendingReadyList>
    2282:	88 23       	and	r24, r24
    2284:	09 f0       	breq	.+2      	; 0x2288 <xTaskResumeAll+0xd4>
    2286:	b2 cf       	rjmp	.-156    	; 0x21ec <xTaskResumeAll+0x38>
    2288:	89 81       	ldd	r24, Y+1	; 0x01
    228a:	9a 81       	ldd	r25, Y+2	; 0x02
    228c:	89 2b       	or	r24, r25
    228e:	11 f0       	breq	.+4      	; 0x2294 <xTaskResumeAll+0xe0>
    2290:	0e 94 91 14 	call	0x2922	; 0x2922 <prvResetNextTaskUnblockTime>
    2294:	80 91 9e 07 	lds	r24, 0x079E	; 0x80079e <uxPendedTicks>
    2298:	8c 83       	std	Y+4, r24	; 0x04
    229a:	8c 81       	ldd	r24, Y+4	; 0x04
    229c:	88 23       	and	r24, r24
    229e:	79 f0       	breq	.+30     	; 0x22be <xTaskResumeAll+0x10a>
    22a0:	0e 94 71 11 	call	0x22e2	; 0x22e2 <xTaskIncrementTick>
    22a4:	88 23       	and	r24, r24
    22a6:	19 f0       	breq	.+6      	; 0x22ae <xTaskResumeAll+0xfa>
    22a8:	81 e0       	ldi	r24, 0x01	; 1
    22aa:	80 93 9f 07 	sts	0x079F, r24	; 0x80079f <xYieldPending>
    22ae:	8c 81       	ldd	r24, Y+4	; 0x04
    22b0:	81 50       	subi	r24, 0x01	; 1
    22b2:	8c 83       	std	Y+4, r24	; 0x04
    22b4:	8c 81       	ldd	r24, Y+4	; 0x04
    22b6:	88 23       	and	r24, r24
    22b8:	99 f7       	brne	.-26     	; 0x22a0 <xTaskResumeAll+0xec>
    22ba:	10 92 9e 07 	sts	0x079E, r1	; 0x80079e <uxPendedTicks>
    22be:	80 91 9f 07 	lds	r24, 0x079F	; 0x80079f <xYieldPending>
    22c2:	88 23       	and	r24, r24
    22c4:	21 f0       	breq	.+8      	; 0x22ce <xTaskResumeAll+0x11a>
    22c6:	81 e0       	ldi	r24, 0x01	; 1
    22c8:	8b 83       	std	Y+3, r24	; 0x03
    22ca:	0e 94 f5 07 	call	0xfea	; 0xfea <vPortYield>
    22ce:	0f 90       	pop	r0
    22d0:	0f be       	out	0x3f, r0	; 63
    22d2:	8b 81       	ldd	r24, Y+3	; 0x03
    22d4:	0f 90       	pop	r0
    22d6:	0f 90       	pop	r0
    22d8:	0f 90       	pop	r0
    22da:	0f 90       	pop	r0
    22dc:	df 91       	pop	r29
    22de:	cf 91       	pop	r28
    22e0:	08 95       	ret

000022e2 <xTaskIncrementTick>:
    22e2:	cf 93       	push	r28
    22e4:	df 93       	push	r29
    22e6:	cd b7       	in	r28, 0x3d	; 61
    22e8:	de b7       	in	r29, 0x3e	; 62
    22ea:	29 97       	sbiw	r28, 0x09	; 9
    22ec:	0f b6       	in	r0, 0x3f	; 63
    22ee:	f8 94       	cli
    22f0:	de bf       	out	0x3e, r29	; 62
    22f2:	0f be       	out	0x3f, r0	; 63
    22f4:	cd bf       	out	0x3d, r28	; 61
    22f6:	19 82       	std	Y+1, r1	; 0x01
    22f8:	80 91 a6 07 	lds	r24, 0x07A6	; 0x8007a6 <uxSchedulerSuspended>
    22fc:	88 23       	and	r24, r24
    22fe:	09 f0       	breq	.+2      	; 0x2302 <xTaskIncrementTick+0x20>
    2300:	c8 c0       	rjmp	.+400    	; 0x2492 <xTaskIncrementTick+0x1b0>
    2302:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <xTickCount>
    2306:	90 91 9b 07 	lds	r25, 0x079B	; 0x80079b <xTickCount+0x1>
    230a:	01 96       	adiw	r24, 0x01	; 1
    230c:	9b 83       	std	Y+3, r25	; 0x03
    230e:	8a 83       	std	Y+2, r24	; 0x02
    2310:	8a 81       	ldd	r24, Y+2	; 0x02
    2312:	9b 81       	ldd	r25, Y+3	; 0x03
    2314:	90 93 9b 07 	sts	0x079B, r25	; 0x80079b <xTickCount+0x1>
    2318:	80 93 9a 07 	sts	0x079A, r24	; 0x80079a <xTickCount>
    231c:	8a 81       	ldd	r24, Y+2	; 0x02
    231e:	9b 81       	ldd	r25, Y+3	; 0x03
    2320:	89 2b       	or	r24, r25
    2322:	d9 f4       	brne	.+54     	; 0x235a <xTaskIncrementTick+0x78>
    2324:	80 91 79 07 	lds	r24, 0x0779	; 0x800779 <pxDelayedTaskList>
    2328:	90 91 7a 07 	lds	r25, 0x077A	; 0x80077a <pxDelayedTaskList+0x1>
    232c:	9d 83       	std	Y+5, r25	; 0x05
    232e:	8c 83       	std	Y+4, r24	; 0x04
    2330:	80 91 7b 07 	lds	r24, 0x077B	; 0x80077b <pxOverflowDelayedTaskList>
    2334:	90 91 7c 07 	lds	r25, 0x077C	; 0x80077c <pxOverflowDelayedTaskList+0x1>
    2338:	90 93 7a 07 	sts	0x077A, r25	; 0x80077a <pxDelayedTaskList+0x1>
    233c:	80 93 79 07 	sts	0x0779, r24	; 0x800779 <pxDelayedTaskList>
    2340:	8c 81       	ldd	r24, Y+4	; 0x04
    2342:	9d 81       	ldd	r25, Y+5	; 0x05
    2344:	90 93 7c 07 	sts	0x077C, r25	; 0x80077c <pxOverflowDelayedTaskList+0x1>
    2348:	80 93 7b 07 	sts	0x077B, r24	; 0x80077b <pxOverflowDelayedTaskList>
    234c:	80 91 a0 07 	lds	r24, 0x07A0	; 0x8007a0 <xNumOfOverflows>
    2350:	8f 5f       	subi	r24, 0xFF	; 255
    2352:	80 93 a0 07 	sts	0x07A0, r24	; 0x8007a0 <xNumOfOverflows>
    2356:	0e 94 91 14 	call	0x2922	; 0x2922 <prvResetNextTaskUnblockTime>
    235a:	80 91 a2 07 	lds	r24, 0x07A2	; 0x8007a2 <xNextTaskUnblockTime>
    235e:	90 91 a3 07 	lds	r25, 0x07A3	; 0x8007a3 <xNextTaskUnblockTime+0x1>
    2362:	2a 81       	ldd	r18, Y+2	; 0x02
    2364:	3b 81       	ldd	r19, Y+3	; 0x03
    2366:	28 17       	cp	r18, r24
    2368:	39 07       	cpc	r19, r25
    236a:	08 f4       	brcc	.+2      	; 0x236e <xTaskIncrementTick+0x8c>
    236c:	78 c0       	rjmp	.+240    	; 0x245e <xTaskIncrementTick+0x17c>
    236e:	80 91 79 07 	lds	r24, 0x0779	; 0x800779 <pxDelayedTaskList>
    2372:	90 91 7a 07 	lds	r25, 0x077A	; 0x80077a <pxDelayedTaskList+0x1>
    2376:	fc 01       	movw	r30, r24
    2378:	80 81       	ld	r24, Z
    237a:	88 23       	and	r24, r24
    237c:	39 f4       	brne	.+14     	; 0x238c <xTaskIncrementTick+0xaa>
    237e:	8f ef       	ldi	r24, 0xFF	; 255
    2380:	9f ef       	ldi	r25, 0xFF	; 255
    2382:	90 93 a3 07 	sts	0x07A3, r25	; 0x8007a3 <xNextTaskUnblockTime+0x1>
    2386:	80 93 a2 07 	sts	0x07A2, r24	; 0x8007a2 <xNextTaskUnblockTime>
    238a:	69 c0       	rjmp	.+210    	; 0x245e <xTaskIncrementTick+0x17c>
    238c:	80 91 79 07 	lds	r24, 0x0779	; 0x800779 <pxDelayedTaskList>
    2390:	90 91 7a 07 	lds	r25, 0x077A	; 0x80077a <pxDelayedTaskList+0x1>
    2394:	fc 01       	movw	r30, r24
    2396:	85 81       	ldd	r24, Z+5	; 0x05
    2398:	96 81       	ldd	r25, Z+6	; 0x06
    239a:	fc 01       	movw	r30, r24
    239c:	86 81       	ldd	r24, Z+6	; 0x06
    239e:	97 81       	ldd	r25, Z+7	; 0x07
    23a0:	9f 83       	std	Y+7, r25	; 0x07
    23a2:	8e 83       	std	Y+6, r24	; 0x06
    23a4:	8e 81       	ldd	r24, Y+6	; 0x06
    23a6:	9f 81       	ldd	r25, Y+7	; 0x07
    23a8:	fc 01       	movw	r30, r24
    23aa:	82 81       	ldd	r24, Z+2	; 0x02
    23ac:	93 81       	ldd	r25, Z+3	; 0x03
    23ae:	99 87       	std	Y+9, r25	; 0x09
    23b0:	88 87       	std	Y+8, r24	; 0x08
    23b2:	2a 81       	ldd	r18, Y+2	; 0x02
    23b4:	3b 81       	ldd	r19, Y+3	; 0x03
    23b6:	88 85       	ldd	r24, Y+8	; 0x08
    23b8:	99 85       	ldd	r25, Y+9	; 0x09
    23ba:	28 17       	cp	r18, r24
    23bc:	39 07       	cpc	r19, r25
    23be:	38 f4       	brcc	.+14     	; 0x23ce <xTaskIncrementTick+0xec>
    23c0:	88 85       	ldd	r24, Y+8	; 0x08
    23c2:	99 85       	ldd	r25, Y+9	; 0x09
    23c4:	90 93 a3 07 	sts	0x07A3, r25	; 0x8007a3 <xNextTaskUnblockTime+0x1>
    23c8:	80 93 a2 07 	sts	0x07A2, r24	; 0x8007a2 <xNextTaskUnblockTime>
    23cc:	48 c0       	rjmp	.+144    	; 0x245e <xTaskIncrementTick+0x17c>
    23ce:	8e 81       	ldd	r24, Y+6	; 0x06
    23d0:	9f 81       	ldd	r25, Y+7	; 0x07
    23d2:	02 96       	adiw	r24, 0x02	; 2
    23d4:	0e 94 c0 05 	call	0xb80	; 0xb80 <uxListRemove>
    23d8:	8e 81       	ldd	r24, Y+6	; 0x06
    23da:	9f 81       	ldd	r25, Y+7	; 0x07
    23dc:	fc 01       	movw	r30, r24
    23de:	84 89       	ldd	r24, Z+20	; 0x14
    23e0:	95 89       	ldd	r25, Z+21	; 0x15
    23e2:	89 2b       	or	r24, r25
    23e4:	29 f0       	breq	.+10     	; 0x23f0 <xTaskIncrementTick+0x10e>
    23e6:	8e 81       	ldd	r24, Y+6	; 0x06
    23e8:	9f 81       	ldd	r25, Y+7	; 0x07
    23ea:	0c 96       	adiw	r24, 0x0c	; 12
    23ec:	0e 94 c0 05 	call	0xb80	; 0xb80 <uxListRemove>
    23f0:	8e 81       	ldd	r24, Y+6	; 0x06
    23f2:	9f 81       	ldd	r25, Y+7	; 0x07
    23f4:	fc 01       	movw	r30, r24
    23f6:	96 89       	ldd	r25, Z+22	; 0x16
    23f8:	80 91 9c 07 	lds	r24, 0x079C	; 0x80079c <uxTopReadyPriority>
    23fc:	89 17       	cp	r24, r25
    23fe:	30 f4       	brcc	.+12     	; 0x240c <xTaskIncrementTick+0x12a>
    2400:	8e 81       	ldd	r24, Y+6	; 0x06
    2402:	9f 81       	ldd	r25, Y+7	; 0x07
    2404:	fc 01       	movw	r30, r24
    2406:	86 89       	ldd	r24, Z+22	; 0x16
    2408:	80 93 9c 07 	sts	0x079C, r24	; 0x80079c <uxTopReadyPriority>
    240c:	8e 81       	ldd	r24, Y+6	; 0x06
    240e:	9f 81       	ldd	r25, Y+7	; 0x07
    2410:	ac 01       	movw	r20, r24
    2412:	4e 5f       	subi	r20, 0xFE	; 254
    2414:	5f 4f       	sbci	r21, 0xFF	; 255
    2416:	8e 81       	ldd	r24, Y+6	; 0x06
    2418:	9f 81       	ldd	r25, Y+7	; 0x07
    241a:	fc 01       	movw	r30, r24
    241c:	86 89       	ldd	r24, Z+22	; 0x16
    241e:	28 2f       	mov	r18, r24
    2420:	30 e0       	ldi	r19, 0x00	; 0
    2422:	c9 01       	movw	r24, r18
    2424:	88 0f       	add	r24, r24
    2426:	99 1f       	adc	r25, r25
    2428:	88 0f       	add	r24, r24
    242a:	99 1f       	adc	r25, r25
    242c:	88 0f       	add	r24, r24
    242e:	99 1f       	adc	r25, r25
    2430:	82 0f       	add	r24, r18
    2432:	93 1f       	adc	r25, r19
    2434:	8f 5c       	subi	r24, 0xCF	; 207
    2436:	98 4f       	sbci	r25, 0xF8	; 248
    2438:	ba 01       	movw	r22, r20
    243a:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <vListInsertEnd>
    243e:	8e 81       	ldd	r24, Y+6	; 0x06
    2440:	9f 81       	ldd	r25, Y+7	; 0x07
    2442:	fc 01       	movw	r30, r24
    2444:	26 89       	ldd	r18, Z+22	; 0x16
    2446:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <pxCurrentTCB>
    244a:	90 91 30 07 	lds	r25, 0x0730	; 0x800730 <pxCurrentTCB+0x1>
    244e:	fc 01       	movw	r30, r24
    2450:	86 89       	ldd	r24, Z+22	; 0x16
    2452:	28 17       	cp	r18, r24
    2454:	08 f4       	brcc	.+2      	; 0x2458 <xTaskIncrementTick+0x176>
    2456:	8b cf       	rjmp	.-234    	; 0x236e <xTaskIncrementTick+0x8c>
    2458:	81 e0       	ldi	r24, 0x01	; 1
    245a:	89 83       	std	Y+1, r24	; 0x01
    245c:	88 cf       	rjmp	.-240    	; 0x236e <xTaskIncrementTick+0x8c>
    245e:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <pxCurrentTCB>
    2462:	90 91 30 07 	lds	r25, 0x0730	; 0x800730 <pxCurrentTCB+0x1>
    2466:	fc 01       	movw	r30, r24
    2468:	86 89       	ldd	r24, Z+22	; 0x16
    246a:	28 2f       	mov	r18, r24
    246c:	30 e0       	ldi	r19, 0x00	; 0
    246e:	c9 01       	movw	r24, r18
    2470:	88 0f       	add	r24, r24
    2472:	99 1f       	adc	r25, r25
    2474:	88 0f       	add	r24, r24
    2476:	99 1f       	adc	r25, r25
    2478:	88 0f       	add	r24, r24
    247a:	99 1f       	adc	r25, r25
    247c:	82 0f       	add	r24, r18
    247e:	93 1f       	adc	r25, r19
    2480:	8f 5c       	subi	r24, 0xCF	; 207
    2482:	98 4f       	sbci	r25, 0xF8	; 248
    2484:	fc 01       	movw	r30, r24
    2486:	80 81       	ld	r24, Z
    2488:	82 30       	cpi	r24, 0x02	; 2
    248a:	40 f0       	brcs	.+16     	; 0x249c <xTaskIncrementTick+0x1ba>
    248c:	81 e0       	ldi	r24, 0x01	; 1
    248e:	89 83       	std	Y+1, r24	; 0x01
    2490:	05 c0       	rjmp	.+10     	; 0x249c <xTaskIncrementTick+0x1ba>
    2492:	80 91 9e 07 	lds	r24, 0x079E	; 0x80079e <uxPendedTicks>
    2496:	8f 5f       	subi	r24, 0xFF	; 255
    2498:	80 93 9e 07 	sts	0x079E, r24	; 0x80079e <uxPendedTicks>
    249c:	80 91 9f 07 	lds	r24, 0x079F	; 0x80079f <xYieldPending>
    24a0:	88 23       	and	r24, r24
    24a2:	11 f0       	breq	.+4      	; 0x24a8 <xTaskIncrementTick+0x1c6>
    24a4:	81 e0       	ldi	r24, 0x01	; 1
    24a6:	89 83       	std	Y+1, r24	; 0x01
    24a8:	89 81       	ldd	r24, Y+1	; 0x01
    24aa:	29 96       	adiw	r28, 0x09	; 9
    24ac:	0f b6       	in	r0, 0x3f	; 63
    24ae:	f8 94       	cli
    24b0:	de bf       	out	0x3e, r29	; 62
    24b2:	0f be       	out	0x3f, r0	; 63
    24b4:	cd bf       	out	0x3d, r28	; 61
    24b6:	df 91       	pop	r29
    24b8:	cf 91       	pop	r28
    24ba:	08 95       	ret

000024bc <vTaskSwitchContext>:
    24bc:	cf 93       	push	r28
    24be:	df 93       	push	r29
    24c0:	00 d0       	rcall	.+0      	; 0x24c2 <vTaskSwitchContext+0x6>
    24c2:	1f 92       	push	r1
    24c4:	cd b7       	in	r28, 0x3d	; 61
    24c6:	de b7       	in	r29, 0x3e	; 62
    24c8:	80 91 a6 07 	lds	r24, 0x07A6	; 0x8007a6 <uxSchedulerSuspended>
    24cc:	88 23       	and	r24, r24
    24ce:	21 f0       	breq	.+8      	; 0x24d8 <vTaskSwitchContext+0x1c>
    24d0:	81 e0       	ldi	r24, 0x01	; 1
    24d2:	80 93 9f 07 	sts	0x079F, r24	; 0x80079f <xYieldPending>
    24d6:	5f c0       	rjmp	.+190    	; 0x2596 <vTaskSwitchContext+0xda>
    24d8:	10 92 9f 07 	sts	0x079F, r1	; 0x80079f <xYieldPending>
    24dc:	80 91 9c 07 	lds	r24, 0x079C	; 0x80079c <uxTopReadyPriority>
    24e0:	89 83       	std	Y+1, r24	; 0x01
    24e2:	03 c0       	rjmp	.+6      	; 0x24ea <vTaskSwitchContext+0x2e>
    24e4:	89 81       	ldd	r24, Y+1	; 0x01
    24e6:	81 50       	subi	r24, 0x01	; 1
    24e8:	89 83       	std	Y+1, r24	; 0x01
    24ea:	89 81       	ldd	r24, Y+1	; 0x01
    24ec:	28 2f       	mov	r18, r24
    24ee:	30 e0       	ldi	r19, 0x00	; 0
    24f0:	c9 01       	movw	r24, r18
    24f2:	88 0f       	add	r24, r24
    24f4:	99 1f       	adc	r25, r25
    24f6:	88 0f       	add	r24, r24
    24f8:	99 1f       	adc	r25, r25
    24fa:	88 0f       	add	r24, r24
    24fc:	99 1f       	adc	r25, r25
    24fe:	82 0f       	add	r24, r18
    2500:	93 1f       	adc	r25, r19
    2502:	8f 5c       	subi	r24, 0xCF	; 207
    2504:	98 4f       	sbci	r25, 0xF8	; 248
    2506:	fc 01       	movw	r30, r24
    2508:	80 81       	ld	r24, Z
    250a:	88 23       	and	r24, r24
    250c:	59 f3       	breq	.-42     	; 0x24e4 <vTaskSwitchContext+0x28>
    250e:	89 81       	ldd	r24, Y+1	; 0x01
    2510:	28 2f       	mov	r18, r24
    2512:	30 e0       	ldi	r19, 0x00	; 0
    2514:	c9 01       	movw	r24, r18
    2516:	88 0f       	add	r24, r24
    2518:	99 1f       	adc	r25, r25
    251a:	88 0f       	add	r24, r24
    251c:	99 1f       	adc	r25, r25
    251e:	88 0f       	add	r24, r24
    2520:	99 1f       	adc	r25, r25
    2522:	82 0f       	add	r24, r18
    2524:	93 1f       	adc	r25, r19
    2526:	8f 5c       	subi	r24, 0xCF	; 207
    2528:	98 4f       	sbci	r25, 0xF8	; 248
    252a:	9b 83       	std	Y+3, r25	; 0x03
    252c:	8a 83       	std	Y+2, r24	; 0x02
    252e:	8a 81       	ldd	r24, Y+2	; 0x02
    2530:	9b 81       	ldd	r25, Y+3	; 0x03
    2532:	fc 01       	movw	r30, r24
    2534:	81 81       	ldd	r24, Z+1	; 0x01
    2536:	92 81       	ldd	r25, Z+2	; 0x02
    2538:	fc 01       	movw	r30, r24
    253a:	22 81       	ldd	r18, Z+2	; 0x02
    253c:	33 81       	ldd	r19, Z+3	; 0x03
    253e:	8a 81       	ldd	r24, Y+2	; 0x02
    2540:	9b 81       	ldd	r25, Y+3	; 0x03
    2542:	fc 01       	movw	r30, r24
    2544:	32 83       	std	Z+2, r19	; 0x02
    2546:	21 83       	std	Z+1, r18	; 0x01
    2548:	8a 81       	ldd	r24, Y+2	; 0x02
    254a:	9b 81       	ldd	r25, Y+3	; 0x03
    254c:	fc 01       	movw	r30, r24
    254e:	21 81       	ldd	r18, Z+1	; 0x01
    2550:	32 81       	ldd	r19, Z+2	; 0x02
    2552:	8a 81       	ldd	r24, Y+2	; 0x02
    2554:	9b 81       	ldd	r25, Y+3	; 0x03
    2556:	03 96       	adiw	r24, 0x03	; 3
    2558:	28 17       	cp	r18, r24
    255a:	39 07       	cpc	r19, r25
    255c:	69 f4       	brne	.+26     	; 0x2578 <vTaskSwitchContext+0xbc>
    255e:	8a 81       	ldd	r24, Y+2	; 0x02
    2560:	9b 81       	ldd	r25, Y+3	; 0x03
    2562:	fc 01       	movw	r30, r24
    2564:	81 81       	ldd	r24, Z+1	; 0x01
    2566:	92 81       	ldd	r25, Z+2	; 0x02
    2568:	fc 01       	movw	r30, r24
    256a:	22 81       	ldd	r18, Z+2	; 0x02
    256c:	33 81       	ldd	r19, Z+3	; 0x03
    256e:	8a 81       	ldd	r24, Y+2	; 0x02
    2570:	9b 81       	ldd	r25, Y+3	; 0x03
    2572:	fc 01       	movw	r30, r24
    2574:	32 83       	std	Z+2, r19	; 0x02
    2576:	21 83       	std	Z+1, r18	; 0x01
    2578:	8a 81       	ldd	r24, Y+2	; 0x02
    257a:	9b 81       	ldd	r25, Y+3	; 0x03
    257c:	fc 01       	movw	r30, r24
    257e:	81 81       	ldd	r24, Z+1	; 0x01
    2580:	92 81       	ldd	r25, Z+2	; 0x02
    2582:	fc 01       	movw	r30, r24
    2584:	86 81       	ldd	r24, Z+6	; 0x06
    2586:	97 81       	ldd	r25, Z+7	; 0x07
    2588:	90 93 30 07 	sts	0x0730, r25	; 0x800730 <pxCurrentTCB+0x1>
    258c:	80 93 2f 07 	sts	0x072F, r24	; 0x80072f <pxCurrentTCB>
    2590:	89 81       	ldd	r24, Y+1	; 0x01
    2592:	80 93 9c 07 	sts	0x079C, r24	; 0x80079c <uxTopReadyPriority>
    2596:	00 00       	nop
    2598:	0f 90       	pop	r0
    259a:	0f 90       	pop	r0
    259c:	0f 90       	pop	r0
    259e:	df 91       	pop	r29
    25a0:	cf 91       	pop	r28
    25a2:	08 95       	ret

000025a4 <vTaskPlaceOnEventList>:
    25a4:	cf 93       	push	r28
    25a6:	df 93       	push	r29
    25a8:	00 d0       	rcall	.+0      	; 0x25aa <vTaskPlaceOnEventList+0x6>
    25aa:	00 d0       	rcall	.+0      	; 0x25ac <vTaskPlaceOnEventList+0x8>
    25ac:	cd b7       	in	r28, 0x3d	; 61
    25ae:	de b7       	in	r29, 0x3e	; 62
    25b0:	9a 83       	std	Y+2, r25	; 0x02
    25b2:	89 83       	std	Y+1, r24	; 0x01
    25b4:	7c 83       	std	Y+4, r23	; 0x04
    25b6:	6b 83       	std	Y+3, r22	; 0x03
    25b8:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <pxCurrentTCB>
    25bc:	90 91 30 07 	lds	r25, 0x0730	; 0x800730 <pxCurrentTCB+0x1>
    25c0:	9c 01       	movw	r18, r24
    25c2:	24 5f       	subi	r18, 0xF4	; 244
    25c4:	3f 4f       	sbci	r19, 0xFF	; 255
    25c6:	89 81       	ldd	r24, Y+1	; 0x01
    25c8:	9a 81       	ldd	r25, Y+2	; 0x02
    25ca:	b9 01       	movw	r22, r18
    25cc:	0e 94 48 05 	call	0xa90	; 0xa90 <vListInsert>
    25d0:	8b 81       	ldd	r24, Y+3	; 0x03
    25d2:	9c 81       	ldd	r25, Y+4	; 0x04
    25d4:	61 e0       	ldi	r22, 0x01	; 1
    25d6:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <prvAddCurrentTaskToDelayedList>
    25da:	00 00       	nop
    25dc:	0f 90       	pop	r0
    25de:	0f 90       	pop	r0
    25e0:	0f 90       	pop	r0
    25e2:	0f 90       	pop	r0
    25e4:	df 91       	pop	r29
    25e6:	cf 91       	pop	r28
    25e8:	08 95       	ret

000025ea <xTaskRemoveFromEventList>:
    25ea:	cf 93       	push	r28
    25ec:	df 93       	push	r29
    25ee:	00 d0       	rcall	.+0      	; 0x25f0 <xTaskRemoveFromEventList+0x6>
    25f0:	00 d0       	rcall	.+0      	; 0x25f2 <xTaskRemoveFromEventList+0x8>
    25f2:	1f 92       	push	r1
    25f4:	cd b7       	in	r28, 0x3d	; 61
    25f6:	de b7       	in	r29, 0x3e	; 62
    25f8:	9d 83       	std	Y+5, r25	; 0x05
    25fa:	8c 83       	std	Y+4, r24	; 0x04
    25fc:	8c 81       	ldd	r24, Y+4	; 0x04
    25fe:	9d 81       	ldd	r25, Y+5	; 0x05
    2600:	fc 01       	movw	r30, r24
    2602:	85 81       	ldd	r24, Z+5	; 0x05
    2604:	96 81       	ldd	r25, Z+6	; 0x06
    2606:	fc 01       	movw	r30, r24
    2608:	86 81       	ldd	r24, Z+6	; 0x06
    260a:	97 81       	ldd	r25, Z+7	; 0x07
    260c:	9b 83       	std	Y+3, r25	; 0x03
    260e:	8a 83       	std	Y+2, r24	; 0x02
    2610:	8a 81       	ldd	r24, Y+2	; 0x02
    2612:	9b 81       	ldd	r25, Y+3	; 0x03
    2614:	0c 96       	adiw	r24, 0x0c	; 12
    2616:	0e 94 c0 05 	call	0xb80	; 0xb80 <uxListRemove>
    261a:	80 91 a6 07 	lds	r24, 0x07A6	; 0x8007a6 <uxSchedulerSuspended>
    261e:	88 23       	and	r24, r24
    2620:	69 f5       	brne	.+90     	; 0x267c <xTaskRemoveFromEventList+0x92>
    2622:	8a 81       	ldd	r24, Y+2	; 0x02
    2624:	9b 81       	ldd	r25, Y+3	; 0x03
    2626:	02 96       	adiw	r24, 0x02	; 2
    2628:	0e 94 c0 05 	call	0xb80	; 0xb80 <uxListRemove>
    262c:	8a 81       	ldd	r24, Y+2	; 0x02
    262e:	9b 81       	ldd	r25, Y+3	; 0x03
    2630:	fc 01       	movw	r30, r24
    2632:	96 89       	ldd	r25, Z+22	; 0x16
    2634:	80 91 9c 07 	lds	r24, 0x079C	; 0x80079c <uxTopReadyPriority>
    2638:	89 17       	cp	r24, r25
    263a:	30 f4       	brcc	.+12     	; 0x2648 <xTaskRemoveFromEventList+0x5e>
    263c:	8a 81       	ldd	r24, Y+2	; 0x02
    263e:	9b 81       	ldd	r25, Y+3	; 0x03
    2640:	fc 01       	movw	r30, r24
    2642:	86 89       	ldd	r24, Z+22	; 0x16
    2644:	80 93 9c 07 	sts	0x079C, r24	; 0x80079c <uxTopReadyPriority>
    2648:	8a 81       	ldd	r24, Y+2	; 0x02
    264a:	9b 81       	ldd	r25, Y+3	; 0x03
    264c:	ac 01       	movw	r20, r24
    264e:	4e 5f       	subi	r20, 0xFE	; 254
    2650:	5f 4f       	sbci	r21, 0xFF	; 255
    2652:	8a 81       	ldd	r24, Y+2	; 0x02
    2654:	9b 81       	ldd	r25, Y+3	; 0x03
    2656:	fc 01       	movw	r30, r24
    2658:	86 89       	ldd	r24, Z+22	; 0x16
    265a:	28 2f       	mov	r18, r24
    265c:	30 e0       	ldi	r19, 0x00	; 0
    265e:	c9 01       	movw	r24, r18
    2660:	88 0f       	add	r24, r24
    2662:	99 1f       	adc	r25, r25
    2664:	88 0f       	add	r24, r24
    2666:	99 1f       	adc	r25, r25
    2668:	88 0f       	add	r24, r24
    266a:	99 1f       	adc	r25, r25
    266c:	82 0f       	add	r24, r18
    266e:	93 1f       	adc	r25, r19
    2670:	8f 5c       	subi	r24, 0xCF	; 207
    2672:	98 4f       	sbci	r25, 0xF8	; 248
    2674:	ba 01       	movw	r22, r20
    2676:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <vListInsertEnd>
    267a:	08 c0       	rjmp	.+16     	; 0x268c <xTaskRemoveFromEventList+0xa2>
    267c:	8a 81       	ldd	r24, Y+2	; 0x02
    267e:	9b 81       	ldd	r25, Y+3	; 0x03
    2680:	0c 96       	adiw	r24, 0x0c	; 12
    2682:	bc 01       	movw	r22, r24
    2684:	8d e7       	ldi	r24, 0x7D	; 125
    2686:	97 e0       	ldi	r25, 0x07	; 7
    2688:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <vListInsertEnd>
    268c:	8a 81       	ldd	r24, Y+2	; 0x02
    268e:	9b 81       	ldd	r25, Y+3	; 0x03
    2690:	fc 01       	movw	r30, r24
    2692:	26 89       	ldd	r18, Z+22	; 0x16
    2694:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <pxCurrentTCB>
    2698:	90 91 30 07 	lds	r25, 0x0730	; 0x800730 <pxCurrentTCB+0x1>
    269c:	fc 01       	movw	r30, r24
    269e:	86 89       	ldd	r24, Z+22	; 0x16
    26a0:	82 17       	cp	r24, r18
    26a2:	30 f4       	brcc	.+12     	; 0x26b0 <xTaskRemoveFromEventList+0xc6>
    26a4:	81 e0       	ldi	r24, 0x01	; 1
    26a6:	89 83       	std	Y+1, r24	; 0x01
    26a8:	81 e0       	ldi	r24, 0x01	; 1
    26aa:	80 93 9f 07 	sts	0x079F, r24	; 0x80079f <xYieldPending>
    26ae:	01 c0       	rjmp	.+2      	; 0x26b2 <xTaskRemoveFromEventList+0xc8>
    26b0:	19 82       	std	Y+1, r1	; 0x01
    26b2:	89 81       	ldd	r24, Y+1	; 0x01
    26b4:	0f 90       	pop	r0
    26b6:	0f 90       	pop	r0
    26b8:	0f 90       	pop	r0
    26ba:	0f 90       	pop	r0
    26bc:	0f 90       	pop	r0
    26be:	df 91       	pop	r29
    26c0:	cf 91       	pop	r28
    26c2:	08 95       	ret

000026c4 <vTaskInternalSetTimeOutState>:
    26c4:	cf 93       	push	r28
    26c6:	df 93       	push	r29
    26c8:	00 d0       	rcall	.+0      	; 0x26ca <vTaskInternalSetTimeOutState+0x6>
    26ca:	cd b7       	in	r28, 0x3d	; 61
    26cc:	de b7       	in	r29, 0x3e	; 62
    26ce:	9a 83       	std	Y+2, r25	; 0x02
    26d0:	89 83       	std	Y+1, r24	; 0x01
    26d2:	20 91 a0 07 	lds	r18, 0x07A0	; 0x8007a0 <xNumOfOverflows>
    26d6:	89 81       	ldd	r24, Y+1	; 0x01
    26d8:	9a 81       	ldd	r25, Y+2	; 0x02
    26da:	fc 01       	movw	r30, r24
    26dc:	20 83       	st	Z, r18
    26de:	20 91 9a 07 	lds	r18, 0x079A	; 0x80079a <xTickCount>
    26e2:	30 91 9b 07 	lds	r19, 0x079B	; 0x80079b <xTickCount+0x1>
    26e6:	89 81       	ldd	r24, Y+1	; 0x01
    26e8:	9a 81       	ldd	r25, Y+2	; 0x02
    26ea:	fc 01       	movw	r30, r24
    26ec:	32 83       	std	Z+2, r19	; 0x02
    26ee:	21 83       	std	Z+1, r18	; 0x01
    26f0:	00 00       	nop
    26f2:	0f 90       	pop	r0
    26f4:	0f 90       	pop	r0
    26f6:	df 91       	pop	r29
    26f8:	cf 91       	pop	r28
    26fa:	08 95       	ret

000026fc <xTaskCheckForTimeOut>:
    26fc:	cf 93       	push	r28
    26fe:	df 93       	push	r29
    2700:	cd b7       	in	r28, 0x3d	; 61
    2702:	de b7       	in	r29, 0x3e	; 62
    2704:	29 97       	sbiw	r28, 0x09	; 9
    2706:	0f b6       	in	r0, 0x3f	; 63
    2708:	f8 94       	cli
    270a:	de bf       	out	0x3e, r29	; 62
    270c:	0f be       	out	0x3f, r0	; 63
    270e:	cd bf       	out	0x3d, r28	; 61
    2710:	9f 83       	std	Y+7, r25	; 0x07
    2712:	8e 83       	std	Y+6, r24	; 0x06
    2714:	79 87       	std	Y+9, r23	; 0x09
    2716:	68 87       	std	Y+8, r22	; 0x08
    2718:	0f b6       	in	r0, 0x3f	; 63
    271a:	f8 94       	cli
    271c:	0f 92       	push	r0
    271e:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <xTickCount>
    2722:	90 91 9b 07 	lds	r25, 0x079B	; 0x80079b <xTickCount+0x1>
    2726:	9b 83       	std	Y+3, r25	; 0x03
    2728:	8a 83       	std	Y+2, r24	; 0x02
    272a:	8e 81       	ldd	r24, Y+6	; 0x06
    272c:	9f 81       	ldd	r25, Y+7	; 0x07
    272e:	fc 01       	movw	r30, r24
    2730:	81 81       	ldd	r24, Z+1	; 0x01
    2732:	92 81       	ldd	r25, Z+2	; 0x02
    2734:	2a 81       	ldd	r18, Y+2	; 0x02
    2736:	3b 81       	ldd	r19, Y+3	; 0x03
    2738:	a9 01       	movw	r20, r18
    273a:	48 1b       	sub	r20, r24
    273c:	59 0b       	sbc	r21, r25
    273e:	ca 01       	movw	r24, r20
    2740:	9d 83       	std	Y+5, r25	; 0x05
    2742:	8c 83       	std	Y+4, r24	; 0x04
    2744:	88 85       	ldd	r24, Y+8	; 0x08
    2746:	99 85       	ldd	r25, Y+9	; 0x09
    2748:	fc 01       	movw	r30, r24
    274a:	80 81       	ld	r24, Z
    274c:	91 81       	ldd	r25, Z+1	; 0x01
    274e:	01 96       	adiw	r24, 0x01	; 1
    2750:	11 f4       	brne	.+4      	; 0x2756 <xTaskCheckForTimeOut+0x5a>
    2752:	19 82       	std	Y+1, r1	; 0x01
    2754:	3a c0       	rjmp	.+116    	; 0x27ca <xTaskCheckForTimeOut+0xce>
    2756:	8e 81       	ldd	r24, Y+6	; 0x06
    2758:	9f 81       	ldd	r25, Y+7	; 0x07
    275a:	fc 01       	movw	r30, r24
    275c:	90 81       	ld	r25, Z
    275e:	80 91 a0 07 	lds	r24, 0x07A0	; 0x8007a0 <xNumOfOverflows>
    2762:	98 17       	cp	r25, r24
    2764:	69 f0       	breq	.+26     	; 0x2780 <xTaskCheckForTimeOut+0x84>
    2766:	8e 81       	ldd	r24, Y+6	; 0x06
    2768:	9f 81       	ldd	r25, Y+7	; 0x07
    276a:	fc 01       	movw	r30, r24
    276c:	21 81       	ldd	r18, Z+1	; 0x01
    276e:	32 81       	ldd	r19, Z+2	; 0x02
    2770:	8a 81       	ldd	r24, Y+2	; 0x02
    2772:	9b 81       	ldd	r25, Y+3	; 0x03
    2774:	82 17       	cp	r24, r18
    2776:	93 07       	cpc	r25, r19
    2778:	18 f0       	brcs	.+6      	; 0x2780 <xTaskCheckForTimeOut+0x84>
    277a:	81 e0       	ldi	r24, 0x01	; 1
    277c:	89 83       	std	Y+1, r24	; 0x01
    277e:	25 c0       	rjmp	.+74     	; 0x27ca <xTaskCheckForTimeOut+0xce>
    2780:	88 85       	ldd	r24, Y+8	; 0x08
    2782:	99 85       	ldd	r25, Y+9	; 0x09
    2784:	fc 01       	movw	r30, r24
    2786:	20 81       	ld	r18, Z
    2788:	31 81       	ldd	r19, Z+1	; 0x01
    278a:	8c 81       	ldd	r24, Y+4	; 0x04
    278c:	9d 81       	ldd	r25, Y+5	; 0x05
    278e:	82 17       	cp	r24, r18
    2790:	93 07       	cpc	r25, r19
    2792:	a0 f4       	brcc	.+40     	; 0x27bc <xTaskCheckForTimeOut+0xc0>
    2794:	88 85       	ldd	r24, Y+8	; 0x08
    2796:	99 85       	ldd	r25, Y+9	; 0x09
    2798:	fc 01       	movw	r30, r24
    279a:	20 81       	ld	r18, Z
    279c:	31 81       	ldd	r19, Z+1	; 0x01
    279e:	8c 81       	ldd	r24, Y+4	; 0x04
    27a0:	9d 81       	ldd	r25, Y+5	; 0x05
    27a2:	28 1b       	sub	r18, r24
    27a4:	39 0b       	sbc	r19, r25
    27a6:	88 85       	ldd	r24, Y+8	; 0x08
    27a8:	99 85       	ldd	r25, Y+9	; 0x09
    27aa:	fc 01       	movw	r30, r24
    27ac:	31 83       	std	Z+1, r19	; 0x01
    27ae:	20 83       	st	Z, r18
    27b0:	8e 81       	ldd	r24, Y+6	; 0x06
    27b2:	9f 81       	ldd	r25, Y+7	; 0x07
    27b4:	0e 94 62 13 	call	0x26c4	; 0x26c4 <vTaskInternalSetTimeOutState>
    27b8:	19 82       	std	Y+1, r1	; 0x01
    27ba:	07 c0       	rjmp	.+14     	; 0x27ca <xTaskCheckForTimeOut+0xce>
    27bc:	88 85       	ldd	r24, Y+8	; 0x08
    27be:	99 85       	ldd	r25, Y+9	; 0x09
    27c0:	fc 01       	movw	r30, r24
    27c2:	11 82       	std	Z+1, r1	; 0x01
    27c4:	10 82       	st	Z, r1
    27c6:	81 e0       	ldi	r24, 0x01	; 1
    27c8:	89 83       	std	Y+1, r24	; 0x01
    27ca:	0f 90       	pop	r0
    27cc:	0f be       	out	0x3f, r0	; 63
    27ce:	89 81       	ldd	r24, Y+1	; 0x01
    27d0:	29 96       	adiw	r28, 0x09	; 9
    27d2:	0f b6       	in	r0, 0x3f	; 63
    27d4:	f8 94       	cli
    27d6:	de bf       	out	0x3e, r29	; 62
    27d8:	0f be       	out	0x3f, r0	; 63
    27da:	cd bf       	out	0x3d, r28	; 61
    27dc:	df 91       	pop	r29
    27de:	cf 91       	pop	r28
    27e0:	08 95       	ret

000027e2 <vTaskMissedYield>:
    27e2:	cf 93       	push	r28
    27e4:	df 93       	push	r29
    27e6:	cd b7       	in	r28, 0x3d	; 61
    27e8:	de b7       	in	r29, 0x3e	; 62
    27ea:	81 e0       	ldi	r24, 0x01	; 1
    27ec:	80 93 9f 07 	sts	0x079F, r24	; 0x80079f <xYieldPending>
    27f0:	00 00       	nop
    27f2:	df 91       	pop	r29
    27f4:	cf 91       	pop	r28
    27f6:	08 95       	ret

000027f8 <prvIdleTask>:
    27f8:	cf 93       	push	r28
    27fa:	df 93       	push	r29
    27fc:	00 d0       	rcall	.+0      	; 0x27fe <prvIdleTask+0x6>
    27fe:	cd b7       	in	r28, 0x3d	; 61
    2800:	de b7       	in	r29, 0x3e	; 62
    2802:	9a 83       	std	Y+2, r25	; 0x02
    2804:	89 83       	std	Y+1, r24	; 0x01
    2806:	0e 94 48 14 	call	0x2890	; 0x2890 <prvCheckTasksWaitingTermination>
    280a:	fd cf       	rjmp	.-6      	; 0x2806 <prvIdleTask+0xe>

0000280c <prvInitialiseTaskLists>:
    280c:	cf 93       	push	r28
    280e:	df 93       	push	r29
    2810:	1f 92       	push	r1
    2812:	cd b7       	in	r28, 0x3d	; 61
    2814:	de b7       	in	r29, 0x3e	; 62
    2816:	19 82       	std	Y+1, r1	; 0x01
    2818:	13 c0       	rjmp	.+38     	; 0x2840 <prvInitialiseTaskLists+0x34>
    281a:	89 81       	ldd	r24, Y+1	; 0x01
    281c:	28 2f       	mov	r18, r24
    281e:	30 e0       	ldi	r19, 0x00	; 0
    2820:	c9 01       	movw	r24, r18
    2822:	88 0f       	add	r24, r24
    2824:	99 1f       	adc	r25, r25
    2826:	88 0f       	add	r24, r24
    2828:	99 1f       	adc	r25, r25
    282a:	88 0f       	add	r24, r24
    282c:	99 1f       	adc	r25, r25
    282e:	82 0f       	add	r24, r18
    2830:	93 1f       	adc	r25, r19
    2832:	8f 5c       	subi	r24, 0xCF	; 207
    2834:	98 4f       	sbci	r25, 0xF8	; 248
    2836:	0e 94 b1 04 	call	0x962	; 0x962 <vListInitialise>
    283a:	89 81       	ldd	r24, Y+1	; 0x01
    283c:	8f 5f       	subi	r24, 0xFF	; 255
    283e:	89 83       	std	Y+1, r24	; 0x01
    2840:	89 81       	ldd	r24, Y+1	; 0x01
    2842:	86 30       	cpi	r24, 0x06	; 6
    2844:	50 f3       	brcs	.-44     	; 0x281a <prvInitialiseTaskLists+0xe>
    2846:	87 e6       	ldi	r24, 0x67	; 103
    2848:	97 e0       	ldi	r25, 0x07	; 7
    284a:	0e 94 b1 04 	call	0x962	; 0x962 <vListInitialise>
    284e:	80 e7       	ldi	r24, 0x70	; 112
    2850:	97 e0       	ldi	r25, 0x07	; 7
    2852:	0e 94 b1 04 	call	0x962	; 0x962 <vListInitialise>
    2856:	8d e7       	ldi	r24, 0x7D	; 125
    2858:	97 e0       	ldi	r25, 0x07	; 7
    285a:	0e 94 b1 04 	call	0x962	; 0x962 <vListInitialise>
    285e:	86 e8       	ldi	r24, 0x86	; 134
    2860:	97 e0       	ldi	r25, 0x07	; 7
    2862:	0e 94 b1 04 	call	0x962	; 0x962 <vListInitialise>
    2866:	80 e9       	ldi	r24, 0x90	; 144
    2868:	97 e0       	ldi	r25, 0x07	; 7
    286a:	0e 94 b1 04 	call	0x962	; 0x962 <vListInitialise>
    286e:	87 e6       	ldi	r24, 0x67	; 103
    2870:	97 e0       	ldi	r25, 0x07	; 7
    2872:	90 93 7a 07 	sts	0x077A, r25	; 0x80077a <pxDelayedTaskList+0x1>
    2876:	80 93 79 07 	sts	0x0779, r24	; 0x800779 <pxDelayedTaskList>
    287a:	80 e7       	ldi	r24, 0x70	; 112
    287c:	97 e0       	ldi	r25, 0x07	; 7
    287e:	90 93 7c 07 	sts	0x077C, r25	; 0x80077c <pxOverflowDelayedTaskList+0x1>
    2882:	80 93 7b 07 	sts	0x077B, r24	; 0x80077b <pxOverflowDelayedTaskList>
    2886:	00 00       	nop
    2888:	0f 90       	pop	r0
    288a:	df 91       	pop	r29
    288c:	cf 91       	pop	r28
    288e:	08 95       	ret

00002890 <prvCheckTasksWaitingTermination>:
    2890:	cf 93       	push	r28
    2892:	df 93       	push	r29
    2894:	00 d0       	rcall	.+0      	; 0x2896 <prvCheckTasksWaitingTermination+0x6>
    2896:	cd b7       	in	r28, 0x3d	; 61
    2898:	de b7       	in	r29, 0x3e	; 62
    289a:	21 c0       	rjmp	.+66     	; 0x28de <prvCheckTasksWaitingTermination+0x4e>
    289c:	0f b6       	in	r0, 0x3f	; 63
    289e:	f8 94       	cli
    28a0:	0f 92       	push	r0
    28a2:	80 91 8b 07 	lds	r24, 0x078B	; 0x80078b <xTasksWaitingTermination+0x5>
    28a6:	90 91 8c 07 	lds	r25, 0x078C	; 0x80078c <xTasksWaitingTermination+0x6>
    28aa:	fc 01       	movw	r30, r24
    28ac:	86 81       	ldd	r24, Z+6	; 0x06
    28ae:	97 81       	ldd	r25, Z+7	; 0x07
    28b0:	9a 83       	std	Y+2, r25	; 0x02
    28b2:	89 83       	std	Y+1, r24	; 0x01
    28b4:	89 81       	ldd	r24, Y+1	; 0x01
    28b6:	9a 81       	ldd	r25, Y+2	; 0x02
    28b8:	02 96       	adiw	r24, 0x02	; 2
    28ba:	0e 94 c0 05 	call	0xb80	; 0xb80 <uxListRemove>
    28be:	80 91 99 07 	lds	r24, 0x0799	; 0x800799 <uxCurrentNumberOfTasks>
    28c2:	81 50       	subi	r24, 0x01	; 1
    28c4:	80 93 99 07 	sts	0x0799, r24	; 0x800799 <uxCurrentNumberOfTasks>
    28c8:	80 91 8f 07 	lds	r24, 0x078F	; 0x80078f <uxDeletedTasksWaitingCleanUp>
    28cc:	81 50       	subi	r24, 0x01	; 1
    28ce:	80 93 8f 07 	sts	0x078F, r24	; 0x80078f <uxDeletedTasksWaitingCleanUp>
    28d2:	0f 90       	pop	r0
    28d4:	0f be       	out	0x3f, r0	; 63
    28d6:	89 81       	ldd	r24, Y+1	; 0x01
    28d8:	9a 81       	ldd	r25, Y+2	; 0x02
    28da:	0e 94 79 14 	call	0x28f2	; 0x28f2 <prvDeleteTCB>
    28de:	80 91 8f 07 	lds	r24, 0x078F	; 0x80078f <uxDeletedTasksWaitingCleanUp>
    28e2:	88 23       	and	r24, r24
    28e4:	d9 f6       	brne	.-74     	; 0x289c <prvCheckTasksWaitingTermination+0xc>
    28e6:	00 00       	nop
    28e8:	0f 90       	pop	r0
    28ea:	0f 90       	pop	r0
    28ec:	df 91       	pop	r29
    28ee:	cf 91       	pop	r28
    28f0:	08 95       	ret

000028f2 <prvDeleteTCB>:
    28f2:	cf 93       	push	r28
    28f4:	df 93       	push	r29
    28f6:	00 d0       	rcall	.+0      	; 0x28f8 <prvDeleteTCB+0x6>
    28f8:	cd b7       	in	r28, 0x3d	; 61
    28fa:	de b7       	in	r29, 0x3e	; 62
    28fc:	9a 83       	std	Y+2, r25	; 0x02
    28fe:	89 83       	std	Y+1, r24	; 0x01
    2900:	89 81       	ldd	r24, Y+1	; 0x01
    2902:	9a 81       	ldd	r25, Y+2	; 0x02
    2904:	fc 01       	movw	r30, r24
    2906:	87 89       	ldd	r24, Z+23	; 0x17
    2908:	90 8d       	ldd	r25, Z+24	; 0x18
    290a:	0e 94 a4 04 	call	0x948	; 0x948 <vPortFree>
    290e:	89 81       	ldd	r24, Y+1	; 0x01
    2910:	9a 81       	ldd	r25, Y+2	; 0x02
    2912:	0e 94 a4 04 	call	0x948	; 0x948 <vPortFree>
    2916:	00 00       	nop
    2918:	0f 90       	pop	r0
    291a:	0f 90       	pop	r0
    291c:	df 91       	pop	r29
    291e:	cf 91       	pop	r28
    2920:	08 95       	ret

00002922 <prvResetNextTaskUnblockTime>:
    2922:	cf 93       	push	r28
    2924:	df 93       	push	r29
    2926:	00 d0       	rcall	.+0      	; 0x2928 <prvResetNextTaskUnblockTime+0x6>
    2928:	cd b7       	in	r28, 0x3d	; 61
    292a:	de b7       	in	r29, 0x3e	; 62
    292c:	80 91 79 07 	lds	r24, 0x0779	; 0x800779 <pxDelayedTaskList>
    2930:	90 91 7a 07 	lds	r25, 0x077A	; 0x80077a <pxDelayedTaskList+0x1>
    2934:	fc 01       	movw	r30, r24
    2936:	80 81       	ld	r24, Z
    2938:	88 23       	and	r24, r24
    293a:	39 f4       	brne	.+14     	; 0x294a <prvResetNextTaskUnblockTime+0x28>
    293c:	8f ef       	ldi	r24, 0xFF	; 255
    293e:	9f ef       	ldi	r25, 0xFF	; 255
    2940:	90 93 a3 07 	sts	0x07A3, r25	; 0x8007a3 <xNextTaskUnblockTime+0x1>
    2944:	80 93 a2 07 	sts	0x07A2, r24	; 0x8007a2 <xNextTaskUnblockTime>
    2948:	15 c0       	rjmp	.+42     	; 0x2974 <prvResetNextTaskUnblockTime+0x52>
    294a:	80 91 79 07 	lds	r24, 0x0779	; 0x800779 <pxDelayedTaskList>
    294e:	90 91 7a 07 	lds	r25, 0x077A	; 0x80077a <pxDelayedTaskList+0x1>
    2952:	fc 01       	movw	r30, r24
    2954:	85 81       	ldd	r24, Z+5	; 0x05
    2956:	96 81       	ldd	r25, Z+6	; 0x06
    2958:	fc 01       	movw	r30, r24
    295a:	86 81       	ldd	r24, Z+6	; 0x06
    295c:	97 81       	ldd	r25, Z+7	; 0x07
    295e:	9a 83       	std	Y+2, r25	; 0x02
    2960:	89 83       	std	Y+1, r24	; 0x01
    2962:	89 81       	ldd	r24, Y+1	; 0x01
    2964:	9a 81       	ldd	r25, Y+2	; 0x02
    2966:	fc 01       	movw	r30, r24
    2968:	82 81       	ldd	r24, Z+2	; 0x02
    296a:	93 81       	ldd	r25, Z+3	; 0x03
    296c:	90 93 a3 07 	sts	0x07A3, r25	; 0x8007a3 <xNextTaskUnblockTime+0x1>
    2970:	80 93 a2 07 	sts	0x07A2, r24	; 0x8007a2 <xNextTaskUnblockTime>
    2974:	00 00       	nop
    2976:	0f 90       	pop	r0
    2978:	0f 90       	pop	r0
    297a:	df 91       	pop	r29
    297c:	cf 91       	pop	r28
    297e:	08 95       	ret

00002980 <xTaskPriorityInherit>:
    2980:	cf 93       	push	r28
    2982:	df 93       	push	r29
    2984:	00 d0       	rcall	.+0      	; 0x2986 <xTaskPriorityInherit+0x6>
    2986:	00 d0       	rcall	.+0      	; 0x2988 <xTaskPriorityInherit+0x8>
    2988:	1f 92       	push	r1
    298a:	cd b7       	in	r28, 0x3d	; 61
    298c:	de b7       	in	r29, 0x3e	; 62
    298e:	9d 83       	std	Y+5, r25	; 0x05
    2990:	8c 83       	std	Y+4, r24	; 0x04
    2992:	8c 81       	ldd	r24, Y+4	; 0x04
    2994:	9d 81       	ldd	r25, Y+5	; 0x05
    2996:	9b 83       	std	Y+3, r25	; 0x03
    2998:	8a 83       	std	Y+2, r24	; 0x02
    299a:	19 82       	std	Y+1, r1	; 0x01
    299c:	8c 81       	ldd	r24, Y+4	; 0x04
    299e:	9d 81       	ldd	r25, Y+5	; 0x05
    29a0:	89 2b       	or	r24, r25
    29a2:	09 f4       	brne	.+2      	; 0x29a6 <xTaskPriorityInherit+0x26>
    29a4:	90 c0       	rjmp	.+288    	; 0x2ac6 <xTaskPriorityInherit+0x146>
    29a6:	8a 81       	ldd	r24, Y+2	; 0x02
    29a8:	9b 81       	ldd	r25, Y+3	; 0x03
    29aa:	fc 01       	movw	r30, r24
    29ac:	26 89       	ldd	r18, Z+22	; 0x16
    29ae:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <pxCurrentTCB>
    29b2:	90 91 30 07 	lds	r25, 0x0730	; 0x800730 <pxCurrentTCB+0x1>
    29b6:	fc 01       	movw	r30, r24
    29b8:	86 89       	ldd	r24, Z+22	; 0x16
    29ba:	28 17       	cp	r18, r24
    29bc:	08 f0       	brcs	.+2      	; 0x29c0 <xTaskPriorityInherit+0x40>
    29be:	75 c0       	rjmp	.+234    	; 0x2aaa <xTaskPriorityInherit+0x12a>
    29c0:	8a 81       	ldd	r24, Y+2	; 0x02
    29c2:	9b 81       	ldd	r25, Y+3	; 0x03
    29c4:	fc 01       	movw	r30, r24
    29c6:	84 85       	ldd	r24, Z+12	; 0x0c
    29c8:	95 85       	ldd	r25, Z+13	; 0x0d
    29ca:	99 23       	and	r25, r25
    29cc:	8c f0       	brlt	.+34     	; 0x29f0 <xTaskPriorityInherit+0x70>
    29ce:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <pxCurrentTCB>
    29d2:	90 91 30 07 	lds	r25, 0x0730	; 0x800730 <pxCurrentTCB+0x1>
    29d6:	fc 01       	movw	r30, r24
    29d8:	86 89       	ldd	r24, Z+22	; 0x16
    29da:	88 2f       	mov	r24, r24
    29dc:	90 e0       	ldi	r25, 0x00	; 0
    29de:	26 e0       	ldi	r18, 0x06	; 6
    29e0:	30 e0       	ldi	r19, 0x00	; 0
    29e2:	28 1b       	sub	r18, r24
    29e4:	39 0b       	sbc	r19, r25
    29e6:	8a 81       	ldd	r24, Y+2	; 0x02
    29e8:	9b 81       	ldd	r25, Y+3	; 0x03
    29ea:	fc 01       	movw	r30, r24
    29ec:	35 87       	std	Z+13, r19	; 0x0d
    29ee:	24 87       	std	Z+12, r18	; 0x0c
    29f0:	8a 81       	ldd	r24, Y+2	; 0x02
    29f2:	9b 81       	ldd	r25, Y+3	; 0x03
    29f4:	fc 01       	movw	r30, r24
    29f6:	42 85       	ldd	r20, Z+10	; 0x0a
    29f8:	53 85       	ldd	r21, Z+11	; 0x0b
    29fa:	8a 81       	ldd	r24, Y+2	; 0x02
    29fc:	9b 81       	ldd	r25, Y+3	; 0x03
    29fe:	fc 01       	movw	r30, r24
    2a00:	86 89       	ldd	r24, Z+22	; 0x16
    2a02:	28 2f       	mov	r18, r24
    2a04:	30 e0       	ldi	r19, 0x00	; 0
    2a06:	c9 01       	movw	r24, r18
    2a08:	88 0f       	add	r24, r24
    2a0a:	99 1f       	adc	r25, r25
    2a0c:	88 0f       	add	r24, r24
    2a0e:	99 1f       	adc	r25, r25
    2a10:	88 0f       	add	r24, r24
    2a12:	99 1f       	adc	r25, r25
    2a14:	82 0f       	add	r24, r18
    2a16:	93 1f       	adc	r25, r19
    2a18:	8f 5c       	subi	r24, 0xCF	; 207
    2a1a:	98 4f       	sbci	r25, 0xF8	; 248
    2a1c:	48 17       	cp	r20, r24
    2a1e:	59 07       	cpc	r21, r25
    2a20:	b9 f5       	brne	.+110    	; 0x2a90 <xTaskPriorityInherit+0x110>
    2a22:	8a 81       	ldd	r24, Y+2	; 0x02
    2a24:	9b 81       	ldd	r25, Y+3	; 0x03
    2a26:	02 96       	adiw	r24, 0x02	; 2
    2a28:	0e 94 c0 05 	call	0xb80	; 0xb80 <uxListRemove>
    2a2c:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <pxCurrentTCB>
    2a30:	90 91 30 07 	lds	r25, 0x0730	; 0x800730 <pxCurrentTCB+0x1>
    2a34:	fc 01       	movw	r30, r24
    2a36:	26 89       	ldd	r18, Z+22	; 0x16
    2a38:	8a 81       	ldd	r24, Y+2	; 0x02
    2a3a:	9b 81       	ldd	r25, Y+3	; 0x03
    2a3c:	fc 01       	movw	r30, r24
    2a3e:	26 8b       	std	Z+22, r18	; 0x16
    2a40:	8a 81       	ldd	r24, Y+2	; 0x02
    2a42:	9b 81       	ldd	r25, Y+3	; 0x03
    2a44:	fc 01       	movw	r30, r24
    2a46:	96 89       	ldd	r25, Z+22	; 0x16
    2a48:	80 91 9c 07 	lds	r24, 0x079C	; 0x80079c <uxTopReadyPriority>
    2a4c:	89 17       	cp	r24, r25
    2a4e:	30 f4       	brcc	.+12     	; 0x2a5c <xTaskPriorityInherit+0xdc>
    2a50:	8a 81       	ldd	r24, Y+2	; 0x02
    2a52:	9b 81       	ldd	r25, Y+3	; 0x03
    2a54:	fc 01       	movw	r30, r24
    2a56:	86 89       	ldd	r24, Z+22	; 0x16
    2a58:	80 93 9c 07 	sts	0x079C, r24	; 0x80079c <uxTopReadyPriority>
    2a5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a5e:	9b 81       	ldd	r25, Y+3	; 0x03
    2a60:	ac 01       	movw	r20, r24
    2a62:	4e 5f       	subi	r20, 0xFE	; 254
    2a64:	5f 4f       	sbci	r21, 0xFF	; 255
    2a66:	8a 81       	ldd	r24, Y+2	; 0x02
    2a68:	9b 81       	ldd	r25, Y+3	; 0x03
    2a6a:	fc 01       	movw	r30, r24
    2a6c:	86 89       	ldd	r24, Z+22	; 0x16
    2a6e:	28 2f       	mov	r18, r24
    2a70:	30 e0       	ldi	r19, 0x00	; 0
    2a72:	c9 01       	movw	r24, r18
    2a74:	88 0f       	add	r24, r24
    2a76:	99 1f       	adc	r25, r25
    2a78:	88 0f       	add	r24, r24
    2a7a:	99 1f       	adc	r25, r25
    2a7c:	88 0f       	add	r24, r24
    2a7e:	99 1f       	adc	r25, r25
    2a80:	82 0f       	add	r24, r18
    2a82:	93 1f       	adc	r25, r19
    2a84:	8f 5c       	subi	r24, 0xCF	; 207
    2a86:	98 4f       	sbci	r25, 0xF8	; 248
    2a88:	ba 01       	movw	r22, r20
    2a8a:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <vListInsertEnd>
    2a8e:	0a c0       	rjmp	.+20     	; 0x2aa4 <xTaskPriorityInherit+0x124>
    2a90:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <pxCurrentTCB>
    2a94:	90 91 30 07 	lds	r25, 0x0730	; 0x800730 <pxCurrentTCB+0x1>
    2a98:	fc 01       	movw	r30, r24
    2a9a:	26 89       	ldd	r18, Z+22	; 0x16
    2a9c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a9e:	9b 81       	ldd	r25, Y+3	; 0x03
    2aa0:	fc 01       	movw	r30, r24
    2aa2:	26 8b       	std	Z+22, r18	; 0x16
    2aa4:	81 e0       	ldi	r24, 0x01	; 1
    2aa6:	89 83       	std	Y+1, r24	; 0x01
    2aa8:	0e c0       	rjmp	.+28     	; 0x2ac6 <xTaskPriorityInherit+0x146>
    2aaa:	8a 81       	ldd	r24, Y+2	; 0x02
    2aac:	9b 81       	ldd	r25, Y+3	; 0x03
    2aae:	fc 01       	movw	r30, r24
    2ab0:	21 a1       	ldd	r18, Z+33	; 0x21
    2ab2:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <pxCurrentTCB>
    2ab6:	90 91 30 07 	lds	r25, 0x0730	; 0x800730 <pxCurrentTCB+0x1>
    2aba:	fc 01       	movw	r30, r24
    2abc:	86 89       	ldd	r24, Z+22	; 0x16
    2abe:	28 17       	cp	r18, r24
    2ac0:	10 f4       	brcc	.+4      	; 0x2ac6 <xTaskPriorityInherit+0x146>
    2ac2:	81 e0       	ldi	r24, 0x01	; 1
    2ac4:	89 83       	std	Y+1, r24	; 0x01
    2ac6:	89 81       	ldd	r24, Y+1	; 0x01
    2ac8:	0f 90       	pop	r0
    2aca:	0f 90       	pop	r0
    2acc:	0f 90       	pop	r0
    2ace:	0f 90       	pop	r0
    2ad0:	0f 90       	pop	r0
    2ad2:	df 91       	pop	r29
    2ad4:	cf 91       	pop	r28
    2ad6:	08 95       	ret

00002ad8 <xTaskPriorityDisinherit>:
    2ad8:	cf 93       	push	r28
    2ada:	df 93       	push	r29
    2adc:	00 d0       	rcall	.+0      	; 0x2ade <xTaskPriorityDisinherit+0x6>
    2ade:	00 d0       	rcall	.+0      	; 0x2ae0 <xTaskPriorityDisinherit+0x8>
    2ae0:	1f 92       	push	r1
    2ae2:	cd b7       	in	r28, 0x3d	; 61
    2ae4:	de b7       	in	r29, 0x3e	; 62
    2ae6:	9d 83       	std	Y+5, r25	; 0x05
    2ae8:	8c 83       	std	Y+4, r24	; 0x04
    2aea:	8c 81       	ldd	r24, Y+4	; 0x04
    2aec:	9d 81       	ldd	r25, Y+5	; 0x05
    2aee:	9b 83       	std	Y+3, r25	; 0x03
    2af0:	8a 83       	std	Y+2, r24	; 0x02
    2af2:	19 82       	std	Y+1, r1	; 0x01
    2af4:	8c 81       	ldd	r24, Y+4	; 0x04
    2af6:	9d 81       	ldd	r25, Y+5	; 0x05
    2af8:	89 2b       	or	r24, r25
    2afa:	09 f4       	brne	.+2      	; 0x2afe <xTaskPriorityDisinherit+0x26>
    2afc:	61 c0       	rjmp	.+194    	; 0x2bc0 <xTaskPriorityDisinherit+0xe8>
    2afe:	8a 81       	ldd	r24, Y+2	; 0x02
    2b00:	9b 81       	ldd	r25, Y+3	; 0x03
    2b02:	fc 01       	movw	r30, r24
    2b04:	82 a1       	ldd	r24, Z+34	; 0x22
    2b06:	2f ef       	ldi	r18, 0xFF	; 255
    2b08:	28 0f       	add	r18, r24
    2b0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b0c:	9b 81       	ldd	r25, Y+3	; 0x03
    2b0e:	fc 01       	movw	r30, r24
    2b10:	22 a3       	std	Z+34, r18	; 0x22
    2b12:	8a 81       	ldd	r24, Y+2	; 0x02
    2b14:	9b 81       	ldd	r25, Y+3	; 0x03
    2b16:	fc 01       	movw	r30, r24
    2b18:	26 89       	ldd	r18, Z+22	; 0x16
    2b1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b1c:	9b 81       	ldd	r25, Y+3	; 0x03
    2b1e:	fc 01       	movw	r30, r24
    2b20:	81 a1       	ldd	r24, Z+33	; 0x21
    2b22:	28 17       	cp	r18, r24
    2b24:	09 f4       	brne	.+2      	; 0x2b28 <xTaskPriorityDisinherit+0x50>
    2b26:	4c c0       	rjmp	.+152    	; 0x2bc0 <xTaskPriorityDisinherit+0xe8>
    2b28:	8a 81       	ldd	r24, Y+2	; 0x02
    2b2a:	9b 81       	ldd	r25, Y+3	; 0x03
    2b2c:	fc 01       	movw	r30, r24
    2b2e:	82 a1       	ldd	r24, Z+34	; 0x22
    2b30:	88 23       	and	r24, r24
    2b32:	09 f0       	breq	.+2      	; 0x2b36 <xTaskPriorityDisinherit+0x5e>
    2b34:	45 c0       	rjmp	.+138    	; 0x2bc0 <xTaskPriorityDisinherit+0xe8>
    2b36:	8a 81       	ldd	r24, Y+2	; 0x02
    2b38:	9b 81       	ldd	r25, Y+3	; 0x03
    2b3a:	02 96       	adiw	r24, 0x02	; 2
    2b3c:	0e 94 c0 05 	call	0xb80	; 0xb80 <uxListRemove>
    2b40:	8a 81       	ldd	r24, Y+2	; 0x02
    2b42:	9b 81       	ldd	r25, Y+3	; 0x03
    2b44:	fc 01       	movw	r30, r24
    2b46:	21 a1       	ldd	r18, Z+33	; 0x21
    2b48:	8a 81       	ldd	r24, Y+2	; 0x02
    2b4a:	9b 81       	ldd	r25, Y+3	; 0x03
    2b4c:	fc 01       	movw	r30, r24
    2b4e:	26 8b       	std	Z+22, r18	; 0x16
    2b50:	8a 81       	ldd	r24, Y+2	; 0x02
    2b52:	9b 81       	ldd	r25, Y+3	; 0x03
    2b54:	fc 01       	movw	r30, r24
    2b56:	86 89       	ldd	r24, Z+22	; 0x16
    2b58:	88 2f       	mov	r24, r24
    2b5a:	90 e0       	ldi	r25, 0x00	; 0
    2b5c:	26 e0       	ldi	r18, 0x06	; 6
    2b5e:	30 e0       	ldi	r19, 0x00	; 0
    2b60:	28 1b       	sub	r18, r24
    2b62:	39 0b       	sbc	r19, r25
    2b64:	8a 81       	ldd	r24, Y+2	; 0x02
    2b66:	9b 81       	ldd	r25, Y+3	; 0x03
    2b68:	fc 01       	movw	r30, r24
    2b6a:	35 87       	std	Z+13, r19	; 0x0d
    2b6c:	24 87       	std	Z+12, r18	; 0x0c
    2b6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b70:	9b 81       	ldd	r25, Y+3	; 0x03
    2b72:	fc 01       	movw	r30, r24
    2b74:	96 89       	ldd	r25, Z+22	; 0x16
    2b76:	80 91 9c 07 	lds	r24, 0x079C	; 0x80079c <uxTopReadyPriority>
    2b7a:	89 17       	cp	r24, r25
    2b7c:	30 f4       	brcc	.+12     	; 0x2b8a <xTaskPriorityDisinherit+0xb2>
    2b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b80:	9b 81       	ldd	r25, Y+3	; 0x03
    2b82:	fc 01       	movw	r30, r24
    2b84:	86 89       	ldd	r24, Z+22	; 0x16
    2b86:	80 93 9c 07 	sts	0x079C, r24	; 0x80079c <uxTopReadyPriority>
    2b8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b8c:	9b 81       	ldd	r25, Y+3	; 0x03
    2b8e:	ac 01       	movw	r20, r24
    2b90:	4e 5f       	subi	r20, 0xFE	; 254
    2b92:	5f 4f       	sbci	r21, 0xFF	; 255
    2b94:	8a 81       	ldd	r24, Y+2	; 0x02
    2b96:	9b 81       	ldd	r25, Y+3	; 0x03
    2b98:	fc 01       	movw	r30, r24
    2b9a:	86 89       	ldd	r24, Z+22	; 0x16
    2b9c:	28 2f       	mov	r18, r24
    2b9e:	30 e0       	ldi	r19, 0x00	; 0
    2ba0:	c9 01       	movw	r24, r18
    2ba2:	88 0f       	add	r24, r24
    2ba4:	99 1f       	adc	r25, r25
    2ba6:	88 0f       	add	r24, r24
    2ba8:	99 1f       	adc	r25, r25
    2baa:	88 0f       	add	r24, r24
    2bac:	99 1f       	adc	r25, r25
    2bae:	82 0f       	add	r24, r18
    2bb0:	93 1f       	adc	r25, r19
    2bb2:	8f 5c       	subi	r24, 0xCF	; 207
    2bb4:	98 4f       	sbci	r25, 0xF8	; 248
    2bb6:	ba 01       	movw	r22, r20
    2bb8:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <vListInsertEnd>
    2bbc:	81 e0       	ldi	r24, 0x01	; 1
    2bbe:	89 83       	std	Y+1, r24	; 0x01
    2bc0:	89 81       	ldd	r24, Y+1	; 0x01
    2bc2:	0f 90       	pop	r0
    2bc4:	0f 90       	pop	r0
    2bc6:	0f 90       	pop	r0
    2bc8:	0f 90       	pop	r0
    2bca:	0f 90       	pop	r0
    2bcc:	df 91       	pop	r29
    2bce:	cf 91       	pop	r28
    2bd0:	08 95       	ret

00002bd2 <vTaskPriorityDisinheritAfterTimeout>:
    2bd2:	cf 93       	push	r28
    2bd4:	df 93       	push	r29
    2bd6:	cd b7       	in	r28, 0x3d	; 61
    2bd8:	de b7       	in	r29, 0x3e	; 62
    2bda:	28 97       	sbiw	r28, 0x08	; 8
    2bdc:	0f b6       	in	r0, 0x3f	; 63
    2bde:	f8 94       	cli
    2be0:	de bf       	out	0x3e, r29	; 62
    2be2:	0f be       	out	0x3f, r0	; 63
    2be4:	cd bf       	out	0x3d, r28	; 61
    2be6:	9f 83       	std	Y+7, r25	; 0x07
    2be8:	8e 83       	std	Y+6, r24	; 0x06
    2bea:	68 87       	std	Y+8, r22	; 0x08
    2bec:	8e 81       	ldd	r24, Y+6	; 0x06
    2bee:	9f 81       	ldd	r25, Y+7	; 0x07
    2bf0:	9b 83       	std	Y+3, r25	; 0x03
    2bf2:	8a 83       	std	Y+2, r24	; 0x02
    2bf4:	81 e0       	ldi	r24, 0x01	; 1
    2bf6:	8c 83       	std	Y+4, r24	; 0x04
    2bf8:	8e 81       	ldd	r24, Y+6	; 0x06
    2bfa:	9f 81       	ldd	r25, Y+7	; 0x07
    2bfc:	89 2b       	or	r24, r25
    2bfe:	09 f4       	brne	.+2      	; 0x2c02 <vTaskPriorityDisinheritAfterTimeout+0x30>
    2c00:	7e c0       	rjmp	.+252    	; 0x2cfe <vTaskPriorityDisinheritAfterTimeout+0x12c>
    2c02:	8a 81       	ldd	r24, Y+2	; 0x02
    2c04:	9b 81       	ldd	r25, Y+3	; 0x03
    2c06:	fc 01       	movw	r30, r24
    2c08:	91 a1       	ldd	r25, Z+33	; 0x21
    2c0a:	88 85       	ldd	r24, Y+8	; 0x08
    2c0c:	98 17       	cp	r25, r24
    2c0e:	18 f4       	brcc	.+6      	; 0x2c16 <vTaskPriorityDisinheritAfterTimeout+0x44>
    2c10:	88 85       	ldd	r24, Y+8	; 0x08
    2c12:	89 83       	std	Y+1, r24	; 0x01
    2c14:	05 c0       	rjmp	.+10     	; 0x2c20 <vTaskPriorityDisinheritAfterTimeout+0x4e>
    2c16:	8a 81       	ldd	r24, Y+2	; 0x02
    2c18:	9b 81       	ldd	r25, Y+3	; 0x03
    2c1a:	fc 01       	movw	r30, r24
    2c1c:	81 a1       	ldd	r24, Z+33	; 0x21
    2c1e:	89 83       	std	Y+1, r24	; 0x01
    2c20:	8a 81       	ldd	r24, Y+2	; 0x02
    2c22:	9b 81       	ldd	r25, Y+3	; 0x03
    2c24:	fc 01       	movw	r30, r24
    2c26:	96 89       	ldd	r25, Z+22	; 0x16
    2c28:	89 81       	ldd	r24, Y+1	; 0x01
    2c2a:	98 17       	cp	r25, r24
    2c2c:	09 f4       	brne	.+2      	; 0x2c30 <vTaskPriorityDisinheritAfterTimeout+0x5e>
    2c2e:	67 c0       	rjmp	.+206    	; 0x2cfe <vTaskPriorityDisinheritAfterTimeout+0x12c>
    2c30:	8a 81       	ldd	r24, Y+2	; 0x02
    2c32:	9b 81       	ldd	r25, Y+3	; 0x03
    2c34:	fc 01       	movw	r30, r24
    2c36:	92 a1       	ldd	r25, Z+34	; 0x22
    2c38:	8c 81       	ldd	r24, Y+4	; 0x04
    2c3a:	98 17       	cp	r25, r24
    2c3c:	09 f0       	breq	.+2      	; 0x2c40 <vTaskPriorityDisinheritAfterTimeout+0x6e>
    2c3e:	5f c0       	rjmp	.+190    	; 0x2cfe <vTaskPriorityDisinheritAfterTimeout+0x12c>
    2c40:	8a 81       	ldd	r24, Y+2	; 0x02
    2c42:	9b 81       	ldd	r25, Y+3	; 0x03
    2c44:	fc 01       	movw	r30, r24
    2c46:	86 89       	ldd	r24, Z+22	; 0x16
    2c48:	8d 83       	std	Y+5, r24	; 0x05
    2c4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c4c:	9b 81       	ldd	r25, Y+3	; 0x03
    2c4e:	29 81       	ldd	r18, Y+1	; 0x01
    2c50:	fc 01       	movw	r30, r24
    2c52:	26 8b       	std	Z+22, r18	; 0x16
    2c54:	8a 81       	ldd	r24, Y+2	; 0x02
    2c56:	9b 81       	ldd	r25, Y+3	; 0x03
    2c58:	fc 01       	movw	r30, r24
    2c5a:	84 85       	ldd	r24, Z+12	; 0x0c
    2c5c:	95 85       	ldd	r25, Z+13	; 0x0d
    2c5e:	99 23       	and	r25, r25
    2c60:	64 f0       	brlt	.+24     	; 0x2c7a <vTaskPriorityDisinheritAfterTimeout+0xa8>
    2c62:	89 81       	ldd	r24, Y+1	; 0x01
    2c64:	88 2f       	mov	r24, r24
    2c66:	90 e0       	ldi	r25, 0x00	; 0
    2c68:	26 e0       	ldi	r18, 0x06	; 6
    2c6a:	30 e0       	ldi	r19, 0x00	; 0
    2c6c:	28 1b       	sub	r18, r24
    2c6e:	39 0b       	sbc	r19, r25
    2c70:	8a 81       	ldd	r24, Y+2	; 0x02
    2c72:	9b 81       	ldd	r25, Y+3	; 0x03
    2c74:	fc 01       	movw	r30, r24
    2c76:	35 87       	std	Z+13, r19	; 0x0d
    2c78:	24 87       	std	Z+12, r18	; 0x0c
    2c7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c7c:	9b 81       	ldd	r25, Y+3	; 0x03
    2c7e:	fc 01       	movw	r30, r24
    2c80:	42 85       	ldd	r20, Z+10	; 0x0a
    2c82:	53 85       	ldd	r21, Z+11	; 0x0b
    2c84:	8d 81       	ldd	r24, Y+5	; 0x05
    2c86:	28 2f       	mov	r18, r24
    2c88:	30 e0       	ldi	r19, 0x00	; 0
    2c8a:	c9 01       	movw	r24, r18
    2c8c:	88 0f       	add	r24, r24
    2c8e:	99 1f       	adc	r25, r25
    2c90:	88 0f       	add	r24, r24
    2c92:	99 1f       	adc	r25, r25
    2c94:	88 0f       	add	r24, r24
    2c96:	99 1f       	adc	r25, r25
    2c98:	82 0f       	add	r24, r18
    2c9a:	93 1f       	adc	r25, r19
    2c9c:	8f 5c       	subi	r24, 0xCF	; 207
    2c9e:	98 4f       	sbci	r25, 0xF8	; 248
    2ca0:	48 17       	cp	r20, r24
    2ca2:	59 07       	cpc	r21, r25
    2ca4:	61 f5       	brne	.+88     	; 0x2cfe <vTaskPriorityDisinheritAfterTimeout+0x12c>
    2ca6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ca8:	9b 81       	ldd	r25, Y+3	; 0x03
    2caa:	02 96       	adiw	r24, 0x02	; 2
    2cac:	0e 94 c0 05 	call	0xb80	; 0xb80 <uxListRemove>
    2cb0:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb2:	9b 81       	ldd	r25, Y+3	; 0x03
    2cb4:	fc 01       	movw	r30, r24
    2cb6:	96 89       	ldd	r25, Z+22	; 0x16
    2cb8:	80 91 9c 07 	lds	r24, 0x079C	; 0x80079c <uxTopReadyPriority>
    2cbc:	89 17       	cp	r24, r25
    2cbe:	30 f4       	brcc	.+12     	; 0x2ccc <vTaskPriorityDisinheritAfterTimeout+0xfa>
    2cc0:	8a 81       	ldd	r24, Y+2	; 0x02
    2cc2:	9b 81       	ldd	r25, Y+3	; 0x03
    2cc4:	fc 01       	movw	r30, r24
    2cc6:	86 89       	ldd	r24, Z+22	; 0x16
    2cc8:	80 93 9c 07 	sts	0x079C, r24	; 0x80079c <uxTopReadyPriority>
    2ccc:	8a 81       	ldd	r24, Y+2	; 0x02
    2cce:	9b 81       	ldd	r25, Y+3	; 0x03
    2cd0:	ac 01       	movw	r20, r24
    2cd2:	4e 5f       	subi	r20, 0xFE	; 254
    2cd4:	5f 4f       	sbci	r21, 0xFF	; 255
    2cd6:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd8:	9b 81       	ldd	r25, Y+3	; 0x03
    2cda:	fc 01       	movw	r30, r24
    2cdc:	86 89       	ldd	r24, Z+22	; 0x16
    2cde:	28 2f       	mov	r18, r24
    2ce0:	30 e0       	ldi	r19, 0x00	; 0
    2ce2:	c9 01       	movw	r24, r18
    2ce4:	88 0f       	add	r24, r24
    2ce6:	99 1f       	adc	r25, r25
    2ce8:	88 0f       	add	r24, r24
    2cea:	99 1f       	adc	r25, r25
    2cec:	88 0f       	add	r24, r24
    2cee:	99 1f       	adc	r25, r25
    2cf0:	82 0f       	add	r24, r18
    2cf2:	93 1f       	adc	r25, r19
    2cf4:	8f 5c       	subi	r24, 0xCF	; 207
    2cf6:	98 4f       	sbci	r25, 0xF8	; 248
    2cf8:	ba 01       	movw	r22, r20
    2cfa:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <vListInsertEnd>
    2cfe:	00 00       	nop
    2d00:	28 96       	adiw	r28, 0x08	; 8
    2d02:	0f b6       	in	r0, 0x3f	; 63
    2d04:	f8 94       	cli
    2d06:	de bf       	out	0x3e, r29	; 62
    2d08:	0f be       	out	0x3f, r0	; 63
    2d0a:	cd bf       	out	0x3d, r28	; 61
    2d0c:	df 91       	pop	r29
    2d0e:	cf 91       	pop	r28
    2d10:	08 95       	ret

00002d12 <pvTaskIncrementMutexHeldCount>:
    2d12:	cf 93       	push	r28
    2d14:	df 93       	push	r29
    2d16:	cd b7       	in	r28, 0x3d	; 61
    2d18:	de b7       	in	r29, 0x3e	; 62
    2d1a:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <pxCurrentTCB>
    2d1e:	90 91 30 07 	lds	r25, 0x0730	; 0x800730 <pxCurrentTCB+0x1>
    2d22:	89 2b       	or	r24, r25
    2d24:	49 f0       	breq	.+18     	; 0x2d38 <pvTaskIncrementMutexHeldCount+0x26>
    2d26:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <pxCurrentTCB>
    2d2a:	90 91 30 07 	lds	r25, 0x0730	; 0x800730 <pxCurrentTCB+0x1>
    2d2e:	fc 01       	movw	r30, r24
    2d30:	22 a1       	ldd	r18, Z+34	; 0x22
    2d32:	2f 5f       	subi	r18, 0xFF	; 255
    2d34:	fc 01       	movw	r30, r24
    2d36:	22 a3       	std	Z+34, r18	; 0x22
    2d38:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <pxCurrentTCB>
    2d3c:	90 91 30 07 	lds	r25, 0x0730	; 0x800730 <pxCurrentTCB+0x1>
    2d40:	df 91       	pop	r29
    2d42:	cf 91       	pop	r28
    2d44:	08 95       	ret

00002d46 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    2d46:	cf 93       	push	r28
    2d48:	df 93       	push	r29
    2d4a:	cd b7       	in	r28, 0x3d	; 61
    2d4c:	de b7       	in	r29, 0x3e	; 62
    2d4e:	27 97       	sbiw	r28, 0x07	; 7
    2d50:	0f b6       	in	r0, 0x3f	; 63
    2d52:	f8 94       	cli
    2d54:	de bf       	out	0x3e, r29	; 62
    2d56:	0f be       	out	0x3f, r0	; 63
    2d58:	cd bf       	out	0x3d, r28	; 61
    2d5a:	9e 83       	std	Y+6, r25	; 0x06
    2d5c:	8d 83       	std	Y+5, r24	; 0x05
    2d5e:	6f 83       	std	Y+7, r22	; 0x07
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    2d60:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <xTickCount>
    2d64:	90 91 9b 07 	lds	r25, 0x079B	; 0x80079b <xTickCount+0x1>
    2d68:	9a 83       	std	Y+2, r25	; 0x02
    2d6a:	89 83       	std	Y+1, r24	; 0x01
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    2d6c:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <pxCurrentTCB>
    2d70:	90 91 30 07 	lds	r25, 0x0730	; 0x800730 <pxCurrentTCB+0x1>
    2d74:	02 96       	adiw	r24, 0x02	; 2
    2d76:	0e 94 c0 05 	call	0xb80	; 0xb80 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    2d7a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d7c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d7e:	01 96       	adiw	r24, 0x01	; 1
    2d80:	71 f4       	brne	.+28     	; 0x2d9e <prvAddCurrentTaskToDelayedList+0x58>
    2d82:	8f 81       	ldd	r24, Y+7	; 0x07
    2d84:	88 23       	and	r24, r24
    2d86:	59 f0       	breq	.+22     	; 0x2d9e <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    2d88:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <pxCurrentTCB>
    2d8c:	90 91 30 07 	lds	r25, 0x0730	; 0x800730 <pxCurrentTCB+0x1>
    2d90:	02 96       	adiw	r24, 0x02	; 2
    2d92:	bc 01       	movw	r22, r24
    2d94:	80 e9       	ldi	r24, 0x90	; 144
    2d96:	97 e0       	ldi	r25, 0x07	; 7
    2d98:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    2d9c:	44 c0       	rjmp	.+136    	; 0x2e26 <prvAddCurrentTaskToDelayedList+0xe0>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    2d9e:	29 81       	ldd	r18, Y+1	; 0x01
    2da0:	3a 81       	ldd	r19, Y+2	; 0x02
    2da2:	8d 81       	ldd	r24, Y+5	; 0x05
    2da4:	9e 81       	ldd	r25, Y+6	; 0x06
    2da6:	82 0f       	add	r24, r18
    2da8:	93 1f       	adc	r25, r19
    2daa:	9c 83       	std	Y+4, r25	; 0x04
    2dac:	8b 83       	std	Y+3, r24	; 0x03

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    2dae:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <pxCurrentTCB>
    2db2:	90 91 30 07 	lds	r25, 0x0730	; 0x800730 <pxCurrentTCB+0x1>
    2db6:	2b 81       	ldd	r18, Y+3	; 0x03
    2db8:	3c 81       	ldd	r19, Y+4	; 0x04
    2dba:	fc 01       	movw	r30, r24
    2dbc:	33 83       	std	Z+3, r19	; 0x03
    2dbe:	22 83       	std	Z+2, r18	; 0x02

			if( xTimeToWake < xConstTickCount )
    2dc0:	2b 81       	ldd	r18, Y+3	; 0x03
    2dc2:	3c 81       	ldd	r19, Y+4	; 0x04
    2dc4:	89 81       	ldd	r24, Y+1	; 0x01
    2dc6:	9a 81       	ldd	r25, Y+2	; 0x02
    2dc8:	28 17       	cp	r18, r24
    2dca:	39 07       	cpc	r19, r25
    2dcc:	78 f4       	brcc	.+30     	; 0x2dec <prvAddCurrentTaskToDelayedList+0xa6>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    2dce:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <pxCurrentTCB>
    2dd2:	90 91 30 07 	lds	r25, 0x0730	; 0x800730 <pxCurrentTCB+0x1>
    2dd6:	9c 01       	movw	r18, r24
    2dd8:	2e 5f       	subi	r18, 0xFE	; 254
    2dda:	3f 4f       	sbci	r19, 0xFF	; 255
    2ddc:	80 91 7b 07 	lds	r24, 0x077B	; 0x80077b <pxOverflowDelayedTaskList>
    2de0:	90 91 7c 07 	lds	r25, 0x077C	; 0x80077c <pxOverflowDelayedTaskList+0x1>
    2de4:	b9 01       	movw	r22, r18
    2de6:	0e 94 48 05 	call	0xa90	; 0xa90 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    2dea:	1d c0       	rjmp	.+58     	; 0x2e26 <prvAddCurrentTaskToDelayedList+0xe0>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    2dec:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <pxCurrentTCB>
    2df0:	90 91 30 07 	lds	r25, 0x0730	; 0x800730 <pxCurrentTCB+0x1>
    2df4:	9c 01       	movw	r18, r24
    2df6:	2e 5f       	subi	r18, 0xFE	; 254
    2df8:	3f 4f       	sbci	r19, 0xFF	; 255
    2dfa:	80 91 79 07 	lds	r24, 0x0779	; 0x800779 <pxDelayedTaskList>
    2dfe:	90 91 7a 07 	lds	r25, 0x077A	; 0x80077a <pxDelayedTaskList+0x1>
    2e02:	b9 01       	movw	r22, r18
    2e04:	0e 94 48 05 	call	0xa90	; 0xa90 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
    2e08:	80 91 a2 07 	lds	r24, 0x07A2	; 0x8007a2 <xNextTaskUnblockTime>
    2e0c:	90 91 a3 07 	lds	r25, 0x07A3	; 0x8007a3 <xNextTaskUnblockTime+0x1>
    2e10:	2b 81       	ldd	r18, Y+3	; 0x03
    2e12:	3c 81       	ldd	r19, Y+4	; 0x04
    2e14:	28 17       	cp	r18, r24
    2e16:	39 07       	cpc	r19, r25
    2e18:	30 f4       	brcc	.+12     	; 0x2e26 <prvAddCurrentTaskToDelayedList+0xe0>
				{
					xNextTaskUnblockTime = xTimeToWake;
    2e1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e1c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e1e:	90 93 a3 07 	sts	0x07A3, r25	; 0x8007a3 <xNextTaskUnblockTime+0x1>
    2e22:	80 93 a2 07 	sts	0x07A2, r24	; 0x8007a2 <xNextTaskUnblockTime>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    2e26:	00 00       	nop
    2e28:	27 96       	adiw	r28, 0x07	; 7
    2e2a:	0f b6       	in	r0, 0x3f	; 63
    2e2c:	f8 94       	cli
    2e2e:	de bf       	out	0x3e, r29	; 62
    2e30:	0f be       	out	0x3f, r0	; 63
    2e32:	cd bf       	out	0x3d, r28	; 61
    2e34:	df 91       	pop	r29
    2e36:	cf 91       	pop	r28
    2e38:	08 95       	ret

00002e3a <Gpio_PortDirection>:
		case MYPORTD :
		result = PIN_D;
		break;
	}
	return result;
}
    2e3a:	cf 93       	push	r28
    2e3c:	df 93       	push	r29
    2e3e:	00 d0       	rcall	.+0      	; 0x2e40 <Gpio_PortDirection+0x6>
    2e40:	cd b7       	in	r28, 0x3d	; 61
    2e42:	de b7       	in	r29, 0x3e	; 62
    2e44:	89 83       	std	Y+1, r24	; 0x01
    2e46:	6a 83       	std	Y+2, r22	; 0x02
    2e48:	89 81       	ldd	r24, Y+1	; 0x01
    2e4a:	88 2f       	mov	r24, r24
    2e4c:	90 e0       	ldi	r25, 0x00	; 0
    2e4e:	81 30       	cpi	r24, 0x01	; 1
    2e50:	91 05       	cpc	r25, r1
    2e52:	91 f0       	breq	.+36     	; 0x2e78 <Gpio_PortDirection+0x3e>
    2e54:	82 30       	cpi	r24, 0x02	; 2
    2e56:	91 05       	cpc	r25, r1
    2e58:	1c f4       	brge	.+6      	; 0x2e60 <Gpio_PortDirection+0x26>
    2e5a:	89 2b       	or	r24, r25
    2e5c:	39 f0       	breq	.+14     	; 0x2e6c <Gpio_PortDirection+0x32>
    2e5e:	1e c0       	rjmp	.+60     	; 0x2e9c <Gpio_PortDirection+0x62>
    2e60:	82 30       	cpi	r24, 0x02	; 2
    2e62:	91 05       	cpc	r25, r1
    2e64:	79 f0       	breq	.+30     	; 0x2e84 <Gpio_PortDirection+0x4a>
    2e66:	03 97       	sbiw	r24, 0x03	; 3
    2e68:	99 f0       	breq	.+38     	; 0x2e90 <Gpio_PortDirection+0x56>
    2e6a:	18 c0       	rjmp	.+48     	; 0x2e9c <Gpio_PortDirection+0x62>
    2e6c:	8a e3       	ldi	r24, 0x3A	; 58
    2e6e:	90 e0       	ldi	r25, 0x00	; 0
    2e70:	2a 81       	ldd	r18, Y+2	; 0x02
    2e72:	fc 01       	movw	r30, r24
    2e74:	20 83       	st	Z, r18
    2e76:	12 c0       	rjmp	.+36     	; 0x2e9c <Gpio_PortDirection+0x62>
    2e78:	87 e3       	ldi	r24, 0x37	; 55
    2e7a:	90 e0       	ldi	r25, 0x00	; 0
    2e7c:	2a 81       	ldd	r18, Y+2	; 0x02
    2e7e:	fc 01       	movw	r30, r24
    2e80:	20 83       	st	Z, r18
    2e82:	0c c0       	rjmp	.+24     	; 0x2e9c <Gpio_PortDirection+0x62>
    2e84:	84 e3       	ldi	r24, 0x34	; 52
    2e86:	90 e0       	ldi	r25, 0x00	; 0
    2e88:	2a 81       	ldd	r18, Y+2	; 0x02
    2e8a:	fc 01       	movw	r30, r24
    2e8c:	20 83       	st	Z, r18
    2e8e:	06 c0       	rjmp	.+12     	; 0x2e9c <Gpio_PortDirection+0x62>
    2e90:	81 e3       	ldi	r24, 0x31	; 49
    2e92:	90 e0       	ldi	r25, 0x00	; 0
    2e94:	2a 81       	ldd	r18, Y+2	; 0x02
    2e96:	fc 01       	movw	r30, r24
    2e98:	20 83       	st	Z, r18
    2e9a:	00 00       	nop
    2e9c:	00 00       	nop
    2e9e:	0f 90       	pop	r0
    2ea0:	0f 90       	pop	r0
    2ea2:	df 91       	pop	r29
    2ea4:	cf 91       	pop	r28
    2ea6:	08 95       	ret

00002ea8 <Gpio_PinDirection>:
 * @param pins : the pin Number {BIT0,BIT1,BIT2,BIT3,BIT4,BIT5,BIT6,BIT7}
 * @param direction : The Direction of the PIN >> {SET_IN , SET_OUT}
 * Return : void
 */
void Gpio_PinDirection(uint8 port, uint8 pins, uint8 direction)
{
    2ea8:	cf 93       	push	r28
    2eaa:	df 93       	push	r29
    2eac:	00 d0       	rcall	.+0      	; 0x2eae <Gpio_PinDirection+0x6>
    2eae:	1f 92       	push	r1
    2eb0:	cd b7       	in	r28, 0x3d	; 61
    2eb2:	de b7       	in	r29, 0x3e	; 62
    2eb4:	89 83       	std	Y+1, r24	; 0x01
    2eb6:	6a 83       	std	Y+2, r22	; 0x02
    2eb8:	4b 83       	std	Y+3, r20	; 0x03
	switch(port)
    2eba:	89 81       	ldd	r24, Y+1	; 0x01
    2ebc:	88 2f       	mov	r24, r24
    2ebe:	90 e0       	ldi	r25, 0x00	; 0
    2ec0:	81 30       	cpi	r24, 0x01	; 1
    2ec2:	91 05       	cpc	r25, r1
    2ec4:	81 f1       	breq	.+96     	; 0x2f26 <Gpio_PinDirection+0x7e>
    2ec6:	82 30       	cpi	r24, 0x02	; 2
    2ec8:	91 05       	cpc	r25, r1
    2eca:	1c f4       	brge	.+6      	; 0x2ed2 <Gpio_PinDirection+0x2a>
    2ecc:	89 2b       	or	r24, r25
    2ece:	49 f0       	breq	.+18     	; 0x2ee2 <Gpio_PinDirection+0x3a>
				break;
			}
		}
		break;
	}
}
    2ed0:	90 c0       	rjmp	.+288    	; 0x2ff2 <Gpio_PinDirection+0x14a>
 * @param direction : The Direction of the PIN >> {SET_IN , SET_OUT}
 * Return : void
 */
void Gpio_PinDirection(uint8 port, uint8 pins, uint8 direction)
{
	switch(port)
    2ed2:	82 30       	cpi	r24, 0x02	; 2
    2ed4:	91 05       	cpc	r25, r1
    2ed6:	09 f4       	brne	.+2      	; 0x2eda <Gpio_PinDirection+0x32>
    2ed8:	48 c0       	rjmp	.+144    	; 0x2f6a <Gpio_PinDirection+0xc2>
    2eda:	03 97       	sbiw	r24, 0x03	; 3
    2edc:	09 f4       	brne	.+2      	; 0x2ee0 <Gpio_PinDirection+0x38>
    2ede:	67 c0       	rjmp	.+206    	; 0x2fae <Gpio_PinDirection+0x106>
				break;
			}
		}
		break;
	}
}
    2ee0:	88 c0       	rjmp	.+272    	; 0x2ff2 <Gpio_PinDirection+0x14a>
{
	switch(port)
	{
		case MYPORTA :
		{
		switch(direction)
    2ee2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee4:	88 2f       	mov	r24, r24
    2ee6:	90 e0       	ldi	r25, 0x00	; 0
    2ee8:	00 97       	sbiw	r24, 0x00	; 0
    2eea:	21 f0       	breq	.+8      	; 0x2ef4 <Gpio_PinDirection+0x4c>
    2eec:	8f 3f       	cpi	r24, 0xFF	; 255
    2eee:	91 05       	cpc	r25, r1
    2ef0:	71 f0       	breq	.+28     	; 0x2f0e <Gpio_PinDirection+0x66>
		case SET_OUT : 
		DDR_A |= (pins);
		break;
		}
		}
		break;
    2ef2:	7f c0       	rjmp	.+254    	; 0x2ff2 <Gpio_PinDirection+0x14a>
		case MYPORTA :
		{
		switch(direction)
		{
		case SET_IN : 
		DDR_A &= ~(pins);
    2ef4:	8a e3       	ldi	r24, 0x3A	; 58
    2ef6:	90 e0       	ldi	r25, 0x00	; 0
    2ef8:	2a e3       	ldi	r18, 0x3A	; 58
    2efa:	30 e0       	ldi	r19, 0x00	; 0
    2efc:	f9 01       	movw	r30, r18
    2efe:	20 81       	ld	r18, Z
    2f00:	32 2f       	mov	r19, r18
    2f02:	2a 81       	ldd	r18, Y+2	; 0x02
    2f04:	20 95       	com	r18
    2f06:	23 23       	and	r18, r19
    2f08:	fc 01       	movw	r30, r24
    2f0a:	20 83       	st	Z, r18
		break;
    2f0c:	0b c0       	rjmp	.+22     	; 0x2f24 <Gpio_PinDirection+0x7c>
		case SET_OUT : 
		DDR_A |= (pins);
    2f0e:	8a e3       	ldi	r24, 0x3A	; 58
    2f10:	90 e0       	ldi	r25, 0x00	; 0
    2f12:	2a e3       	ldi	r18, 0x3A	; 58
    2f14:	30 e0       	ldi	r19, 0x00	; 0
    2f16:	f9 01       	movw	r30, r18
    2f18:	30 81       	ld	r19, Z
    2f1a:	2a 81       	ldd	r18, Y+2	; 0x02
    2f1c:	23 2b       	or	r18, r19
    2f1e:	fc 01       	movw	r30, r24
    2f20:	20 83       	st	Z, r18
		break;
    2f22:	00 00       	nop
		}
		}
		break;
    2f24:	66 c0       	rjmp	.+204    	; 0x2ff2 <Gpio_PinDirection+0x14a>
		
		case MYPORTB :
		{
		switch(direction)
    2f26:	8b 81       	ldd	r24, Y+3	; 0x03
    2f28:	88 2f       	mov	r24, r24
    2f2a:	90 e0       	ldi	r25, 0x00	; 0
    2f2c:	00 97       	sbiw	r24, 0x00	; 0
    2f2e:	21 f0       	breq	.+8      	; 0x2f38 <Gpio_PinDirection+0x90>
    2f30:	8f 3f       	cpi	r24, 0xFF	; 255
    2f32:	91 05       	cpc	r25, r1
    2f34:	71 f0       	breq	.+28     	; 0x2f52 <Gpio_PinDirection+0xaa>
		case SET_OUT :
			DDR_B |= (pins);
			break;
		}
		}
		break;
    2f36:	5d c0       	rjmp	.+186    	; 0x2ff2 <Gpio_PinDirection+0x14a>
		case MYPORTB :
		{
		switch(direction)
		{
		case SET_IN :
			DDR_B &= ~(pins);
    2f38:	87 e3       	ldi	r24, 0x37	; 55
    2f3a:	90 e0       	ldi	r25, 0x00	; 0
    2f3c:	27 e3       	ldi	r18, 0x37	; 55
    2f3e:	30 e0       	ldi	r19, 0x00	; 0
    2f40:	f9 01       	movw	r30, r18
    2f42:	20 81       	ld	r18, Z
    2f44:	32 2f       	mov	r19, r18
    2f46:	2a 81       	ldd	r18, Y+2	; 0x02
    2f48:	20 95       	com	r18
    2f4a:	23 23       	and	r18, r19
    2f4c:	fc 01       	movw	r30, r24
    2f4e:	20 83       	st	Z, r18
			break;
    2f50:	0b c0       	rjmp	.+22     	; 0x2f68 <Gpio_PinDirection+0xc0>
		case SET_OUT :
			DDR_B |= (pins);
    2f52:	87 e3       	ldi	r24, 0x37	; 55
    2f54:	90 e0       	ldi	r25, 0x00	; 0
    2f56:	27 e3       	ldi	r18, 0x37	; 55
    2f58:	30 e0       	ldi	r19, 0x00	; 0
    2f5a:	f9 01       	movw	r30, r18
    2f5c:	30 81       	ld	r19, Z
    2f5e:	2a 81       	ldd	r18, Y+2	; 0x02
    2f60:	23 2b       	or	r18, r19
    2f62:	fc 01       	movw	r30, r24
    2f64:	20 83       	st	Z, r18
			break;
    2f66:	00 00       	nop
		}
		}
		break;
    2f68:	44 c0       	rjmp	.+136    	; 0x2ff2 <Gpio_PinDirection+0x14a>
		case MYPORTC :
		{
			switch(direction)
    2f6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f6c:	88 2f       	mov	r24, r24
    2f6e:	90 e0       	ldi	r25, 0x00	; 0
    2f70:	00 97       	sbiw	r24, 0x00	; 0
    2f72:	21 f0       	breq	.+8      	; 0x2f7c <Gpio_PinDirection+0xd4>
    2f74:	8f 3f       	cpi	r24, 0xFF	; 255
    2f76:	91 05       	cpc	r25, r1
    2f78:	71 f0       	breq	.+28     	; 0x2f96 <Gpio_PinDirection+0xee>
				case SET_OUT :
				DDR_C |= (pins);
				break;
			}
		}
		break;
    2f7a:	3b c0       	rjmp	.+118    	; 0x2ff2 <Gpio_PinDirection+0x14a>
		case MYPORTC :
		{
			switch(direction)
			{
				case SET_IN :
				DDR_C &= ~(pins);
    2f7c:	84 e3       	ldi	r24, 0x34	; 52
    2f7e:	90 e0       	ldi	r25, 0x00	; 0
    2f80:	24 e3       	ldi	r18, 0x34	; 52
    2f82:	30 e0       	ldi	r19, 0x00	; 0
    2f84:	f9 01       	movw	r30, r18
    2f86:	20 81       	ld	r18, Z
    2f88:	32 2f       	mov	r19, r18
    2f8a:	2a 81       	ldd	r18, Y+2	; 0x02
    2f8c:	20 95       	com	r18
    2f8e:	23 23       	and	r18, r19
    2f90:	fc 01       	movw	r30, r24
    2f92:	20 83       	st	Z, r18
				break;
    2f94:	0b c0       	rjmp	.+22     	; 0x2fac <Gpio_PinDirection+0x104>
				case SET_OUT :
				DDR_C |= (pins);
    2f96:	84 e3       	ldi	r24, 0x34	; 52
    2f98:	90 e0       	ldi	r25, 0x00	; 0
    2f9a:	24 e3       	ldi	r18, 0x34	; 52
    2f9c:	30 e0       	ldi	r19, 0x00	; 0
    2f9e:	f9 01       	movw	r30, r18
    2fa0:	30 81       	ld	r19, Z
    2fa2:	2a 81       	ldd	r18, Y+2	; 0x02
    2fa4:	23 2b       	or	r18, r19
    2fa6:	fc 01       	movw	r30, r24
    2fa8:	20 83       	st	Z, r18
				break;
    2faa:	00 00       	nop
			}
		}
		break;
    2fac:	22 c0       	rjmp	.+68     	; 0x2ff2 <Gpio_PinDirection+0x14a>
		case MYPORTD :
		{
			switch(direction)
    2fae:	8b 81       	ldd	r24, Y+3	; 0x03
    2fb0:	88 2f       	mov	r24, r24
    2fb2:	90 e0       	ldi	r25, 0x00	; 0
    2fb4:	00 97       	sbiw	r24, 0x00	; 0
    2fb6:	21 f0       	breq	.+8      	; 0x2fc0 <Gpio_PinDirection+0x118>
    2fb8:	8f 3f       	cpi	r24, 0xFF	; 255
    2fba:	91 05       	cpc	r25, r1
    2fbc:	71 f0       	breq	.+28     	; 0x2fda <Gpio_PinDirection+0x132>
				case SET_OUT :
				DDR_D |= (pins);
				break;
			}
		}
		break;
    2fbe:	18 c0       	rjmp	.+48     	; 0x2ff0 <Gpio_PinDirection+0x148>
		case MYPORTD :
		{
			switch(direction)
			{
				case SET_IN :
				DDR_D &= ~(pins);
    2fc0:	81 e3       	ldi	r24, 0x31	; 49
    2fc2:	90 e0       	ldi	r25, 0x00	; 0
    2fc4:	21 e3       	ldi	r18, 0x31	; 49
    2fc6:	30 e0       	ldi	r19, 0x00	; 0
    2fc8:	f9 01       	movw	r30, r18
    2fca:	20 81       	ld	r18, Z
    2fcc:	32 2f       	mov	r19, r18
    2fce:	2a 81       	ldd	r18, Y+2	; 0x02
    2fd0:	20 95       	com	r18
    2fd2:	23 23       	and	r18, r19
    2fd4:	fc 01       	movw	r30, r24
    2fd6:	20 83       	st	Z, r18
				break;
    2fd8:	0b c0       	rjmp	.+22     	; 0x2ff0 <Gpio_PinDirection+0x148>
				case SET_OUT :
				DDR_D |= (pins);
    2fda:	81 e3       	ldi	r24, 0x31	; 49
    2fdc:	90 e0       	ldi	r25, 0x00	; 0
    2fde:	21 e3       	ldi	r18, 0x31	; 49
    2fe0:	30 e0       	ldi	r19, 0x00	; 0
    2fe2:	f9 01       	movw	r30, r18
    2fe4:	30 81       	ld	r19, Z
    2fe6:	2a 81       	ldd	r18, Y+2	; 0x02
    2fe8:	23 2b       	or	r18, r19
    2fea:	fc 01       	movw	r30, r24
    2fec:	20 83       	st	Z, r18
				break;
    2fee:	00 00       	nop
			}
		}
		break;
    2ff0:	00 00       	nop
	}
}
    2ff2:	00 00       	nop
    2ff4:	0f 90       	pop	r0
    2ff6:	0f 90       	pop	r0
    2ff8:	0f 90       	pop	r0
    2ffa:	df 91       	pop	r29
    2ffc:	cf 91       	pop	r28
    2ffe:	08 95       	ret

00003000 <Gpio_PinWrite>:
 * @param pins : the pin Number {BIT0,BIT1,BIT2,BIT3,BIT4,BIT5,BIT6,BIT7}
 * @param value : The value of the PIN >> {HIGH , LOW}
 * Return : void
 */
void Gpio_PinWrite(uint8 port, uint8 pins, uint8 value)
{
    3000:	cf 93       	push	r28
    3002:	df 93       	push	r29
    3004:	00 d0       	rcall	.+0      	; 0x3006 <Gpio_PinWrite+0x6>
    3006:	1f 92       	push	r1
    3008:	cd b7       	in	r28, 0x3d	; 61
    300a:	de b7       	in	r29, 0x3e	; 62
    300c:	89 83       	std	Y+1, r24	; 0x01
    300e:	6a 83       	std	Y+2, r22	; 0x02
    3010:	4b 83       	std	Y+3, r20	; 0x03
	switch(value)
    3012:	8b 81       	ldd	r24, Y+3	; 0x03
    3014:	88 2f       	mov	r24, r24
    3016:	90 e0       	ldi	r25, 0x00	; 0
    3018:	00 97       	sbiw	r24, 0x00	; 0
    301a:	09 f4       	brne	.+2      	; 0x301e <Gpio_PinWrite+0x1e>
    301c:	42 c0       	rjmp	.+132    	; 0x30a2 <Gpio_PinWrite+0xa2>
    301e:	01 97       	sbiw	r24, 0x01	; 1
    3020:	09 f0       	breq	.+2      	; 0x3024 <Gpio_PinWrite+0x24>
			PORT_D &= ~(pins);
			break;
		}
		break;	
	}
}
    3022:	86 c0       	rjmp	.+268    	; 0x3130 <Gpio_PinWrite+0x130>
void Gpio_PinWrite(uint8 port, uint8 pins, uint8 value)
{
	switch(value)
	{
		case HIGH:
			switch(port)
    3024:	89 81       	ldd	r24, Y+1	; 0x01
    3026:	88 2f       	mov	r24, r24
    3028:	90 e0       	ldi	r25, 0x00	; 0
    302a:	81 30       	cpi	r24, 0x01	; 1
    302c:	91 05       	cpc	r25, r1
    302e:	b9 f0       	breq	.+46     	; 0x305e <Gpio_PinWrite+0x5e>
    3030:	82 30       	cpi	r24, 0x02	; 2
    3032:	91 05       	cpc	r25, r1
    3034:	1c f4       	brge	.+6      	; 0x303c <Gpio_PinWrite+0x3c>
    3036:	89 2b       	or	r24, r25
    3038:	39 f0       	breq	.+14     	; 0x3048 <Gpio_PinWrite+0x48>
						break;
					case MYPORTD :
						PORT_D |= (pins);
						break;
		}
		break;
    303a:	7a c0       	rjmp	.+244    	; 0x3130 <Gpio_PinWrite+0x130>
void Gpio_PinWrite(uint8 port, uint8 pins, uint8 value)
{
	switch(value)
	{
		case HIGH:
			switch(port)
    303c:	82 30       	cpi	r24, 0x02	; 2
    303e:	91 05       	cpc	r25, r1
    3040:	c9 f0       	breq	.+50     	; 0x3074 <Gpio_PinWrite+0x74>
    3042:	03 97       	sbiw	r24, 0x03	; 3
    3044:	11 f1       	breq	.+68     	; 0x308a <Gpio_PinWrite+0x8a>
						break;
					case MYPORTD :
						PORT_D |= (pins);
						break;
		}
		break;
    3046:	74 c0       	rjmp	.+232    	; 0x3130 <Gpio_PinWrite+0x130>
	{
		case HIGH:
			switch(port)
			{
					case MYPORTA :
						PORT_A |= (pins);
    3048:	8b e3       	ldi	r24, 0x3B	; 59
    304a:	90 e0       	ldi	r25, 0x00	; 0
    304c:	2b e3       	ldi	r18, 0x3B	; 59
    304e:	30 e0       	ldi	r19, 0x00	; 0
    3050:	f9 01       	movw	r30, r18
    3052:	30 81       	ld	r19, Z
    3054:	2a 81       	ldd	r18, Y+2	; 0x02
    3056:	23 2b       	or	r18, r19
    3058:	fc 01       	movw	r30, r24
    305a:	20 83       	st	Z, r18
						break;
    305c:	21 c0       	rjmp	.+66     	; 0x30a0 <Gpio_PinWrite+0xa0>
					case MYPORTB :
						PORT_B |= (pins);
    305e:	88 e3       	ldi	r24, 0x38	; 56
    3060:	90 e0       	ldi	r25, 0x00	; 0
    3062:	28 e3       	ldi	r18, 0x38	; 56
    3064:	30 e0       	ldi	r19, 0x00	; 0
    3066:	f9 01       	movw	r30, r18
    3068:	30 81       	ld	r19, Z
    306a:	2a 81       	ldd	r18, Y+2	; 0x02
    306c:	23 2b       	or	r18, r19
    306e:	fc 01       	movw	r30, r24
    3070:	20 83       	st	Z, r18
						break;
    3072:	16 c0       	rjmp	.+44     	; 0x30a0 <Gpio_PinWrite+0xa0>
					case MYPORTC :
						PORT_C |= (pins);
    3074:	85 e3       	ldi	r24, 0x35	; 53
    3076:	90 e0       	ldi	r25, 0x00	; 0
    3078:	25 e3       	ldi	r18, 0x35	; 53
    307a:	30 e0       	ldi	r19, 0x00	; 0
    307c:	f9 01       	movw	r30, r18
    307e:	30 81       	ld	r19, Z
    3080:	2a 81       	ldd	r18, Y+2	; 0x02
    3082:	23 2b       	or	r18, r19
    3084:	fc 01       	movw	r30, r24
    3086:	20 83       	st	Z, r18
						break;
    3088:	0b c0       	rjmp	.+22     	; 0x30a0 <Gpio_PinWrite+0xa0>
					case MYPORTD :
						PORT_D |= (pins);
    308a:	82 e3       	ldi	r24, 0x32	; 50
    308c:	90 e0       	ldi	r25, 0x00	; 0
    308e:	22 e3       	ldi	r18, 0x32	; 50
    3090:	30 e0       	ldi	r19, 0x00	; 0
    3092:	f9 01       	movw	r30, r18
    3094:	30 81       	ld	r19, Z
    3096:	2a 81       	ldd	r18, Y+2	; 0x02
    3098:	23 2b       	or	r18, r19
    309a:	fc 01       	movw	r30, r24
    309c:	20 83       	st	Z, r18
						break;
    309e:	00 00       	nop
		}
		break;
    30a0:	47 c0       	rjmp	.+142    	; 0x3130 <Gpio_PinWrite+0x130>
		
		case LOW : 
		switch(port)
    30a2:	89 81       	ldd	r24, Y+1	; 0x01
    30a4:	88 2f       	mov	r24, r24
    30a6:	90 e0       	ldi	r25, 0x00	; 0
    30a8:	81 30       	cpi	r24, 0x01	; 1
    30aa:	91 05       	cpc	r25, r1
    30ac:	c9 f0       	breq	.+50     	; 0x30e0 <Gpio_PinWrite+0xe0>
    30ae:	82 30       	cpi	r24, 0x02	; 2
    30b0:	91 05       	cpc	r25, r1
    30b2:	1c f4       	brge	.+6      	; 0x30ba <Gpio_PinWrite+0xba>
    30b4:	89 2b       	or	r24, r25
    30b6:	39 f0       	breq	.+14     	; 0x30c6 <Gpio_PinWrite+0xc6>
			break;
			case MYPORTD :
			PORT_D &= ~(pins);
			break;
		}
		break;	
    30b8:	3a c0       	rjmp	.+116    	; 0x312e <Gpio_PinWrite+0x12e>
						break;
		}
		break;
		
		case LOW : 
		switch(port)
    30ba:	82 30       	cpi	r24, 0x02	; 2
    30bc:	91 05       	cpc	r25, r1
    30be:	e9 f0       	breq	.+58     	; 0x30fa <Gpio_PinWrite+0xfa>
    30c0:	03 97       	sbiw	r24, 0x03	; 3
    30c2:	41 f1       	breq	.+80     	; 0x3114 <Gpio_PinWrite+0x114>
			break;
			case MYPORTD :
			PORT_D &= ~(pins);
			break;
		}
		break;	
    30c4:	34 c0       	rjmp	.+104    	; 0x312e <Gpio_PinWrite+0x12e>
		
		case LOW : 
		switch(port)
		{
			case MYPORTA :
			PORT_A &= ~(pins);
    30c6:	8b e3       	ldi	r24, 0x3B	; 59
    30c8:	90 e0       	ldi	r25, 0x00	; 0
    30ca:	2b e3       	ldi	r18, 0x3B	; 59
    30cc:	30 e0       	ldi	r19, 0x00	; 0
    30ce:	f9 01       	movw	r30, r18
    30d0:	20 81       	ld	r18, Z
    30d2:	32 2f       	mov	r19, r18
    30d4:	2a 81       	ldd	r18, Y+2	; 0x02
    30d6:	20 95       	com	r18
    30d8:	23 23       	and	r18, r19
    30da:	fc 01       	movw	r30, r24
    30dc:	20 83       	st	Z, r18
			break;
    30de:	27 c0       	rjmp	.+78     	; 0x312e <Gpio_PinWrite+0x12e>
			case MYPORTB :
			PORT_B &= ~(pins);
    30e0:	88 e3       	ldi	r24, 0x38	; 56
    30e2:	90 e0       	ldi	r25, 0x00	; 0
    30e4:	28 e3       	ldi	r18, 0x38	; 56
    30e6:	30 e0       	ldi	r19, 0x00	; 0
    30e8:	f9 01       	movw	r30, r18
    30ea:	20 81       	ld	r18, Z
    30ec:	32 2f       	mov	r19, r18
    30ee:	2a 81       	ldd	r18, Y+2	; 0x02
    30f0:	20 95       	com	r18
    30f2:	23 23       	and	r18, r19
    30f4:	fc 01       	movw	r30, r24
    30f6:	20 83       	st	Z, r18
			break;
    30f8:	1a c0       	rjmp	.+52     	; 0x312e <Gpio_PinWrite+0x12e>
			case MYPORTC :
			PORT_C &= ~(pins);
    30fa:	85 e3       	ldi	r24, 0x35	; 53
    30fc:	90 e0       	ldi	r25, 0x00	; 0
    30fe:	25 e3       	ldi	r18, 0x35	; 53
    3100:	30 e0       	ldi	r19, 0x00	; 0
    3102:	f9 01       	movw	r30, r18
    3104:	20 81       	ld	r18, Z
    3106:	32 2f       	mov	r19, r18
    3108:	2a 81       	ldd	r18, Y+2	; 0x02
    310a:	20 95       	com	r18
    310c:	23 23       	and	r18, r19
    310e:	fc 01       	movw	r30, r24
    3110:	20 83       	st	Z, r18
			break;
    3112:	0d c0       	rjmp	.+26     	; 0x312e <Gpio_PinWrite+0x12e>
			case MYPORTD :
			PORT_D &= ~(pins);
    3114:	82 e3       	ldi	r24, 0x32	; 50
    3116:	90 e0       	ldi	r25, 0x00	; 0
    3118:	22 e3       	ldi	r18, 0x32	; 50
    311a:	30 e0       	ldi	r19, 0x00	; 0
    311c:	f9 01       	movw	r30, r18
    311e:	20 81       	ld	r18, Z
    3120:	32 2f       	mov	r19, r18
    3122:	2a 81       	ldd	r18, Y+2	; 0x02
    3124:	20 95       	com	r18
    3126:	23 23       	and	r18, r19
    3128:	fc 01       	movw	r30, r24
    312a:	20 83       	st	Z, r18
			break;
    312c:	00 00       	nop
		}
		break;	
    312e:	00 00       	nop
	}
}
    3130:	00 00       	nop
    3132:	0f 90       	pop	r0
    3134:	0f 90       	pop	r0
    3136:	0f 90       	pop	r0
    3138:	df 91       	pop	r29
    313a:	cf 91       	pop	r28
    313c:	08 95       	ret

0000313e <memcpy>:
    313e:	fb 01       	movw	r30, r22
    3140:	dc 01       	movw	r26, r24
    3142:	02 c0       	rjmp	.+4      	; 0x3148 <memcpy+0xa>
    3144:	01 90       	ld	r0, Z+
    3146:	0d 92       	st	X+, r0
    3148:	41 50       	subi	r20, 0x01	; 1
    314a:	50 40       	sbci	r21, 0x00	; 0
    314c:	d8 f7       	brcc	.-10     	; 0x3144 <memcpy+0x6>
    314e:	08 95       	ret

00003150 <_exit>:
    3150:	f8 94       	cli

00003152 <__stop_program>:
    3152:	ff cf       	rjmp	.-2      	; 0x3152 <__stop_program>
